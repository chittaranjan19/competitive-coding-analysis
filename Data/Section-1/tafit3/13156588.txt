import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int m = a[1];
        a = intarr();
        List<List<Integer>> edge = new ArrayList<>();
        for(int i=0;i<n;i++) {
            edge.add(new ArrayList<Integer>(1));
        }
        for(int i=0;i<n-1;i++) {
            int[] q = intarr();
            q[0]--;
            q[1]--;
            edge.get(q[0]).add(q[1]);
            edge.get(q[1]).add(q[0]);
        }
        boolean[] v = new boolean[n+10];
        int[] cat = new int[n+10];
        int[] prev = new int[n+10];
        v[0] = true;
        prev[0] = -1;
        Queue<Integer> queue = new ArrayDeque<>();
        queue.add(0);
        int res = 0;
        while (!queue.isEmpty()) {
            Integer y = queue.poll();
            if(prev[y] != -1) {
                cat[y] = cat[prev[y]];
            }
            if(a[y] == 1) {
                cat[y]++;
            } else {
                cat[y] = 0;
            }
            if(cat[y] <= m) {
                boolean leaf = true;
                for(Integer z: edge.get(y)) {
                    if(!v[z]) {
                        v[z] = true;
                        queue.add(z);
                        leaf = false;
                        prev[z] = y;
                    }
                }
                if(leaf) {
                    res++;
                }
            }
        }
        out(res);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
