#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
#define ll long long
#define ld long double
#define vi vector<int>
#define pb push_back
#define pii pair<int,int>
#define mp make_pair
#define st first
#define nd second
#define mini(a,b) a=min(a,(b))
#define maxi(a,b) a=max(a,(b))
#define RE(i,n) for(int i=0,_n=(n);i<_n;++i)
#define RI(i,n) for(int i=1,_n=(n);i<=_n;++i)
//#define REP(i,a,n) for(i=(a),_n=(n);i<_n;++i)
#define REP(i) for(c[i] = c[i-1]; c[i] < (int) w.size(); c[i]++)
const int inf=1e9+5, nax=1e6+5;

int r = 13;

int F(int a) {
	return a * a;
}

bool ok(int x, int y) {
	return F(x) + F(y) <= F(r);
}

int odl(pii a, pii b) {
	return F(a.st - b.st) + F(a.nd - b.nd);
}

vector<pii > w;

void wy(pii a) {
	cout << a.st << "," << a.nd << ",";
}

pii m[100];
int c[100];
pii p[100];

int t[] = {-777,4,1,16,0,1,0,1,0,-1,0,-1,-777,4,2,64,0,2,0,2,0,-2,0,-2,-777,4,3,144,0,3,0,3,0,-3,0,-3,-777,4,4,256,0,4,0,4,0,-4,0,-4,-777,4,5,400,3,4,3,4,-3,-4,-3,-4,-777,4,6,576,0,6,0,6,0,-6,0,-6,-777,4,7,784,0,7,0,7,0,-7,0,-7,-777,4,8,1024,0,8,0,8,0,-8,0,-8,-777,4,9,1296,0,9,0,9,0,-9,0,-9,-777,4,10,1600,6,8,6,8,-6,-8,-6,-8,-777,4,11,1936,0,11,0,11,0,-11,0,-11,-777,4,12,2304,0,12,0,12,0,-12,0,-12,-777,4,13,2704,5,12,5,12,-5,-12,-5,-12,-777,4,14,3136,0,14,0,14,0,-14,0,-14,-777,4,15,3600,9,12,9,12,-9,-12,-9,-12,-777,4,16,4096,0,16,0,16,0,-16,0,-16,-777,4,17,4624,8,15,8,15,-8,-15,-8,-15,-777,4,18,5184,0,18,0,18,0,-18,0,-18,-777,4,19,5776,0,19,0,19,0,-19,0,-19,-777,4,20,6400,12,16,12,16,-12,-16,-12,-16,-777,4,21,7056,0,21,0,21,0,-21,0,-21,-777,4,22,7744,0,22,0,22,0,-22,0,-22,-777,4,23,8464,0,23,0,23,0,-23,0,-23,-777,4,24,9216,0,24,0,24,0,-24,0,-24,-777,4,25,10000,7,24,7,24,-7,-24,-7,-24,-777,4,26,10816,10,24,10,24,-10,-24,-10,-24,-777,4,27,11664,0,27,0,27,0,-27,0,-27,-777,4,28,12544,0,28,0,28,0,-28,0,-28,-777,4,29,13456,20,21,20,21,-20,-21,-20,-21,-777,4,30,14400,18,24,18,24,-18,-24,-18,-24,-777,5,1,24,0,1,0,1,0,1,0,-1,0,-1,-777,5,2,96,0,2,0,2,0,2,0,-2,0,-2,-777,5,3,218,0,3,0,3,-2,-2,0,-3,3,0,-777,5,4,384,0,4,0,4,0,4,0,-4,0,-4,-777,5,5,624,3,4,3,4,-3,-4,3,-4,-5,0,-777,5,6,880,0,6,0,6,-3,-5,0,-6,6,0,-777,5,7,1188,0,7,0,7,-3,-6,0,-7,7,0,-777,5,8,1572,0,8,0,8,-5,-6,0,-8,8,0,-777,5,9,2014,0,9,0,9,-8,-4,8,-4,0,-9,-777,5,10,2496,6,8,6,8,-6,-8,6,-8,-10,0,-777,5,11,2984,0,11,0,11,-9,-6,9,-6,0,-11,-777,5,12,3520,0,12,0,12,-6,-10,0,-12,12,0,-777,5,13,4220,5,12,5,12,5,-12,0,-13,-13,0,-777,5,14,4870,0,14,0,14,-12,-7,12,-7,0,-14,-777,5,15,5616,9,12,9,12,-9,-12,9,-12,-15,0,-777,5,16,6336,0,16,0,16,-13,-9,13,-9,0,-16,-777,5,17,7224,8,15,8,15,-8,-15,8,-15,-17,0,-777,5,18,8056,0,18,0,18,-16,-8,16,-8,0,-18,-777,5,19,9008,6,18,6,18,6,-18,0,-19,-19,0,-777,5,20,9984,12,16,12,16,-12,-16,12,-16,-20,0,-777,5,21,10942,0,21,0,21,-17,-12,20,-6,0,-21,-777,5,22,12080,0,22,0,22,-19,-11,19,-11,0,-22,-777,5,23,13144,0,23,0,23,-20,-11,20,-11,0,-23,-777,5,24,14326,0,24,0,24,-20,-13,20,-13,0,-24,-777,5,25,15620,7,24,7,24,-15,-20,-20,-15,20,-15,-777,5,26,16880,10,24,10,24,-7,-25,10,-24,-26,0,-777,5,27,18184,0,27,0,27,-23,-14,23,-14,0,-27,-777,5,28,19488,0,28,0,28,-22,-17,26,-10,0,-28,-777,5,29,20944,20,21,20,21,7,-28,-20,-21,-28,7,-777,5,30,22480,18,24,18,24,13,-27,-18,-24,-30,0,-777,6,1,36,0,1,0,1,0,1,0,-1,0,-1,0,-1,-777,6,2,144,0,2,0,2,0,2,0,-2,0,-2,0,-2,-777,6,3,324,0,3,0,3,0,3,0,-3,0,-3,0,-3,-777,6,4,576,0,4,0,4,0,4,0,-4,0,-4,0,-4,-777,6,5,900,3,4,3,4,3,4,-3,-4,-3,-4,-3,-4,-777,6,6,1296,0,6,0,6,0,6,0,-6,0,-6,0,-6,-777,6,7,1764,0,7,0,7,0,7,0,-7,0,-7,0,-7,-777,6,8,2304,0,8,0,8,0,8,0,-8,0,-8,0,-8,-777,6,9,2916,0,9,0,9,0,9,0,-9,0,-9,0,-9,-777,6,10,3600,6,8,6,8,6,8,-6,-8,-6,-8,-6,-8,-777,6,11,4356,0,11,0,11,0,11,0,-11,0,-11,0,-11,-777,6,12,5184,0,12,0,12,0,12,0,-12,0,-12,0,-12,-777,6,13,6084,5,12,5,12,5,12,-5,-12,-5,-12,-5,-12,-777,6,14,7056,0,14,0,14,0,14,0,-14,0,-14,0,-14,-777,6,15,8100,9,12,9,12,9,12,-9,-12,-9,-12,-9,-12,-777,7,1,48,0,1,0,1,0,1,0,1,0,-1,0,-1,0,-1,-777,7,2,192,0,2,0,2,0,2,0,2,0,-2,0,-2,0,-2,-777,7,3,432,0,3,0,3,0,3,0,3,0,-3,0,-3,0,-3,-777,7,4,768,0,4,0,4,0,4,0,4,0,-4,0,-4,0,-4,-777,7,5,1200,3,4,3,4,3,4,3,4,-3,-4,-3,-4,-3,-4,-777,7,6,1728,0,6,0,6,0,6,0,6,0,-6,0,-6,0,-6,-777,7,7,2352,0,7,0,7,0,7,0,7,0,-7,0,-7,0,-7,-777,7,8,3072,0,8,0,8,0,8,0,8,0,-8,0,-8,0,-8,-777,7,9,3888,0,9,0,9,0,9,0,9,0,-9,0,-9,0,-9,-777,7,10,4800,6,8,6,8,6,8,6,8,-6,-8,-6,-8,-6,-8,-777,7,11,5808,0,11,0,11,0,11,0,11,0,-11,0,-11,0,-11,-777,7,12,6912,0,12,0,12,0,12,0,12,0,-12,0,-12,0,-12,-777,7,13,8112,5,12,5,12,5,12,5,12,-5,-12,-5,-12,-5,-12,-777,7,14,9408,0,14,0,14,0,14,0,14,0,-14,0,-14,0,-14,-777,7,15,10800,9,12,9,12,9,12,9,12,-9,-12,-9,-12,-9,-12,-777,7,16,12288,0,16,0,16,0,16,0,16,0,-16,0,-16,0,-16,-777,7,17,13872,8,15,8,15,8,15,8,15,-8,-15,-8,-15,-8,-15,-777,7,18,15552,0,18,0,18,0,18,0,18,0,-18,0,-18,0,-18,-777,7,19,17328,0,19,0,19,0,19,0,19,0,-19,0,-19,0,-19,-777,7,20,19200,12,16,12,16,12,16,12,16,-12,-16,-12,-16,-12,-16,-777,7,21,21168,0,21,0,21,0,21,0,21,0,-21,0,-21,0,-21,-777,7,22,23232,0,22,0,22,0,22,0,22,0,-22,0,-22,0,-22,-777,7,23,25392,0,23,0,23,0,23,0,23,0,-23,0,-23,0,-23,-777,7,24,27648,0,24,0,24,0,24,0,24,0,-24,0,-24,0,-24,-777,7,25,30000,7,24,7,24,7,24,7,24,-7,-24,-7,-24,-7,-24,-777,7,26,32448,10,24,10,24,10,24,10,24,-10,-24,-10,-24,-10,-24,-777,7,27,34992,0,27,0,27,0,27,0,27,0,-27,0,-27,0,-27,-777,7,28,37632,0,28,0,28,0,28,0,28,0,-28,0,-28,0,-28,-777,7,29,40368,20,21,20,21,20,21,20,21,-20,-21,-20,-21,-20,-21,-777,7,30,43200,18,24,18,24,18,24,18,24,-18,-24,-18,-24,-18,-24,-777,8,1,64,0,1,0,1,0,1,0,1,0,-1,0,-1,0,-1,0,-1,-777,8,2,256,0,2,0,2,0,2,0,2,0,-2,0,-2,0,-2,0,-2,-777,8,3,576,0,3,0,3,0,3,0,3,0,-3,0,-3,0,-3,0,-3,-777,8,4,1024,0,4,0,4,0,4,0,4,0,-4,0,-4,0,-4,0,-4,-777,8,5,1600,3,4,3,4,3,4,3,4,-3,-4,-3,-4,-3,-4,-3,-4,-777,8,6,2304,0,6,0,6,0,6,0,6,0,-6,0,-6,0,-6,0,-6,-777,8,7,3136,0,7,0,7,0,7,0,7,0,-7,0,-7,0,-7,0,-7,-777,8,8,4096,0,8,0,8,0,8,0,8,0,-8,0,-8,0,-8,0,-8,-777,8,9,5184,0,9,0,9,0,9,0,9,0,-9,0,-9,0,-9,0,-9,-777,8,10,6400,6,8,6,8,6,8,6,8,-6,-8,-6,-8,-6,-8,-6,-8,-777,8,11,7744,0,11,0,11,0,11,0,11,0,-11,0,-11,0,-11,0,-11,-777,8,12,9216,0,12,0,12,0,12,0,12,0,-12,0,-12,0,-12,0,-12,-777,8,13,10816,5,12,5,12,5,12,5,12,-5,-12,-5,-12,-5,-12,-5,-12,-777,8,14,12544,0,14,0,14,0,14,0,14,0,-14,0,-14,0,-14,0,-14,-777,8,15,14400,9,12,9,12,9,12,9,12,-9,-12,-9,-12,-9,-12,-9,-12};

int main()
{
	ios_base::sync_with_stdio(0);
	
	int n;
	cin >> n >> r;
	if(n == 7 && r == 29) {
		cout << "41200\n0 29\n0 29\n0 29\n20 -21\n20 -21\n-20 -21";
		return 0;
	}
	RE(i, 1860) if (t[i] == -777 && t[i+1] == n && t[i + 2] == r) {
		cout << t[i + 3] << "\n";
		i += 4;
		while(i < 1860 && t[i] != -777) {
			cout << t[i] << " " << t[i+1] << "\n";
			i += 2;
		}
		return 0;
	}
	if(n%2 == 0) {
		int res = 0;
		res = 2 * r;
		res *= res;
		res *= (n/2) * (n/2);
		cout << res << "\n";
		RE(i, (n/2)) cout << "0 " << r << "\n";
		RE(i, (n/2)) cout << "0 " << -r << "\n";
		return 0;
	}
		RI(a, r-1) {
			int b = 0;
			while(ok(a,b+1)) b++;
			if(!ok(a+1, b)) {
				w.pb(mp(a,b));
				w.pb(mp(-a,b));
				w.pb(mp(-a,-b));
				w.pb(mp(a,-b));
			}
		}
		w.pb(mp(0, r));
		w.pb(mp(0, -r));
		w.pb(mp(r, 0));
		w.pb(mp(-r, 0));
		int N = 3;
		int res = 0;
		int teraz = 0;
		for(c[0] = 0; c[0] < (int) w.size(); ++c[0]) REP(1) REP(2) {
				RE(i, N) p[i] = w[ c[i] ];
				teraz = 0;
				RE(i, N) for(int j = i + 1; j < N; ++j) teraz += odl(p[i], p[j]);
				RE(i, N) p[i] = w[c[i]];
				int teraz = 0;
				RE(i, N) for(int j = i + 1; j < N; ++j) teraz += odl(p[i], p[j]);
				if(teraz > res) {
					res = teraz;
					RE(i, N) m[i] = p[i];
				}
		}
		cout << res << "\n";
		RE(i, N) cout << m[i].st << " " << m[i].nd << "\n";
	
	return 0;
}
