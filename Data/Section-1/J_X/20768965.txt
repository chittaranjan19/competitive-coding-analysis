#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int maxn = 1000 + 5;
const int maxm = 10000 + 5;
const int INF = 1 << 30;

struct edge
{
    int to, next, w;
} G[maxm << 1];
int head[maxn], tot, pre[maxn], d[maxn];

void init()
{
    memset(head, -1, sizeof(head));
    tot = 0;
}

void addedge(int u, int v, int w)
{
    G[tot].to = v;
    G[tot].w = w;
    G[tot].next = head[u];
    head[u] = tot++;
}

int dijkstra(int s, int t)
{
    priority_queue<pii, vector<pii>, greater<pii> > pque;
    fill(d, d + maxn, INF);
    d[s] = 0;
    pque.push(pii(d[s], s));
    pre[s] = -1;
    while(!pque.empty())
    {
        pii p = pque.top();
        pque.pop();
        int u = p.second;
        if(p.first != d[u]) continue;
        for(int i = head[u]; ~i; i = G[i].next)
        {
            edge e = G[i];
            int tmp = d[u] + max(e.w, 1);
            if(d[e.to] > tmp)
            {
                d[e.to] = tmp;
                pre[e.to] = i;
                pque.push(pii(d[e.to], e.to));
            }
        }
    }
    return d[t];
}

int main()
{
    int n, m, L, s, t;
    scanf("%d%d%d%d%d", &n, &m, &L, &s, &t);
    init();
    for(int i = 0; i < m; ++i)
    {
        int u, v, w;
        scanf("%d%d%d", &u, &v, &w);
        addedge(u, v, w);
        addedge(v, u, w);
    }
    int tmp = dijkstra(s, t);
    while(tmp < L)
    {
        bool flag = false;
        for(int i = pre[t]; ~i; i = pre[G[i ^ 1].to])
        {
            if(G[i].w == 0)
            {
                G[i].w = G[i ^ 1].w = L - tmp + 1;
                flag = true;
                break;
            }
        }
        if(!flag) break;
        tmp = dijkstra(s, t);
    }
    if(tmp != L) puts("NO");
    else
    {
        puts("YES");
        for(int i = pre[t]; ~i; i = pre[G[i ^ 1].to])
        {
            if(G[i].w == 0)
            {
                G[i].w = G[i ^ 1].w = 1;
            }
        }
        for(int i = 0; i < tot; i += 2)
        {
            if(G[i].w == 0) G[i].w = 1e9;
            printf("%d %d %d\n", G[i ^ 1].to, G[i].to, G[i].w);
        }
    }
    return 0;
}
