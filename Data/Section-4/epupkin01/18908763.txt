#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

const int S = 19;
int n, m, k, a[S], r[S*S][3];

int main()
{
    cin >> n >> m >> k;
    for (int i = 1; i <= n; ++i)
        cin >> a[i];
    for (int i = 1; i <= k; ++i)
        scanf("%d%d%d", r[i], r[i] + 1, r[i] + 2);
    
    Pair ar[S];
    for (int i = 1; i <= n; ++i)
        ar[i].first = a[i], ar[i].second = i;
    sort(ar + 1, ar + n+1);
    
    ll s = 0;
    for (int i = n; i > n - m; --i)
        s += ar[i].first;
    
    List l;
    list<lIter> p;
    for (int i = 1; i <= k; ++i)
    {
        ll t = a[r[i][0]] + a[r[i][1]] + r[i][2];
        bool u[S] = {0};
        u[r[i][0]] = u[r[i][1]] = true;
        int ct = 2;
        
        p.clear();
        for (lIter x = l.begin(); x != l.end() && ct + 2 <= m; ++x)
        {
            if (r[i][0] == r[*x][0] || r[i][0] == r[*x][1] ||
                r[i][1] == r[*x][0] || r[i][1] == r[*x][1])
            {
                p.push_back(x);
                continue;
            }
            
            u[r[*x][0]] = u[r[*x][1]] = true;
            ct += 2;
            t += r[*x][2] + a[r[*x][0]] + a[r[*x][1]];
        }
        
        for (int j = n; ct < m && j > 0; --j)
            if (!u[ar[j].second])
                t += ar[j].first, ++ct;
        
        if (t > s)
        {
            s = t;
            for (auto x : p)
                l.erase(x);
            l.push_back(i);
        }
    }
    
    cout << s << '\n';
    
    return 0;
}