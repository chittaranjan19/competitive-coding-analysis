import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemA {
    BufferedReader rd;
    long a,b;

    private ProblemA() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        long[] q = longarr();
        a = q[0];
        b = q[1];
        long n = q[2];
        for(long i=0;i<n;i++) {
            q = longarr();
            out(solve(q[0], q[1], q[2]));
        }
    }

    private int solve(long min, long t, long m) {
        int res;
        if(f(min) > t) {
            res = -1;
        } else {
            long max2 = min+1;
            boolean p2 = possible(min, max2, t, m);
            while(p2) {
                max2 *= 2;
                p2 = possible(min, max2, t, m);
            }
            long max1 = min;
            while(max2-max1 > 1) {
                long v = (max2+max1)/2;
                boolean p = possible(min, v, t, m);
                if(p) {
                    max1 = v;
                } else {
                    max2 = v-1;
                }
            }
            if(max2-max1 == 1) {
                if(possible(min, max2, t, m)) {
                    res = (int)max2;
                } else {
                    res = (int)max1;
                }
            } else {
                res = (int)max1;
            }
        }
        return res;
    }

    private boolean possible(long min, long max, long t, long m) {
        long x = (max-min+1)/m;
        long y = x/2;
        long rest = t;
        if(y > 0) {
            long z = max-y*(2*m);
            long d = f(z+2*m) - f(z);
            long a1 = f(z+1);
            long b1 = y*(2*a1 + (y-1)*d)/2;
            long a2 = f(z+2*m);
            long b2 = y*(2*a2 + (y-1)*d)/2;
            rest -= b1 + b2;
            if(z < min) {
                return rest >= 0;
            }
            max = z;
        }
        if(max - m < min) {
            return rest >= f(max);
        }
        rest -= f(max-2);
        max -= m;
        rest -= f(max);
        return rest >= 0;
    }

    private long f(long x) {
        return a+(x-1)*b;
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        int n = s.length();
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA();
    }
}
