#include <stdio.h>
#include <vector>
#include <string.h>
using namespace std;
typedef unsigned long long ull;

struct Pair {
	int to;
	int length;
	Pair(int to, int length) :to(to), length(length) {}
};
vector<Pair*> roads[5002];
int n, m;
int INF = 1000000001;
int T;
int memo[5002][5002];
int next1[5002][5002];

int dfs(int node, int nodes_count) {
    if (node == n ) {
        if (nodes_count == 1) {
            return 0;
        }
        return INF;
    }
    if (nodes_count == 0) {
        return INF;
    }
	if (memo[node][nodes_count] != -1) {
		return memo[node][nodes_count];
	}
	memo[node][nodes_count] = INF;
	for (unsigned int i = 0; i < roads[node].size(); i++) {
		Pair* current_road = roads[node][i];
		int new_time = current_road->length + dfs(current_road->to, nodes_count - 1);
		if (new_time <= T && new_time < memo[node][nodes_count]) {
            memo[node][nodes_count] = new_time;
            next1[node][nodes_count] = current_road->to;
		}
	}
	return memo[node][nodes_count];
}

void func() {
    for (int i = 1; i <=n; i++) {
        dfs(1, i);
    }
    int nodes_count = n;
    for (; nodes_count >= 1; nodes_count--) {
        if (memo[1][nodes_count] <= T) {
            printf("%d\n", nodes_count);
            break;
        }
    }
    for (int node = 1; node != n; node = next1[node][nodes_count], nodes_count--) {
        printf("%d ", node);
    }
    printf("%d", n);
}

int main() {
	scanf("%d %d %d", &n, &m, &T);
	memset(memo, -1, sizeof(memo));
	int from, to;
	int time;
	for (int i = 0; i < m; i++) {
		scanf("%d %d %d", &from, &to, &time);
		roads[from].push_back(new Pair(to, time));
	}
	func();
	return 0;
}
