#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits.h>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define pi acos(-1.0)
#define LL long long

using namespace std;

vector< vector<int> > graphs(3005);
vector<int> circle;

int main()
{
    int n,x,y;
    cin >> n;
    for(int i=0;i<n;i++)
    {
        scanf("%d %d",&x,&y);
        graphs[x].push_back(y);
        graphs[y].push_back(x);
    }
    for(int i=1;i<=n;i++)
    {
        bool found = false,visited[3005]={false};
        int currentparent[3005]={0};
        stack<int> dfs;
        bool begining=true;
        dfs.push(i);
        while(!dfs.empty())
        {
            int temp = dfs.top();
            dfs.pop();
            if(temp!=i)
                visited[temp]=true;
            if(temp == i && !begining)
            {
                found = true;
                break;
            }
            for(int j=0;j<graphs[temp].size();j++)
            {
                if(graphs[temp][j] == i && currentparent[temp] == i)
                    continue;
                if(!visited[graphs[temp][j]])
                {
                    dfs.push(graphs[temp][j]);
                    currentparent[graphs[temp][j]] = temp;
                }
            }
            begining=false;
        }
        if(found)
            circle.push_back(i);
    }
    //cout << circle.size() << endl;
    //sort(circle.begin(),circle.end());
    queue<int> bfs;
    bool visited[3005]={false};
    int shortestpaths[n];
    for(int i=0;i<circle.size();i++)
    {
        bfs.push(circle[i]);
        visited[circle[i]] = true;
        shortestpaths[circle[i]]=0;
    }
    while(!bfs.empty())
    {
        int temp=bfs.front();
        bfs.pop();
        for(int k=0;k<graphs[temp].size();k++)
        {
            if(!visited[graphs[temp][k]])
            {
                bfs.push(graphs[temp][k]);
                visited[graphs[temp][k]]=true;
                shortestpaths[graphs[temp][k]]=shortestpaths[temp]+1;
            }
        }
    }
    for(int i=1;i<=n;i++)
        cout << shortestpaths[i] << " ";
    return 0;
}