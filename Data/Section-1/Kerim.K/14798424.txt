#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define lg(x) ceil(log2(x))
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int arr[MAXN],lgN,P[MAXN][19],lvl[MAXN],far[MAXN][3],vis[MAXN],a,maxi=0;
vector<int>adj[MAXN];
void dfs(int nd,int pr){
	P[nd][0]=pr;
	lvl[nd]=lvl[pr]+1;
	tr(v,adj[nd]){
		if(*v==pr)
			continue;
		dfs(*v,nd);	
	}
}
void df(int nd){
//	cout<<nd<<endl;
	far[nd][0]=far[nd][1]=0;
	vis[nd]=1;
	tr(v,adj[nd]){
		if(vis[*v])
			continue;
		df(*v);	
		if(far[*v][0]+1>far[nd][0]){
			swap(far[nd][0],far[nd][1]);
			far[nd][0]=far[*v][0]+1;
		}
		else if(far[*v][0]+1>far[nd][1])
			far[nd][1]=far[*v][0]+1;	
	}
	umax(maxi,far[nd][0]+far[nd][1]);
}
void build(){
	for(int j=1;j<=lgN;j++)
		for(int i=1;i<MAXN;i++)
			if(P[i][j-1]!=-1)
				P[i][j]=P[P[i][j-1]][j-1];
}
int LCA(int x,int y){
	if(lvl[x]<lvl[y])
		swap(x,y);
	for(int i=lgN;i>=0;i--)	
		if(lvl[x]-(1<<i)>=lvl[y])
			x=P[x][i];
	if(x==y)
		return x;
	for(int i=lgN;i>=0;i--)
		if(P[x][i]!=-1 and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];
	return P[x][0];			
}
void fun(int x,int y,int z){
	int maxi=0;
	vis[x]=1;
	while(y!=x){
		vis[y]=1;
		y=P[y][0];
	}
	while(z!=x){
		vis[z]=1;
		z=P[z][0];
	}		
}
int main(){
	cin>>a;
	memset(P,-1,sizeof(P));
	lgN=log2(a)+((1<<(a-(a-1)))&1)+2;
	cout<<lgN<<endl;
	for(int i=0;i<a-1;i++){
		int u,v;
		cin>>u>>v;
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1,0);
	build();
	int mx=0;
	for(int i=1;i<=a;i++)
		for(int j=i+1;j<=a;j++){
			fill(vis,vis+(a+1),0);
			int k=LCA(i,j);
			maxi=0;
			fun(k,i,j);			
			for(int i=1;i<=a;i++)
				if(!vis[i])
					df(i);	
		//	cout<<i<<" "<<j<<endl;			
			umax(mx,((lvl[i]-lvl[k])+(lvl[j]-lvl[k]))*maxi);
		//	cout<<i<<" "<<j<<endl;
		}
	cout<<mx<<endl;		
	return 0;
}

