#include <iostream>
#include <cstdio>
#include <cstring>
#define ls rt << 1
#define rs rt << 1 | 1
#define lson ls, l, mid
#define rson rs, mid + 1, r

using namespace std;

typedef long long ll;

const int maxn = 200000 + 5;

int a, b, k, n, q;

struct segtree
{
	ll node[maxn << 2][2];

	void pushup(int rt)
	{
        for(int i = 0; i < 2; ++i) node[rt][i] = node[ls][i] + node[rs][i];
	}

	void build(int rt, int l, int r)
	{
	    node[rt][0] = node[rt][1] = 0;
		if(l == r)
		{
			return;
		}
		int mid = (l + r) >> 1;
		build(lson);
		build(rson);
	}

	void update(int rt, int l, int r, int x, int c)
	{
	    if(l == r)
        {
            node[rt][0] = min(node[rt][0] + c, 1LL * b);
            node[rt][1] = min(node[rt][1] + c, 1LL * a);
            return;
        }
        int mid = (l + r) >> 1;
        x <= mid ? update(lson, x, c) : update(rson, x, c);
        pushup(rt);
	}

	ll query(int rt, int l, int r, int x, int y, int k)
	{
	    if(x > y || y > n || x > n) return 0;
		if(x <= l && r <= y)
		{
            return node[rt][k];
		}
		int mid = (l + r) >> 1;
		ll ret = 0;
		if(x <= mid) ret += query(lson, x, y, k);
		if(mid < y) ret += query(rson, x, y, k);
		return ret;
	}
} tree;

int main()
{
    while(~scanf("%d%d%d%d%d", &n, &k, &a, &b, &q))
    {
        tree.build(1, 1, n);
        while(q--)
        {
            int op, x, y;
            scanf("%d%d", &op, &x);
            if(op == 1)
            {
                scanf("%d", &y);
                tree.update(1, 1, n, x, y);
            }
            else printf("%I64d\n", tree.query(1, 1, n, 1, x - 1, 0) + tree.query(1, 1, n, k + x, n, 1));
        }
    }
    return 0;
}
