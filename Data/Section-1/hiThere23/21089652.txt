#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 50005
#define maxC 1000000000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)
#define lc (id << 1)
#define rc (lc + 1)

using namespace std;
int n, y[mn], val = 0;
map<int, int> num;

struct interval
{
    pair< int , pair<int, int> > tree[mn << 2];

    void build(int l, int r, int id)
    {
        if (l == r)
        {
            tree[id] = mp(y[l], mp(1, l));
            return;
        }
        build(l, mid, lc);
        build(mid + 1, r, rc);
        if (tree[lc].F == tree[rc].F)
            tree[id] = mp(tree[lc].F, mp(tree[lc].S.F + tree[rc].S.F, tree[lc].S.S));
        else
            tree[id] = max(tree[lc], tree[rc]);
    }

    void update(int l, int r, int id, int x)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            num[tree[id].F] --;
            tree[id].F >>= 1;
            num[val = tree[id].F] ++;
            return;
        }
        update(l, mid, lc, x);
        update(mid + 1, r, rc, x);
        if (tree[lc].F == tree[rc].F)
            tree[id] = mp(tree[lc].F, mp(tree[lc].S.F + tree[rc].S.F, tree[lc].S.S));
        else
            tree[id] = max(tree[lc], tree[rc]);
    }
} t;

void setup()
{
    cin >> n;
    FOR(i, 1, n)
    {
        cin >> y[i];
        num[y[i]] = 1;
    }
    t.build(1, n, 1);
}

void xuly()
{
    while(t.tree[1].F > 1)
    {
        int u = t.tree[1].S.S;
        int dem = 1;
        t.update(1, n, 1, u);
        while(num[val] > 1)
        {
            t.update(1, n, 1, u);
            dem ++;
        }
        if (val)
            y[u] >>= dem;
        else
            break;
    }
    FOR(i, 1, n)
        cout << y[i] << ' ';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
