#include <iostream>
#include <stdlib.h>
#include <algorithm>
using namespace std;

const int MAXN = 2*1e7;
const int INF = 2*1e7;
int n, Q, l, r, a[MAXN], dd[MAXN], s[MAXN];
int Era[MAXN], nt[MAXN], c[MAXN], m = 0;

int main()
{
    cin >> n;
    for(int i = 1; i <= n; i++) cin >> a[i];
    cin >> Q;
    //memset(c, 1, sizeof(c));
    for(int i = 0; i <= INF - 1; i++) c[i] = 1;
    for(int i = 2; i <= 1000;i++) if (c[i]){
        nt[++m] = i;
        Era[i] = m;
        //cout<<i<<endl;
        long long j = 1LL * i * i;
        while (j <= INF - 1) {
           // cout<<j<<" "<<i<<endl;
            c[j] = 0;
            Era[j] = m;
            j += i;
        }
    }
    for(int i = 1; i <= n; i++) {
        int x = a[i];
        while (x > 1) {
            int j = Era[x];
            dd[nt[j]]++;
            while (x % nt[j] == 0) x /= nt[j];
        }
    }
    for(int i = 1; i <= INF - 1; i++) s[i] = s[i - 1] + dd[i];
	//cout<<nt[Era[12]]<<"wtf"<<endl;
    while (Q--) {
        cin >> l >> r;
        int cuoi = upper_bound(nt + 1, nt + m + 1, r) - nt - 1;
        int dau =  lower_bound(nt + 1, nt + m + 1, l) - nt;
        if (dau > cuoi) cout<<0<<endl;
        else
        //cout<<s[nt[dau] - 1]<<" "<<s[nt[cuoi]]<<endl;
        cout<<s[nt[cuoi]] - s[nt[dau] - 1]<<endl;
    }
    return 0;
}

