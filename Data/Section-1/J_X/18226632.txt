#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long ll;

const int maxn = 1000 + 5;
const int mod = 1e9 + 7;

ll r2[maxn][maxn], r3[maxn][maxn], c2[maxn][maxn], c3[maxn][maxn];
char s[maxn << 1][maxn << 1], s1[maxn << 1][maxn << 1];
int d[maxn][maxn][4], ans2, ans3;
long double l2, l3;

ll pow_mod(ll x, int n)
{
    ll ret = 1;
    while(n)
    {
        if(n & 1) ret = ret * x % mod;
        x = x * x % mod;
        n >>= 1;
    }
    return ret;
}

int cmp(int a1, int b1, int a2, int b2)
{
    return a1 * l2 + b1 * l3 > a2 * l2 + b2 * l3;
}

void solve(int n)
{
    for(int i = 1; i <= n; ++i)
    {
        d[0][i][0] = d[n + 1][i][2] = d[0][i][1] = d[n + 1][i][3] = 0;
        c2[0][i] = c3[0][i] = 0;
    }
    for(int i = 1; i <= n; ++i)
    {
        d[i][0][0] = d[i][0][1] = 0;
        r2[i][0] = r3[i][0] = 0;
        for(int j = 1; j <= n; ++j)
        {
            r2[i][j] = r2[i][j - 1];
            r3[i][j] = r3[i][j - 1];
            c2[i][j] = c2[i - 1][j];
            c3[i][j] = c3[i - 1][j];
            if(s[i][j] == '0')
            {
                d[i][j][0] = d[i][j][1] = 0;
            }
            else
            {
                d[i][j][0] = d[i - 1][j][0] + 1;
                d[i][j][1] = d[i][j - 1][1] + 1;
                if(s[i][j] == '2')
                {
                    ++r2[i][j];
                    ++c2[i][j];
                }
                else if(s[i][j] == '3')
                {
                    ++r3[i][j];
                    ++c3[i][j];
                }
            }
        }
    }
    for(int i = n; i; --i)
    {
        d[i][n + 1][2] = d[i][n + 1][3] = 0;
        for(int j = n; j; --j)
        {
            if(s[i][j] == '0') d[i][j][2] = d[i][j][3] = 0;
            else
            {
                d[i][j][2] = d[i + 1][j][2] + 1;
                d[i][j][3] = d[i][j + 1][3] + 1;
            }
            if(s[i][j] == '4') continue;
            int dd = d[i][j][0];
            for(int k = 1; k < 4; ++k) dd = min(dd, d[i][j][k]);
            if(dd)
            {
                int tmp2 = r2[i][j + dd - 1] - r2[i][j - dd] + c2[i + dd - 1][j] - c2[i - dd][j];
                if(s[i][j] == '2') --tmp2;
                int tmp3 = r3[i][j + dd - 1] - r3[i][j - dd] + c3[i + dd - 1][j] - c3[i - dd][j];
                if(s[i][j] == '3') --tmp3;
                if(cmp(tmp2, tmp3, ans2, ans3)) ans2 = tmp2, ans3 = tmp3;
            }
        }
    }
}

int main()
{
    l2 = log(2.0), l3 = log(3.0);
    ans2 = ans3 = 0;
    bool flag = false;
    int n;
    scanf("%d", &n);
    for(int i = 1; i <= n; ++i)
    {
        scanf("%s", s[i] + 1);
        for(int j = 1; j <= n; ++j) flag |= s[i][j] != '0';
    }
    if(flag)
    {
        solve(n);
        for(int i = 1; i <= n; ++i)
        {
            for(int j = 1; j <= n; ++j)
            {
                s1[i + j - 1][n + j - i] = s[i][j];
            }
        }
        memcpy(s, s1, sizeof(s1));
        for(int i = 1; i <= n; ++i)
        {
            for(int j = 1; j <= n - i; ++j)
            {
                s[i][j] = s[2 * n - i][j] = s[i][2 * n - j] = s[2 * n - i][2 * n - j] = '0';
            }
            for(int j = n - i + 2; j <= n + i - 2; j += 2)
            {
                s[i][j] = s[2 * n - i][j] = '4';
            }
        }
        solve(2 * n - 1);
        printf("%I64d\n", pow_mod(2, ans2) * pow_mod(3, ans3) % mod);
    }
    else puts("0");
    return 0;
}
