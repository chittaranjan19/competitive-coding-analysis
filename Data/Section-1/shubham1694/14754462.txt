#include <iostream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <functional>
#include <algorithm>
#include <climits>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <stack>
#include <queue>
#include <vector>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define ll long long
#define f first
#define s second

typedef pair<int, int> pii;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

vector<int> adj[maxn];
int col[maxn];

ll dp[maxn][2];

ll modpow(ll a, ll b)
{
	ll x=1, y=a;
	while(b){
		if(b%2)
			x=(x*y)%mod;
		y=(y*y)%mod;
		b/=2;
	}
	return x;
}

void solve(int cur, int reqb, int parent)
{
	if(dp[cur][reqb]!=-1)
		return;
	int i, u;
	ll ret, x, y;
	for(i=0; i<adj[cur].size(); i++){
		if(adj[cur][i]!=parent){
			solve(adj[cur][i], 0, cur);
			solve(adj[cur][i], 1, cur);
		}
	}
	if(reqb){
		if(col[cur]){
			x = 1;
			for(i=0; i<adj[cur].size(); i++){
				u = adj[cur][i];
				if(u!=parent)
					x = (x*dp[u][0])%mod;
			}	
			ret = x;
		}
		else{
			x = 1;
			ret = 0;
			for(i=0; i<adj[cur].size(); i++){
				u = adj[cur][i];
				if(u!=parent && dp[u][1]!=0){
					x = (x*dp[u][0])%mod;
				}
			}
			for(i=0; i<adj[cur].size(); i++){
				u = adj[cur][i];
				if(u!=parent){
					y = (x*modpow(dp[u][0], mod-2))%mod;
					y = (y*dp[u][1])%mod;
					ret = (ret+y)%mod;
				}
			}
		}
	}
	else{
		if(col[cur]){
			solve(cur, 1, parent);
			ret = dp[cur][1];
			//ret = 1;
		}
		else{
			solve(cur, 1, parent);
			y = dp[cur][1];
			x = 1;
			for(i=0; i<adj[cur].size(); i++){
				u = adj[cur][i];
				if(u!=parent && dp[u][1]!=0){
					x = (x*dp[u][0])%mod;
				}
			}
			ret = (x+y)%mod;
		}
	}
	dp[cur][reqb] = ret;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int t, i, j, n, m;
	sd(n);
	for(i=0; i<n-1; i++){

		sd(m);
		adj[i+1].pb(m);
		adj[m].pb(i+1);
	}
	for(i=0; i<n; i++)
		sd(col[i]);
	memset(dp, -1, sizeof(dp));
	solve(0, 1, -1);
	cout << dp[0][1] << "\n";
	//for(i=0; i<=9; i++)
	//	cout << i << " " << dp[i][0] << " " << dp[i][1] << "\n";
	return 0;
}
