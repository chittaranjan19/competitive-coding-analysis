#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string.h>
#include <queue>
using namespace std;
const long long M = 100000+10, N = 1e9+7;
int a[M], n, m, b[M];
struct node
{
	int value, num;
	
}f[M];

int cmp1(const void *a, const void *c)
{
	return ((node *)a)->value - ((node*)c)->value;
}

int Search(int num)
{
	int low = 0, high = n-1, mid;
	while(low <= high)
	{
		mid = (low+high)/2;
		if(f[mid].value == num)
		{
			return mid;
		}
		else if (num > f[mid].value)
		{
			low = mid+1;
		}
		else
		{
			high = mid-1;
		}
	}
	return -1;
}

int main()
{
#ifndef   ONLINE_JUDGE
	freopen("1.txt", "r", stdin);
#endif
	int i, j, t = 0;
	bool flag = false, flag1 = false;
	cin >> n >> m;
	for(i = 0; i < n; i++)
	{
		scanf("%d", &f[i].value);
		f[i].num = i+1;
	}
	for(i = 0; i < m; i++)
	{
		scanf("%d", &b[i]);
	}
	qsort(f, n, sizeof(node), cmp1);
	for(i = 0; i < m; i++)
	{
		t = Search(b[i]);
		if (t != -1)
		{
			if (f[t-1].value == b[i] || b[i] == f[t+1].value)
			{
				flag1 = true;
				break;
			}
			else
			{
				a[i] = f[t].num;
			}
		}
		else
		{
			flag = true;
			break;
		}
	}
	if (flag)
	{
		cout << "Impossible";
	}
	else if (flag1)
	{
		cout << "Ambiguity";
	}
	else
	{
		cout << "Possible\n"<<a[0];
		for(i = 1; i < m; i++)
		{
			printf(" %d", a[i]);
		}
	}
	return 0;
}
