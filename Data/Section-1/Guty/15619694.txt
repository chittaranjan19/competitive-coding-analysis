#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Flower
{
	tint x,y,d;
	Flower(tint xx, tint yy, tint ii)
	{
		x = xx;
		y = yy;
		d = ii;
	}
};

tint distSqrd (Flower p1, Flower p2)
{
	return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
}

bool operator < (Flower f1, Flower f2)
{
	return make_tuple(f1.d,f1.x,f1.y) < make_tuple(f2.d,f2.x,f2.y);
}

int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint n,x1,y1,x2,y2;
	while (cin >> n >> x1 >> y1 >> x2 >> y2)
	{
		vector<Flower> flower (n,Flower(0,0,0));
		forn(i,n)
		{
			tint xi,yi;
			cin >> xi >> yi;
			flower[i] = Flower(xi,yi,distSqrd(Flower(x1,y1,-1),Flower(xi,yi,i)));
		}
		sort(flower.begin(),flower.end());
		tint mini = 99999999999999999;
		forn(i,n)
		{
			tint r1 = flower[i].d;
			tint r2 = 0;
			forsn(j,i+1,n)
				r2 = max(r2,distSqrd(Flower(x2,y2,-2),flower[j]));
			mini = min(mini,r1+r2);		
		}
		cout << mini << endl;
	}
	return 0;
}



