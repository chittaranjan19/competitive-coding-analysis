import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemA {
    BufferedReader rd;

    ProblemA() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int m = a[1];
        List<List<Integer>> e = new ArrayList<>();
        for(int i=0;i<n;i++) {
            e.add(new ArrayList<>());
        }
        for(int i=0;i<m;i++) {
            a = intarr();
            a[0]--;
            a[1]--;
            e.get(a[0]).add(a[1]);
            e.get(a[1]).add(a[0]);
        }
        int[] c = new int[n];
        Queue<Integer> q = new ArrayDeque<>();
        boolean ok = true;
        outer: for(int i=0;i<n;i++) {
            if(c[i] == 0) {
                q.add(i);
                c[i] = 1;
                while (!q.isEmpty()) {
                    int v = q.poll();
                    int p = 3 - c[v];
                    for (Integer u : e.get(v)) {
                        if (c[u] == 0) {
                            c[u] = p;
                            q.add(u);
                        } else if (c[u] != p) {
                            ok = false;
                            break outer;
                        }
                    }
                }
            }
        }
        if(ok) {
            int[] b = new int[3];
            for(int x: c) {
                b[x]++;
            }
            StringBuilder buf = new StringBuilder();
            for(int i=1;i<=2;i++) {
                if(i > 1) {
                    buf.append('\n');
                }
                buf.append(b[i]).append('\n');
                boolean first = true;
                for (int j=0;j<n;j++) {
                    if (c[j] == i) {
                        if(first) {
                            first = false;
                        } else {
                            buf.append(' ');
                        }
                        buf.append(j+1);
                    }
                }
            }
            out(buf);
        } else {
            out(-1);
        }
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA();
    }
}
