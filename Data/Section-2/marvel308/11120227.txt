#include<stdio.h>
#include<vector>
#include<string>
#include<iostream>
#include<memory.h>
#include<algorithm>
using namespace std;
#define max(a,b) (a>b?a:b)
int dp[101][101][101][2];
int main()
{
    int n,m,i,j,k;
    vector<int> atk,def,cards;
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++)
    {
        int x;
        string option;
        cin>>option>>x;
        if(option=="ATK")
        {
            atk.push_back(x);
        }
        else
        {
            def.push_back(x);
        }
    }
    for(i=0;i<m;i++)
    {
        int x;
        cin>>x;
        cards.push_back(x);
    }
    sort(atk.begin(),atk.end());
    sort(def.begin(),def.end());
    sort(cards.begin(),cards.end());
    int I=cards.size(),J=atk.size(),K=def.size();
    memset(dp,-1,sizeof(dp));
    dp[0][0][0][0]=0;
    for(i=0;i<I;i++)
    {
        for(j=0;j<=J;j++)
        {
            for(k=0;k<=K;k++)
            {
                //printf("i=%d j=%d k=%d\n",i,j,k);
                if(dp[i][j][k][0]!=-1)
                {
                    //printf("i=%d j=%d k=%d dp=%d\n",i,j,k,dp[i][j][k][0]);
                    if(j!=J && cards[i]>=atk[j])
                    {
                        dp[i+1][j+1][k][0]=max(dp[i+1][j+1][k][0],dp[i][j][k][0]+cards[i]-atk[j]);
                    }
                    //printf("-\n");
                    if(k!=K && cards[i]>def[k])
                    {
                        dp[i+1][j][k+1][0]=max(dp[i+1][j][k+1][0],dp[i][j][k][0]);
                    }
                    //printf("--\n");
                    dp[i+1][j][k][0]=max(dp[i+1][j][k][0],dp[i][j][k][0]);
                    dp[i+1][j][k][1]=max(dp[i+1][j][k][1],dp[i][j][k][0]);
                    //printf("---\n");
                    if(j==J && k==K)
                    {
                        dp[i+1][j][k][0]=max(dp[i+1][j][k][0],dp[i][j][k][0]+cards[i]);
                    }
                    if(j!=J)
                    {
                        dp[i][j+1][k][1]=max(dp[i][j+1][k][1],dp[i][j][k][0]);
                    }
                    if(k!=K)
                    {
                        dp[i][j][k+1][1]=max(dp[i][j][k+1][1],dp[i][j][k][0]);
                    }
                    //printf("----\n");
                }
                if(dp[i][j][k][1]!=-1)
                {
                    if(j!=J && cards[i]>=atk[j])
                    {
                        dp[i+1][j+1][k][1]=max(dp[i+1][j+1][k][1],dp[i][j][k][1]+cards[i]-atk[j]);
                    }
                    if(k!=K && cards[i]>def[k])
                    {
                        dp[i+1][j][k+1][1]=max(dp[i+1][j][k+1][1],dp[i][j][k][1]);
                    }
                    dp[i+1][j][k][1]=max(dp[i+1][j][k][1],dp[i][j][k][1]);
                    if(j!=J)
                    {
                        dp[i][j+1][k][1]=max(dp[i][j+1][k][1],dp[i][j][k][1]);
                    }
                    if(k!=K)
                    {
                        dp[i][j][k+1][1]=max(dp[i][j][k+1][1],dp[i][j][k][1]);
                    }
                }
                //printf("-----\n");
            }
        }
    }
    int ans=0;
    for(i=0;i<=I;i++)
    {
        for(j=0;j<=J;j++)
        {
            for(k=0;k<=K;k++)
            {
                if(dp[i][j][k][0]!=-1)
                {
                    ans=max(ans,dp[i][j][k][0]);
                    //printf("#1 i=%d j=%d k=%d dp=%d\n",i,j,k,dp[i][j][k][0]);
                }
                if(dp[i][j][k][1]!=-1)
                {
                    ans=max(ans,dp[i][j][k][1]);
                    //printf("#2 i=%d j=%d k=%d dp=%d\n",i,j,k,dp[i][j][k][1]);
                }
            }
        }
    }
    printf("%d\n",ans);
    return 0;
}
