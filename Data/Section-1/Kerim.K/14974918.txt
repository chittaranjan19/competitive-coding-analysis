#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define lg(x) ceil(log2(x))
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define lgN 19
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int P[MAXN][lgN+9],diam,lvl[MAXN],a1,a2;
void build(int i){
	for(int j=1;j<lgN;j++)
		if(P[i][j-1]!=-1)
			P[i][j]=P[P[i][j-1]][j-1];
}
int LCA(int x,int y){
	if(lvl[x]<lvl[y])
		swap(x,y);
	for(int i=lgN;i>=0;i--)
		if(lvl[x]-(1<<i)>=lvl[y])
			x=P[x][i];
	if(x==y)
		return x;
	for(int i=lgN;i>=0;i--)
		if(P[x][i]!=-1 and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];				
	return P[x][0];
}
int tap(int u,int v){
	int z=LCA(u,v);
	return (lvl[u]-lvl[z])+(lvl[v]-lvl[z]);
}
void add(int pr,int nd){
	P[nd][0]=pr;
	lvl[nd]=lvl[pr]+1;
	build(nd);
	int l1=tap(a1,nd);
	int l2=tap(a2,nd);
	if(l1>=diam or l2>=diam){
		if(l1>=l2)
			diam=l1,a1=nd;
		else
			diam=l2,a2=nd;	
	}
}
int main(){
	a1=a2=lvl[1]=1;
	memset(P,-1,sizeof(P));
	int q,n=4;
	cin>>q;
	add(1,2);
	add(1,3);
	add(1,4);
	while(q--){
		int k;
		scanf("%d",&k);
		add(k,++n);
		add(k,++n);
		printf("%d\n",diam);
	}
	return 0;
}
//F. New Year Tree