#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<vector>
#include<queue>
using namespace std;

long long t,n,m;
vector<long>v[5009];
long p[5009],level[5009],coster[5009],cost[5009];

void bfs(long src,long tar)
{
    long i;
    queue<long>q;
    memset(level,0,sizeof(level));
    memset(coster,0,sizeof(coster));
    q.push(src);
    level[src]=1;
    p[src]=src;
    while(!q.empty())
    {
        long prev=q.front();
        q.pop();
        long next,l=v[prev].size();
        for(i=0;i<l;i++)
        {
            next=v[prev][i];
            if(level[prev]>=level[next] && coster[prev]+cost[next]<=t)
            {
                level[next]=level[prev]+1;
                p[next]=prev;
                q.push(next);
                coster[next]=coster[prev]+cost[next];
            }
        }
    }
    vector<long>path;
    path.push_back(tar);
    long now=tar;
    printf("");
    while(now!=src)
    {
        now=p[now];
        path.push_back(now);
    }
    long l=path.size();
    printf("%ld\n",l);
    for(i=l-1;i>=0;i--)
    {
        printf("%ld ",path[i]);
    }
    printf("\n");
}

int main()
{
    long a,b,c,p,q,i;
    while(scanf("%ld %ld %ld",&n,&m,&t)==3)
    {
        cost[1]=0;
        for(i=1;i<=m;i++)
        {
            scanf("%ld %ld %ld",&a,&b,&c);
            v[a].push_back(b);
            cost[b]=c;
        }
        bfs(1,n);
    }
    return 0;
}
