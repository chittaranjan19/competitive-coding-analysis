#include<bits/stdc++.h>

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define form(i,a,b) for(int i=a;i<b;i++)
using namespace std;

vector< int > visit(1000001,0);
vector<int>  gr[1000001];
int a[1000001] = {0};
void dfs(int i,vector<int> &v){
	vector<int>::iterator it;
	//cout<<"came to "<<i;
	for(it = gr[i].begin();it<gr[i].end();it++){
	if(!visit[*it]){
		visit[*it] = 1;
		v.push_back(*it);
		//cout<<"added  "<<*it<<endl;
		dfs(*it,v);
	}
	}
}
void arrange(vector<int> &v){
vector<int>::iterator it;
vector<int> d;
//cout<<"connected"<<endl;
for(it = v.begin();it!=v.end();it++) {
	d.push_back(a[*it]);
}
sort(d.begin(),d.end());
reverse(d.begin(),d.end());
int i=0;
sort(v.begin(),v.end());
for(it = v.begin();it!=v.end();it++){
	a[*it] = d[i];
	i++;
}
}
int main(){
	int n,m;
	cin>>n>>m;
	//int ans[n];
	forn(i,n){cin>>a[i];}
	//pair< int,int> p[m];
	set< pair<int,int> > s;
	int f,g;
	forn(i,m){
	cin>>f>>g;
	if(f!=g && s.find(make_pair(f-1,g-1))==s.end()){
	gr[f-1].push_back(g-1);
	gr[g-1].push_back(f-1);
	s.insert(make_pair(f-1,g-1));
	s.insert(make_pair(g-1,f-1));
}	
	}
	forn(i,n){
		if(!visit[i]){
			vector<int> v;
		//	cout<<"start "<<i<<endl;
			v.push_back(i);
			visit[i] = 1;
			dfs(i,v);
		//	cout<<"------------------";
			arrange(v);
		}
	}
	forn(i,n) cout<<a[i]<<" ";
}
