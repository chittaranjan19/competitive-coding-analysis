#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 1e5 + 10;
const int mod = 1e9 + 7;

int main(){
    int n, m, start[MAX_N], vid[MAX_N];
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) scanf("%d", &start[i]);
    for (int i = 1 ;i <= m; i++) scanf("%d", &vid[i]);
    int left = 0, right = n;
    while (right - left > 1){
        int middle = (right + left) / 2;
        set <int> vide;
        int pod = middle + 1, kek = 0;
        for (int i = middle; i >= 0; i--){
            if (vide.find(start[i]) == vide.end() && start[i] != 0){
                if (pod - 1 >= vid[start[i]]){
                    pod -= (vid[start[i]] + 1);
                    vide.insert(start[i]);
                    kek += vid[start[i]];
                }
                else break;
            }
            else if (kek > 0) kek--;
            else pod--;
        }
        if (vide.size() != m) left = middle;
        else right = middle;
        //cout << middle;
    }
    if (right == n) cout << -1;
    else cout << right + 1;
    return 0;
}
