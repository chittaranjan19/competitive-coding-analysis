#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for(int (i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define pb push_back
#define fi first
#define se second

int p[2000005];
int prime[2000006];
int a[100005];
int res[100005];
vector <int> g[100005];
void init(){
        for(int i = 2; i <= 2000006; i++) prime[i]++;
        for(int i = 2; i <= 10000; i++){
                if (prime[i])
                        for(int j = 2*i; j <= 2000005; j += i) prime[j] = 0;
        }

        for(int i = 1, j = 1; i <= 2000005; i++)
                if (prime[i]){
                        p[j] = i;
                        j++;
                }
        return;
        
}

int prime_stack[1000005];
int t[1000005], n, m, q, k;
void dfs(int i, int par, int d){
       
        int temp = 0;
                
        for(int j = 1; j <= sqrt(a[i]); j++){
                if (a[i] % p[j] == 0){
                        if (t[j]){
                                if (temp < prime_stack[t[j]]){
                                        temp = prime_stack[t[j]];
                                        res[i] = prime_stack[t[j]-1];
                                }
                        }
                        prime_stack[++t[j]] = d;
                        prime_stack[++t[j]] = i;
                }
                
        }
        if (temp == 0) res[i] = -1;

        for(int j = 0; j < g[i].size(); j++){
                if (g[i][j] != par) dfs(g[i][j], i, d+1);
        }
        for(int j = 1; j <= sqrt(a[i]); j++){
                if (a[i] % p[j] == 0){
                        t[j]--;
                        t[j]--;
                }
        }

        return;
}

int main(){
        ios::sync_with_stdio(false);
        init();
        cin >> n >> q;
        REP(i, n) cin >> a[i+1];
        for(int i = 0 ; i < n-1; i++){
                int x, y;
                cin >> x >> y;
                g[x].pb(y);
                g[y].pb(x);
        }
        dfs(1, 0, 1);
        while (q--){
                int q1, b;
                cin >> q1 >> b;
                if (q1 == 1)
                        cout << res[b] << endl;
                else{
                        int c;
                        cin >> c;
                        a[b] = c;
                        dfs(1,0,1);
                }
        }
        return 0;
}
                        


        
        

        
