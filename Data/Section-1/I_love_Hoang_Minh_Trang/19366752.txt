#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
int n, a[MAXN], b[MAXN], Ra[MAXN][20], Rb[MAXN][20];

int Geta(int l, int r)
{
    int k = log2(r - l + 1);
    return max(Ra[l][k], Ra[r - (1 << k) + 1][k]);
}

int Getb(int l, int r)
{
    int k = log2(r - l + 1);
    return min(Rb[l][k], Rb[r - (1 << k) + 1][k]);
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("D.inp", "r", stdin);
    freopen("D.out", "w", stdout);
    #endif //MIKELHPDATKE

    cin >> n;
    FORE(i, 1, n) cin >> a[i];
    FORE(i, 1, n) cin >> b[i];
    int k = log2(n);
    FORE(i, 1, n) Ra[i][0] = a[i];
    FORE(i, 1, n) Rb[i][0] = b[i];
    FORE(j, 1, k)
        FORE(i, 1, n) Ra[i][j] = max(Ra[i][j - 1], Ra[i + (1 << (j - 1))][j - 1]);
    FORE(j, 1, k)
        FORE(i, 1, n) Rb[i][j] = min(Rb[i][j - 1], Rb[i + (1 << (j - 1))][j - 1]);

    long long ans = 0;
    FORE(i, 1, n){
        if (a[i] == b[i]) ans++;
        if (a[i] > b[i]) continue;
        int d = i + 1, c = n, g, last = -1;
        while (d <= c){
            g = (d + c) / 2;
            if (Geta(i, g) <= Getb(i, g)){
                if (Geta(i, g) == Getb(i, g)) last = g;
                d = g + 1;
            } else c = g - 1;
        }
        //
        int first = -1;
        d = i + 1, c = n, g = 0;
        while (d <= c){
            g = (d + c) / 2;
            if (Geta(i, g) >= Getb(i, g)){
                if (Geta(i, g) == Getb(i, g)) first = g;
                c = g - 1;
            } else d = g + 1;
        }
        if (last < 0 || first < 0) continue;
        ans += (last - first + 1);
    }
    cout << ans;
    return 0;
}
