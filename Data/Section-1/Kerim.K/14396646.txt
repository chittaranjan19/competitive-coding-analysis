#include <set>
#include <map>
#include <queue>
#include <stack>
#include <math.h>
#include <vector>
#include <stdio.h>
#include <fstream>
#include <iostream>
#include <string.h>
#include <limits.h>
#include <algorithm>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <bits/stdc++.h>

#define ff first
#define ss second
#define ll long long
#define pb push_back
#define mp make_pair
#define inf 1000000007
#define mod 1000000007
#define pii pair <int, int>
#define all(x) x.begin(), x.end()
//#define tr(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)

//using namespace __gnu_pbds;

#define maxn 100005

using namespace std;

//template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int n, m;
int a, b;
int color[maxn];

vector <int> E[maxn], F[maxn];

set <int> S, emp;

int main()
{
	cin >> n >> m;
	
	for (int i = 1; i <= n; i++)
		cin >> color[i], F[color[i]].pb(i);
	
	for (int i = 1; i <= m; i++)
	{
		cin >> a >> b;
		
		E[a].pb(b);
		E[b].pb(a);
	}
	
	int mx = 0, ans = 0;
	for (int i = 1; i <= 100000; i++)
	{
		for (int h = 0; h < F[i].size(); h++)
		{
			int node = F[i][h];
			for (auto j: E[node])
				S.insert(color[j]);
		}
		
		if (mx < S.size())
			mx = S.size(), ans = i;
			
		S = emp;
	}
	
	cout << ans;
}
