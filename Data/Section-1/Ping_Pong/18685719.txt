#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>
#include <clocale>

#pragma comment(lib,"psapi")

#define ll long long
#define ld long double

using namespace std;

const int inf = (int)2 * 1e9;
const ll MOD = (ll)1e9 + 7;
const ll P = 239;
const ll MAX_N = 500;
const ld pi = 3.1415926535897932384626;
const ld eps = 1e-6;

typedef struct
{
    int s;
    int m;
    int num;
} node;

int n, q;
vector<vector<int> > tree;
vector<node> a;
vector<int> pos;

int dfs(int x, int par)
{
    pos[x] = a.size();
    node tmp;
    a.push_back(tmp);
    int cnt = 0, ma = 0;
    for (int i = 0; i < tree[x].size(); i++)
        if (tree[x][i] != par)
        {
            int curr = dfs(tree[x][i], x);
            cnt += curr;
            ma = max(ma, curr);
        }
    a[pos[x]].s = cnt + 1;
    a[pos[x]].m = ma;
    a[pos[x]].num = x;
    return cnt + 1;
}

vector<vector<node> > tr;
int cnt_ver = 1;

void build()
{
    while (cnt_ver < n)
        cnt_ver <<= 1;
    tr.resize(cnt_ver * 2 - 1);
    node nn;
    nn.s = -inf;
    nn.m = inf;
    nn.num = -1;
    for (int i = 0; i < cnt_ver; i++)
        if (i < n)
            tr[cnt_ver - 1 + i].push_back(a[i]);
        else
            tr[cnt_ver - 1 + i].push_back(nn);
    for (int i = cnt_ver - 2; i >= 0; i--)
    {
        int p1 = 0, p2 = 0;
        for (int j = 0; j < tr[i * 2 + 1].size() + tr[i * 2 + 2].size(); j++)
            if (p1 == tr[i * 2 + 1].size())
            {
                tr[i].push_back(tr[i * 2 + 2][p2]);
                p2++;
            }
            else if (p2 == tr[i * 2 + 2].size())
            {
                tr[i].push_back(tr[i * 2 + 1][p1]);
                p1++;
            }
            else
            {
                if (tr[i * 2 + 1][p1].m <= tr[i * 2 + 2][p2].m)
                {
                    tr[i].push_back(tr[i * 2 + 1][p1]);
                    p1++;
                }
                else
                {
                    tr[i].push_back(tr[i * 2 + 2][p2]);
                    p2++;
                }
            }
    }
}

void init()
{
    for (int i = 0; i < cnt_ver * 2 - 1; i++)
    {
        for (int j = 1; j < tr[i].size(); j++)
            if (tr[i][j].s < tr[i][j - 1].s)
            {
                tr[i][j].s = tr[i][j - 1].s;
                tr[i][j].num = tr[i][j - 1].num;
            }
    }
}

int ans(int x, int lx, int rx, int l, int r, int val, int len)
{
    if (l > rx || r < lx)
        return -1;
    else if (lx >= l && rx <= r)
    {
        int g = 0, h = tr[x].size(), mid;
        while (h - g > 1)
        {
            mid = (g + h) / 2;
            if (val >= tr[x][mid].m)
                g = mid;
            else
                h = mid;
        }
        int curr = tr[x][g].num;
        if (a[pos[curr]].m <= val && len - a[pos[curr]].s <= val)
            return curr;
        else
            return -1;
    }
    else
        return max(ans(x * 2 + 1, lx, (lx + rx) / 2, l, r, val, len), ans(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r, val, len));
}

int main()
{
    //freopen("mutants.in", "r", stdin);
    //freopen("mutants.out", "w", stdout);
    //setlocale(LC_CTYPE, "rus");
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    scanf("%d %d", &n, &q);
    tree.resize(n);
    for (int i = 0; i < n - 1; i++)
    {
        int x;
        scanf("%d", &x);
        tree[i + 1].push_back(x - 1);
        tree[x - 1].push_back(i + 1);
    }
    pos.resize(n);
    dfs(0, -1);
    /*for (int i = 0; i < n; i++)
        cout << a[i].num << " " << a[i].s << " " << a[i].m << endl;*/
    build();
    /*cout << endl << endl;
    for (int i = 0; i < cnt_ver * 2 - 1; i++)
    {
        for (int j = 0; j < tr[i].size(); j++)
            cout << tr[i][j].num << " " << tr[i][j].m << " " << tr[i][j].s << endl;
        cout << endl;
    }*/
    init();
    /*cout << endl << endl;
    for (int i = 0; i < cnt_ver * 2 - 1; i++)
    {
        for (int j = 0; j < tr[i].size(); j++)
            cout << tr[i][j].num << " " << tr[i][j].m << " " << tr[i][j].s << endl;
        cout << endl;
    }*/
    for (int i = 0; i < q; i++)
    {
        int x;
        scanf("%d", &x);
        printf("%d\n", ans(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + pos[x - 1], cnt_ver - 1 + pos[x - 1] + a[pos[x - 1]].s - 1, a[pos[x - 1]].s / 2, a[pos[x - 1]].s) + 1);
    }
    return 0;
}
