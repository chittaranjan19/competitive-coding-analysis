#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>
#include <clocale>

#pragma comment(lib,"psapi")

#define ll long long
#define ld long double

using namespace std;

const ll inf = (ll)2 * 1e9;
const ll MOD = (ll)1e9 + 7;
const ll P = 239;
const ll MAX_N = 500;
const ld pi = 3.1415926535897932384626;
const ld eps = 1e-6;

vector<vector<pair<ll, ll> > > tree;
vector<ll> a;

pair<ll, ll> dfs(ll x, ll par, ll len)
{
    ll cnt = 0, s = 0;
    for (ll i = 0; i < tree[x].size(); i++)
        if (tree[x][i].first != par)
        {
            pair<ll, ll> p = dfs(tree[x][i].first, x, max(0LL, len + tree[x][i].second));
            cnt += p.first;
            s += p.second;
        }
    if (len > a[x])
        return make_pair(s + 1, s + 1);
    else
        return make_pair(cnt, s + 1);
}

int main()
{
    //freopen("mutants.in", "r", stdin);
    //freopen("mutants.out", "w", stdout);
    //setlocale(LC_CTYPE, "rus");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n;
    cin >> n;
    a.resize(n);
    tree.resize(n);
    for (ll i = 0; i < n; i++)
        cin >> a[i];
    for (ll i = 0; i < n - 1; i++)
    {
        ll v, c;
        cin >> v >> c;
        tree[i + 1].push_back(make_pair(v - 1, c));
        tree[v - 1].push_back(make_pair(i + 1, c));
    }
    pair<ll, ll> ans = dfs(0, -1, 0);
    cout << ans.first;
    return 0;
}
