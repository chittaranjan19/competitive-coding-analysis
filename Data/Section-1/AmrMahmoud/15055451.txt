#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

char s[200005];

const int MaxVal = 200002;
int tree1[90][200002], tree2[90][200002], k;

void update1(int idx, int val,int x)
{
  if(idx <= 0) return;
  while (idx <= MaxVal && idx > 0){
    tree1[x][idx] = val;
    idx = idx + (idx & -idx);
  }
}

void update2(int idx, int val,int x)
{
  if(idx <= 0) return;
  while (idx <= MaxVal && idx > 0){
    tree2[x][idx] = val;
    idx = idx + (idx & -idx);
  }
}

void update(int x, int y, int val, int xx)
{
  x++, y++;
  update1(x, val, xx);
  update1(y + 1, -val, xx);
  update2(x, val * (x - 1), xx);
  update2(y + 1, -val * y, xx);
}

int read1(int idx, int x)
{
  if(idx <= 0) return 0;
  int sum = 0;
  while (idx > 0 && idx <= MaxVal){
    sum = sum + tree1[x][idx];
    idx = idx - (idx & -idx);
  }
  return sum;
}

int read2(int idx, int x)
{
  if(idx <= 0) return 0;
  int sum = 0;
  while (idx > 0 && idx <= MaxVal){
    sum = sum + tree2[x][idx];
    idx = idx - (idx & -idx);
  }
  return sum;
}

int read(int idx, int x)
{
  return read1(idx, x) * idx - read2(idx, x);
}

int query(int x, int y, int xx)
{
  x++, y++;
  return read(y, xx) - read(x - 1, xx);
}
/*
void build(int i,int L,int R, int x, int y)
{
  if(L == R)
  {
    lazy[x * k + y][i] = -1;
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2, x, y);
  build(i*2 + 2, (L + R) / 2 + 1, R, x, y);
  lazy[x * k + y][i] = -1;
}

void update(int i,int L,int R,int x,int y,int val, int xx, int yy)
{
  if(lazy[xx * k + yy][i] != -1)
  {
    tree[xx * k + yy][i] = lazy[xx * k + yy][i];
    if(L != R)
    {
      lazy[xx * k + yy][i*2+1] = lazy[xx * k + yy][i];
      lazy[xx * k + yy][i*2+2] = lazy[xx * k + yy][i];
    }
    lazy[xx * k + yy][i] = -1;
  }
  if(L >= x && R <= y)
  {
    lazy[xx * k + yy][i] = val;
    tree[xx * k + yy][i] = lazy[xx * k + yy][i];
    if(L != R)
    {
      lazy[xx * k + yy][i*2+1] = lazy[xx * k + yy][i];
      lazy[xx * k + yy][i*2+2] = lazy[xx * k + yy][i];
    }
    lazy[xx * k + yy][i] = -1;
    return;
  }
  if(L > y || R < x)
    return;
  update(i*2 + 1, L, (L + R) / 2, x, y, val, xx, yy);
  update(i*2 + 2, (L + R) / 2 + 1, R, x, y, val, xx, yy);
  tree[xx * k + yy][i] = tree[xx * k + yy][i*2 + 1] + tree[xx * k + yy][i*2 + 2];
}

int query(int i,int L,int R,int x,int y, int xx, int yy)
{
  if(lazy[xx * k + yy][i] != -1)
  {
    tree[xx * k + yy][i] = lazy[xx * k + yy][i];
    if(L != R)
    {
      lazy[xx * k + yy][i*2+1] = lazy[xx * k + yy][i];
      lazy[xx * k + yy][i*2+2] = lazy[xx * k + yy][i];
    }
    lazy[xx * k + yy][i] = -1;
  }
  if(L >= x && R <= y)
    return tree[xx * k + yy][i];
  if(L > y || R < x)
    return 0;
  return query(i*2 + 1, L, (L + R) / 2, x, y, xx, yy) + query(i*2 + 2, (L + R) / 2 + 1, R, x, y, xx, yy);
}
*/
char stree[800005];
char slazy[800005];

void sbuild(int i,int L,int R)
{
  if(L == R)
  {
    stree[i] = s[L];
    slazy[i] = -1;
    return ;
  }
  sbuild(i*2 + 1, L, (L + R) / 2);
  sbuild(i*2 + 2, (L + R) / 2 + 1, R);
  slazy[i] = -1;
}

void supdate(int i,int L,int R,int x,int y,char val)
{
  if(slazy[i] != -1)
  {
    stree[i] = slazy[i];
    if(L != R)
    {
      slazy[i*2+1] = slazy[i];
      slazy[i*2+2] = slazy[i];
    }
    slazy[i] = -1;
  }
  if(L >= x && R <= y)
  {
    slazy[i] = val;
    stree[i] = slazy[i];
    if(L != R)
    {
      slazy[i*2+1] = slazy[i];
      slazy[i*2+2] = slazy[i];
    }
    slazy[i] = -1;
    return;
  }
  if(L > y || R < x)
    return;
  supdate(i*2 + 1, L, (L + R) / 2, x, y, val);
  supdate(i*2 + 2, (L + R) / 2 + 1, R, x, y, val);
}

char squery(int i,int L,int R,int x,int y)
{
  if(slazy[i] != -1)
  {
    stree[i] = slazy[i];
    if(L != R)
    {
      slazy[i*2+1] = slazy[i];
      slazy[i*2+2] = slazy[i];
    }
    slazy[i] = -1;
  }
  if(L >= x && R <= y)
    return stree[i];
  if(L > y || R < x)
    return 0;
  return squery(i*2 + 1, L, (L + R) / 2, x, y) + squery(i*2 + 2, (L + R) / 2 + 1, R, x, y);
}

char p[15];
int cnt[15][15];

int main()
{
  int n, m, x, y, res;
  char c;
  scanf("%d %d %d", &n, &m, &k);
  scanf("%s", s);
  int ind = 0;
  for(int i=0;i<k;i++)
    for(int j=0;j<k;j++)
      if(i != j)
        cnt[i][j] = ind++;
  for(int i=1;i<n;i++)
  {
    if(s[i] != s[i - 1])
    {
      x = s[i - 1] - 'a';
      y = s[i] - 'a';
      update(i, i, 1, cnt[x][y]);
      //update(0, 0, n - 1, i, i, 1, x, y);
    }
  }
  sbuild(0, 0, n - 1);
  while(m--)
  {
    scanf("%d", &x);
    if(x == 1)
    {
      scanf("%d %d %c", &x, &y, &c);
      x--;
      int yy = y - 1;
      if(y == n) y--;
      for(int i=0;i<k;i++)
      {
        for(int j=0;j<k;j++)
        {
          if(i == j) continue;
          update(x, y, 0, cnt[i][j]);
          //update(0, 0, n - 1, x, y, 0, i, j);
        }
      }
      if(x)
      {
        char t = squery(0, 0, n - 1, x - 1, x - 1);
        if(t != c) update(x, x, 1, cnt[t - 'a'][c - 'a']); //update(0, 0, n - 1, x, x, 1, t - 'a', c - 'a');
      }
      if(yy != n - 1)
      {
        char t = squery(0, 0, n - 1, yy + 1, yy + 1);
        if(t != c) update(yy + 1, yy + 1, 1, cnt[c - 'a'][t - 'a']); //update(0, 0, n - 1, yy + 1, yy + 1, 1, c - 'a', t - 'a');
      }
      supdate(0, 0, n - 1, x, yy, c);
    }
    else
    {
      scanf("%s", p);
      res = n;
      for(int i=0;i<k;i++)
        for(int j=i+1;j<k;j++)
          res += query(0, n - 1, cnt[p[i] - 'a'][p[j] - 'a']); //query(0, 0, n - 1, 0, n - 1, p[i] - 'a', p[j] - 'a');
      printf("%d\n", res);
    }
  }
  return 0;
}
