#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl 

typedef long long tint;

using namespace std;

void imprimirVector (vector<string> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

void bfs(map<string, vector<string> > &g, map<string, int> &d, int c, vector<string> v)
{
	
	while (!v.empty())
	{
		vector<string> vNew;
		int l = v.size();
		forn(i,l)
		{
			if (d[v[i]] == -1)
			{
				d[v[i]] = c;
				int l2 = g[v[i]].size();
				forn(j,l2)
					vNew.push_back(g[v[i]][j]);
			}	
		}
		c++;
		v = vNew;
	}
}

int main()
{
	int n;
	cin >> n;
	map<string, vector<string> > g;
	map<string,int> d;
	forn(i,n)
	{
		string name1,name2,reposted;
		cin >> name1 >> reposted >> name2;
		transform(name1.begin(),name1.end(),name1.begin(), ::tolower);
		transform(name2.begin(),name2.end(),name2.begin(), ::tolower);
		d[name2] = -1;
		d[name1] = -1;
		g[name2].push_back(name1);
	}
	vector<string> v (1,"polycarp");
	bfs(g,d,1,v);
	int c = -1;
	map<string, int>:: iterator it;
	for (it = d.begin(); it != d.end(); it++)
	{
		if (it->second > c)
			c = it -> second;
	}
	cout << c << endl;
	return 0;
}
