#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

char s[1005][1005];
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
bool can[600][5];
char nxt[600][6];
bool v[1005][1005][4];
int cnt[1005][1005][4];

int main()
{
  int n, m, x, y, xx, yy;
  cin >> n >> m;
  for(int i=0;i<n;i++)
    scanf("%s", s[i]);
  cin >> x >> y >> xx >> yy;
  x--, y--, xx--, yy--;
  for(int i=0;i<4;i++)
    can['+'][i] = true;
  nxt['+'][1] = '+';
  nxt['*'][1] = '*';
  nxt['|'][1] = '-';
  nxt['-'][1] = '|';
  can['-'][0] = true;
  can['-'][1] = true;
  can['|'][2] = true;
  can['|'][3] = true;
  nxt['^'][1] = '>';
  nxt['>'][1] = 'v';
  nxt['v'][1] = '<';
  nxt['<'][1] = '^';

  can['>'][0] = true;
  can['<'][1] = true;
  can['v'][2] = true;
  can['^'][3] = true;

  nxt['L'][1] = 'U';
  nxt['U'][1] = 'R';
  nxt['R'][1] = 'D';
  nxt['D'][1] = 'L';
  for(int i=0;i<4;i++)
  {
    can['L'][i] = true;
    can['U'][i] = true;
    can['R'][i] = true;
    can['D'][i] = true;
  }
  can['L'][1] = false;
  can['U'][3] = false;
  can['R'][0] = false;
  can['D'][2] = false;
  for(int i=2;i<4;i++)
  {
    nxt['+'][i] = nxt[nxt['+'][i-1]][1];
    nxt['*'][i] = nxt[nxt['*'][i-1]][1];
    nxt['|'][i] = nxt[nxt['|'][i-1]][1];
    nxt['-'][i] = nxt[nxt['-'][i-1]][1];

    nxt['L'][i] = nxt[nxt['L'][i-1]][1];
    nxt['R'][i] = nxt[nxt['R'][i-1]][1];
    nxt['D'][i] = nxt[nxt['D'][i-1]][1];
    nxt['U'][i] = nxt[nxt['U'][i-1]][1];

    nxt['>'][i] = nxt[nxt['>'][i-1]][1];
    nxt['<'][i] = nxt[nxt['<'][i-1]][1];
    nxt['^'][i] = nxt[nxt['^'][i-1]][1];
    nxt['v'][i] = nxt[nxt['v'][i-1]][1];
  }
  queue<pair<pair<int, int>, int> > q;
  q.push(mp(mp(x, y), 0));
  v[x][y][0] = true;
  while(!q.empty())
  {
    x = q.front().f.f;
    y = q.front().f.s;
    int c = q.front().s;
    q.pop();
    if(x == xx && y == yy)
    {
      cout << cnt[x][y][c];
      return 0;
    }
    if(!v[x][y][(c+1)%4])
    {
      v[x][y][(c+1)%4] = true;
      cnt[x][y][(c+1)%4] = cnt[x][y][c] + 1;
      q.push(mp(mp(x, y), (c+1)%4));
    }
    for(int i=0;i<4;i++)
    {
      int tmpx = x + dx[i];
      int tmpy = y + dy[i];
      if(tmpx < 0 || tmpy < 0 || tmpx == n || tmpy == m) continue;
      char a = nxt[s[x][y]][c];
      char b = nxt[s[tmpx][tmpy]][c];
      if(!c) a = s[x][y];
      if(!c) b = s[tmpx][tmpy];
      if(can[a][i] && can[b][i^1])
      {
        if(!v[tmpx][tmpy][c])
        {
          v[tmpx][tmpy][c] = true;
          cnt[tmpx][tmpy][c] = cnt[x][y][c] + 1;
          q.push(mp(mp(tmpx, tmpy), c));
        }
      }
    }
  }
  cout << -1;
  return 0;
}
