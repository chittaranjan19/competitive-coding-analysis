#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

typedef long long ll;

const int maxn = 1000 + 5;
const int maxm = 10000 + 5;
const int INF = 1 << 30;

struct edge
{
    int to, next, w;
} G[maxm << 1];
int head[maxn], tot, pre[maxn], d[maxn];
bool inq[maxn];

void init()
{
    memset(head, -1, sizeof(head));
    tot = 0;
}

void addedge(int u, int v, int w)
{
    G[tot].to = v;
    G[tot].w = w;
    G[tot].next = head[u];
    head[u] = tot++;
}

ll spfa(int s, int t, int k)
{
    queue<int> que;
    fill(d, d + maxn, INF);
    d[s] = 0;
    que.push(s);
    inq[s] = true;
    pre[s] = -1;
    while(!que.empty())
    {
        int u = que.front();
        que.pop();
        inq[u] = false;
        for(int i = head[u]; ~i; i = G[i].next)
        {
            edge e = G[i];
            if(e.w != k && d[e.to] > d[u] + e.w)
            {
                d[e.to] = d[u] + e.w;
                pre[e.to] = i;
                if(!inq[e.to])
                {
                    que.push(e.to);
                    inq[e.to] = true;
                }
            }
        }
    }
    return d[t];
}

int main()
{
    int n, m, L, s, t;
    scanf("%d%d%d%d%d", &n, &m, &L, &s, &t);
    init();
    for(int i = 0; i < m; ++i)
    {
        int u, v, w;
        scanf("%d%d%d", &u, &v, &w);
        addedge(u, v, w);
        addedge(v, u, w);
    }
    ll tmp = spfa(s, t, 0);
    if(tmp < L) puts("NO");
    else
    {
        tmp = spfa(s, t, -1);
        if(tmp > L) puts("NO");
        else
        {
            for(int i = pre[t]; ~i; i = pre[G[i ^ 1].to])
            {
                if(G[i].w == 0)
                {
                    G[i ^ 1].w = G[i].w = L - tmp;
                    break;
                }
            }
            puts("YES");
            for(int i = 0; i < tot; i += 2)
            {
                printf("%d %d %d\n", G[i ^ 1].to, G[i].to, G[i].w);
            }
        }
    }
    return 0;
}
