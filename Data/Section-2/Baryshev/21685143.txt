#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 1e5 + 5;
const int mod = 1e9 + 7;


int arr[MAX_N];

int main()
{
    int n;
    cin >> n;
    vector <tuple<ll, ll, ll> > kek(n);
    for (int i = 0; i < n ;i++){
        scanf("%lld%lld", &g(0, kek[i]), &g(1, kek[i]));
        g(2, kek[i]) = i + 1;
    }
    sort(kek.rbegin(), kek.rend());
    multiset<ll> fuck;
    ll ans, ykaz, kik;
    for (int i = 0; i < n; i++){
        if (g(2, kek[i]) == 1) {ans = i; break;}
        fuck.insert(g(1, kek[i]) - g(0, kek[i]) + 1);
    }
    ll sum = g(0, kek[ans]);
    while(ans > 0 && g(0, kek[ans]) <= sum) ans--;
    if (g(0, kek[ans]) > sum) ans++;
    kik = ans;
    ykaz = ans + 1;
    while(fuck.size() > 0 && sum - (*fuck.begin()) >= 0){
        sum -= (*fuck.begin());
        fuck.erase(fuck.begin());
        ans--;
        while(ykaz < n && g(0, kek[ykaz]) > sum) {
                ans++;
                fuck.insert(g(1, kek[ykaz]) - g(0, kek[ykaz]) + 1);
        ykaz++;}
        kik = min(ans, kik);
        //cout << ans << " "<< sum << " " << ykaz<< endl;
    }
    cout << kik + 1;
    return 0;
}
