#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof((b).rend()) a = (b).rbegin(); a != (b).rend(); ++a)
#define iterate(a, b) for(__typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)
#define all(i) (i).begin(), (i).end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, args)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

#ifdef __WIN32 
	#define gc getchar
#else
	#define gc getchar_unlocked
#endif
#define fsdecimal(type) \
	void fs ##type  (type& inp) { \
		register char c = gc(), prev = '+'; \
		for (; !isdigit(c); c = gc()) prev = c; \
		inp = 0; \
		for (; isdigit(c); c = gc()) { \
			inp = (inp << 3)+(inp << 1)+(c-'0'); \
		} \
		if (prev == '-') \
			inp = -inp; \
	}
fsdecimal(int)
fsdecimal(ll)

#define MAX_M 100000

int main() {
#ifdef DEBUG
	freopen("680D.in", "r", stdin);
#endif
    
    ll m;
    fsll(m);

    vl pow3(MAX_M+5, 0);
    loop1(idx, MAX_M+2) {
    	ll val = idx;
    	pow3[idx] = val*val*val;
    }

    ll vol_used = 0;
    vl blocks;
    bool reach_end = false;
    for (int idx = 1; (not reach_end); ++idx) {
    	ll next_reach;
    	if (pow3[idx+1]-1 < m) {
    		next_reach = pow3[idx+1]-1;
    	} else {
    		next_reach = m;
    		reach_end = true;
    	}
    	ll nblock_use = (next_reach-vol_used)/pow3[idx];
    	ll vol_use = pow3[idx]*nblock_use;
    	vol_used += vol_use;
    	loop(it, nblock_use) {
    		blocks.pub(pow3[idx]);
    	}
    }

    vl pref_sum;
    for (int idx = 0; idx < (int) blocks.size(); ++idx) {
    	pref_sum.pub((pref_sum.size() ? pref_sum.back() : 0)+blocks[idx]);
    }

    int j = blocks.size()-1;
    ll max_add = LLONG_MAX;
    for (int i = MAX_M-1; j >= 0;) {
    	vol_used -= blocks[j];

    	bool has_used = false;
    	if ((vol_used+pow3[i] <= m) and (pow3[i]+(j ? pref_sum[j-1] : 0) < max_add)) {
    		max_add = min(max_add-pow3[i], pow3[i+1]-pow3[i]);
    		blocks[j] = pow3[i];
    		has_used = true;
    	}
    	vol_used += blocks[j];
    	if (has_used)
    		--j;
    	else
    		--i;
    }
    printf("%d %I64d\n", (int)blocks.size(), vol_used);
    // GetTime();

    return 0;
}