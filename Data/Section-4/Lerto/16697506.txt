//package com.company;

import java.io.*;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        new Main().run();
    }

    public void run() throws IOException {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt(), m = in.nextInt(), s = in.nextInt(), d = in.nextInt();
        byte[] a = new byte[m + 1 + d];
        for (int i = 0; i < n; i++) {
            a[in.nextInt()] = 1;
        }
        a[m] = 2;
        boolean jump = false;
        int run = 0;
        int du = 1;
        LinkedList<String> lL = new LinkedList<String>();
        {
            for (int i = 1; i <= m; i++) {
                if (a[i] == 1) if (jump) {
                    lL.add("RUN " + Integer.toString(run));
                    jump = false;
                    run = 0;
                    i += d-1;
                    du = d;
                    if (a[i] == 1) i--;
                    while (a[i] != 1) {
                        i--;
                        du--;
                        if (du <= 0) {
                            System.out.print("IMPOSSIBLE");
                            System.out.close();
                        }
                    }
                    i++;
                    du++;
                    lL.add("JUMP " + Integer.toString(du));
                    du = 1;
                    run--;
                } else {
                    System.out.print("IMPOSSIBLE");
                    System.out.close();
                }
                run++;
                if (run == s) jump = true;
            }
            if (run != 0)
            lL.add("RUN " + Integer.toString(run));
            for (Iterator it = lL.iterator(); it.hasNext(); )
                System.out.println(it.next());
        }
    }
}