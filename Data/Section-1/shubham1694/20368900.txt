#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 205;

int graph[maxn][maxn], adj[maxn][maxn], isprime[maxn*maxn];
int visited[maxn], parent[maxn], arr[maxn], n, m;
int source, sink;
vector< vector<int> > tables;
vector<int> table, matches[maxn];

void sieve()
{
	int i, j;
	for(i=2; i<maxn*maxn; i++){
		if(!isprime[i]){
			for(j=i*i; j<maxn*maxn; j+=i)
				isprime[j] = 1;
		}
	}
}

bool bfs()
{
	int i;
	for(i=source; i<=sink; i++)
		visited[i] = 0;
	queue<int> q;
	q.push(source);
	visited[source] = 1;
	while(!q.empty()){
		int cur = q.front();
		q.pop();
		for(i=source; i<=sink; i++){
			if(!visited[i] && graph[cur][i]>0){
				parent[i] = cur;
				visited[i] = 1;
				q.push(i);
			}
		}
	}
	return visited[sink];
}

int solve()
{	
	int i, j;
	int minval, flow = 0;
	for(i=source; i<=sink; i++){
		for(j=source; j<=sink; j++)
			graph[i][j] = adj[i][j];
	}
	while(bfs()){
		int cur = sink;
		minval = mod;
		while(cur){
			minval = min(minval, graph[parent[cur]][cur]);
			cur = parent[cur];
		}
		flow += minval;
		cur = sink;
		while(cur){
			graph[parent[cur]][cur] -= minval;
			graph[cur][parent[cur]] += minval;
			cur = parent[cur];
		}
	}
	return flow;
}

void dfs(int cur)
{
	table.pb(cur);
	visited[cur] = 1;
	for(int it : matches[cur]){
		if(!visited[it]){
			dfs(it);
		}
	}
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	sieve();
	int i, j, x, odd_cnt = 0, even_cnt = 0;
	scanf("%d", &n);
	for(i=1; i<=n; i++)
		scanf("%d", &arr[i]);
	if(odd_cnt != even_cnt){
		printf("Impossible\n");
		return 0;
	}
	source = 0;
	sink = n+1;
	for(i=1; i<=n; i++){
		if(arr[i]&1){
			adj[source][i] = 2;
			for(j=1; j<=n; j++){
				if(j!=i && !isprime[arr[i]+arr[j]])
					adj[i][j] = 1;
			}
		}
		else
			adj[i][sink] = 2;
	}
	int flow = solve();
	if(flow != n){
		printf("Impossible\n");
		return 0;
	}
	for(i=source; i<=sink; i++)
		visited[i] = 0;
	for(i=1; i<=n; i++){
		if(arr[i]&1){
			for(j=1; j<=n; j++){
				if(isprime[arr[i]+arr[j]] || graph[i][j])
					continue;
				matches[i].pb(j);
				matches[j].pb(i);
			}
		}
	}
	for(i=1; i<=n; i++){
		if(arr[i]&1 && !visited[i]){
			table.clear();
			dfs(i);
			tables.pb(table);
		}
	}
	printf("%d\n", (int)tables.size());
	for(i=0; i<tables.size(); i++){
		printf("%d ", (int)tables[i].size());
		for(int it : tables[i])
			printf("%d ", it);
		printf("\n");
	}
	return 0;
}
