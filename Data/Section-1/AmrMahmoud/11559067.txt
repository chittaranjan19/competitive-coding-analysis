#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
//#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

LL mod, n, k, l;
vector<vector<LL> > m1(2), m2(2);

vector<vector<LL> > mul(vector<vector<LL> > a, vector<vector<LL> > b)
{
  int n = a.size(), m = b[0].size();
  vector<vector<LL> > res(n);
  for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
      res[i].push_back(0);
  for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
      for(int k=0;k<a[0].size();k++)
        res[i][j] = (a[i][k] * 1LL * b[k][j] + res[i][j]) % mod;
  return res;
}

vector<vector<LL> > mat_pow(const vector<vector<LL> > base, LL power)
{
  if(power == 1) return base;
  if(power & 1) return mul(base, mat_pow(base, power - 1));
  vector<vector<LL> > temp = mat_pow(base, power/2);
  return mul(temp, temp);
}

LL power(int a, LL b)
{
  if(b == 0) return 1;
  if(b & 1) return (a * 1LL * power(a, b - 1)) % mod;
  LL res = power(a, b / 2);
  res*=res;
  res%=mod;
  return res;
}

int main()
{
  //ios_base::sync_with_stdio(0);
  cin >> n >> k >> l >> mod;
  if(l < 63 && (k >= (1LL << l)))
  {
    cout << 0;
    return 0;
  }
  if(l == 0)
  {
    if(k == 0) cout << 1 % mod;
    else cout << 0;
    return 0;
  }
  //1 1
  //1 0
  m1[0].pb(1);
  m1[0].pb(1);
  m1[1].pb(1);
  m1[1].pb(0);
  m2[0].pb(1);
  m2[1].pb(0);
  m1 = mat_pow(m1, n);
  m2 = mul(m1, m2);
  LL x = m2[0][0] + m2[1][0];
  LL tmp = power(2, n) - x, res = 1;
  tmp%=mod;
  tmp+=mod;
  tmp%=mod;
  x%=mod;
  for(int i=0;i<l;i++)
  {
    if(i >= 63 || ((1LL << i) & k) == 0)
      res = (res * 1LL * x) % mod;
    else res = (res * 1LL * tmp) % mod;
  }
  cout << res;
  return 0;
}
