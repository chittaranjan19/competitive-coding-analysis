#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 310;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<pair<long double, long double> > a[MAX_N];

bool ll (long double a, long double b)
{
    return (a - b) <= eps && (a - b) >= -eps;
}

bool v (long double a, long double b)
{
    return (a - b) >= eps;
}

bool vll (long double a, long double b)
{
    return (a - b) >= -eps;
}

bool vv (long double a, long double b)
{
    return (a - b) <= -eps;
}

bool vvll (long double a, long double b)
{
    return (a - b) <= eps;
}

long double f_x(pair<long double, long double> l, long double x)
{
    return x * l.first + l.second;
}

pair<long double, long double> line(long double x1, long double y1, long double x2, long double y2)
{
    long double k = (y2 - y1) / (x2 - x1);
    long double b = y1 - k * x1;
    return make_pair(k, b);
}

pair<long double, long double> mix_line(pair<long double, long double> l1, pair<long double, long double> l2)
{
    long double x = (l2.second - l1.second) / (l1.first - l2.first);
    long double y = l1.first * x + l1.second;
    return make_pair(x, y);
}

vector<pair<long double, long double> > mix(vector<pair<long double, long double> > a, vector<pair<long double, long double> > b)
{
    vector<pair<long double, long double> > ans;
    int curr = 0;
    ans.push_back(make_pair(a[0].first, max(a[0].second, b[0].second)));
    for (int i = 1; i < a.size(); i++)
    {
        pair<long double, long double> l1 = line(a[i - 1].first, a[i - 1].second, a[i].first, a[i].second);
        pair<long double, long double> l2 = line(b[curr].first, b[curr].second, b[curr + 1].first, b[curr + 1].second);
        if (vll(f_x(l2, a[i - 1].first), a[i - 1].second) && vll(f_x(l2, a[i].first), a[i].second))
            if (ll(a[i].first, b[curr + 1].first))
                ans.push_back(b[curr + 1]);
        if (vvll(f_x(l2, a[i - 1].first), a[i - 1].second) && vvll(f_x(l2, a[i].first), a[i].second))
            ans.push_back(a[i]);
        else if (vvll(f_x(l2, a[i - 1].first), a[i - 1].second) && vll(f_x(l2, a[i].first), a[i].second))
        {
            ans.push_back(mix_line(l1, l2));
            if (ll(a[i].first, b[curr + 1].first))
                ans.push_back(b[curr + 1]);
        }
        else if (vll(f_x(l2, a[i - 1].first), a[i - 1].second) && vvll(f_x(l2, a[i].first), a[i].second))
        {
            ans.push_back(mix_line(l1, l2));
            ans.push_back(a[i]);
        }
        if (ll(a[i].first, b[curr + 1].first))
            curr++;
    }
    return ans;
}

long double area(vector<pair<long double, long double> > f)
{
    long double ans = 0;
    for (int i = 1; i < f.size(); i++)
        ans += (f[i - 1].second + f[i].second) * (f[i].first - f[i - 1].first) / 2;
    return ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, k, p;
    cin >> n >> k;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < k + 1; j++)
        {
            cin >> p;
            a[i].push_back(make_pair(j, p));
        }
    vector<pair<long double, long double> > f;
    for (int i = 0; i < k + 1; i++)
        f.push_back(make_pair(i, 0));
    for (int i = 0; i < n; i++)
    {
        vector<pair<long double, long double> > f1;
        f1 = mix(f, a[i]);
        cout << area(f1) - area(f) << endl;
        f = f1;
        /*for (int i = 0; i < f.size(); i++)
            cout << f[i].first << " " << f[i].second << endl;
        cout << endl;*/
    }
    return 0;
}