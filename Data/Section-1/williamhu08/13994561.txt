#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define mp make_pair
#define fi first
#define se second

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<ll> point;
const int MAXN = 3.5e5;

ll c2 (ll x) {
	return x * (x - 1) / 2;
}

ll c3 (ll x) {
	return x * (x - 1) * (x - 2) / 6;
}

ll gcd (ll a, ll b) {
	return a ? gcd(b % a, a) : b;
}

ll cross (point a, point b) {
	return a.real() * b.imag() - a.imag() * b.real();
}

point gdi (point p) {
	if (p.real() < 0) {
		return -p;
	} else if (p.real() == 0) {
		return point(0, llabs(p.imag()));
	} else {
		return p;
	}
}

int quad (point p) {
	if (p.real() == 0) {
		return p.imag() > 0 ? 1 : 3;
	} else if (p.imag() == 0) {
		return p.real() > 0 ? 0 : 2;
	} else {
		//both are nonzero
		if (p.imag() < 0) {
			return p.real() < 0 ? 2 : 3;
		} else {
			return p.real() < 0;
		}
	}
}

typedef pair<point, int> ppi;	//point, count

int N, M, C, D;
point A[MAXN];
map<pll, int> mpnt;
vector<ppi> V;

bool comp (point p1, point p2) {
	int c1 = quad(p1), c2 = quad(p2);
	if (c1 != c2) {
		return c1 < c2;
	}
	return cross(p1, p2) > 0;
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d %d %d", &N, &C, &D);
	for (int i = 0, x, y; i < N; i++) {
		scanf("%d %d", &x, &y);
		A[i] = point(x - C, y - D);
		ll g = gcd(llabs(A[i].real()), llabs(A[i].imag()));
		A[i] = point(A[i].real() / g, A[i].imag() / g);
		point gd = gdi(A[i]);
		mpnt[pll(gd.real(), gd.imag())]++;
	}

	ll ans = 0;

	for (auto it : mpnt) {
		ll x = it.se;
		ans += c3(x);
		ans += c2(x) * (N - x);
	}

	//SORT points...
	sort(A, A + N, comp);
	//unique the points now
	for (int i = 0; i < N; i++) {
		if (i == 0 || A[i] != A[i - 1]) {
			V.push_back(ppi(A[i], 1));
		} else {
			V.back().se++;
		}
	}

	//ok we will sweep now
	M = V.size();

	for (auto it : V) {
		cerr << it.first << ' ' << it.second << endl;
	}

	V.insert(V.end(), all(V));

	int cnt = 0;
	ll cans = 0;

	for (int i = 0, j = 1; i < M; i++) {
		//want two strictly in between 180...
		if (i == j) {
			j++;
		}
		for (; j < i + M && cross(V[i].fi, V[j].fi) > 0; j++) {
			// cerr << V[i].fi << ' ' << V[j].fi << endl;
			cans += cnt * ll(V[j].se);
			cnt += V[j].se;
		}
		// cerr << "i = " << i << ", " << "cans = " << cans << " and cnt " << cnt << ", j = " << j << " with point " << V[j].fi << endl;
		ans += cans;
		//delete point i now
		if (j != i + 1) {
			cnt -= V[i + 1].se;
			cans -= V[i + 1].se * ll(cnt);
		}
	}

	printf("%lld\n", c3(N) - ans);
}