#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define ll long long
#define f first
#define s second

typedef pair<int, int> pii;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 300010;

int arr[maxn], st[maxn*5], lt[maxn], rt[maxn], temp[maxn];
vector<int> sol;

int gcd(int a, int b)
{
    if(b==0)
        return a;
    return gcd(b, a%b);
}

void init(int s, int e, int node)
{
    if(s==e){
        st[node] = arr[s];
        return;
    }
    int mid, lc, rc;
    mid = (s+e)>>1;
    lc = 2*node + 1;
    rc = lc+1;
    init(s, mid, lc);
    init(mid+1, e, rc);
    st[node] = gcd(st[lc], st[rc]);
}

int query(int s, int e, int qs, int qe, int node)
{
    if(s>=qs && qe>=e)
        return st[node];
    int mid, lc, rc;
    mid = (s+e)>>1;
    lc = 2*node + 1;
    rc = lc+1;
    if(mid>=qe)
        return query(s, mid, qs, qe, lc);
    else if(qs>mid)
        return query(mid+1, e, qs, qe, rc);
    else{
        int x, y;
        x = query(s, mid, qs, qe, lc);
        y = query(mid+1, e, qs, qe, rc);
        return gcd(x, y);
    }
}

int main()
{
    //freopen("i.txt", "r", stdin);
    //freopen("o.txt", "w", stdout);
    int t, i, j, n, m, pt, x, diff, cnt, maxdiff, lo, mid, hi;
    sd(n);
    for(i=0; i<n; i++)
        sd(arr[i]);
        //arr[i] = 1e6;
    /*init(0, n-1, 0);
    for(i=0; i<n; i++){
        lo = i, hi = n-1;
        pt = i;
        while(lo<hi){
            mid = (lo+hi)>>1;
            if((lo+hi)%2)
                mid++;
            x = query(0, n-1, i, mid, 0);
            if(!(x%arr[i]))
                lo = pt = mid;
            else
                hi = mid-1;
        }
        rt[i] = pt;
    }
    for(i=0; i<n; i++){
        lo = 0, hi = i;
        pt = i;
        while(lo<hi){
            mid = (lo+hi)>>1;
            x = query(0, n-1, mid, i, 0);
            if(!(x%arr[i]))
                hi = pt = mid;
            else
                lo = mid+1;
        }
        lt[i] = pt;
        temp[lt[i]] = max(temp[lt[i]], rt[i]);
    }
    maxdiff = -1;
    for(i=0; i<n; i++){
        //cout << lt[i] << " " << rt[i] << "\n";
        //diff = rt[i]-lt[i];
        diff = temp[i]-i;
        if(diff>maxdiff){
            maxdiff = diff;
            sol.clear();
            sol.pb(i+1);
        }
        else if(diff==maxdiff){
            sol.pb(i+1);
        }
    }*/
    j = 0;
    for(i=0; i<n; i++)
        lt[i] = rt[i] = -1;
    for(i=0; i<n; i++){
        if(j>i)
            continue;
        j = max(j, i);
        while(j<n){
            if(arr[j]%arr[i])
                break;
            j++;
        }
        rt[i] = j-1;
    }
    j = n-1;
    for(i=n-1; i>=0; i--){
        if(j<i)
            continue;
        j = min(j, i);
        while(j>=0){
            if(arr[j]%arr[i])
                break;
            j--;
        }
        lt[i] = j+1;
        temp[j+1] = max(temp[j+1], rt[j+1]);
    }
    maxdiff = -1;
    for(i=0; i<n; i++){
        //if(lt[i]==-1 || rt[i]==-1)
        //  continue;
        //cout << i << " " << lt[i] << " " << rt[i] << " " << temp[i] << "\n";
        //diff = rt[i]-lt[i];
        diff = temp[i]-i;
        if(diff>maxdiff){
            maxdiff = diff;
            sol.clear();
            sol.pb(i+1);
        }
        else if(diff==maxdiff){
            sol.pb(i+1);
        }
    }
    printf("%d %d\n", (int)sol.size(), maxdiff);
    for(i=0; i<sol.size(); i++)
        printf("%d ", sol[i]);
    return 0;   
}
