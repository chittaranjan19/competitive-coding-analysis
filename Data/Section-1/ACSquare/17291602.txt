#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <ctime>
using namespace std;
const int MAX_n = 1000000;
int a[MAX_n];
void input(int n)
{
    for (int i = 0; i < n; ++i)
        a[i] = rand();
}
void bubble_sort(int *a,int *b)
{
    for (int i = 0;  a + i < b; ++i)
        for (int j = 0; a + j + 1 < b - i; ++j)
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j+1]);
            }
}
void insert_sort(int *a,int *b)
{
    for (int i = 0; a+i < b; ++i)
    {
        int tmp = a[i];
        for (int j = 0; j < i; ++j)
        {
            if (tmp < a[j]) {
                for (int k = i ; k > j; --k)
                    a[k] = a[k - 1];
                a[j] = tmp;
                break;
            }
        }
    }
}
void selection_sort(int *a,int *b)
{
    for (int k = 0; k < MAX_n; ++k)
    {
        int t = k;
        for (int i = k + 1; a + i < b; ++i)
            if (a[i] < a[t]) t = i;
        swap(a[k], a[t]);
    }
}
struct heap{
    int data[MAX_n],sz = 0;
    void ini(){sz = 0;}
    
    void push(int x){
        int i = sz++;
        
        while(i > 0)
        {
            int p = (i-1)/2;
            
            if(data[p] <= x)    break;
            
            data[i] = data[p];
            i = p;
        }
        data[i] = x;
    }
    int top(){return data[0];}
    void pop(){
        int x = data[--sz];
        
        int i = 0;
        while( i*2 + 1 < sz){
            int a = i*2 + 1, b = a + 1;
            if(b < sz && data[b] < data[a]) a = b;
            
            if(data[a] >= x)    break;
            
            data[i] = data[a];
            i = a;
        }
        data[i] = x;
    }
};

void heap_sort(int *a, int *b)
{
    heap data;
    data.ini();
    for (int i = 0; a + i < b; ++i)
        data.push(a[i]);
    
    for (int i = 0; a + i < b; ++i){
        a[i] = data.top();
        data.pop();
    }
}

void quick_sort(int *a,int *b)
{
    int p = a[rand()%(b-a)];
    int i = 0, j = b - a - 1;
    while (i < j) {
        while (i < j && a[i] < p)    ++i;
        
        while (i < j && p < a[j])    --j;
        printf("\t%d\n",p);
        swap(a[i], a[j]);
    }

    if (a < a+i)   quick_sort(a, a+i);
    
    if( a+i+1 < b) quick_sort(a+i+1,b);
}
int main()
{
    int n = 1000000;
    int s,t;
//    srand(time(0));
//    
//    
//    input(n);
//    s = clock();
//    bubble_sort(a, a+n);
//    t = clock();
//    printf("bubble sort :%d\n",t-s);
//    

    
    
    input(n);
    s = clock();
    insert_sort(a, a+n);
    t = clock();
    printf("insert sort :%d\n",t-s);
//
//    
//    
//    input(n);
//    s = clock();
//    bubble_sort(a, a+n);
//    t = clock();
//    printf("bubble sort :%d\n",t-s);
//
//    
//    
//    input(n);
//    s = clock();
//    selection_sort(a, a+n);
//    t = clock();
//    printf("selection sort :%d\n",t-s);
//
//    
//    
//    input(n);
//    s = clock();
//    heap_sort(a, a+n);
//    t = clock();
//    printf("heap sort :%d\n",t-s);
//
//    
//    input(n);
//    s = clock();
//    quick_sort(a, a+n);
//    t = clock();
//    printf("quick sort :%d\n",t-s);
//
    
}
