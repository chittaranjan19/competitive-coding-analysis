#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)

typedef unsigned long long ull;
typedef long long ll;

class Fenwick {
private:
	vector<int> arr;
	const int size;
public:
	Fenwick(int n) : arr(n+1), size(n) {
		for (int it = 0; it < arr.size(); ++it)
			arr[it] = 0;
	}
	void add(int v, int k) {
		for (;k <= size; k += lsone(k)) {
			arr[k] += v;
		}
	}
	int get(int k) {
		int total = 0;
		for (;k > 0; k -= lsone(k))  {
			total += arr[k];
		}
		return total;
	}
};

template <typename U> class Comparator {
public:
    bool operator() (const U lhs, const U rhs) {
        // implement
        return true;
    }
};
// end of template

int main() {
    // freopen("370B.in", "r", stdin);

    vi numb[101];
    
    int n;
    scanf("%d", &n);
    vi m(n);
    vi a[n];
    for (int it = 0; it < n; ++it) {
    	scanf("%d", &m[it]);
    	a[it].resize(m[it]);
    	for (int i = 0; i < m[it]; ++i) {
    		scanf("%d", &a[it][i]);
    		numb[a[it][i]].push_back(it);
    	}
    }

    for (int it = 0; it < n; ++it) {
    	vi m_temp = m;
    	for (vi::iterator i = a[it].begin(); i != a[it].end(); ++i) {
    		for (vi::iterator personIdx = numb[*i].begin(); personIdx != numb[*i].end(); personIdx++)
    			m_temp[*personIdx]--;
    	}
    	int count = 0;
    	for (int i = 0; i < n; ++i) {
    		if (m_temp[i] == 0)
    			++count;
    	}
    	if (count > 1)
    		puts("NO");
    	else
    		puts("YES");
    }
    return 0;
}