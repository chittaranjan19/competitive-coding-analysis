#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

bool rev(ii a, ii b) {
	if (a.a > b.a)
		return true;
	else if (a.a == b.a) {
		return a.b < b.b;
	}
	return false;
}

class DisjoinSet {
private:
	vi id;
	vi count;

	int find(int i) {
		if (i != id[i])
			return id[i] = find(id[i]);
		else
			return i;
	}

public:
	DisjoinSet(int n) {
		id.resize(n+1);
		count.resize(n+1, 1);
		for (int it = 0; it < n+1; ++it)
			id[it] = it;
	}

	void join(int i, int j) {
		int parI = find(i), parJ = find(j);
		if (parI != parJ) {
			if (parI < parJ) {
				id[parJ] = parI;
				count[parI] += count[parJ];
			}
			else {
				id[parI] = parJ;
				count[parJ] += count[parI];
			}
		}
	}

	bool isSame(int i, int j) {
		return (find(i) == find(j));
	}

	int getCount(int i) {
		return count[find(i)];
	}
};

int main() {
    // freopen("166A.in", "r", stdin);
    
    int n, k;
    scanf("%d %d", &n, &k);

    vii data(n);
    iterate(d, data) {
    	scanf("%d %d", &(d->a), &(d->b));
    }

    sort(all(data), rev);

    // iterate(d, data)
    // 	printf("%d %d\n", d->a, d->b);

    DisjoinSet dsu(n);

    loop1(it, n-1) {
    	if (data[it] == data[it-1])
    		dsu.join(it, it-1);
    }

    printf("%d\n", dsu.getCount(k-1));
    return 0;
}