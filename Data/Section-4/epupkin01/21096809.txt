#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<ll> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

const int S = 100002;
int n, a[S], d[S];
ll s[S], ans[S];

int main()
{
    cin >> n;
    int i;
    for (i = 1; i <= n; ++i)
    {
        scanf("%d", a + i);
        s[i] = s[i-1] + a[i];
    }
    for (i = 1; i <= n; ++i)
        scanf("%d", d + i);
    
    Set st;
    sIter it1;
    st.insert(0);
    st.insert(n + 1);
    mSet m;
    msIter it2;
    m.insert(s[n]);
    int r, l;
    ll len;
    
    for (i = 1; i < n; ++i)
    {
        it1 = st.upper_bound(d[i]);
        r = *it1, l = *--it1;
        len = s[r - 1] - s[l];
        it2 = m.find(len);
        if (d[i] + 1 == r && d[i] - 1 != l)
            m.insert(len - a[d[i]]);
        else if (d[i] - 1 == l && d[i] + 1 != r)
            m.insert(len - a[d[i]]);
        else
        {
            m.insert(s[r - 1] - s[d[i]]);
            m.insert(s[d[i] - 1] - s[l]);
        }
        st.insert(d[i]);
        m.erase(it2);
        printf("%I64d\n", *--m.end());
    }
    cout << 0 << '\n';
    return 0;
}