//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define dbg(x) cerr << #x << " = " << x << endl

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 100010;

template<class T, class Comp = less<T> >
struct monoqueue {
	deque<pair<T, int> > dq;	//front = extreme. back = pushed in
	Comp comp;
	int left, right;	//careful about index problems...
	bool one_index;
	monoqueue (bool ind1) : dq(), comp(), left(ind1), right(ind1), one_index(ind1) {}
	void push (T t) {
		while (!dq.empty() && comp(t, dq.back().first)) {
			dq.pop_back();
		}
		dq.push_back(make_pair(t, right++));
	}
	template<class Iterator>
	void push (Iterator i, Iterator j) {
		for (; i != j; i++) {
			push(*i);
		}
	}
	void pop() {
		assert(!empty());
		if (dq.front().second == left) {
			dq.pop_front();
		}
		left++;
	}
	T get() {
		assert(!empty());
		return dq.front().first;
	}
	int getind() {
		assert(!empty());
		return dq.front().second;
	}
	int size() {
		return right - left;
	}
	bool empty() {
		return left == right;
	}
	void clear() {
		dq.clear();
		left = right = 0;
	}
};

int N, S, L;
int arr[MAXN];
int upto[MAXN];
monoqueue<int> dqmin(true);
monoqueue<int, greater<int> > dqmax(true);
int dp[MAXN];

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	cin >> N >> S >> L;
	for (int i = 1; i <= N; i++) {
		cin >> arr[i];
	}
	//calculate the previous
	for (int i = 1; i <= N; i++) {
		dqmin.push(arr[i]);
		dqmax.push(arr[i]);
		//[lt, i - L + 1)
		while (!dqmin.empty() && dqmax.get() - dqmin.get() > S) {
			dqmin.pop();
			dqmax.pop();
		}
		int m = dqmin.left;
		// cout << "i = " << i << ", left = " << m << endl;
		if (m >= i - L + 2) {
			m = i - L + 2;
		}
		upto[i] = m;
		// cout << "upto[" << i << "] = " << upto[i] << endl;
	}
	fill_n(dp + 1, N, MAXN);
	dqmin.clear();
	for (int i = L; i <= N; i++) {
		//ok let's do this. do from [a, b] -> [c, d]
		//[upto[i] - 1, i - L]
		dqmin.push(dp[i - L]);
		// cout << "i = " << L << " pushed dp[" << i - L << "] = " << dp[i - L] << endl;
		while (dqmin.left < upto[i] - 1) {
			//you can only do updates up to upto[i] - 1
			//upto[i] - 1 <= i - L
			// cout << "pop\n";
			dqmin.pop();
		}
		if (dqmin.empty() || dqmin.get() == MAXN) {
			dp[i] = MAXN;
		} else {
			dp[i] = dqmin.get() + 1;
		}
		// cout << "dp[" << i << "] = " << dp[i] << endl;
	}
	int ans = dp[N];
	cout << (ans == MAXN ? -1 : ans) << endl;
}