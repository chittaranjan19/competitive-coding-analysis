#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<pair<int,int> > graph[25][25];
int n,m,counter;
bool visited[25][25];

void dfs(int x,int y)
{
    visited[x][y] = true;
    counter++;
    for(int i=0;i<graph[x][y].size();i++)
    {
        int xx = graph[x][y][i].first, yy = graph[x][y][i].second;
        if(!visited[xx][yy])
        {
            dfs(xx, yy);
        }
    }
}

int main()
{
    //freopen("decomp.in","r",stdin);
    //freopen("decomp.out","w",stdout);
    ios_base::sync_with_stdio(0);
    cin >> n >> m;
    string s1,s2;
    cin >> s1 >> s2;
    for(int i=0;i<n;i++)
    {
        if(s1[i] == '<')
        {
            for(int j=m-1;j>0;j--)
            {
                graph[i][j].pb(mp(i, j-1));
            }
        }
        else
        {
            for(int j=0;j<m-1;j++)
            {
                graph[i][j].pb(mp(i, j+1));
            }
        }
    }
    for(int i=0;i<m;i++)
    {
        if(s2[i] == '^')
        {
            for(int j=n-1;j>0;j--)
            {
                graph[j][i].pb(mp(j-1, i));
            }
        }
        else
        {
            for(int j=0;j<n-1;j++)
            {
                graph[j][i].pb(mp(j+1, i));
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            setzero(visited);
            counter = 0;
            dfs(i, j);
            if(counter != n * m)
            {
                cout << "NO";
                return 0;
            }
        }
    }
    cout << "YES";
    return 0;
}
