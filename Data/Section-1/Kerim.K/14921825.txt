#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
/*
ordered_set <int> s;
cout << s.order_of_key(3) << endl;	// the number of elements in s less than 3 (in this case, 0-based index of element 3)
	cout << *s.find_by_order(1) << endl; // 1-st elemt in s (in sorted order, 0-based)
*/
#define clr(x) memset((x),0,sizeof(x))
#define maxn 100007
#define INF 1 << 30
#define CL(a, v) memset(a, v, sizeof a)
#define sz size()
#define UNIQUE(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define all(x)   x.begin(), x.end()
#define mid(a,b) (a+b)/2
#define LLINF 10000000000000000009
#define pb push_back
#define mp make_pair
#define ss second
#define ff first
#define pii pair<int,int>
#define tr(i, c) for(__typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
#define Help_me  ios_base::sync_with_stdio(false);

typedef long long ll;
typedef pair<ll,ll> PII;
//priority_queue< PII , vector<PII>, greater<PII> >q;
int arr[1000009];
vector<int>v;
int dp[100009];
queue<int>q;

int main()
{
	int n,a,b,c,t;
	cin>>n>>a>>b>>c;
	q.push(0);
	while(!q.empty()){
		t=q.front();
		q.pop();
		if(t+a<=n && dp[t+a]<=dp[t]){
			dp[t+a]=dp[t]+1;
			q.push(t+a);
		}
		if(t+b<=n && dp[t+b]<=dp[t]){
			dp[t+b]=dp[t]+1;
			q.push(t+b);
		}
		if(t+c<=n && dp[t+c]<=dp[t]){
			dp[t+c]=dp[t]+1;
			q.push(t+c);
		}		
	}
	cout<<dp[n]<<endl;
	
	
return 0;
}

