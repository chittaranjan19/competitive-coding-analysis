#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

int tim = 0;
vector<int> adj[maxn], nadj[maxn];
set<int> cycle;
int disc[maxn], low[maxn], dist[maxn];

void dfs(int cur, int parent)
{
	low[cur] = disc[cur] = ++tim;
	for(auto it:adj[cur]){
		if(!disc[it])
			dfs(it, cur);
	}
	for(auto it:adj[cur]){
		if(it==parent)
			continue;
		low[cur] = min(low[cur], low[it]);
		if(low[it] < disc[cur]){
			if(cycle.find(it)==cycle.end())
				cycle.insert(it);
			if(cycle.find(cur)==cycle.end())
				cycle.insert(cur);
		}
	}
}

void solve(int cur, int d)
{
	dist[cur] = min(dist[cur], d);
	disc[cur] = 1;
	for(auto it:nadj[cur]){
		if(!disc[it])
			solve(it, d+1);
	}
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int n, i, j, u, v, st;
	sd(n);
	for(i=1; i<=n; i++){
		scanf("%d%d", &u, &v);
		adj[u].pb(v);
		adj[v].pb(u);
		dist[i] = inf;
	}	
	dfs(1, 0);
	st = *(cycle.begin());
	for(i=1; i<=n; i++){
		disc[i] = 0;
		if(cycle.find(i)!=cycle.end()){
			for(auto it:adj[i]){
				if(cycle.find(it)==cycle.end())
					nadj[st].pb(it);
			}
		}
		else{
			for(auto it:adj[i]){
				if(cycle.find(it)==cycle.end())
					nadj[i].pb(it);
				else
					nadj[i].pb(st);
			}
		}
	}
	/*for(i=1; i<=n; i++){
		for(auto it:nadj[i])
			cout << it << " ";
		cout << "\n";
	}*/
	solve(st, 0);
	for(i=1; i<=n; i++){
		if(cycle.find(i)!=cycle.end())
			printf("0 ");
		else
			printf("%d ", dist[i]);
	}
	return 0;
}
