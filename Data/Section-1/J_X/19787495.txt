#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const ll INF = 1LL << 60;
const int maxn = 5000 + 5;

ll dp[2][maxn];
int x[maxn], a[maxn], b[maxn], c[maxn], d[maxn];

int main()
{
    int n, s, e;
    scanf("%d%d%d", &n, &s, &e);
    for(int i = 1; i <= n; ++i) scanf("%d", x + i);
    for(int i = 1; i <= n; ++i) scanf("%d", a + i);
    for(int i = 1; i <= n; ++i) scanf("%d", b + i);
    for(int i = 1; i <= n; ++i) scanf("%d", c + i);
    for(int i = 1; i <= n; ++i) scanf("%d", d + i);
    int now = 0, nxt = 1;
    fill(dp[0], dp[0] + n, INF);
    dp[now][0] = 0;
    int dd = 0;
    for(int i = 1; i <= n; ++i)
    {
        fill(dp[nxt], dp[nxt] + n, INF);
        if(s == i) ++dd;
        else if(e == i) --dd;
        for(int j = i != n; j <= i; ++j)
        {
            if(e == i)
            {
                int q = s < e ? -1 : 1;
                for(int k = -1; k < 2; k += 2)
                {
                    int p = (k + q) >> 1, tmp = ~k ? -x[i] + b[i] : x[i] + a[i];
                    if(j - p >= 0 && j - p < i) dp[nxt][j] = min(dp[nxt][j], dp[now][j - p] + tmp);
                }
            }
            else if(s == i)
            {
                int q = s < e ? 1 : -1;
                for(int k = -1; k < 2; k += 2)
                {
                    int p = (k + q) >> 1, tmp = ~k ? -x[i] + d[i] : x[i] + c[i];
                    if(j - p >= 0 && j - p < i) dp[nxt][j] = min(dp[nxt][j], dp[now][j - p] + tmp);
                }
            }
            else
            {
                for(int k = -1; k < 2; k += 2)
                {
                    int tmp1 = ~k ? -x[i] + b[i] : x[i] + a[i];
                    for(int l = -1; l < 2; l += 2)
                    {
                        int p = (k + l) >> 1, tmp2 = ~l ? -x[i] + d[i] : x[i] + c[i];
                        if(j - p == 1 && ((dd == 1&& l == -1) || (dd == -1 && k == -1))) continue;
                        if(j - p >= 0 && j - p < i) dp[nxt][j] = min(dp[nxt][j], dp[now][j - p] + tmp1 + tmp2);
                    }
                }
            }
        }
        swap(now, nxt);
    }
    printf("%I64d\n", dp[now][0]);
    return 0;
}
