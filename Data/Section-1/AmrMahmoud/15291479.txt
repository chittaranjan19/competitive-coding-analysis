#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

char s[1005][1005];

struct disjointset
{
	vector<int> rank, parent, sz;
	int subtrees;

	disjointset(int n)
	{
		subtrees = n;
		for(int i=0;i<n;i++)
			rank.pb(1),parent.pb(i), sz.pb(1);
	}

	int find_set(int x)
	{
		if(x == parent[x])
			return x;
		return parent[x] = find_set(parent[x]);
	}

	void link(int x,int y)
	{
		if(rank[x] > rank[y])
			swap(x, y);
		parent[x] = y;
		sz[y] += sz[x];
		sz[y] %= 10;
		if(rank[x] == rank[y])
			rank[y]++;
	}

	bool union_sets(int x,int y)
	{
		x = find_set(x),y = find_set(y);
		if(x != y)
		{
			link(x,y);
			subtrees--;
		}
		return x != y;
	}

	bool same_set(int x,int y)
	{
		return find_set(x) == find_set(y);
	}
};

int dx[] = {0, 0, 1, -1};
int dy[] = {-1, 1, 0, 0};

int main()
{
  //freopen("text_editor.txt", "r", stdin);
  //freopen("output.txt", "w", stdout);
  int n, m, x, y;
  cin >> n >> m;
  for(int i=0;i<n;i++)
    scanf("%s", s[i]);
  disjointset tmp(n * m + 5);
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<m;j++)
    {
      if(s[i][j] == '*') continue;
      for(int k=0;k<4;k++)
      {
        if(i + dx[k] < 0 || i + dx[k] == n) continue;
        if(j + dy[k] < 0 || j + dy[k] == m) continue;
        x = i + dx[k];
        y = j + dy[k];
        if(s[x][y] == '.')
          tmp.union_sets(x * m + y, i * m + j);
      }
    }
  }
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<m;j++)
    {
      if(s[i][j] != '*') continue;
      vector<int> v;
      for(int k=0;k<4;k++)
      {
        if(i + dx[k] < 0 || i + dx[k] == n) continue;
        if(j + dy[k] < 0 || j + dy[k] == m) continue;
        x = i + dx[k];
        y = j + dy[k];
        if(s[x][y] == '.')
          v.pb(tmp.find_set(x * m + y));
      }
      int res = 1;
      for(int k=0;k<v.size();k++)
      {
        bool test = true;
        for(int kk=k+1;kk<v.size();kk++)
          if(v[k] == v[kk])
          {
            test = false;
            break;
          }
        if(test) res += tmp.sz[v[k]];
      }
      res %= 10;
      s[i][j] = res + '0';
    }
    printf("%s\n", s[i]);
  }
  return 0;
}
