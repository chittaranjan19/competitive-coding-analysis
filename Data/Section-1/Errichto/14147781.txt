#include<bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int nax = 2e5 + 5;

int t[nax], n, moves;
int dp[nax];

bool dam_rade(int x) {
	RI(i, n - 1) dp[i] = inf;
	int i = -1;
	REP(j, n) {
		while(i+1 < n && t[i+1] + x <= t[j]) ++i;
		mini(dp[j], dp[i] + j - i - 1);
	}
	/*int j = 0;
	REP(i, n) {
		while(j + 1 < n && t[j] <= t[i] + x) {
			++j;
			mini(dp[j], dp[j-1] + 1);
			mini(dp[j], dp[i] + j - i - 1);
		}
		mini(dp[j], dp[i] + j - i - 1);
	}*/
	//puts("a");
	//printf("%d\n", dp[n-1]);
	return (dp[n-1] <= moves);
}

int main() {
	scanf("%d", &n);
	REP(i, n) scanf("%d", &t[i]);
	sort(t, t + n);
	int low = 0, high = 1000 * 1000 * 1000;
	moves = (n - 2) / 2;
	while(low < high) {
		//printf("%d %d\n", low, high);
		int x = (low + high + 1) / 2;
		// czy dam rade uzyskac x?
		if(dam_rade(x)) low = x;
		else high = x - 1;
	}
	printf("%d\n", low);
	return 0;
}
