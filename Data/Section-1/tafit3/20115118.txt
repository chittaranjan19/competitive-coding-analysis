import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import static java.lang.Integer.MAX_VALUE;
import static java.lang.Integer.MIN_VALUE;

public class ProblemB {
    public static final int INF = MAX_VALUE / 3;
    BufferedReader rd;

    ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int a = intarr()[1];
        int[] x = intarr();
        int n = x.length;
        int dist;
        if(n <= 1) {
            dist = 0;
        } else {
            int[] m = new int[]{INF, INF, -INF, -INF};
            for (int c : x) {
                if (c < m[0]) {
                    m[0] = c;
                } else if(c < m[1]) {
                    m[1] = c;
                }
                if (c > m[3]) {
                    m[3] = c;
                } else if(c > m[2]) {
                    m[2] = c;
                }
            }
            if(m[1] == INF) {
                dist = Math.abs(a - m[0]);
            } else {
                dist = Math.min(travel(a,m[0],m[2]), travel(a,m[3],m[1]));
            }
        }
        out(dist);
    }

    private int travel(int from, int inter, int dest) {
        return Math.min(single(from, inter, dest), single(from, dest, inter));
    }

    private int single(int from, int inter, int dest) {
        return Math.abs(from - inter) + Math.abs(inter - dest);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
