
import java.io.*;
import java.util.*;

public class Q5 {

    public static MyScanner in = new MyScanner();
    public static PrintWriter out = in.MyOut();
    public static MyViewer view = new MyViewer();

    static class MyScanner {
        BufferedReader br;
        StringTokenizer st;

        public MyScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] arrayInt(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = in.nextInt();
            }
            return a;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        void close() {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        static PrintWriter MyOut() {
            return new PrintWriter(new BufferedOutputStream(System.out), true);
        }
    }

    static class MyViewer {
        static boolean print = false;

        public void on() {
            print = true;
        }

        public void off() {
            print = false;
        }

        public <T extends List> void list(T a) {
            if (!print) return;
            out.print("List: [");
            for (int i = 0; i < a.size(); i++) {
                out.print(a.get(i) + ", ");
            }
            out.print("'] Len: " + a.size());
        }

        public <T> void array(T[] a) {
            if (!print) return;
            out.print("Array: [");
            for (int i = 0; i < a.length; i++) {
                out.print(a[i] + ", ");
            }
            out.print("'] Len: " + a.length);
        }

        public void array(int[] a) {
            if (!print) return;
            out.print("int Array: [");
            for (int i = 0; i < a.length; i++) {
                out.print(a[i] + ", ");
            }
            out.print("'] Len: " + a.length);
        }

        public void array(long[] a) {
            if (!print) return;
            out.print("long Array: [");
            for (int i = 0; i < a.length; i++) {
                out.print(a[i] + ", ");
            }
            out.print("'] Len: " + a.length);
        }

        public void matrix(int[][] a, int cutoff) {
            if (cutoff == 0)
                cutoff = Integer.MAX_VALUE;
            for (int i = 0; i < a.length; i++) {
                if (i < cutoff) {
                    printMatrixRow(a[i], cutoff);
                } else {
                    out.println("     ...");
                    printMatrixRow(a[a.length - 1], cutoff);
                    break;
                }
            }
        }

        private void printMatrixRow(int[] a, int cutoff) {
            for (int j = 0; j < a.length; j++) {
                if (j < cutoff) {
                    out.printf("%6d  ", a[j]);
                } else {
                    out.printf(" ... %6d", a[a.length - 1]);
                    break;
                }
            }
            out.println();
        }
    }

    static int N = 0;

    public static void main(String[] args) {

        int n = in.nextInt();
        int x = in.nextInt();
        int y = in.nextInt();

        DijkstraPQ dij = new DijkstraPQ(2 * n + 1);

        dij.addUnEdge(0, 1, x);
        for (int i = 1; i < n; i++) {
            dij.addUnEdge(i, i + 1, x);
            dij.addDirEdge(i, 2 * i, y);
        }

        dij.dijkstra_algorithm(0);

//        for (int i = 0; i <= n; i++) {
//            out.println(i + "   " + dij.distTo(i));
//        }

        out.println(dij.distTo(n));
        in.close();
    }

    static public class DijkstraPQ {
        private long distances[];
        private Set<Integer> settled;
        private PriorityQueue<Edge> pq;
        private int V;
        private ArrayList<ArrayList<Edge>> edges;

        public long distTo(int dest) {
            return distances[dest];
        }

        public DijkstraPQ(int number_of_nodes) {
            V = number_of_nodes;
            distances = new long[number_of_nodes + 1];
            settled = new HashSet<Integer>();
            pq = new PriorityQueue<Edge>(number_of_nodes, new Edge());
            edges = new ArrayList<ArrayList<Edge>>(number_of_nodes);
            for (int i = 0; i < V; i++) {
                edges.add(new ArrayList<>());
            }
        }

        public void addUnEdge(int from, int to, int dist) {
            edges.get(from).add(new Edge(to, dist));
            edges.get(to).add(new Edge(from, dist));
        }

        public void addDirEdge(int from, int to, int dist) {
            edges.get(from).add(new Edge(to, dist));
        }

        public void dijkstra_algorithm(int source) {
            // Must set edges in Adjacency List before calling.
            Edge nextEdge;

            for (int i = 1; i <= V; i++) {
                distances[i] = Long.MAX_VALUE;
            }
            pq.add(new Edge(source, 0));
            distances[source] = 0;
            while (!pq.isEmpty()) {
                nextEdge = getEdgeWithMinimumDistanceFromPriorityQueue();
                int nextNode = nextEdge.node;
                settled.add(nextNode);
                evaluateNeighbours(nextNode);
            }
        }

        private Edge getEdgeWithMinimumDistanceFromPriorityQueue() {
            Edge edge = pq.remove();
            return edge;
        }

        private void evaluateNeighbours(int node) {
            long edgeDistance = -1;
            long newDistance = -1;

            for (Edge nextEdge : edges.get(node)) {
                int nextNode = nextEdge.node;
                if (!settled.contains(nextNode)) {
                    edgeDistance = nextEdge.dist;
                    newDistance = distances[node] + edgeDistance;
                    if (newDistance < distances[nextNode]) {
                        distances[nextNode] = newDistance;
                    }
                    pq.add(new Edge(nextNode, distances[nextNode]));
                }
            }
        }

        class Edge implements Comparator<Edge> {
            public int node;
            public long dist;

            public Edge() {
            }

            public Edge(int node, long dist) {
                this.node = node;
                this.dist = dist;
            }

            @Override
            public int compare(Edge e1, Edge e2) {
                if (e1.dist < e2.dist)
                    return -1;
                if (e1.dist > e2.dist)
                    return 1;
                return 0;
            }
        }
    }
}