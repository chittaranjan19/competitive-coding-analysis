#include<stdio.h>
#include<vector>
#include<algorithm>
using namespace std;
#define pp pair<int,int>
struct node
{
    int l,r,val;
} tree[400005];
int gcd(int a,int b)
{
    if(b==0)
        return a;
    return gcd(b,a%b);
}
int n;
void init(int low,int high,int idx)
{
    tree[idx].l=low;
    tree[idx].r=high;
    tree[idx].val=1;
    if(low<high)
    {
        int mid=(low+high)/2;
        init(low,mid,2*idx);
        init(mid+1,high,2*idx+1);
    }
}
void update(int idx,int x,int v)
{
    if(tree[idx].l==x&&tree[idx].r==x)
    {
        tree[idx].val=v;
    }
    else
    {
        int mid=(tree[idx].l+tree[idx].r)/2;
        if(x<=mid)
            update(2*idx,x,v);
        else
            update(2*idx+1,x,v);
        tree[idx].val=gcd(tree[2*idx].val,tree[2*idx+1].val);
    }
}
int query(int idx,int low,int high)
{
    if(low>high)
        return 1;
    if(tree[idx].l>=low&&tree[idx].r<=high)
    {
        return tree[idx].val;
    }
    else
    {
        int mid=(tree[idx].l+tree[idx].r)/2;
        if(high<=mid)
            return query(2*idx,low,high);
        else if(low>mid)
            return query(2*idx+1,low,high);
        else
        {
            return gcd(query(2*idx,low,mid),query(2*idx+1,mid+1,high));
        }
    }
}
vector<pp > G;
int lower(int val,int x)
{
    int low=0,high=n-1,ans=-1;
    //printf("x=%d\n",x);
    while(low<=high)
    {
        int mid=(low+high)/2;
        //printf("low=%d high=%d G=(%d , %d)\n",low,high,G[mid].first,G[mid].second);
        if(G[mid].first<val)
        {
            low=mid+1;
        }
        else if(G[mid].first>val)
        {
            high=mid-1;
        }
        else
        {
            if(G[mid].second>=x)
            {
                //printf("x=%d m=%d\n",x,G[mid].second);
                high=mid-1;
                ans=mid;
            }
            else
            {
                low=mid+1;
            }
        }
    }
    return ans;
}
int upper(int val,int x)
{
    int low=0,high=n-1,ans=-2;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(G[mid].first<val)
        {
            low=mid+1;
        }
        else if(G[mid].first>val)
        {
            high=mid-1;
        }
        else
        {
            if(G[mid].second<=x)
            {
                low=mid+1;
                ans=mid;
            }
            else
            {
                high=mid-1;
            }
        }
    }
    return ans;
}
int main()
{
    int i;
    scanf("%d",&n);
    init(1,n,1);
    for(i=1;i<=n;i++)
    {
        int x;
        scanf("%d",&x);
        update(1,i,x);
        G.push_back(pp(x,i));
    }
    sort(G.begin(),G.end());
    int q;
    scanf("%d",&q);
    while(q--)
    {
        int x,y;
        scanf("%d%d",&x,&y);
        int g=query(1,x,y);
        int f1,f2;
        //printf("x=%d y=%d\n",x,y);
        f1=lower(g,x);
        f2=upper(g,y);
        if(f1<0||f2<0)
        {
            f1=1;
            f2=0;
        }
        //printf("g=%d f1=%d f2=%d\n",g,f1,f2);
        if(f1<=f2)
        {
            printf("%d\n",y+f1-f2-x);
        }
        else
        {
            printf("%d\n",y-x+1);
        }
    }
    return 0;
}