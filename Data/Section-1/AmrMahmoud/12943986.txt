#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

struct point_a
{
  int x, y, ind;

  point_a(int a,int b, int c): x(a), y(b), ind(c) {};

  bool operator < (const point_a &tmp) const
  {
    if(tmp.x == x) return y < tmp.y;
    return x < tmp.x;
  }
};

struct point_b
{
  int x, y, ind;

  point_b(int a,int b, int c): x(a), y(b), ind(c) {};

  bool operator < (const point_b &tmp) const
  {
    if(tmp.y == y) return x < tmp.x;
    return y < tmp.y;
  }
};

vector<int> sol;
int n;
pair<int, int> arr[1000005];
set<point_a> s1;

bool solve()
{
  s1.clear();
  LL dx = 0, dy = 0;
  for(int i=0;i<n;i++)
  {
    s1.insert(point_a(arr[i].f, arr[i].s, i));
    dx += arr[i].f;
    dy += arr[i].s;
  }
  dx /= n;
  dy /= n;
  set<point_a>::iterator it1;
  int ind;
  for(int i=0;i<n;i++)
  {
    it1 = s1.lower_bound(point_a(dx, dy, 0));
    if(it1 == s1.end())
      it1--;
    ind = (*it1).ind;
    dx = (*it1).x;
    dy = (*it1).y;
    s1.erase(it1);
    sol.pb(ind);
  }
  return (true);
}

int main()
{
  srand(time(0));
  scanf("%d", &n);
  for(int i=0;i<n;i++)
    scanf("%d %d", &arr[i].f, &arr[i].s);
  bool test = false;
 // for(int i=-1;i<=1 && !test;i+=2)
   // for(int j=-1;j<=1 && !test;j+=2)
  test = solve();
 // assert(test);
  for(int i=0;i<n;i++)
    printf("%d ", sol[i] + 1);
  return 0;
}
