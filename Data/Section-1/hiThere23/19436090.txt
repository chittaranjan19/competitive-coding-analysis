#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int q, n, rig = 1, r = 0, con[mn], top = 0;
int lQue[mn], nQue[mn], check[mn];
string s;
vector<long long> way[mn];
long long poQ[mn], poQ1[mn], a[mn + 1], divQ[mn];

void setup()
{
    cin >> q >> s;
    n = s.size();
    con[n] = 1;
    check[1] = n;
    int t;
    FOR(i, 1, q)
    {
        cin >> t;
        if (t == 1)
        {
            cin >> s;
            n = s.size();
            if (!con[n])
                con[n] = ++ rig, check[rig] = n;
        }
        else
        {
            cin >> nQue[++ r];
            lQue[r] = n;
            top = max(top, nQue[r]);
        }
    }
}

long long power(long long a, long long b)
{
    long long re = 1;
    while(b)
    {
        if (b & 1)
            re = (re * a) % maxC;
        b >>= 1;
        a = (a * a) % maxC;
    }
    return re;
}

void build(int x)
{
    long long ck = 1;
    FOR(k, x, top + 1)
    {
        a[k] = (ck * poQ1[k - x]) % maxC;
        a[k] = (a[k] * divQ[k]) % maxC;
        ck = (ck * k / (k - (x - 1))) % maxC;
    }
    FORD(i, top + 1, x)
        way[i].pb(a[i] = (a[i] + a[i + 1]) % maxC);
    FORD(i, x - 1, 1)
        way[i].pb(0);
}

void xuly()
{
    poQ[0] = poQ1[0] = 1;
    FOR(i, 1, top + 1)
    {
        poQ[i] = (poQ[i - 1] * 26) % maxC;
        poQ1[i] = (poQ1[i - 1] * 25) % maxC;
    }
    divQ[top + 1] = power(26, maxC - 1 - (top + 1));
    FORD(i, top, 1)
        divQ[i] = (divQ[i + 1] * 26) % maxC;
    FOR(i, 1, rig)
        build(check[i]);
    FOR(i, 1, r)
    {
        if (nQue[i] < lQue[i])
        {
            cout << "0\n";
            continue;
        }
        int c = con[lQue[i]];
        long long ans = (way[lQue[i]][c - 1] - way[nQue[i] + 1][c - 1]) % maxC;
        ans = (ans + maxC) % maxC;
        ans = (ans * poQ[nQue[i]]) % maxC;
        cout << ans << '\n';
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
