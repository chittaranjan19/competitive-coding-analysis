#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define PI acos(-1.0)
#define LL long long

using namespace std;

vector<vector<int> > graph(105);
int cost[105][105];

int main()
{
    int n,x,y,z,mini;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        scanf("%d%d%d",&x,&y,&z);
        graph[x].push_back(y);
        graph[y].push_back(-x);
        cost[x][y]=z;
    }
    int temp,pre=1,counter=0;
    if(graph[1][1] < 0)
    {
        temp = -graph[1][1];
        counter+=cost[temp][1];
    }
    else temp = graph[1][1];
    while(temp!=1)
    {
        if(abs(graph[temp][0]) == pre)
        {
            pre=temp;
            if(graph[temp][1] < 0)
            {
                temp = -graph[temp][1];
                counter+=cost[temp][pre];
            }
            else temp = graph[temp][1];
        }
        else
        {
            pre = temp;
            if(graph[temp][0] < 0)
            {
                temp = -graph[temp][0];
                counter+=cost[temp][pre];
            }
            else temp = graph[temp][0];
        }
    }
    mini = counter,counter=0,pre=1;
    if(graph[1][0] < 0)
    {
        temp = -graph[1][0];
        counter+=cost[temp][1];
    }
    else temp = graph[1][0];
    while(temp!=1)
    {
        if(abs(graph[temp][0]) == pre)
        {
            pre=temp;
            if(graph[temp][1] < 0)
            {
                temp = -graph[temp][1];
                counter+=cost[temp][pre];
            }
            else temp = graph[temp][1];
        }
        else
        {
            pre = temp;
            if(graph[temp][0] < 0)
            {
                temp = -graph[temp][0];
                counter+=cost[temp][pre];
            }
            else temp = graph[temp][0];
        }
    }
    mini=min(mini,counter);
    printf("%d",mini);
    return 0;
}