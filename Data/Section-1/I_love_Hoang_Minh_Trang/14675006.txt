using namespace std;
#include<bits/stdc++.h>
#define FOR(i, a, b) for (int i = a; i < b; i++)
#define FORE(i, a, b) for (int i = a; i <= b; i++)
#define FORD(i, a, b) for (int i = a; i >= b; i--)
const int MAXN = 401;
const int INF = 1e9 + 7;
int m, n;
int a[MAXN][MAXN];
int b[MAXN * MAXN + 1];
int top;
int D[MAXN][MAXN], R[MAXN][MAXN];
map<int, bool> M;
int dd[10001];

void full()
{
    int ans = 0;
    FORE(x1, 1, m)
    FORE(x2, x1, m){
        memset(dd, 0, sizeof(dd));
        int i = 1;
        int last = 0;
        while (i <= n){
            if (last < i - 1){
                FORE(k, x1, x2) FORE(j, last, i - 1) dd[a[k][j]]--;
                last = i - 1;
            }
            int j = last;
            //if (i == 3 && x1 == 4 && x2 == 8) cout<<last<<"??"<<dd[a[x1][last]]<<endl;
            while (j < n){
                bool ok = 1;
                FORE(k, x1, x2) if (dd[a[k][j + 1]]){
                    ok = 0;
                    break;
                } else dd[a[k][j + 1]]++;
                if (ok){
                    //FORE(k, x1, x2) dd[a[k][j + 1]]++;
                    j++;
                } else{
                    FORE(k, x1, x2) dd[a[k][j + 1]]--;
                    break;
                }
            }
            ans = max(ans, (x2 - x1 + 1) * (j - i + 1));
            //if (i == 2 && x1 == 4 && x2 == 8) cout<<last<<"clgt"<<j<<" "<<dd[1]<<endl;
            //if (ans == 26) cout<<x1<<" "<<x2<<" "<<i<<" "<<j<<endl;
            FORE(k, x1, x2) dd[a[k][i]]--;
            last = j;
            i++;
        }
    }
    cout<<ans << endl;
}
int main()
{
    ios::sync_with_stdio(false); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("BOARD.inp", "r", stdin);
    freopen("BOARD.out", "w", stdout);
    #endif // ONLINE_JUDGE
    //MIKELHPDATKE;
    cin >> m >> n;
    FORE(i, 1, m) FORE(j, 1, n) cin >> a[i][j];
    FORE(i, 1, m) FORE(j, 1, n) b[++top] = a[i][j];
    sort(b + 1, b + top + 1);
    FORE(i, 1, m) FORE(j, 1, n) a[i][j] = lower_bound(b + 1, b + top + 1, a[i][j]) - b;
    //if (n <= 20) sub2();
    //else
        full();
    //cout << ans << endl;
    //sub2();
    return 0;
}
