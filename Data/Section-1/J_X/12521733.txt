#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

const int maxn = 500000 + 1;

vector<int> v[maxn];
vector<vector<bool> > sum[26];
int rid[maxn], son[maxn][2], tot, mh;
//struct edge
//{
//    int to, next;
//    edge(int to = 0, int next = 0) : to(to), next(next) {}
//} E[maxn];
vector<int> E[maxn];
//int head[maxn];
char s[maxn + 1];

//void addedge(int u, int v)
//{
//    E[cnt] = edge(v, head[u]);
//    head[u] = cnt++;
//}

void dfs(int u, int h)
{
    son[u][0] = ++tot;
    rid[tot] = u;
    mh = max(mh, h);
    v[h].push_back(tot);
//    for(int i = head[u]; ~i; i = E[i].next)
    for(int i = 0; i < E[u].size(); ++i)
    {
//        int v = E[i].to;
        dfs(E[u][i], h + 1);
    }
    son[u][1] = tot;
}

bool check(int h, int x, int y)
{
    bool flag = true;
    for(int i = 0; i < 26; ++i)
    {
        bool temp;
        if(!x)
        {
            temp = sum[i][h][y];
        }
        else
        {
            temp = sum[i][h][y] ^ sum[i][h][x - 1];
        }
        if(temp)
        {
            if(!flag) return false;
            flag = false;
        }
    }
    return true;
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    tot = mh = 0;
//    memset(head, -1, sizeof(head));
    for(int i = 2; i <= n; ++i)
    {
        int u;
        scanf("%d", &u);
//        addedge(u, i);
        E[u].push_back(i);
    }
    scanf("%s", s + 1);
    dfs(1, 1);
    for(int j = 0; j < 26; ++j)
    {
        sum[j].resize(mh + 1);
        for(int i = 1; i <= mh; ++i)
        {
            sum[j][i].resize(v[i].size());
            sum[j][i][0] = s[rid[v[i][0]]] - 'a' == j;
            for(int k = 1; k < v[i].size(); ++k)
            {
                sum[j][i][k] = s[rid[v[i][k]]] - 'a' == j ? !sum[j][i][k - 1] : sum[j][i][k - 1];
            }
        }
    }
//    for(int i = 1; i <= n; ++i)
//    {
//        cout << i << ' ' << id[i] << endl;
//    }
//    for(int i = 0; i < v[3].size(); ++i)
//    {
////        cout << v[3][i] << ' ';
//        for(int j = 0; j < 26; ++j)
//        {
//            for(int k = 0; k < sum[i][j].size(); ++k)
//        }
//    }
//cout << son[3][0] << ' ' << son[3][1] << endl;
//        cout << sum[3][3][0] << ' ' << sum[3][3][1] << endl;
//    cout << endl;
    while(m--)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        if(y > mh)
        {
            puts("Yes");
            continue;
        }
//        int z = id[x];
        int k = lower_bound(v[y].begin(), v[y].end(), son[x][0]) - v[y].begin();
        int l = upper_bound(v[y].begin(), v[y].end(), son[x][1]) - v[y].begin();
//        cout << k << ' ' << l << endl;
        if(k == l)
        {
            puts("Yes");
            continue;
        }
        if(check(y, k, l - 1))
        {
            puts("Yes");
        }
        else
        {
            puts("No");
        }
    }
    return 0;
}
