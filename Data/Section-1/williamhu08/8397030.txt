//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define debug(...) fprintf(stderr, __VA_ARGS__)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1 << 17;

int N, M;
int L[MAXN], R[MAXN], Q[MAXN];
int psum[30][MAXN];
int arr[MAXN];
int pand[17][MAXN];

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces482B.in", "r", stdin);
#endif
	scanf("%d %d", &N, &M);
	for (int i = 1; i <= M; i++) {
		scanf("%d %d %d", &L[i], &R[i], &Q[i]);
		R[i]++;
		for (int j = 0; j < 30; j++) {
			if (Q[i] & (1 << j)) {
				psum[j][L[i]]++;
				psum[j][R[i]]--;
			}
		}
	}
	for (int j = 0; j < 30; j++) {
		int sum = 0;
		for (int i = 1; i <= N; i++) {
			if ((sum += psum[j][i])) {
				//then there exists SOME one in there
				arr[i] |= (1 << j);
			}
		}
	}
	for (int i = 1; i <= N; i++) {
		pand[0][i] = arr[i];
		// printf("pand[0][%d] = %d\n", i, arr[i]);
		// printf("arr[%d] = %d\n", i, arr[i]);
	}
	for (int i = 1; i < 17; i++) {
		for (int j = 1; j + (1 << i) <= N + 1; j++) {
			pand[i][j] = pand[i - 1][j] & pand[i - 1][j + (1 << (i - 1))];
		}
	}
	// printf("pand[0][3] = %d\n", pand[0][3]);
	for (int i = 1; i <= M; i++) {
		int a = L[i], b = R[i];
		// printf("l = %d, r = %d\n", a, b);
		int cur = INT_MAX;
		for (int j = 16; j >= 0; j--) {
			int nxt = a + (1 << j);
			if (nxt <= b) {
				cur &= pand[j][a];
				// printf("%d (+ 2^%d) has pand %d\n", a, j, pand[j][a]);
				a = nxt;
			}
		}
		if (Q[i] != cur) {
			// for (int i = 1; i <= N; i++) {
				// printf("%d ", arr[i]);
			// }
			// puts("");
			// printf("%d to %d is not good because of %d, expected %d\n", L[i], R[i], cur, Q[i]);
			puts("NO");
			return 0;
		}
	}
	puts("YES");
	for (int i = 1; i <= N; i++) {
		printf("%d ", arr[i]);
	}
}