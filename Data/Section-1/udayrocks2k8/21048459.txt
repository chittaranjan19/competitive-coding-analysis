#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
using namespace std;

#define INF (1 << 30)
#define INFL (1LL << 60)
#define pb push_back
#define loop_it(it, elements) for(auto it = elements.begin(); it != elements.end(); it++)
#define loop(i, l, r) for(auto i = l; i < r; i++)
#define loop_r(i, r, l) for(auto i = r; i >= l; i--)
#define loop_k(i, l, r, k) for(auto i = l; i < r; i+=k)
#define test_cases int test_cases;scanf("%d", &test_cases);for (int tc_0 = 1; tc_0 <= test_cases; tc_0++)

typedef long long i64;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<i64> vi64;
typedef vector<vi> vvi;
typedef vector<vi64> vvi64;
typedef pair<int, int> pii;
typedef pair<i64, int> pi64i;
typedef set<pii> spii;
typedef vector<pii> vpii;
typedef map<pii, vi> mpiivi;
typedef map<int, int> mii;
typedef map<int, vi> mivi;

vi64 nums;

struct LessThanByAbs {
	bool operator()(const i64& lhs, const i64& rhs) {
		return abs(nums[lhs]) >= abs(nums[rhs]);
	}
};
priority_queue<i64, vi64, LessThanByAbs> q;

int signum(i64 num) {
	return num < 0 ? -1 : 1;
}

int main() {
	i64 n, k, x;
	cin >> n >> k >> x;
	nums.resize(n);
	int f = 1;
	loop(i, 0, n) {
		cin >> nums[i];
		q.push(i);
		f *= signum(nums[i]); 
	}
	while (k--) {
		int idx = q.top();
		q.pop();
		int old_signum = signum(nums[idx]);
		nums[idx] += -f * signum(nums[idx]) * x;
		f *= (old_signum * signum(nums[idx]));
		q.push(idx);
	}
	loop(i, 0, nums.size()) cout << nums[i] << " ";
	cout << endl;
	return 0;
}