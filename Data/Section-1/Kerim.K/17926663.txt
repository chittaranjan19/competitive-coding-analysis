#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define lg(x) ceil(log2(x))
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace __gnu_pbds;
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> tes;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
struct lov{
	int le,ri,val,ind;
}MO[MAXN];
int BLOK,ans[MAXN],arr[MAXN];
tes s;
bool cmp(lov x,lov y){
	if(x.le/BLOK!=y.le/BLOK)
		return (x.le<y.le);
	return (x.ri<y.ri);	
}
int add(int x){
	s.insert(x);
}
int rem(int x){
	s.erase(x);
}
int main(){
	int n,q;
	scanf("%d%d",&n,&q);
	BLOK=sqrt(n);
	for(int i=1;i<=n;i++)
		scanf("%d",arr+i);
	for(int i=1;i<=q;i++)
		scanf("%d%d%d",&MO[i].le,&MO[i].ri,&MO[i].val),MO[i].ind=i;
	sort(MO+1,MO+q+1,cmp);
	int l=1,r=1;
	for(int i=1;i<=q;i++){
		int L=MO[i].le;int R=MO[i].ri;int K=MO[i].val;
		while(l<L)
			rem(arr[l++]);
		while(r<=R)
			add(arr[r++]);
		while(l>L)
			rem(arr[--l]);
		while(r>R+1)
			add(arr[--r]);	
		if(s.size()<K)
			ans[MO[i].ind]=-1;
		else				
			ans[MO[i].ind]=*s.find_by_order(K-1);
	}
	for(int i=1;i<=q;i++)
		printf("%d\n",ans[i]);	
	return 0;
}  