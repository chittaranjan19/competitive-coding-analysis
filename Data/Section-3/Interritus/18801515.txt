/*input
6 5
1 6
2 6
3 6
4 6
5 6
*/
#include <bits/stdc++.h>
using namespace std;
#define sd(x) scanf("%d",&x);
#define slld(x) scanf("%lld",&x);
#define ss(x) scanf("%s",x);
#define sc(x) scanf("%c",&x);
#define LL long long
#define LD long double
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define bit(x,i) (x&(1<<i))  //select the bit of position i of x
#define lowbit(x) ((x)&((x)^((x)-1))) //get the lowest bit of x
#define pc1(x) cout<<x<<" ";
#define pc2(x,y) cout<<x<<" "<<y<<" "<<endl;
#define pc3(x,y,z) cout<<x<<" "<<y<<" "<<z<<" "<<endl;
#define pc4(w,x,y,z) cout<<w<<" "<<x<<" "<<y<<" "<<z<<" "<<endl;
#define pce(x) cout<<x<<endl;
#define ps0() cout<<endl;
#define ps1(x) cout<<#x<<" ";
#define ps2(x,y) cout<<#x<<" "<<y<<" "<<endl;
#define ps3(x,y,z) cout<<#x<<" "<<y<<" "<<z<<" "<<endl;
#define ps4(w,x,y,z) cout<<#w<<" "<<x<<" "#y<<" "<<z<<" "<<endl;
#define pse(x) cout<<#x<<endl;
#define GET_MACRO(_0, _1, _2, _3, _4, NAME, ...) NAME
#define GET_MACRO1(_1, _2, _3, _4, NAME, ...) NAME
#define ps(...) \
		do{if (DEBUG) GET_MACRO(_0, ##__VA_ARGS__, ps4, ps3, ps2, ps1, ps0)(__VA_ARGS__)} while(0);
#define pc(...) \
 		do{if (DEBUG) GET_MACRO1(__VA_ARGS__, pc4, pc3, pc2, pc1)(__VA_ARGS__)} while(0);
#define SSTR( x ) static_cast< std::ostringstream & >( \
        ( std::ostringstream() << std::dec << x ) ).str()
#define READ(filename)  freopen(filename, "r", stdin);
#define WRITE(filename)  freopen(filename, "w", stdout);

typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI; 

#define MOD 1000000007
#define DEBUG 0




int main()
{
	int E,V,a,b;
	sd(V)
	sd(E) 
	VI g[V+1];
	for(int i=0;i<E;i++)
	{
		sd(a)
		sd(b)
		g[a].PB(b);
		g[b].PB(a);
	}
	for(int i=1;i<=V;i++)
	{
		pc(g[i].size())
	}
	ps()
	int colorArr[V+1];
    for (int i = 1; i <= V; ++i)
        colorArr[i] = -1;
	for(int j=1;j<=V;j++)
	{
		if(g[j].size()!=0 && colorArr[j]==-1)
		{
			int src=j;
		    colorArr[src] = 1;
		    queue <int> q;
		    q.push(src);
		    while (!q.empty())
		    {
		    	int u=q.front();
		    	q.pop();
		    	for(int i=0;i<g[u].size();i++)
		    	{
		    		if(colorArr[g[u][i]]==-1)
		    		{
		    			colorArr[g[u][i]]=1-colorArr[u];
		    			q.push(g[u][i]);
		    		}
		    		else if(colorArr[g[u][i]]==colorArr[u])
		    		{
		    			pc(g[u][i],u,colorArr[u])
		    			ps()
		    			printf("-1");
		    			return 0;
		    		}
		    	}
		    }
		}
	}
	
    VI p;
    VI q;
    for(int i=1;i<=V;i++)
    {
    	if(colorArr[i]==1)
    		p.PB(i);
    	if(colorArr[i]==0)
    		q.PB(i);
    }
    printf("%d\n",p.size());
    for(int i=0;i<p.size();i++)
    {
    	printf("%d ",p[i]);
    }
    printf("\n");
    printf("%d\n",q.size());
    for(int i=0;i<q.size();i++)
    {
    	printf("%d ",q[i]);
    }
}
