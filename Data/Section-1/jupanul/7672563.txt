#include <algorithm>
#include <fstream>
#include <iostream>
#include <vector>
using namespace std;

long long minim = 1LL << 60;
vector<char> semn(3);

void backtrack(const vector<long long> &a, int poz) {
    if (static_cast<int>(a.size()) == 1) {
        minim = min(minim, a[0]);
    } else {
        for (int i = 0; i < static_cast<int>(a.size()); ++ i) {
            for (int j = i + 1; j < static_cast<int>(a.size()); ++ j) {
                vector<long long> new_a;
                if (semn[poz] == '+') {
                    new_a.push_back(a[i] + a[j]);
                    for (int k = 0; k < static_cast<int>(a.size()); ++ k) {
                        if (k != i && k != j) {
                            new_a.push_back(a[k]);
                        }
                    }
                    backtrack(new_a, poz + 1);
                } else {
                    new_a.push_back(a[i] * a[j]);
                    for (int k = 0; k < static_cast<int>(a.size()); ++ k) {
                        if (k != i && k != j) {
                            new_a.push_back(a[k]);
                        }
                    }
                    backtrack(new_a, poz + 1);
                }
            }
        }

    }
}

int main() {
    ///ifstream cin("f.in");
    vector<long long> a(4);
    cin >> a[0] >> a[1] >> a[2] >> a[3];
    for (int i = 0; i < 3; ++ i) {
        cin >> semn[i];
    }
    backtrack(a, 0);
    cout << minim;
    return 0;
}
