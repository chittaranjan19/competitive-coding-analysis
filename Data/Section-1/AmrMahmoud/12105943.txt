#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int sol[100005];

vector<int> primes, f;

void get_primes(int MAX)
{
  bool visited[MAX + 10];
  setzero(visited);
  for(LL x = 2; x <= MAX; x++)
    if(!visited[x])
    {
      primes.push_back(x);
      for(LL j = x*x; j <= MAX; j += x)
        visited[j] = true;
    }
}

int main()
{
  //ios_base::sync_with_stdio(0);
  //freopen("test0.txt", "r", stdin);
  //freopen("lca.out", "w", stdout);
  int n, res = 0, x;
  scanf("%d", &n);
  get_primes(320);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &x);
    f.clear();
    int tmp = 1;
    for(int j=0;j<primes.size() && primes[j] * primes[j] <= x;j++)
    {
      if(x % primes[j] == 0)
      {
        f.pb(primes[j]);
        tmp = max(tmp, sol[primes[j]] + 1);
      }
      while(x % primes[j] == 0)
        x /= primes[j];
    }
    if(x > 1)
    {
      f.pb(x);
      tmp = max(tmp, sol[x] + 1);
    }
    res = max(res, tmp);
    for(int j=0;j<f.size();j++)
      sol[f[j]] = max(sol[f[j]], tmp);
  }
  printf("%d", res);
  return 0;
}