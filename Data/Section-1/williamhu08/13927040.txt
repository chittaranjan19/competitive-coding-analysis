#include <bits/stdc++.h>

using namespace std;

typedef complex<double> point;

void read (point &p) {
	static double x, y;
	scanf("%lf %lf", &x, &y);
	p = point(x, y);
}

double solve (double a, double b, double c) {
	//ax^2 + bx + c
	return (-b + sqrt(b * b - 4 * a * c)) / (2 * a);
}

point P;	//destination
double M, T;	//M = max speed, T = time
point V1, V2;
double K;

double sqr (double x) {
	return x * x;
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}

	//input
	point strt;
	read(strt);
	read(P);
	if (strt == P) {
		puts("0");
		return 0;
	}
	P -= strt;
	scanf("%lf %lf", &M, &T);
	read(V1);
	read(V2);

	double a = norm(P), b = -2 * (V1.real() * P.real() + V1.imag() * P.imag()), c = norm(V1) - M * M;
	double k = 1 / (solve(a, b, c));	//k is shortest amount of time
	if (k <= T) {
		printf("%.20lf\n", k);
		return 0;
	} else {
		a = norm(V2) - M * M;
		point pt = P - T * V1;
		b = -2 * (V2.real() * pt.real() + V2.imag() * pt.imag() + M * M * T);
		c = norm(pt) - sqr(M * T);
		printf("%.20lf\n", T + solve(-a, -b, -c));
	}
}