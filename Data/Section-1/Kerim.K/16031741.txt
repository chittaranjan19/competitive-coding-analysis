#include <bits/stdc++.h>
#define MAXN 100009
#define INF 1000000009
#define ff first
#define ss second
using namespace std;
int a, b;
int x[MAXN], y[MAXN];
vector <int> v[MAXN], v1, v2[MAXN], v3;
queue <pair <int, int> > q, q1;
int arr[MAXN], vis[MAXN];
int arr1[MAXN], arr2[MAXN];
void path()
{
	while(!q.empty())
	{
		int x = q.front().ff;
		int y = q.front().ss;
		q.pop();
		for(int i = 0; i < v[x].size(); i++)
		{
			int to = v[x][i];
			if(y + 1 < arr[to])
			{
				arr1[to] = x, arr[to] = y + 1;
				q.push(make_pair(to, y + 1));
			}	 
		}
	}	
}
void path1()
{
	while(!q1.empty())
	{
		int x = q1.front().ff;
		int y = q1.front().ss;
		q1.pop();
		for(int i = 0; i < v2[x].size(); i++)
		{
			int to = v2[x][i];
			if(y + 1 < arr2[to])
			{
				arr1[to] = x, arr2[to] = y + 1;
				q1.push(make_pair(to, y + 1));
			}
		}
	}
}
int main()
{
	cin >> a >> b;
	for(int i = 2; i <= MAXN; i++)
		arr[i] = INF, arr2[i] = INF;
	q.push(make_pair(1, 0));
	q1.push(make_pair(1, 0));	
	for(int i = 1; i <= b; i++)
	{
		cin >> x[i] >> y[i];
		v[x[i]].push_back(y[i]);
		v[y[i]].push_back(x[i]);
	}
	path();
	int z = a;
	v1.push_back(z);
	while(z > 1)
	{
		z = arr1[z];
		v1.push_back(z);
	}
	reverse(v1.begin(), v1.end());
	for(int i = 1; i <= a; i++)
		arr1[i] = 0;	
	for(int i = 1; i <= a; i++)
	{
		for(int j = 1; j <= b; j++)
		{
			if(x[j] == i)
				vis[y[j]] = 1;
			if(y[j] == i)
				vis[x[j]] = 1;	
		}
		for(int j = 1; j <= a; j++)
		{
			if(vis[j] == 0 and j != i)
				v2[i].push_back(j), v2[j].push_back(i);
			vis[j] = 0;
		}		
	}		
	path1();
	if(arr2[a] == INF or arr[a] == INF)
	{
		cout << -1 << endl;
		return 0;
	}
	z = a;
	v3.push_back(z);
	while(z > 1)
	{
		z = arr1[z];
		v3.push_back(z);
	}
	reverse(v3.begin(), v3.end());
	int xy = v3.size() - 1;
	int yx = v1.size() - 1;
	cout << max(xy, yx) << endl;
return 0;
}

