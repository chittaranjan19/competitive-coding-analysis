#include <iostream>
using namespace std;
int n, m;
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
int r1, c1, r2, c2;
char map[505][505];
inline bool ok(int x, int y)
{   return (x >= 0 && x < n && y >= 0 && y < m);
}

struct pt{
    int x, y;
};

int main()
{    cin >> n>> m;
    for (int i = 0; i < n; i++)
        scanf("%s", map[i]);
    cin >> r1 >> c1 >> r2 >> c2;
    r1--; c1--; r2--; c2--;
    int cnt1 = 0, cnt2 = 0;
    for (int i = 0; i < 4; i++)
    {   int nx = r1+dx[i], ny = c1+dy[i];
        if (ok(nx, ny)) cnt1 += (map[nx][ny] == 'X')? 0:1;
        nx = r2+dx[i]; ny = c2 + dy[i];
        if (ok(nx, ny)) cnt2 += (map[nx][ny] == 'X')? 0:1;
    }
    if (cnt1 == 0 || (map[r2][c2] != 'X' && cnt2 < 2)){ cout << "NO" << endl; return 0;}
    pt q[500*500 + 25];
    int h = 0, t = 0;
    q[t++] = (pt){r1, c1};
    while (h < t)
    {   pt head = q[h++];
        for (int i = 0; i < 4; i++)
        {   int nx = head.x + dx[i], ny = head.y + dy[i];
            if (nx == r2 && ny == c2) {
                cout << "YES" << endl;
                return 0;
            }
            if (ok(nx, ny) && map[nx][ny] != 'X')
            {   map[nx][ny] = 'X';
                q[t++] = (pt){nx, ny};
            }
        }
    }
    cout << "NO" << endl;
    return 0;
}
