#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>

using namespace std;

const int maxn = 1 << 21;
const double PI = acos(-1.0);
const double eps = 1e-5;

struct Complex
{
    double x, y;

    Complex(double x = 0, double y = 0) : x(x), y(y) {}

    Complex operator + (const Complex &b) const
    {
        return Complex(x + b.x, y + b.y);
    }

    Complex operator - (const Complex &b) const
    {
        return Complex(x - b.x, y - b.y);
    }

    Complex operator * (const Complex &b) const
    {
        return Complex(x * b.x - y * b.y, x * b.y + y * b.x);
    }
} m1[maxn], m2[maxn];
bool e[maxn], x[maxn], y[maxn];

void change(Complex *y, int len)
{
    for(int i = 1, j = len / 2; i < len - 1; ++i)
    {
        if(i < j) swap(y[i], y[j]);
        int k = len / 2;
        while(j >= k)
        {
            j -= k;
            k /= 2;
        }
        if(j < k) j += k;
    }
}

void fft(Complex *y, int len, int on)
{
    change(y, len);
    for(int h = 2; h <= len; h <<= 1)
    {
        Complex wn(cos(-on * 2 * PI / h), sin(-on * 2 * PI / h));
        for(int j = 0; j < len; j += h)
        {
            Complex w(1, 0);
            for(int k = j; k < j + h / 2; ++k)
            {
                Complex u = y[k], t = w * y[k + h / 2];
                y[k] = u + t, y[k + h / 2] = u - t;
                w = w * wn;
            }
        }
    }
    if(on == -1)
    {
        for(int i = 0; i < len; ++i) y[i].x /= len;
    }
}

void mul(bool *a, bool *b, int len)
{
    for(int i = 0; i < len; ++i)
    {
        m1[i] = Complex(a[i], 0);
        m2[i] = Complex(b[i], 0);
    }
    fft(m1, len, 1);
    fft(m2, len, 1);
    for(int i = 0; i < len; ++i) m1[i] = m1[i] * m2[i];
    fft(m1, len, -1);
    for(int i = 0; i < len; ++i) a[i] = m1[i].x > eps;
}

void solve(int k, int len)
{
//    cout << k << endl;
    if(!k)
    {
        x[0] = true;
        return;
    }
    solve(k >> 1, len);
    if(k & 1)
    {
        for(int i = 0; i < len; ++i) y[i] = x[i];
        mul(y, e, len);
        mul(x, y, len);
    }
    else mul(x, x, len);
//    cout << k << endl;
}

int main()
{
    int n, k, len = 1, mx = 0;;
    scanf("%d%d", &n, &k);
    for(int i = 0; i < n; ++i)
    {
        int u;
        scanf("%d", &u);
//        int u = i + 1;
        e[u] = true;
        mx = max(mx, u);
    }
    mx *= k;
    while(len <= mx) len <<= 1;
//    cout << len << endl;
    solve(k, len);
    for(int i = 1; i <= mx; ++i)
    {
        if(x[i]) printf("%d ", i);
    }
    puts("");
    return 0;
}
