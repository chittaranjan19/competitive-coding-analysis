#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 1000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int dp[MAX_N], a[5][MAX_N], pos[5][MAX_N];

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            cin >> a[i][j];
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            pos[i][a[i][j] - 1] = j;
    for (int j = 0; j < n; j++)
    {
        dp[j] = 0;
        for (int k = 0; k < j; k++)
        {
            bool b = true;
            for (int i = 0; i < m; i++)
                if (pos[i][a[0][k] - 1] > pos[i][a[0][j] - 1])
                {
                    b = false;
                    break;
                }
            if (b)
                dp[j] = max(dp[j], dp[k]);
        }
        dp[j]++;
    }
    /*for (int i = 0; i < n; i++)
        cout << dp[i] << " ";
    cout << endl;*/
    int ans = 0;
    for (int i = 0; i < n; i++)
        ans = max(ans, dp[i]);
    cout << ans;
    return 0;
}