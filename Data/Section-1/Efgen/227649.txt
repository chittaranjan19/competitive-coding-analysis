import java.io.*;
import java.util.*;
import java.math.*;

public class Solution {
	static final String FileName = "test";
	
	void solve() throws IOException {
		int n = nextInt();
		int k = nextInt();		
		double req = nextDouble()/1000.;
		int x0 = nextInt();
		int y0 = nextInt();
		int[] d2 = new int[n];
		int good = 0;
		for (int i=0; i<n; i++) {
			int x = nextInt()-x0;
			int y = nextInt()-y0;
			d2[i] = x*x+y*y;
			if (d2[i]==0) good++;
		}
		if (k==1 && good>0) {
			out.print(0);
			return;
		}
		double l = 0, r = 10000;
		double[] d = new double[n+1];
		for (int it=0; it<100; it++) {
			double R = (l+r)/2;
			double R2 = R*R;			
			Arrays.fill(d, 0); d[0] = 1;
			for (int i=0; i<n; i++) {
				double p = 1;
				if (d2[i]>R2) 
					p = Math.exp(1-d2[i]/R2);
				for (int j=n; j>=0; j--)
					d[j] = d[j]*(1-p)+(j>0?d[j-1]*p:0); 
			}
			double cnt = 0;
			for (int j=0; j<k; j++) cnt += d[j];
			if (cnt<=req) r = R; else l = R;
		}
		out.printf(Locale.US, "%1.9f", r);
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
    static final int inf = 1000000000+10;
    static final long linf = 1l<<62;
    static final double eps = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;    
    
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }
    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }
    long nextLong() throws IOException {
            return Long.parseLong(next());
    }
    public static void main(String[] args) {        
    	new Solution().run();    
    }    
}
