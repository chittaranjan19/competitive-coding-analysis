#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 1 << 20;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<int> z_f(string &s)
{
	int len = s.size(), l = -1, r = -1;
	vector<int> z(len);
	for (int i = 0; i < len; i++)
		z[i] = 0;
	for (int i = 1; i < len; i++)
		if (i > r)
		{
			l = i; r = i - 1;
			for (int j = 0; j < len - i; j++)
				if (s[j] == s[i + j])
				{
					z[i]++;
					r++;
				}
				else
					break;
		}
		else
		{
			z[i] = min(z[i - l], r - i + 1);
			for (int j = i + z[i]; j < len; j++)
				if (s[j] == s[j - i])
					z[i]++;
				else
					break;
			if (z[i] > z[i - l])
			{
				l = i;
				r = i + z[i] - 1;
			}
		}
	return z;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	string s;
	cin >> s;
	int len = s.size();
	vector<int> v = z_f(s);
	int cnt = 0;
	for (int i = 0; i < len; i++)
		cnt = max(cnt, min(v[i], len - 1 - i));
	set<int> se;
	for (int i = 0; i < len; i++)
		if (i + v[i] == len)
			se.insert(v[i]);
	int ans = -1;
	for (set<int>::iterator it = se.begin(); it != se.end(); it++)
		if (*it <= cnt)
			ans = *it;
	if (ans != -1)
		cout << s.substr(0, ans);
	else
		cout << "Just a legend";
	return 0;
}
