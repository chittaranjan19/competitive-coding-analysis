#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ll long long int
#define INF 1000000099
#define mod 1000000007
#define red 1
#define blue 2
int *col;
list <int> *adj;
void addEdge(int v,int w)
{
	adj[v].pb(w);
	adj[w].pb(v);
}




int main()
{
	
	int n,m,k;
	cin>>n>>m>>k;
	int graph[n][n];
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			graph[i][j]=INF;
	adj=new list<int>[n];
	int src,des,kilo;
	for(int i=1;i<=m;i++)
	{
		cin>>src>>des>>kilo;
		src--;
		des--;
		graph[des][src]=min(graph[src][des],kilo);
		graph[src][des]=graph[des][src];
		addEdge(src,des);
		
	}
	if(k==0||k==n)
	{
		cout<<"-1\n"<<endl;
		return 0;
	}
	col=new int[n];
	for(int i=0;i<n;i++)
		col[i]=red;
	vector <int> v;
	int tmp;
	for(int i=1;i<=k;i++)
	{
		cin>>tmp;
		tmp--;
		col[tmp]=blue;
		v.pb(tmp);
	}
	std::vector <int>::iterator it;
	list <int>::iterator i;
	int ans=INF,dist;
	for(it=v.begin();it!=v.end();it++)
	{
		
    	dist=INF;
    	for (i = adj[*it].begin(); i != adj[*it].end(); ++i)
        {
        	if (col[*i]==red)
            dist=min(graph[*it][*i],dist);
        }
		ans=min(dist,ans);
	}
	if(ans==INF)
		cout<<"-1";
	else cout<<ans<<endl;

}	