#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const long long inf = (long long)1e9;
const long long MOD = (long long)1e9 + 7;
const long long p = 239;
const long long MAX_N = 1000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

int main()
{
    //ifstream ifs("input.txt");
    //ofstream ofs("output.txt");
    //freopen("candies.in", "r", stdin);
    //freopen("candies.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    scanf("%d", &n);
    int a[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    int dp[n][n + 1];
    for (int i = 0; i < n; i++)
        for (int j = 0; j <= n; j++)
            dp[i][j] = inf;
    for (int i = 0; i <= min(n, a[0]); i++)
        if (i < min(n, a[0]))
            dp[0][i] = i + 1;
        else
            dp[0][i] = i;
    for (int i = 1; i < n; i++)
    {
        for (int j = n - 1; j >= 0; j--)
            dp[i - 1][j] = min(dp[i - 1][j], dp[i - 1][j + 1]);
        for (int j = 0; j <= min(n, a[i]); j++)
            if (j == min(n, a[i]))
                dp[i][j] = min(dp[i][j], dp[i - 1][min(a[i - 1], j)] + max(0, j - a[i - 1]));
            else
                dp[i][j] = min(dp[i][j], dp[i - 1][min(a[i - 1], j)] + max(0, j - a[i - 1]) + 1);
    }
    /*for (int j = n; j >= 0; j--)
    {
        for (int i = 0; i < n; i++)
            cout << (dp[i][j] < inf ? dp[i][j] : -1) << " ";
        cout << endl;
    }*/
    int ans = inf;
    for (int i = 0; i <= n; i++)
        ans = min(ans, dp[n - 1][i]);
    printf("%d", ans);
    return 0;
}
