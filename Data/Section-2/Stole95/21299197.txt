import java.util.*;
import java.io.*;

public class B{
	public static void main(String[] args) {
		FastScannerB sc = new FastScannerB(System.in);
		
		int N = sc.nextInt();
		int M = sc.nextInt();
		
		int[][] mat = new int[N][M];
		
		for(int i = 0 ; i < N ; i++){
			for(int j = 0 ; j < M ; j++){
				mat[i][j] = sc.nextInt();
			}
		}
		
		HashSet<Integer> set = new HashSet<>();
		
		int[] memo = new int[M];
		
		boolean flag = false;
		
		
		
		for(int i = 0 ; i < N ; i++){
			ArrayList<String> swaps = calculateSwaps(mat[i]);
//			System.out.println("For row " + (i+1) + " swaps " + swaps.size());
			if(swaps.size() > 2){
				System.out.println("NO");
				System.exit(0);
			}
			else if(swaps.size() == 2){
				flag = true;
				set.add(i);
			}
		}
		if(!flag){
			System.out.println("YES");
			System.exit(0);
		}
		
		for(int k = 0 ; k < N ; k++){
			ArrayList<String> swaps = calculateSwaps(mat[k]);
			if(swaps.size() == 1){
				String[] tmp = swaps.get(0).split(",");
				int ii = Integer.parseInt(tmp[0]);
				int jj = Integer.parseInt(tmp[1]);
				
				int[][] newMat = new int[N][M];
				for(int i = 0 ; i < N ; i++){
					newMat[i] = Arrays.copyOf(mat[i], mat[i].length);
					int pom = newMat[i][ii];
					newMat[i][ii] = newMat[i][jj];
					newMat[i][jj] = pom;
//					System.out.println(Arrays.toString(newMat[i]));
				}
				
				flag = false;
				
				for(int i = 0 ; i < N ; i++){
					ArrayList<String> swap = calculateSwaps(newMat[i]);
//					System.out.println("For row " + (i+1) + " swaps " + swaps.size() + " " + Arrays.toString(newMat[i]));
					if(swap.size() >= 2){
						flag = true;
						break;
					}
				}
				
				if(!flag){
					System.out.println("YES");
					System.exit(0);
				}
				else{
					System.out.println("NO");
					System.exit(0);
				}
			}
		}

		for(Integer it : set){
			ArrayList<String> swap = calculateSwaps(mat[it]);
			for(String str : swap){
				String[] tmp = str.split(",");
				int ii = Integer.parseInt(tmp[0]);
				int jj = Integer.parseInt(tmp[1]);
				
				int[][] newMat = new int[N][M];
				for(int i = 0 ; i < N ; i++){
					newMat[i] = Arrays.copyOf(mat[i], mat[i].length);
					int pom = newMat[i][ii];
					newMat[i][ii] = newMat[i][jj];
					newMat[i][jj] = pom;
				}
				
				flag = false;
				
				for(int i = 0 ; i < N ; i++){
					ArrayList<String> swaps = calculateSwaps(newMat[i]);
//					System.out.println("For row " + (i+1) + " swaps " + swaps.size() + " " + Arrays.toString(newMat[i]));
					if(swaps.size() >= 2){
						flag = true;
						break;
					}
				}
				
				if(!flag){
					System.out.println("YES");
					System.exit(0);
				}
			}
			
			
		}
		
		System.out.println("NO");
		System.exit(0);
	}

	private static ArrayList<String> calculateSwaps(int[] ar) {
		int[] arr = Arrays.copyOf(ar, ar.length);
		int ctr = 0;
		ArrayList<String> swaps = new ArrayList<>();
		for(int j = 0 ; j < arr.length ; j++){
			if(arr[j] != (j+1)){
				int tmp = arr[j];
				arr[j] = j+1;
				for(int i = j+1 ; i < arr.length ; i++){
					if(arr[i] == (j+1)){
						arr[i] = tmp;
						swaps.add(j + "," + i);
						break;
					}
				}
				
				ctr++;
			}
		}
		
		// TODO Auto-generated method stub
		return swaps;
	}
}

class FastScannerB{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScannerB(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}