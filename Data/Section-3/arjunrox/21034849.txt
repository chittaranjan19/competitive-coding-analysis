#include <iostream>
#include <list>
#include <vector>
using namespace std;
 
vector <int> *paths;
int holder = 0;

class Graph
{
    int V;    
    list<int> *adj; 
 

    void printAllPathsUtil(int , int , bool [], int [], int &);
 
public:
    Graph(int V);   
    void addEdge(int u, int v);
    void printAllPaths(int s, int d);
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int u, int v)
{
    adj[u].push_back(v); 
}
 

void Graph::printAllPaths(int s, int d)
{

    bool *visited = new bool[V];
 
    int *path = new int[V];
    int path_index = 0; 
    for (int i = 0; i < V; i++)
        visited[i] = false;
 
     printAllPathsUtil(s, d, visited, path, path_index);
   
}

void Graph::printAllPathsUtil(int u, int d, bool visited[],
                              int path[], int &path_index)
{
    visited[u] = true;
    path[path_index] = u;
    path_index++;
 
    if (u == d)
    {
        for (int i = 0; i<path_index; i++)
            paths[holder].push_back(path[i]);
        holder++;
    }
    else 
    {

        list<int>::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
            if (!visited[*i])
                printAllPathsUtil(*i, d, visited, path, path_index);
    }
 

    path_index--;
    visited[u] = false;
}
 

int main()
{
    unsigned int n,k,t;
    cin >> n >> k >> t;
    int *weights[k];
    paths = new vector<int> [k];
    for (int i = 0; i < n; ++i)
    {
        weights[i] = new int[k];
    }

    Graph g(n);
    int x,y,w;
    // for (int i = 0; i < n; ++i)
    // {
    //     for (int j = 0; j < n; ++j)
    //     {
    //         cout << weights[i][j] << " ";
    //     }
    //     cout << endl;
    // }

    for (int i = 0; i < k; ++i)
    {
        cin >> x >> y >> w;
       // cout << x << y << w;
        g.addEdge(x-1,y-1);
        weights[x-1][y-1] = w;
        weights[y-1][x-1] = w;
    }
    //cout << "LL";
        g.printAllPaths(0, n-1);
    for (int i = 0; i < paths->size(); ++i)
    {
        int sum = 0;
        for (int j = 0; j < paths[i].size()-1; ++j)
        {
            sum += weights[paths[i][j]][paths[i][j+1]];
        }
        if (sum <= t)
        {
            cout << paths[i].size() << endl;
            for (int j = 0;j < paths[i].size(); ++j)
            {
                cout << paths[i][j] + 1 << " ";
            }
            cout << endl;
            exit(0);
        }
    }
 
    return 0;
}