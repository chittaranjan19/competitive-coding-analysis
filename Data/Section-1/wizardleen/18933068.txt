import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.TreeSet;

public class _687C {

    static int[] c;
    static int n;
    static int k;
    static List<Node>[] nodesByK;

    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);

        n = scan.nextInt();
        k = scan.nextInt();

        c = new int[n + 2];


        for(int i = 1; i <= n; i++)
            c[i] = scan.nextInt();

        dp();
        Node root = new Node(n + 1);
        solve(root, k);

        StringBuilder buf = new StringBuilder();
        boolean isFirst = true;
        for(Integer i : root.values) {
            if(isFirst)
                isFirst = false;
            else
                buf.append(' ');
            buf.append(i);
        }
        System.out.println(root.values.size());
        System.out.println(buf.toString());
    }

    static void dp() {

        nodesByK = new List[k + 1];

        for(int i = 0; i <=k; i++)
            nodesByK[i] = new ArrayList<Node>();
        Node zeroNode = new Node(0);
        zeroNode.values.add(0);
        nodesByK[0].add(zeroNode);

        for(int i = 1; i <= k; i++) {
            for(int j = 1; j <= n; j++) {
                int lastK = i - c[j];
                boolean optional = lastK >= 0 && !nodesByK[lastK].isEmpty()
                        && nodesByK[lastK].get(0).index < j;
                if(optional)
                    nodesByK[i].add(new Node(j));
            }
        }

    }

    static void solve(Node parent, int i) {

        if(i == 0) {
            parent.values.add(0);
            parent.values.add(c[parent.index]);
            return;
        }

        List<Node> nodes = nodesByK[i];

        for(Node node : nodes) {
            if(node.index >= parent.index)
                break;

            if(!node.visited) {
                solve(node, i - c[node.index]);
                node.visited = true;
            }
            for(Integer value : node.values) {
                parent.values.add(value);
                if(parent.index != -1)
                    parent.values.add(value + c[parent.index]);
            }
        }
    }

    static class Node {
        int index;
        boolean visited;
        TreeSet<Integer> values = new TreeSet<Integer>();

        Node(int index) {
            this.index = index;
        }

    }

}
