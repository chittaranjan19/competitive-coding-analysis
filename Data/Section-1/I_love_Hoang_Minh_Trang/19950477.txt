#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
struct data{
    int l, r, num, tr;
    data(int l = 0, int r = 0, int num = 0, int tr = 0): l(l), r(r), num(num), tr(tr){}
};

data x[MAXN];
int q, k;
char ch;
int a;
int dem = 1;
void add(int k)
{
    int cur = 1;
    FORD(i, 29, 1){
        a = (k >> (i - 1)) & 1;
        if (a == 0){
            if (x[cur].l== 0) x[cur].l = ++dem, x[dem].tr = cur;
            x[cur].num++;
            cur = x[cur].l;
        } else{
            if (x[cur].r== 0) x[cur].r = ++dem, x[dem].tr = cur;
            x[cur].num++;
            cur = x[cur].r;
        }
    }
    x[cur].num++;
}

void del(int k)
{
    int cur = 1, old = 0;
    FORD(i, 29, 1){
        a = (k >> (i - 1)) & 1;
        //if (k == 8 && i == 1) cout << a <<"wtfff"<<endl;
        if (a == 0){
            x[cur].num--;
            int next = x[cur].l;
            //if (k == 8 && i == 1) cout << a <<"wtfff"<<next<<" "<<x[cur].num<<endl;
            if (x[cur].num == 0){
                //if (k == 8 && i == 1) cout << a <<"wtfff"<<next<<endl;
                if (old == 0) x[x[cur].tr].l = 0; else x[x[cur].tr].r = 0;
                x[next].tr = 0;
                x[cur].l = 0;
                x[cur].tr = 0;
            }
            cur = next;
        } else{
            x[cur].num--;
            int next = x[cur].r;
            if (x[cur].num == 0){
                if (old == 0) x[x[cur].tr].l = 0; else x[x[cur].tr].r = 0;
                x[next].tr = 0;
                x[cur].r = 0;
                x[cur].tr = 0;
            }
            cur = next;
        }
        old = a;
    }
    //end

    x[cur].num--;
    int next = x[cur].r;
    if (x[cur].num == 0){
        if (old == 0) x[x[cur].tr].l = 0; else x[x[cur].tr].r = 0;
        x[next].tr = 0;
        x[cur].r = 0;
        x[cur].tr = 0;
    }
}

int ans[30], m = 0;
long long get(int k)
{
    int cur = 1;
    m = 0;
    //cout<<ans[3]<<"wtf"<<endl;
    FORD(i, 29, 1){
            a = (k >> (i - 1)) & 1;
           // if (i == 3) cout << a<<"wtfff"<<k<<endl;
            if (a == 0){
                if (x[cur].r){
                ans[++m] = 1;
                cur = x[cur].r;
                }
                else {
                ans[++m] = 0;
                cur = x[cur].l;
                }
            }
            else{
                //if (i == 3) cout<<"wtf"<<endl;
                if (x[cur].l){
                ans[++m] = 1;
                cur = x[cur].l;
                }
                else {
                ans[++m] = 0;
                cur = x[cur].r;
                }
            }
    }
    //FORE(i, 1, 29) cout << ans[i]<<" ";cout<<endl;
    long long res = 0;
    //cout << (1 << 1)<<"wtf"<<endl;
    FORE(i, 1, 29) res += (1 << (29 - i)) * ans[i];
    return res;
}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("D.inp", "r", stdin);
    freopen("D.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> q;
    FORE(i, 1, q){
        cin >> ch >> k;
        if (ch == '+') add(k);
        else if(ch == '-') del(k);
        else cout<<get(k)<<endl;
    }
    //cout << x[1].r<<"wtf"<<endl;

    return 0;
}
