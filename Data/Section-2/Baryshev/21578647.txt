#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 2e5 + 10;
const int mod = 1e9 + 7;

int n, m, k, color[MAX_N], use[MAX_N] = {0, };
vector<int> st[MAX_N];
map<int, int> kik;

void dfs(int n){
    use[n] = 1;
    kik[color[n]]++;
    for (int i = 0; i < st[n].size(); i++)
        if (!use[st[n][i]]) dfs(st[n][i]);
}


int main(){
    #if 0
        freopen("cinemaholics.in", "r", stdin);
        freopen("cinemaholics.out", "w", stdout);
    #endif
    //cout << setprecision(20);
    scanf("%d%d%d", &n, &m, &k);
    int time_ = 1;
    for (int i = 1; i <= n; i++)
        scanf("%d", &color[i]);
    for (int i = 0; i < m; i++){
        int l, r;
        scanf("%d%d", &l, &r);
        st[l].pb(r);
        st[r].pb(l);
    }
    int ans = 0;
    for (int i = 1; i <= n; i++){
        if (!use[i]) {dfs(i);
            int max_ = 0, sum = 0;
            for (auto it : kik)
            {
                max_ = max(max_, it.sc);
                sum+= it.sc;
            }
            ans+= (sum - max_);
            kik.clear();
        }
    }
    cout << ans;
    return 0;
}