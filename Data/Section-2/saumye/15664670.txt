#include<iostream>
#include<list>
#include<queue>
#define ll long long
using namespace std;
int main()
{
	ll u,v,n,x,y,i;
	ll ans;
	ios::sync_with_stdio(false);
	list<ll> graph[200005];
	//scanf("%d%d%d",&n,&x,&y);
	cin>>n>>x>>y;
	for(i=0;i<n-1;i++)
	{
		//scanf("%d%d",&u,&v);
		cin>>u>>v;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}
	if(x>=y)
	{
		ans=y*(n-1);
		cout<<ans<<"\n";
	}
	else
	{
		//find diameter ((n-1)-diameter)*y+diameter*x
		queue<ll> q;
		ll dis[200005];
		bool vis[200005];
		q.push(1);
		//dis[1]=0;
		for(i=1;i<=n;i++)
		{
			dis[i]=9999999999999999;
			vis[i]=0;
		}
		dis[1]=0;
		while(!q.empty())
		{
			ll t=q.front();
			q.pop();
			if(!vis[t])
			{
				vis[t]=1;
				list<ll>::iterator it;
				for(it=graph[t].begin();it!=graph[t].end();it++)
				{
					if(dis[*it]>dis[t]+1)
					{
						dis[*it]=dis[t]+1;
						q.push(*it);
					}
				}
			}
		}
		ll max_index=1;
		for(i=2;i<=n;i++)
		{
			if(dis[i]>dis[max_index])
			{
				max_index=i;
			}
		}
		queue<ll> q1;
		for(i=1;i<=n;i++)
		{
                        dis[i]=9999999999999999;
			vis[i]=0;
		}
		q1.push(max_index);
		dis[max_index]=0;
		while(!q1.empty())
		{
			ll t=q1.front();
                        q1.pop();
                        if(!vis[t])
                        {
                                vis[t]=1;
                                list<ll>::iterator it;
                                for(it=graph[t].begin();it!=graph[t].end();it++)
                                {
                                        if(dis[*it]>dis[t]+1)
                                        {
                                                dis[*it]=dis[t]+1;
                                                q1.push(*it);
                                        }
                                }
                        }
		}
		ll max_dis=0;
		for(i=1;i<=n;i++)
		{
			if(dis[i]>max_dis)
				max_dis=dis[i];
		}
		ans=max_dis*x+((n-1)-max_dis)*y;
		cout<<ans<<"\n";
	}
	return 0;
}
