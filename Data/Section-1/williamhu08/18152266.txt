(lambda __g, __print, __y: [('http://codeforces.com/contest/676/problem/B', [[[(lambda __target, __slice: [(lambda __after, __sentinel, __items: __y(lambda __this: lambda: (lambda __i: [(lambda __after, __sentinel, __items: __y(lambda __this: lambda: (lambda __i: [[(lambda __after: [(lambda __target, __slice: [(lambda __target, __slice: [__after() for __target[__slice] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__target[__slice], (d / 2)))]][0])(a[(r + 1)], (c + 1)) for __target[__slice] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__target[__slice], (d / 2)))]][0])(a[(r + 1)], c) for __g['z'] in [((lambda o, v: (lambda r: o + v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__iadd__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__g['z'], 1))]][0] if (d >= 0) else __after())(lambda: __this()) for __g['d'] in [((a[r][c] - 1024))]][0] for __g['c'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(lambda: __this(), [], iter(range((r + 1)))) for __g['r'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(lambda: (__print(z), ("\nimport math\n\ndef combination(n, r):\n    return int((math.factorial(n)) / ((math.factorial(r)) * math.factorial(n - r)))\n\ndef for_test(x, y):\n    for y in range(x):\n        return combination(x, y)\n\ndef pascals_triangle(rows):\n    result = [] \n    for count in range(rows): \n        row = []\n        for element in range(count + 1): \n            row.append(combination(count, element))\n        result.append(row)\n        \n    return result\n\na = raw_input()\nb = map(int, a.split())\ni = 1\ntime = b[1]\nfinish = 0\ngot = 0\na = pascals_triangle(b[0])\nfor row in a:\n\tdiv = 1.0/(2**(len(row) - 1))\n\tprint row, div, 'asdf'\n\tif len(row) % 2 == 0:\n\t\tgmid = len(row)/2\n\t\trow = row[gmid:]\n\t\tfor num in row:\n\t\t\tpour = time*num*div\n\t\t\tprint pour, row\n\t\t\tif pour >= 1:\n\t\t\t\ttime -= 2\n\t\t\t\tgot += 2\n\t\t\t\n\t\t\tif time <= 0:\n\t\t\t\tfinish = 1\n\t\t\t\tbreak\n\n\telse:\n\t\tgmid = len(row)/2 \t\n \t\trow = row[gmid:]\n\t\tfor num in row:\n\t\t\tpour = time*num*div\n\t\t\tprint pour, row\n\t\t\tif pour >= 1:\n\t\t\t\tif row.index(num) == 0:\n\t\t\t\t\tprint 'qwr'\n\t\t\t\t\ttime -= 1\n\t\t\t\t\tgot += 1\n\t\t\t\t\n\t\t\t\telse:\t\n\t\t\t\t\ttime -= 2\n\t\t\t\t\tgot += 2\n\n\t\t\tif time <= 0:\n\t\t\t\tfinish = 1\n\t\t\t\tbreak\n\n\tif finish == 1:\n\t\tbreak\n\nprint got\t\n\n", None)[1])[1], [], iter(range(n))) for __target[__slice] in [((lambda o, v: (lambda r: o * v if r is NotImplemented else r)(object.__getattribute__(object.__getattribute__(type(o), '__dict__').get('__imult__', lambda self, other: NotImplemented), '__get__')(o, type(o))(v)))(__target[__slice], 1024))]][0])(a[0], 0) for __g['z'] in [(0)]][0] for (__g['n'], a[0][0]) in [(map(int, raw_input().split()))]][0] for __g['a'] in [([([0] * 11) for __g['_'] in range(11)])]][0])[1] for __g['__doc__'] in [('http://codeforces.com/contest/676/problem/B')]][0])(globals(), __import__('__builtin__').__dict__['print'], (lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))))