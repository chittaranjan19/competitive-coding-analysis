#include <iostream>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <cstring>
#include <string>
#include <cmath>
#include <set>
#include <map>
#include <vector>
#include <climits>
using namespace std;
#define pb push_back
#define VINT vector<ll>
#define PII pair<ll,ll>
#define MP(x,y) make_pair((x),(y))
#define ull unsigned long long
#define ll long long
void showVector(vector<ll > s){
        cout<<"----------"<<endl;for(auto x:s)cout<<x<<" ";cout<<endl<<"----------"<<endl;
}
void println(ll n,ll s1=0,ll s2=0,ll s3=0){
        if(n==1) cout<<s1;
        else if(n==2)cout<<s1<<" "<<s2;
        else cout<<s1<<" "<<s2<<" "<<s3;cout<<endl;
}
/****************************************/
long long nxt[1111010];
void getNext(VINT& W)
{
long long wlen=W.size();
    long long j,k;
    j=0;
    k=-1;
    nxt[0]=-1;
    while(j<wlen)
    {
        if(k==-1||W[j]==W[k])
        {
            nxt[++j]=++k;
        }
        else k=nxt[k];
    }
}
long long KMP_count(VINT& T,VINT& W)
{
        long long wlen=W.size();
        long long tlen=T.size();
    long long ans=0;
    long long i,j=0;
    if(wlen==1&&tlen==1)
    {
        if(W[0]==T[0])return 1;
        else return 0;
    }
    for(i=0;i<tlen;i++)
    {
        while(j>0&&T[i]!=W[j])
          j=nxt[j];
        if(W[j]==T[i])j++;
        if(j==wlen)
        {
            ans++;
            j=nxt[j];
        }
    }
    return ans;
}
/********************************************************/
const ll MAX_V=11;//SET THE MAX NUM OF VERTEX
ll head[MAX_V];
struct EDGE{
        ll u,v,w;
        EDGE(ll tu=0,ll tv=0,ll tw=0){u=tu,v=tv,w=tw;}
};
struct Triple{ll f,s,t;};
ll gcd(ll a,ll b){return b==0?a:gcd(b,a%b);}
//////////////////////////////////////
ll f[1111111];
VINT s1,s2;
int main(){
        #ifndef ONLINE_JUDGE
                freopen("in.txt","r",stdin);
        #endif // ONLINE_JUDGE
        ll n,w;
        cin>>n>>w;

        for(ll i=1;i<=n;i++){
                cin>>f[i];
                if(i>=2)
                        s1.pb(f[i]-f[i-1]);
        }
        for(ll i=1;i<=w;i++){
                cin>>f[i];
                if(i>=2)
                        s2.pb(f[i]-f[i-1]);
        }
        if(w==1){
                cout<<n<<endl;
                return 0;
        }
        getNext(s2);
        cout<<KMP_count(s1,s2)<<endl;
        return 0;
}
