#include <bits/stdc++.h>
#define N 530
#define ll long long
using namespace std;
const ll mod = 1000000007;
ll qpow(ll a,ll b,ll r)//������ 
{
    ll ans=1,buff=a;
    while(b)
    {
        if(b&1)ans=(ans*buff)%r;
        buff=(buff*buff)%r;
        b>>=1;
    }
    return ans;
}
bool Miller_Rabbin(int n,int a)//���������������� 
{
    int r=0,s=n-1,j;
    if(!(n%a))
        return false;
    while(!(s&1)){
        s>>=1;
        r++;
    }
    ll k=qpow(a,s,n);
    if(k==1)
        return true;
    for(j=0;j<r;j++,k=k*k%n)
        if(k==n-1)
            return true;
    return false;
}
bool IsPrime(int n)//�ж��Ƿ������� 
{
    int tab[]={2,3,5,7};
    for(int i=0;i<4;i++)
    {
        if(n==tab[i])
            return true;
        if(!Miller_Rabbin(n,tab[i]))
            return false;
    }
    return true;
}
struct node
{
	ll num, ret;
	friend bool operator == (node a, node b)
	{
		return a.num == b.num;
	}
	friend bool operator < (node a, node b)
	{
		return a.num < b.num;
	}
};
set<node> prime;
int main()
{
#ifndef ONLINE_JUDGE
//	freopen("1.txt", "r", stdin);
#endif
	ll n, k, i, j;
	ll ans, t, t1;
	set<node>::iterator it;
	node tt;
	cin >> n >> k;
	for (i = 2; i <= n; i++)
	{
		if (IsPrime(i))
		{
			tt.num = i;
			tt.ret = qpow(i, k, mod);
			prime.insert(tt);
		}
	}
	ans = 1;
	for (i = 2; i <= n; i++)
	{
		t = i;
		t1 = 1;
		for (it = prime.begin(); it != prime.end(); it++)
		{
			tt = *it;
			if (tt.num > t)	break;
			while(t%tt.num == 0)
			{
				t1 = (t1*tt.ret)%mod;
				t /= tt.num;
			}
		}
		ans = (ans + t1)%mod;
	}
	cout << ans;
	return 0;
}

