#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<string>
#include<queue>
#include<vector>
#include<map>
#include<cmath>
#define lowbit(x) ((x)&(-x))
#define Max(a,b) (a>b?a:b)
#define Min(a,b) (a>b?b:a)
#define INF 0x3f3f3f3f
using namespace std;
//typedef __int64 ll;
//typedef long long ll;

int arr[310][310];
int dp[602][301][301] = {0};
//dp[x1][x2][len]
int main()
{
	//freopen("xx.txt","r",stdin);
	//std::ios::sync_with_stdio(false);
	//memset(dp,0,sizeof(dp));
	int N;
	scanf("%d",&N);
	for (int i = 1; i < N+1 ; i++)
	{
		for (int j = 1; j < N+1 ; j++) scanf("%d",&arr[i][j]);
	}
	for (int len = 1; len <2*N; len++)
	{
		for(int x1 = 1 ; x1 < N+1; x1++)
		{
			for (int x2 = 1; x2 < N+1; x2++)
			{
				int y1 = len - x1+1;
				int y2 = len - x2+1;
				dp[len][x1][x2] = Max(dp[len][x1][x2],dp[len-1][x1][x2]);
				dp[len][x1][x2] = Max(dp[len][x1][x2],dp[len-1][x1-1][x2]);
				dp[len][x1][x2] = Max(dp[len][x1][x2],dp[len-1][x1][x2-1]);
				dp[len][x1][x2] = Max(dp[len][x1][x2],dp[len-1][x1-1][x2-1]);
				if(x1 != x2)dp[len][x1][x2] += arr[x1][y1] + arr[x2][y2];
				else dp[len][x1][x2] += arr[x1][y1];
			}
		}
	}

	printf("%d\n",dp[2*N-1][N][N]);
	return 0;
}

