#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

// the number of elements in s less than 3 (in this case, 0-based index of element 3)
//	cout << *s.find_by_order(1) << endl; // 1-st elemt in s (in sorted order, 0-based)

#define clr(x) memset((x),0,sizeof(x))
#define maxn 100007
#define INF 1 << 30
#define CL(a, v) memset(a, v, sizeof a)
#define sz size()
#define UNIQUE(a) sort(all(a)), (a).erase(unique(all(a)), (a).end())
#define all(x)   x.begin(), x.end()
#define mid(a,b) (a+b)/2
#define LLINF 10000000000000000009
#define pb push_back
#define mp make_pair
#define ss second
#define ff first
#define pii pair<int,int>
#define tr(i, c) for(__typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
#define Help_me  ios_base::sync_with_stdio(false);

typedef long long ll;
typedef pair<ll,ll> PII;
template <class T>bool umin(T& a, T b){if(a>b){a = b;return 1;}return 0;}
template <class T>bool umax(T& a, T b){if(b>a){a = b;return 1;}return 0;}
//priority_queue< PII , vector<PII>, greater<PII> >q;
int arr[1000009];
vector<int>v;
int rr[1000009];
multiset <int> s;
int vis[1000009];
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
	int n,ans=0,t;
	cin>>n>>t;
	for(int i=0;i<n;i++){
		cin>>arr[i];
		s.insert(arr[i]);
	}
	for(int i=0;i<n;i++){
		cin>>rr[i];
	}
	t--;
	sort(rr,rr+n);
	for(int i=0;i<n;i++){
		if(rr[i]>t)
		continue;
		int x=t-rr[i];
		x++;
		if(x<=0)
		continue;
		int r=*(--s.lower_bound(x));
		if(x>r)	{
			s.erase(r);
			ans++;
		}
	//	cout<<ans<<endl;
	}
	cout<<1<<" "<<min(n,(n-ans+1))<<endl;
	
return 0;
}
//*(--s.lower_bound(x));
