#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


void recorrer (vector<vector<tint> > &ladj, vector<tint> &cat, tint &total,tint nodoInicial, tint gatosConsecutivos, tint &m, vector<bool> &pase)
{
	if (!pase[nodoInicial])
	{
		pase[nodoInicial] = true;
		if (cat[nodoInicial])
			gatosConsecutivos++;
		else if (gatosConsecutivos <= m)
			gatosConsecutivos = 0;
			
		if (ladj[nodoInicial].size() == 1 && gatosConsecutivos <= m)
			total++;
		else if (!ladj[nodoInicial].empty())
			for(auto vecino : ladj[nodoInicial])
				recorrer(ladj,cat,total,vecino,gatosConsecutivos,m,pase);
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	tint n,m;
	cin >> n >> m;
	vector<tint> cat (n);
	forn(i,n)
		cin >> cat[i];
	vector<vector<tint> > ladj(n);
	forn(i,n-1)
	{
		tint x,y;
		cin >> x >> y;
		ladj[x-1].push_back(y-1);
		ladj[y-1].push_back(x-1);
	}
	tint total = 0;
	vector<bool> pase(n,false);
	recorrer(ladj,cat,total,0,0,m,pase);
	cout << total << endl;
	
	
	return 0;
}



