#include<bits/stdc++.h>
using namespace std;

int seg[3000000];
int arr[1000005];
int last[1000005];
int val[1000005];
int x[1000005];
int sol[1000005];

void update(int idx, int st, int ed, int uidx, int v) {
    if (st > uidx || ed < uidx)
	return;
    if (st == ed && st == uidx) {
	seg[idx] = v;
	return;
    }
    int mid = (st + ed) >> 1;
    update(2 * idx, st, mid, uidx, v);
    update(2 * idx + 1, mid + 1, ed, uidx, v);
    seg[idx] = seg[2*idx] ^ seg[2*idx+1];
}

int query(int idx, int st, int ed, int sr, int er) {
    if (st >= sr && ed <= er) {
	return seg[idx];
    }
    else if (st > er || ed < sr) {
	return 0;
    }
    if (st == ed && st >= sr && st <= er)
	return seg[idx];
    int mid = (st + ed ) >> 1;
    int lt = query(2*idx, st, mid, sr, er);
    int rt = query(2*idx + 1, mid + 1, ed, sr, er);
    return lt ^ rt;
}

int main() {
    int n;
    cin >> n;
    for (int i = 1; i <= n; i++) {
	cin >> val[i];
	x[i] = x[i-1] ^ val[i];
    }
    vector < pair <int, pair <int, int> > > q;
    int m;
    cin >> m;
    for (int i = 1; i <= m; i++) {
	int x, y;
	cin >> x >>y;
	q.push_back(make_pair(y, make_pair(x, i)));
    }
    sort(q.begin(), q.end());
    int qidx = 0;
    for (int j = 1; j <= n; j++) {
	int prev = last[val[j]];
	last[val[j]] = j;
	update(1,1,n,prev,0);
	update(1,1,n,j,val[j]);
	while (q[qidx].first == j) {
	    pair<int, pair<int, int> > qr = q[qidx];
	    int ui = query(1, 1, n, qr.second.first, qr.first);
	    int xr = x[j] ^ x[qr.second.first-1];
	    sol[qr.second.second] = ui ^ xr;
	    qidx++;
	}
    }
    for (int i = 1; i <= m; i++)
	cout << sol[i] << endl;
    return 0;
}
	
	
