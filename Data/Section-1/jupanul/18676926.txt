#include <algorithm>
#include <iostream>
using namespace std;
const int MAX_N = 300005;

vector<int> tree[MAX_N];
int sz[MAX_N];
int centroid[MAX_N];
int father[MAX_N];

void dfs(int node) {
    sz[node] = 1;
    for (auto v : tree[node]) {
        dfs(v);
        sz[node] += sz[v];
    }
    if (sz[node] == 1) {
        centroid[node] = node;
    } else {
        for (auto v : tree[node]) {
            if (sz[v] * 2 > sz[node]) {
                centroid[node] = centroid[v];
                while ((sz[node] - sz[centroid[node]]) * 2 > sz[node]) {
                    centroid[node] = father[centroid[node]];
                }
            }
        }
        if (centroid[node] == 0) {
            centroid[node] = node;
        }
    }
}


int main() {
    int n, m;
    cin >> n >> m;
    
    for (int x, i = 2; i <= n; ++ i) {
        cin >> x;
        father[i] = x;
        tree[x].push_back(i);
    }
    
    dfs(1);
    
    for (int x, i = 1; i <= m; ++ i) {
        cin >> x;
        cout << centroid[x] << "\n";
    }
    
    
    return 0;
}