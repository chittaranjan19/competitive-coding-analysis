#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

#define ll long long
#define ld long double

using namespace std;

const ll inf = (ll)2 * 1e9;
const ll MOD = (ll)1e9 + 7;
const ll P = 239;
const ll MAX_N = 500000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

vector<vector<int> > graph;
vector<bool> used;
vector<int> color;

void dfs(int x, int c)
{
    used[x] = true;
    color[x] = c;
    for (int i = 0; i < graph[x].size(); i++)
        if (!used[graph[x][i]])
            dfs(graph[x][i], 1 - c);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    graph.resize(n);
    for (int i = 0; i < m; i++)
    {
        int s, f;
        cin >> s >> f;
        graph[s - 1].push_back(f - 1);
        graph[f - 1].push_back(s - 1);
    }
    used.resize(n, false);
    color.resize(n);
    for (int i = 0; i < n; i++)
        if (!used[i])
            dfs(i, 0);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < graph[i].size(); j++)
            if (color[i] == color[graph[i][j]])
            {
                cout << -1;
                return 0;
            }
    int cnt0 = 0, cnt1 = 0;
    for (int i = 0; i < n; i++)
        if (color[i] == 0)
            cnt0++;
        else
            cnt1++;
    cout << cnt0 << endl;
    for (int i = 0; i < n; i++)
        if (color[i] == 0)
            cout << i + 1 << " ";
    cout << endl;
    cout << cnt1 << endl;
    for (int i = 0; i < n; i++)
        if (color[i] == 1)
            cout << i + 1 << " ";
    cout << endl;
    return 0;
}
