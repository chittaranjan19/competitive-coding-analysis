import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.NavigableMap;
import java.util.TreeMap;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        NavigableMap<Integer, Integer> m = new TreeMap<>();
        Integer ONE = 1;
        StringBuilder buf = new StringBuilder();
        int cnt = 0;
        for(int i=0;i<n;i++) {
            if(i > 0) {
                buf.append('\n');
            }
            int x,y;
            String s = rd.readLine();
            switch(s.charAt(0)) {
                case 'i':
                    x = s.indexOf(' ');
                    y = pint(s.substring(x+1));
                    add(m,y);
                    buf.append(s);
                    cnt++;
                    break;
                case 'r':
                    if(m.isEmpty()) {
                        buf.append("insert 0\nremoveMin");
                        cnt+=2;
                    } else {
                        buf.append("removeMin");
                        cnt++;
                        Map.Entry<Integer, Integer> u = m.firstEntry();
                        if(u.getValue().equals(ONE)) {
                            m.remove(u.getKey());
                        } else {
                            m.put(u.getKey(), u.getValue()-1);
                        }
                    }
                    break;
                case 'g':
                    x = s.indexOf(' ');
                    y = pint(s.substring(x+1));
                    Map.Entry<Integer, Integer> u = m.firstEntry();
                    while(u != null && u.getKey() < y) {
                        int v = u.getValue();
                        for(int j=0;j<v;j++) {
                            buf.append("removeMin\n");
                            cnt++;
                        }
                        m.remove(u.getKey());
                        u = m.firstEntry();
                    }
                    if(u != null && u.getKey().equals(y)) {
                        buf.append(s);
                        cnt++;
                    } else {
                        add(m,y);
                        buf.append("insert ").append(y).append('\n').append(s);
                        cnt += 2;
                    }
                    break;
            }
        }
        out(cnt);
        out(buf);
    }

    private void add(Map<Integer, Integer> m, int y) {
        Integer cur = m.get(y);
        if (cur == null) {
            m.put(y, 1);
        } else {
            m.put(y, cur + 1);
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
