#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"You can do IT.I belive YOU!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ordered_set s;
*/
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int dp[709][709][4][4],en[709];
int rec(int q,int x,int y,int z){
	if(q>x)
		return 1;
		
	int &r=dp[q][x][y][z];	
	if(r!=-1)
		return r;
	r=0;
	int h=en[q];	
	 
	if(h==x){
		if(y!=1) 	r=(r+rec(q+1,x-1,1,3))%INF;
		if(y!=2) 	r=(r+rec(q+1,x-1,2,3))%INF;	
		if(z!=1)	r=(r+rec(q+1,x-1,3,1))%INF;
		if(z!=2)	r=(r+rec(q+1,x-1,3,2))%INF;	
		return r;	
	}
	if(y!=1)	r=(r+(rec(q+1,h-1,1,3)*rec(h+1,x,3,z))%INF)%INF;
	if(y!=2)	r=(r+(rec(q+1,h-1,2,3)*rec(h+1,x,3,z))%INF)%INF;
	r=(r+(rec(q+1,h-1,3,1)*rec(h+1,x,1,z))%INF)%INF;
	r=(r+(rec(q+1,h-1,3,2)*rec(h+1,x,2,z))%INF)%INF;
	cout << q << " " << x<< " " << y << " " << z << " " << r <<"\n";
	return r;		
}
int main(){
	memset(dp,-1,sizeof(dp));
	string a;
	cin>>a;
	stack<int>s;
	a='#'+a;
	
	for(int i=1;i<a.size();i++){
		if(a[i]=='(')s.push(i);
		else
			en[s.top()]=i,s.pop();	
	}
	cout<<rec(1,a.size()-1,3,3)<<endl;
	return 0;
}
