#include <algorithm>
#include <iostream>
#include <map>
#include <iomanip>
using namespace std;


double answer[100005];
int weight[100005];
vector<int> tree[100005];

void dfs(int node) {
    weight[node] = 1;
    for (auto son : tree[node]) {
        dfs(son);
        weight[node] += weight[son];
    }
}
void dfs_paths(int node, int father = 0) {
    answer[node] = answer[father] + (weight[father] - weight[node] - 1) * 0.5 + 1;
    for (auto son : tree[node]) {
        dfs_paths(son, node);
    }
}

int main() {
    int n;
    cin >> n;
    for (int i = 2; i <= n; ++ i) {
        int x;
        cin >> x;
        tree[x].push_back(i);
    }
    dfs(1);
    weight[0] = weight[1] + 1;
    dfs_paths(1);
    for (int i = 1; i <= n; ++ i) {
        cout << fixed << setprecision(7) << answer[i] << (i == n ? '\n' : ' ');
    }
    return 0;
}