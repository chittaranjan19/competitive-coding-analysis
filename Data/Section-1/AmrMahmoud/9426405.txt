#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int arr[2005];
int fact[2005];
int DP[2005];
int comb[2005][2005];

int solve(int n, int r)
{
    if(n == r) return 1;
    if(n < r) return 0;
    int &temp = comb[n][r];
    if(temp != -1) return temp;
    return temp = (solve(n - 1, r) + solve(n - 1, r - 1)) % mod;
}

int power(int a,int b)
{
    if(b == 0) return 1;
    if(b % 2 == 1)
        return (a * 1LL * power(a, b - 1)) % mod;
    int res = power(a, b / 2);
    return (res * 1LL * res) % mod;
}

int main()
{
    ios_base::sync_with_stdio(0);
    //freopen("laser_maze.txt", "r", stdin);
    //freopen("financial2.out", "w", stdout);
    setdp(comb);
    fact[0] = 1;
    for(int i=1;i<2000;i++)
        fact[i] = (fact[i-1] * 1LL * i) % mod;
    int n;
    cin >> n;
    set<int> s1, s2;
    for(int i=1;i<=n;i++)
    {
        cin >> arr[i];
        if(arr[i] != -1)
            s1.insert(arr[i]);
        else s2.insert(i);
    }
    int m = s2.size(), counter = 0;
    for(int i=1;i<=n;i++)
        if(s1.find(i) == s1.end() && s2.find(i) != s2.end())
            counter++;
    DP[0] = 1;
    for(int i=1;i<=counter;i++)
    {
        DP[i] = fact[i];
        for(int j=1;j<=i;j++)
        {
            DP[i]-=(DP[i - j] * 1LL * solve(i, j));
            if(DP[i] < 0)
                DP[i]%=mod,DP[i]+=mod,DP[i]%=mod;
        }
    }
    DP[counter] = (DP[counter] * 1LL * fact[m]) % mod;
    DP[counter] = (DP[counter] * 1LL * power(fact[counter], mod - 2)) % mod;
    cout << DP[counter];
    return 0;
}