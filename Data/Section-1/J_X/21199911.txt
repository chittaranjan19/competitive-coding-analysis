#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

const int maxn = 200 + 5;
const int INF = 1 << 30;

struct edge
{
    int to, cap, cost, next;
} G[maxn * maxn * 4];
int head[maxn], tot, d[maxn], in[maxn], out[maxn], pre[maxn];
bool inq[maxn];

void init()
{
    memset(head, -1, sizeof(head));
    memset(in, 0, sizeof(in));
    memset(out, 0, sizeof(out));
    tot = 0;
}

void addedge(int u, int v, int cap, int cost)
{
    G[tot].to = v;
    G[tot].cap = cap;
    G[tot].cost = cost;
    G[tot].next = head[u];
    head[u] = tot++;
}

bool spfa(int s, int t)
{
    queue<int> que;
    fill(d, d + t + 1, INF);
    d[s] = 0;
    pre[s] = -1;
    que.push(s);
    inq[s] = true;
    while(!que.empty())
    {
        int u = que.front();
        que.pop();
        inq[u] = false;
        for(int i = head[u]; ~i; i = G[i].next)
        {
            edge e = G[i];
            if(e.cap > 0 && d[e.to] > d[u] + e.cost)
            {
                d[e.to] = d[u] + e.cost;
                pre[e.to] = i;
                if(!inq[e.to])
                {
                    que.push(e.to);
                    inq[e.to] = true;
                }
            }
        }
    }
    return d[t] < INF;
}

void mcmf(int s, int t)
{
    while(spfa(s, t))
    {
        int f = INF;
        for(int i = pre[t]; ~i; i = pre[G[i ^ 1].to]) f = min(f, G[i].cap);
        for(int i = pre[t]; ~i; i = pre[G[i ^ 1].to])
        {
            G[i].cap -= f;
            G[i ^ 1].cap += f;
        }
    }
}

int main()
{
    int T;
    scanf("%d", &T);
    while(T--)
    {
        init();
        int n, m;
        scanf("%d%d", &n, &m);
        int s = 0, t = n + 1;
        for(int i = 0; i < m; ++i)
        {
            int u, v;
            scanf("%d%d", &u, &v);
            addedge(u, v, 1, 0);
            addedge(v, u, 0, 0);
            ++out[u], ++in[v];
        }
        for(int i = 1; i <= n; ++i)
        {
            if(out[i] > in[i])
            {
                if((out[i] - in[i]) & 1)
                {
                    addedge(s, i, out[i] - in[i], 1);
                    addedge(i, s, 0, -1);
                }
                else
                {
                    addedge(s, i, (out[i] - in[i]) / 2, 0);
                    addedge(i, s, 0, 0);
                }
            }
            else if(out[i] < in[i])
            {
                if((in[i] - out[i]) & 1)
                {
                    addedge(i, t, in[i] - out[i], 1);
                    addedge(t, i, 0, -1);
                }
                else
                {
                    addedge(i, t, (in[i] - out[i]) / 2, 0);
                    addedge(t, i, 0, 0);
                }
            }
        }
        mcmf(s, t);
        int ans = 0;
        for(int u = 1; u <= n; ++u)
        {
            int a = 0, b = 0;
            for(int i = head[u]; ~i; i = G[i].next)
            {
                if(G[i].to == s || G[i].to == t) continue;
                if(G[i].cap) ++b;
                else ++a;
            }
            if(a == b) ++ans;
        }
        printf("%d\n", ans);
        for(int i = 0; i < m; ++i)
        {
            int u = G[i << 1 | 1].to, v = G[i << 1].to;
            if(G[i << 1].cap) printf("%d %d\n", u, v);
            else printf("%d %d\n", v, u);
        }
    }
    return 0;
}
