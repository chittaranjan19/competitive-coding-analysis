#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 2000006
#define base 29
#define maxC 1000000007
#define mp make_pair

using namespace std;
int n, k, siz, sz, g;
long long hashVal[mn], po = 1;
map< long long , int > game;
map< pair<long long, int> , int > mark;
string s;
bool good[mn];

void buildHash()
{
    FOR(i, 1, k)
        po = (po * base) % maxC;
    FOR(i, 1, sz)
        hashVal[i] = (hashVal[i - 1] * base + s[i - 1] - 'a' + 1) % maxC;
}

void getGame(int id)
{
    cin >> s;
    long long hashVal = 0;
    FOR(i, 0, int(s.size()) - 1)
        hashVal = (hashVal * base + s[i] - 'a' + 1) % maxC;
    game[hashVal] = id;
}

long long getHash(int l)
{
    long long re = (hashVal[l + k - 1] - hashVal[l - 1] * po) % maxC;
    return (re + maxC) % maxC;
}

void setup()
{
    cin >> n >> k >> s;
    siz = s.size();
    s = s + s;
    sz = s.size();
    buildHash();
    cin >> g;
    FOR(i, 1, g)
        getGame(i);
}

void xuly()
{
    int belong = 0;
    FOR(i, 1, siz)
    {
        if (++ belong > k)
            belong = 1;
        long long get = getHash(i);
        pair<long long, int> node = mp(get, belong);
        if (game[get] == 0 || mark[node] == 1)
            good[belong] = true;
        else
            mark[node] = 1;
    }
    FOR(i, 1, k)
    if (!good[i])
    {
        cout << "YES\n";
        FOR(q, 0, n - 1)
            cout << game[getHash(i + q * k)] << ' ';
        return;
    }
    cout << "NO";
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
