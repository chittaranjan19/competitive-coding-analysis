#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef vector<int> vi;
#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif
std::vector<int> a(100000);
int n,m,ans=0; 
// Graph class represents a directed graph using adjacency list representation
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
    void DFSUtil(int v, bool visited[],int ct);  // A function used by DFS
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void DFS(int v,int ct);    // DFS traversal of the vertices reachable from v
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to vâ€™s list.
}
 
void Graph::DFSUtil(int v, bool visited[],int ct)
{
    // Mark the current node as visited and print it
    visited[v] = true;
 //   cout << v << " ";
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    if(adj[v].begin()==adj[v].end())
    {
        //ct+=a[v];
        trace2(v,ct);
        if(ct <= m)
        {
            ans++;
        }
    }
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
     {   if (!visited[*i])
        {
            int temp;
            if(a[*i]==1)
            {
                temp=ct+1;
            }
            else
            {
                if(ct >m)
                {
                    temp=ct;
                }
                else
                {
                    temp=0;
                }
            }
            DFSUtil(*i, visited,temp);
        }
    }
}
// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()
void Graph::DFS(int v,int ct)
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    for (int i = 0; i < V; i++)
        visited[i] = false;
 
    // Call the recursive helper function to print DFS traversal
    DFSUtil(v, visited,ct);
}
 
int main()
{
    // Create a graph given in the above diagram
    int v1,v2;
    cin >> n >> m;
    Graph g(n);
    
    for(int i=0;i<n;i++)
    {
        cin >> a[i];
    }
    for(int i=0;i<n-1;i++)
    {
        cin >> v1 >> v2;
        g.addEdge(v1-1, v2-1);
    }
   // cout << "Following is Depth First Traversal (starting from vertex 2) \n";
    g.DFS(0,a[0]);
    cout << ans << endl;
    return 0;
}