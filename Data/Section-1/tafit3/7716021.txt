import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemB2 {
    private final int POINTS = 8;
    private final int PERMS = 6;
    private final int COORDS = 3;
    private final double T = 1e8;
    long t2;

    private ProblemB2() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        long[][] p = new long[POINTS][COORDS];
        long[][] p2 = new long[POINTS][COORDS];
        for(int i=0;i<POINTS;i++) {
            String h = rd.readLine();
            String[] q = h.split("\\s+");
            for(int j=0;j<COORDS;j++) {
                p[i][j] = Long.parseLong(q[j]);
            }
        }
        int[][] perm = new int[][] { {0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0} };
        int[] state = new int[POINTS];
        boolean carry = false;
        while(!carry) {
            for(int i=0;i<POINTS;i++) {
                for(int j=0;j<COORDS;j++) {
                    p2[i][j] = p[i][perm[state[i]][j]];
                }
            }
            if(isCube(p2)) {
                out("YES");
                for(int i=0;i<POINTS;i++) {
                    for(int j=0;j<COORDS;j++) {
                        if(j > 0) {
                            System.out.print(' ');
                        }
                        System.out.print(p2[i][j]);
                    }
                    System.out.println();
                }
                return;
            }

            int pos = 0;
            state[pos]++;
            while(state[pos] == PERMS) {
                state[pos] = 0;
                pos++;
                if(pos < POINTS) {
                    state[pos]++;
                } else {
                    carry = true;
                    break;
                }
            }
        }
        out("NO");
    }

    private boolean isCube(long[][] p2) {
        for(int i=0;i<POINTS;i++) {
            for(int j=i+1;j<POINTS;j++) {
                boolean eq = true;
                for(int k=0;k<COORDS;k++) {
                    if(p2[i][k] != p2[j][k]) {
                        eq = false;
                        break;
                    }
                }
                if(eq) {
                    return false;
                }
            }
        }
        long min = 9000000000000000000L;
        int pcount = 0;
        int left = 28;
        for(int i=0;i<POINTS;i++) {
            for(int j=i+1;j<POINTS;j++) {
                if(pcount+left < 12) {
                    return false;
                }
                long len = len(p2[i],p2[j]);
                if(len < min) {
                    pcount = 1;
                    min = len;
                } else if(len == min) {
                    pcount++;
                }
                left--;
            }
        }
        return pcount == 12;
    }

    private long len(long[] a, long[] b) {
        return (a[0]-b[0])*(a[0]-b[0])+(a[1]-b[1])*(a[1]-b[1])+(a[2]-b[2])*(a[2]-b[2]);
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB2();
    }
}
