#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[200005];

int cntones[10], cnttwo[10];
int cnt1[10], cnt2[10];

int main()
{
  int n, x, y, z;
  scanf("%d", &n);
  scanf("%d %d %d", &x, &y, &z);
  for(int i=0;i<n;i++)
    scanf("%d", &arr[i]);
  sort(arr, arr + n);
  if(x + y + z < arr[n - 1])
  {
    cout << -1;
    return 0;
  }
  int res = 0;
  for(int i=n-1;i>=0;i--)
  {
    int mask = 0;
    if(x >= arr[i])
      mask += 1;
    if(y >= arr[i])
      mask += 2;
    if(z >= arr[i])
      mask += 4;
    if(mask)
    {
      cntones[mask]++;
      continue;
    }
    if(x + y >= arr[i])
      mask += 1;
    if(y + z >= arr[i])
      mask += 2;
    if(x + z >= arr[i])
      mask += 4;
    if(mask)
    {
      cnttwo[mask]++;
      continue;
    }
    res++;
  }
  int tmp = INF_MAX;
  vector<int> A, B, C, ch;
  vector<int> ab, bc, ac, a, b, c;
  for(int i=1;i<8;i++)
  {
    if(i & 1)
      A.pb(i);
    if(i & 2)
      B.pb(i);
    if(i & 4)
      C.pb(i);
  }
  ch.pb(0);
  ch.pb(1);
  ch.pb(2);
  ab = A;
 // do
 // {
    bc = B;
    do
    {
      ac = C;
      do
      {
        a = A;
        do
        {
          b = B;
          do
          {
            c = C;
            do
            {
              for(int i=0;i<10;i++)
                cnt1[i] = cntones[i], cnt2[i] = cnttwo[i];
              int ans = 0;
              for(int i=0;i<ch.size();i++)
              {
                if(ch[i] == 0)
                {
                  for(int j=0;j<ab.size();j++)
                  {
                    if(!cnt2[ab[j]]) continue;
                    x = cnt2[ab[j]], y = 0;
                    for(int k=0;k<c.size() && x != y;k++)
                    {
                      z = cnt1[c[k]];
                      z = min(z, x - y);
                      cnt1[c[k]] -= z;
                      y += z;
                    }
                    cnt2[ab[j]] -= y;
                    ans += y;
                  }
                }
                else if(ch[i] == 1)
                {
                  for(int j=0;j<bc.size();j++)
                  {
                    if(!cnt2[bc[j]]) continue;
                    int x = cnt2[bc[j]], y = 0;
                    for(int k=0;k<a.size() && x != y;k++)
                    {
                      int z = cnt1[a[k]];
                      z = min(z, x - y);
                      cnt1[a[k]] -= z;
                      y += z;
                    }
                    cnt2[bc[j]] -= y;
                    ans += y;
                  }
                }
                else
                {
                  for(int j=0;j<ac.size();j++)
                  {
                    if(!cnt2[ac[j]]) continue;
                    int x = cnt2[ac[j]], y = 0;
                    for(int k=0;k<b.size() && x != y;k++)
                    {
                      int z = cnt1[b[k]];
                      z = min(z, x - y);
                      cnt1[b[k]] -= z;
                      y += z;
                    }
                    cnt2[ac[j]] -= y;
                    ans += y;
                  }
                }
              }
              x = INF;
              for(int i=0;i<10;i++)
                ans += cnt2[i];
              x = min(x, cnt1[1]);
              x = min(x, cnt1[2]);
              x = min(x, cnt1[4]);
              cnt1[1] -= x;
              cnt1[2] -= x;
              cnt1[4] -= x;
              ans += x;
              if(cnt1[1])
              {
                x = cnt1[1];
                y = min(x, cnt1[6] / 2);
                ans += max(x, y);
              }
              if(cnt1[2])
              {
                x = cnt1[2];
                y = min(x, cnt1[5] / 2);
                ans += max(x, y);
              }
              if(cnt1[4])
              {
                x = cnt1[4];
                y = min(x, cnt1[3] / 2);
                ans += max(x, y);
              }
              tmp = min(tmp, ans);
            }
            while(next_permutation(c.begin(), c.end()));
          }
          while(next_permutation(b.begin(), b.end()));
        }
        while(next_permutation(a.begin(), a.end()));
      }
      while(next_permutation(ac.begin(), ac.end()));
    }
    while(next_permutation(bc.begin(), bc.end()));
 // }
 // while(next_permutation(ch.begin(), ch.end()));
  cout << res + tmp;
  return 0;
}

/*
0 a
1 b
2 c
3 a b
4 a c
5 b c
6 a b c
0 a, b
1 a, c
2 b, c
3 {a, b} {b, c}
4 {a, b} {a, c}
5 {b, c} {a, c}
6 {a, b} {b, c} {a, c}
*/
