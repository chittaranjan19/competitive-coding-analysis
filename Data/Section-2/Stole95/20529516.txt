import java.io.*;
import java.util.*;

public class Main {
	static int N;
	static Node[] nodes;
	static int[] parent, dist;
	static ArrayList<Pair> rozevi;
	
	public static void main(String[] args) {
		FastScannerE sc = new FastScannerE(System.in);
		
		N = sc.nextInt();
		
		nodes = new Node[N];
		parent = new int[N];
		
		for(int i = 0 ; i < N ; i++){
			nodes[i] = new Node(sc.nextInt());
		}
		
		for(int i = 1 ; i < N ; i++){
			int a = sc.nextInt();
			int b = sc.nextInt();
			a--;
			b--;
			nodes[a].adjacent.add(b);
			nodes[b].adjacent.add(a);
		}
		
		bfs();
		
		Collections.sort(rozevi);
		
		ArrayList<Integer> path = new ArrayList<>();
		path.add(0);
		
		while(!rozevi.isEmpty()){
			Pair curr = rozevi.remove(0);
			if(nodes[curr.index].color == 1) continue;
			
//			System.out.println(curr.index + " " + curr.dist);
			
			ArrayList<Integer> currPath = new ArrayList<>();
			int tmp = curr.index;
			
			while(tmp != 0){
				currPath.add(tmp);
				tmp = parent[tmp];
			}
			
//			currPath.add(0);
			Collections.reverse(currPath);
//			System.out.println("First is " + (currPath.get(0)+1));
			
//			for(int i = 0 ; i < currPath.size() ; i++){
//				System.out.print((currPath.get(i) + 1));
//				System.out.print(" ");
//			}
//			System.out.println();
			
			tmp = parent[curr.index];
			while(tmp != 0){
				if(nodes[tmp].color == -1){
					nodes[parent[tmp]].color *= -1;
					nodes[tmp].color = 1;
					currPath.add(tmp);
					currPath.add(parent[tmp]);
					
				}
				currPath.add(tmp);
				tmp = parent[tmp];
			}
			currPath.add(tmp);
			
			nodes[0].color *= -1;
			path.addAll(currPath);
			
//			for(int i = 0 ; i < currPath.size() ; i++){
//				System.out.print((currPath.get(i) + 1));
//				System.out.print(" ");
//			}
//			System.out.println();
		}
		
		StringBuilder sb = new StringBuilder();
		if(nodes[0].color == -1){
			path.remove(path.size() - 1);
		}
		
		int size = path.size();
		for(int i = 0 ; i < size ; i++){
			sb.append((path.get(i) + 1));
			if(i != size-1) sb.append(" ");
		}
		
		System.out.println(sb.toString());
	}

	private static void bfs() {
		ArrayList<Integer> queue = new ArrayList<>();
		rozevi = new ArrayList<>();
		boolean[] visited = new boolean[N];
		dist = new int[N];
		queue.add(0);
		visited[0] = true;
		dist[0] = 0;
		
		while(!queue.isEmpty()){
			int curr = queue.remove(0);
			
			for(Integer it : nodes[curr].adjacent){
				if(!visited[it]){
					parent[it] = curr;
					visited[it] = true;
					queue.add(it);
					dist[it] = dist[curr] + 1;
				}
			}
			
			if(nodes[curr].color == -1){
				rozevi.add(new Pair(dist[curr], curr));
			}
		}
		
	}
}

class Pair implements Comparable<Pair>{
	int dist;
	int index;
	
	Pair(int dis, int idx){
		dist = dis;
		index = idx;
	}

	@Override
	public int compareTo(Pair sec) {
		return sec.dist - dist;
	}
}

class Node{
	int color;
	ArrayList<Integer> adjacent;
	
	public Node(int col){
		color = col;
		adjacent = new ArrayList<>();
	}
	
}

class FastScannerE{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScannerE(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}