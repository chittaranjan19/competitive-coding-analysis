#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

char s[55];
vector<pair<pair<int, int>, int> > v[2005];
pair<pair<int, int>, pair<int, int> > queries[2005];
vector<int> vq[2005];
LL ans[2005];
bool on[2005];

const int MaxX = 2002, MaxY = 2002;
LL tree[MaxX + 5][MaxY + 5];

void update(int x, int y, int val)
{
  if(x <= 0 || y <= 0) return;
  while(x <= MaxX && x > 0){
    int y1 = y;
    while (y1 <= MaxY && y > 0){
      tree[x][y1] += val;
      y1 += (y1 & -y1);
    }
    x += (x & -x);
  }
}

LL read(int x, int y)
{
  if(x <= 0 || y <= 0) return 0;
  LL sum = 0;
  while(x > 0 && x <= MaxX){
    int y1 = y;
    while (y1 <= MaxY && y1 > 0){
      sum += tree[x][y1];
      y1 -= (y1 & -y1);
    }
    x -= (x & -x);
  }
  return sum;
}

int main()
{
  int n, m, k, sz, x, y, z, zz, q;
  cin >> n >> m >> k;
  for(int i=0;i<k;i++)
  {
    on[i] = true;
    scanf("%d", &sz);
    for(int j=0;j<sz;j++)
    {
      scanf("%d %d %d", &x, &y, &z);
      v[i].pb(mp(mp(x, y), z));
    }
  }
  sz = 0;
  scanf("%d", &q);
  while(q--)
  {
    scanf("%s", s);
    if(s[0] == 'S')
    {
      scanf("%d", &x);
      x--;
      on[x] = 1 - on[x];
    }
    else
    {
      scanf("%d %d %d %d", &x, &y, &z, &zz);
      queries[sz] = mp(mp(x, y), mp(z, zz));
      for(int i=0;i<k;i++)
        if(on[i])
          vq[i].pb(sz);
      sz++;
    }
  }
  for(int i=0;i<k;i++)
  {
    for(int j=0;j<v[i].size();j++)
      update(v[i][j].f.f, v[i][j].f.s, v[i][j].s);
    for(int ind : vq[i])
    {
      ans[ind] += read(queries[ind].s.f, queries[ind].s.s);
      ans[ind] -= read(queries[ind].f.f - 1, queries[ind].s.s);
      ans[ind] -= read(queries[ind].s.f, queries[ind].f.s - 1);
      ans[ind] += read(queries[ind].f.f - 1, queries[ind].f.s - 1);
    }
    for(int j=0;j<v[i].size();j++)
      update(v[i][j].f.f, v[i][j].f.s, -v[i][j].s);
  }
  for(int i=0;i<sz;i++)
    printf("%I64d\n", ans[i]);
  return 0;
}
