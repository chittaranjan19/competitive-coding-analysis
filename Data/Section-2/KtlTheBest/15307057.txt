#include <bits/stdc++.h>
using namespace std;

#define fr first
#define sc second
#define mkp make_pair

int n, m, a[int(1e4)][int(1e4)], cnt, x, y;
bool u[int(1e3) + 1][int(1e3) + 1];
char c[int(1e3) + 1][int(1e3) + 1];
pair <int, int> p[4];
queue <pair <int, int> > q;

bool in(int x, int y){
	return ((0 <= x && x < n) && (0 <= y && y < m));
}

void dfs(int x, int y){
	//cerr << x << " " << y << "\n";
	//system("pause");
	for(int i = 0; i < 4; ++ i){
		if(u[x + p[i].fr][y + p[i].sc] == 0 && in(x + p[i].fr, y + p[i].sc) && c[x + p[i].fr][y + p[i].sc] == '.'){
			cnt ++;
			u[x + p[i].fr][y + p[i].sc] = 1;
			dfs(x + p[i].fr, y + p[i].sc);
		}
	}
	return;
}

int main(){
	p[0].fr = 0, p[0].sc = 1;
	p[1].fr = 1, p[1].sc = 0;
	p[2].fr = 0, p[2].sc = -1;
	p[3].fr = -1, p[3].sc = 0;
	cin >> n >> m;
	for(int i = 0; i < n; ++ i){
		for(int j = 0; j < m; ++ j){
			cin >> c[i][j];
			if(c[i][j] == '*'){
				q.push(mkp(i, j));
			}
		}
	}
	while(q.size()){
		//cerr << "okay";
		for(int i = 0; i < n; ++ i){
			memset(u[i], 0, m);
		}
		//cerr << "okay";
		x = q.front().fr;
		y = q.front().sc;
		dfs(x, y);
		a[x][y] = cnt + 1;
		cnt = 0;
		q.pop();
		//cerr << "okay";
	}
	for(int i = 0; i < n; ++ i){
		for(int j = 0; j < m; ++ j){
			if(!a[i][j]){
				cout << ".";
			} else {
				cout << a[i][j];
			}
		}
		cout << "\n";
	}
	return 0;
}