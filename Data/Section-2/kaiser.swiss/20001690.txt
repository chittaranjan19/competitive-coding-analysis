import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class D {

  public static void main(String[] args) {
    Scanner sin = new Scanner(System.in);
    while (sin.hasNextLine()) {
      int n = sin.nextInt(), m = sin.nextInt(), q = sin.nextInt();
      ArrayList<BitSet> arr = new ArrayList<>();
      for (int i = 0; i < n; ++i) {
        arr.add(new BitSet(m));
      }
      int a, b = -1, c;
      ArrayList<Integer> aa = new ArrayList<>();
      ArrayList<Integer> bb = new ArrayList<>();
      ArrayList<Integer> cc = new ArrayList<>();
      Set<Integer> old = new HashSet<>();
      for (int i = 0; i < q; ++i) {
        c = sin.nextInt();
        a = sin.nextInt();
        if (c < 3)
          b = sin.nextInt();
        aa.add(a);
        bb.add(b);
        cc.add(c);
        if (c == 4) {
          old.add(a);
        }
      }
      Map<Integer, ArrayList<BitSet>> map = new HashMap<>();
      for (int i = 0; i < q; ++i) {
        if (old.contains(i))
          map.put(i, newOf(arr));
        a = aa.get(i);
        b = bb.get(i);
        c = cc.get(i);
        switch (c) {
          case 1:
            arr.get(a - 1).set(b - 1);
            break;
          case 2:
            arr.get(a - 1).clear(b - 1);
            break;
          case 3:
            arr.get(a - 1).flip(0, m);;
            break;
          case 4:
            arr = newOf(map.get(a));
            break;
        }
        int sum = 0;
        for (BitSet bs : arr) {
          sum += bs.cardinality();
        }
        System.out.println(sum);
      }
    }
    sin.close();
  }

  private static ArrayList<BitSet> newOf(ArrayList<BitSet> arr) {
    ArrayList<BitSet> res = new ArrayList<>();
    for (BitSet b : arr) {
      BitSet a = new BitSet(b.size());
      a.or(b);
      res.add(a);
    }
    return res;
  }

}
