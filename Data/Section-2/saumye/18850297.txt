#include<bits/stdc++.h>
#define maxn 100005

using namespace std;

vector<int> gr[maxn];
int color[maxn];

bool isBipartite(int n)
{
	queue<int> q;
	vector<int>::iterator it;

	for ( int i = 1 ; i <= n ; i++ )
	{	
		if( color[i] == 0 )
		{
			q.push(i);
			color[i] = 1;
			while ( !q.empty() )
			{
				int p = q.front();
				q.pop();
				for ( it = gr[p].begin() ; it != gr[p].end() ; it++ )
				{
					if( color[*it] == 0 )
					{
						q.push(*it);
						if ( color[p] == 1 )
						{
							color[*it] = 2;
						}
						else if ( color[p] == 2 )
						{
							color[*it] = 1;
						}
					}
					else if ( color[*it] == 1 )
					{
						if ( color[p] != 2 )
						{
							return false;
						}
					}
					else//if color it = 2
					{
						if ( color[p] != 1 )
						{
							return false;
						}
					}
				}
			}
		}
	}
	return true;
}

int main()
{
	int n, m, i;
	scanf("%d%d", &n, &m);
	for ( i = 1 ; i <= m ; i++ )
	{
		int u, v;
		scanf("%d%d", &u, &v);
		gr[u].push_back(v);
		gr[v].push_back(u);
	}
	if( isBipartite(n) )
	{
		//the ones that have color = 1
		//then the ones that have color = 2
		int arya = 0, pari = 0;
		for ( i = 1 ; i <= n ; i++ )
		{
			if ( color[i] == 1 )
			{
				arya++;
			}
			else
			{
				pari++;
			}
		}
		printf("%d\n", arya);
		for ( i = 1 ; i <= n ; i++ )
		{
			if ( color[i] == 1 )
				printf("%d ", i);
		}
		printf("\n%d\n", pari);
		for ( i = 1 ; i <= n ; i++ )
		{
			if ( color[i] == 2 )
				printf("%d ", i);
		}
		printf("\n");
	}
	else
	{
		printf("-1\n");
	}
	return 0;
}