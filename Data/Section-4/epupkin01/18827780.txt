#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<ll> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<Pair> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

struct Str
{
    int i, am;
    msIter it;
    Str(int _i, int _am, msIter _it) : i(_i), am(_am), it(_it) {}
};
bool operator<(const Str &s1, const Str &s2)
{
    if ( (s1.am < s2.am) || (s1.am == s2.am && (*s1.it < *s2.it)) )
        return true;
    return false;
}

const int S = 100000;
int n, x1, x2, k[S], b[S];
multiset<Str> st1;
mSet st2;

int main()
{
    cin >> n >> x1 >> x2;
    
    msIter it;
    for (int i = 0, y1, y2; i < n; ++i)
    {
        scanf("%d%d", k + i, b + i);
        y1 = k[i] * x1 + b[i];
        y2 = k[i] * x2 + b[i];
        it = st2.insert(y2);
        st1.insert(Str(i, y1, it));
    }
    
    for (auto x : st1)
    {
        if (x.it != st2.begin())
        {
            cout << "YES\n";
            return 0;
        }
        else
            st2.erase(x.it);
    }
    
    cout << "NO\n";
    return 0;
}