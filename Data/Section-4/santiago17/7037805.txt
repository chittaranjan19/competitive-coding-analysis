import java.io.*;
import java.util.*;

public class Main {
    /*static int query(int a, int b, SegmentTree tree)
    {
        if(a == tree.begin && b == tree.end)
            return tree.sum;
        if(b <= tree.l.end)
            return query(a, b, tree.l);
        if(a >= tree.r.begin)
            return query(a, b, tree.r);
        return query(a, tree.l.end, tree.l) + query(tree.r.begin, b, tree.r);
    }*/

    public static void main(String[] args) throws IOException{
        
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        int s, t, count = 0;
        String st = bf.readLine();
        String[] aux = st.split(" ");
        s = Integer.parseInt(aux[0]);
        t = Integer.parseInt(aux[1]);
        ArrayList<Integer> list = new ArrayList<>();
        aux = bf.readLine().split(" ");
        for(int a = 0; a < s; a++)
            list.add(Integer.parseInt(aux[a]));
        int p1, p2, sum = list.get(0);
        p1 = p2 = 0;
        while(p2 < s)
        {
            if(s - p1 < count)
                break;
            if(p1 == p2)
            {
                if(list.get(p1) > t)
                {
                    p1++; 
                    p2++;
                    continue;
                }
                else
                {
                    sum = list.get(p1);
                    if(count == 0)
                        count = 1;
                }
                
            }
            if(p2+1 < s && sum + list.get(p2+1) <= t)
            {
                sum += list.get(p2+1);
                p2++;
                continue;
            }
            else
            {
                if(p2 - p1 + 1 > count)
                    count = p2 - p1 + 1;
                sum -= list.get(p1);
                p1++;
            }
        }
        System.out.println(count);
    }
}

/*class SegmentTree
{
    SegmentTree l, r;
    int begin, end, sum;
    SegmentTree(int a, int b, ArrayList<Integer> values)
    {
        if(a == b)
        {
            begin = end = a;
            l = r = null;
            sum = values.get(a);
        }
        else
        {
            l = new SegmentTree(a, (a+b)/2, values);
            r = new SegmentTree( ((a+b) / 2) +1, b, values);
            begin = a;
            end = b;
            sum = l.sum + r.sum;
        }
    }
}*/