/*
I am cow
Hear me moo
I weigh twice as much as you
And I look good on the barbecue
*/
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define rwfile(f) freopen(f".in", "r", stdin); freopen(f".out", "w", stdout)
#define fi first
#define se second

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int MAXN = 1e5 + 10, MAXLG = 17;

//node stuff

int F[MAXN];

struct node {
	int stat;
	int lsiz, rsiz;
	int sum;
	int size;
};

void print (node n, const char *name = "node") {
	printf("%s: stat = %d, lsiz = %d, rsiz = %d, sum = %d, size = %d\n", name, n.stat, n.lsiz, n.rsiz, n.sum, n.size);
}

node getstat (int sz, int x) {
	node res;
	res.size = sz;
	res.stat = x;
	res.sum = 0;
	//oops swapped them
	if (x == 0) {
		res.lsiz = res.rsiz = 0;
	} else if (x == 2) {
		res.lsiz = res.rsiz = sz;
	} else {
		assert(!"Invalid stat");
	}
	return res;
}

node ZERO, ONE = getstat(1, 2);

int eval (node n) {
	//get the sum of node n
	if (n.stat == 0) {
		return 0;
	} else if (n.stat == 2) {
		return F[n.size];
	} else {
		return n.sum + F[n.lsiz] + F[n.rsiz];
	}
}

node operator + (node n1, node n2) {
#warning addition is not commutative.
	if (n1.size == 0) {
		return n2;
	}
	if (n2.size == 0) {
		return n1;
	}
	// puts("-----summing----");
	// print(n1, "n1");
	// print(n2, "n2");
	node res;
	if (n1.stat == n2.stat && (n1.stat == 0 || n1.stat == 2)) {
		res.stat = n1.stat;
	} else {
		res.stat = 1;
	}
	res.lsiz = n1.lsiz;
	if (n1.lsiz == n1.size) {
		res.lsiz += n2.lsiz;
	}
	res.rsiz = n2.rsiz;
	if (n2.rsiz == n2.size) {
		res.rsiz += n1.rsiz;
	}
	res.size = n1.size + n2.size;
	//calc sum...tricky
	if (n1.stat == 0) {
		if (n2.stat == 0) {
			res.sum = 0;
		} else if (n2.stat == 1) {
			res.sum = F[n2.lsiz] + n2.sum;
		} else {
			res.sum = 0;
		}
	} else if (n1.stat == 1) {
		//left is somefull
		if (n2.stat == 0) {
			res.sum = n1.sum + F[n1.rsiz];
		} else if (n2.stat == 1) {
			res.sum = n1.sum + F[n1.rsiz + n2.lsiz] + n2.sum;
		} else {
			res.sum = n1.sum;
		}
	} else {
		//full
		if (n2.stat == 0) {
			res.sum = 0;
		} else if (n2.stat == 1) {
			res.sum = n2.sum;
		} else {
			res.sum = 0;
		}
	}
	// print(res, "n1 + n2");
	// puts("---end summing----");
	return res;	//i'm tired...should i bother checking this
}

//tree stuff

int N, M;
map<pii, int> mpw;	//map of weight edge
int wp[MAXN];	//weight to parent
pair<int, pii> E[MAXN];
pair<pii, pii> Q[MAXN];
vector<int> adj[MAXN];

//now stuff with hld

//chain data type
struct chain {
	vector<node> tree;
	vector<int> nodes;
	vector<int> leaf;
	int size;
	chain() : tree(), nodes(), size() {}
	void init() {
		int sz = size = nodes.size();
		tree.resize(4 * sz);
		leaf.resize(sz);
		build(1, 0, sz);
	}
	void build (int cur, int lt, int rt) {
		tree[cur] = getstat(rt - lt, 0);	//all empty...
		if (rt - lt == 1) {
			// printf("leaf[%d] = %d\n", lt, cur);
			leaf[lt] = cur;
		} else {
			int mid = (lt + rt) / 2;
			build(2 * cur, lt, mid);
			build(2 * cur + 1, mid, rt);
		}
	}
	node query (int a, int b, int cur, int lt, int rt) {
		if (rt <= a || b <= lt) {
			return ZERO;
		}
		if (a <= lt && rt <= b) {
			return tree[cur];
		}
		int mid = (lt + rt) / 2;
		return query(a, b, 2 * cur, lt, mid) + query(a, b, 2 * cur + 1, mid, rt);
	}
	node query (int a, int b) {
		return query(a, b, 1, 0, size);
	}
	void update (int x) {
		//mark it now as active
		for (tree[x = leaf[x]] = ONE; x /= 2; ) {
			tree[x] = tree[2 * x] + tree[2 * x + 1];
		}
	}
};

int C = 1;	//# of chains
chain ch[MAXN];	//chains...
int chbel[MAXN], chind[MAXN];	//chain belong
int par[MAXN][MAXLG], depth[MAXN], sub[MAXN];


int dfs1 (int x, int p, int d) {
	par[x][0] = p;
	depth[x] = d;
	wp[x] = mpw[pii(x, p)];
	int res = 1;
	for (int t : adj[x]) {
		if (t != p) {
			res += dfs1(t, x, d + 1);
		}
	}
	return sub[x] = res;
}

int getpar (int x, int d) {
    for (int i = 0; d; d /= 2, i++) {
        if (d & 1) {
            x = par[x][i];
        }
    }
    return x;
}

int lca (int x, int y) {
	if (depth[x] > depth[y]) {
		swap(x, y);
	}
    y = getpar(y, depth[y] - depth[x]);
	if (x == y) {
		return x;
	}
	for (int k = MAXLG - 1; k >= 0; k--) {
		if (par[x][k] != par[y][k]) {
			x = par[x][k];
			y = par[y][k];
		}
	}
	return par[x][0];
}

void dfs2 (int x, int chid) {
	// printf("%d belongs to %d\n", x, chid);
	chbel[x] = chid;
	chind[x] = ch[chid].nodes.size();
	// printf("chbel[%d] = %d, chind[%d] = %d\n", x, chbel[x], x, chind[x]);
	ch[chid].nodes.push_back(x);
	for (int t : adj[x]) {
		if (t == par[x][0]) {
			continue;
		}
		if (sub[t] * 2 >= sub[x]) {
			dfs2(t, chid);
		} else {
			dfs2(t, ++C);
		}
	}
}

node go (int x, int c) {
	c = getpar(x, depth[x] - depth[c] - 1);
	node ans = ZERO;
	while (true) {
		int b = chbel[x];
		int xind = chind[x];
		int ltind = (b == chbel[c] ? chind[c] : 0);
		// printf("query [%d, %d)\n", ltind, xind + 1);
		ans = ch[b].query(ltind, xind + 1) + ans;
		if (b == chbel[c]) {
			break;
		}
		x = par[ch[b].nodes[0]][0];
	}
	return ans;
}

int ans[MAXN];

void test() {
	node n1;
	//nodes
	/*
	struct node {
		int stat;
		int lsiz, rsiz;
		int sum;
		int size;
	};
	*/
	n1.stat = 1;
	n1.lsiz = 1;
	n1.rsiz = 1;
	n1.sum = 0;
	n1.size = 3;
	node n2;
	n2 = n1;
	node sum = n1 + n2;
	print(sum, "sum");
	exit(0);
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d %d", &N, &M);
	for (int i = 1; i < N; i++) {
		scanf("%d", &F[i]);
	}
	// test();
	for (int i = 1, a, b, w; i < N; i++) {
		scanf("%d %d %d", &a, &b, &w);
		adj[a].push_back(b);
		adj[b].push_back(a);
		E[i] = make_pair(w, pii(a, b));
		mpw[pii(a, b)] = mpw[pii(b, a)] = w;
	}
	//jumping is only for static
	sort(E + 1, E + N);
	reverse(E + 1, E + N);

	//ok now do this stuff...tree HLD stupid shit...
	dfs1(1, 0, 0);
	for (int j = 1; j < MAXLG; j++) {
		for (int i = 1; i <= N; i++) {
			par[i][j] = par[par[i][j - 1]][j - 1];
		}
	}

	dfs2(1, 1);
	//modify chains
	for (int c = 1; c <= C; c++) {
		/*
		printf("new chain: ");
		for (int t : ch[c].nodes) {
			printf("%d ", t);
		}
		puts("");
		*/
		ch[c].init();
	}

	//queries now
	for (int i = 1; i <= M; i++) {
		scanf("%d %d %d", &Q[i].se.fi, &Q[i].se.se, &Q[i].fi.fi);
		Q[i].fi.se = i;
	}
	sort(Q + 1, Q + M + 1);
	reverse(Q + 1, Q + M + 1);

	for (int i = 1; i < N; i++) {
		//make the deeper one the second one, for sake of queries.
		int &a = E[i].se.fi, &b = E[i].se.se;
		if (depth[a] > depth[b]) {
			swap(a, b);
		}
	}

	for (int i = 1, j = 1; i <= M; i++) {
		//trufula trees are nice
		int w = Q[i].fi.fi, a = Q[i].se.fi, b = Q[i].se.se;
		if (depth[a] < depth[b]) {
			swap(a, b);
		}
		int c = lca(a, b);
		for (; j < N && E[j].fi >= w; j++) {
			// puts("add");
			int x = E[j].se.se;
			ch[chbel[x]].update(chind[x]);
			// printf("ch[%d] update %d\n", chbel[x], chind[x]);
		}
		node n = go(a, c);
		// print(n, "n");
		if (b != c) {
			node n2 = go(b, c);
			swap(n2.lsiz, n2.rsiz);
			// print(n2, "n2");
			n = n2 + n;
		}
		// print(n, "answer");
		ans[Q[i].fi.se] = eval(n);
	}
	for (int i = 1; i <= M; i++) {
		printf("%d\n", ans[i]);
	}
}