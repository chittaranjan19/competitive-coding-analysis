#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 1000005
#define maxC 1000000007
#define base 29
#define pb push_back

using namespace std;
string p;
int n, m, a[mn], sz;
bool mark[mn];
long long ans = 1, hashValS[mn], hashValV[mn], po[mn];

void setup()
{
    cin >> n >> m >> p;
    sz = p.size();
    FOR(i, 1, m)
        cin >> a[i];
    po[0] = 1;
    FOR(i, 1, n)
        po[i] = (po[i - 1] * base) % maxC;
    FOR(i, 1, sz)
    {
        hashValV[i] = (hashValV[i - 1] * base + p[i - 1] - 'a' + 1) % maxC;
        hashValV[i] = (hashValV[i] + maxC) % maxC;
    }
}

long long getHash(long long* hashVal, int l, int r)
{
    long long re = hashVal[r] - hashVal[l - 1] * po[r - l + 1];
    return (re + maxC) % maxC;
}

void xuly()
{
    FOR(i, 1, sz)
    {
        hashValS[a[1] + i - 1] = hashValV[i];
        mark[a[1] + i - 1] = true;
    }
    int r = a[1] + sz - 1;
    FOR(i, 2, m)
    {
        if (r >= a[i])
        {
            long long hashS = getHash(hashValS, a[i], r);
            long long hashV = getHash(hashValV, 1, r - a[i] + 1);
            if (hashS != hashV)
            {
                cout << 0;
                return;
            }
        }
        r = max(r, a[i] - 1);
        while(r < a[i] + sz - 1)
        {
            r ++;
            hashValS[r] = (hashValS[r - 1] * base + p[r - a[i]] - 'a' + 1) % maxC;
            mark[r] = true;
        }
    }
    FOR(i, 1, n)
    if (!mark[i])
        ans = (ans * 26) % maxC;
    cout << ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
