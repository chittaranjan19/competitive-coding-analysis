//
// Created by Santiago on 12/04/2016.
//

#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <queue>

using namespace std;

vector<vector<int> > final;
vector<int> pre;
vector<int> pos;
vector<int> component;
vector<int> document;
vector<bool> orphan;
int cpre, cpos;

class Query {
public:
    int a, b, c;
    Query(int a, int b, int c) : a(a), b(b), c(c) { }
    Query(int a, int b) : a(a), b(b), c(0) { }
};

void make_set(int x) {
    component[x] = x;
}

int find_comp(int x) {
    if( x != component[x])
        component[x] = find_comp(component[x]);
    return component[x];
}

void join(int x, int y) {
    component[x] = component[y];
}

bool test_parent(int x, int y) {//test if x is parent of y
    return pre[x] < pre[y] && pos[x] > pos[y];
}

void build(int node) {//generate preorder and postorder values
    pre[node] = cpre++;
    for (int i = 0; i < final[node].size(); ++i) {
        int p = final[node][i];
        build(p);
    }
    pos[node] = cpos++;
}

bool is_signed(int node, int start) {
    return find_comp(node) == find_comp(start) && test_parent(node, start);
}

int main() {
    //freopen("information_graph.in", "r", stdin);
    //freopen("information_graph.out", "w", stdout);
    int n, m, doc = 1;
    scanf("%d %d", &n, &m);
    //cin>>n>>m;
    final = vector<vector<int> >(n+1);
    pre = vector<int> (n+1);
    pos = vector<int> (n+1);
    component = vector<int> (n+1, 0);
    orphan = vector<bool> (n+1, true);
    vector<queue<int> > queries2(m+1);
    vector<queue<string> > answers(m+1);
    queue<Query> queries;
    final = vector<vector<int> >(n+1);
    for (int i = 0; i < m; ++i) {
        int c, x, y;
        //cin>>c;
        scanf("%d", &c);
        if(c == 1) {
            //cin>>x>>y;
            scanf("%d %d", &x, &y); //y is boss of x
            final[y].push_back(x);
            orphan[x] = false;
            queries.push(Query(c, x, y));
        }
        else if(c == 2) {
            //cin>>x;
            scanf("%d", &x);
            queries.push(Query(c, x));
        }
        else {
            //cin>>x>>y;
            scanf("%d %d", &x, &y);
            queries.push(Query(c, x, y));//file y, node x
            //printf("query for %d pushed\n", y);
            queries2[y].push(x);
        }
    }
    for (int i = 1; i <= n; ++i) {
        make_set(i);
        if(orphan[i]) {
            //printf("dfs at %d\n", i);
            cpre = 0;
            cpos = 0;
            build(i);
        }
    }
    while(!queries.empty()) {
        Query q = queries.front();
        int c = q.a, x, y;
        queries.pop();
        if(c == 1) {//join
            x = q.b;
            y = q.c;
            join(x, y);
        }
        else if(c == 2) {//document
            x = q.b;
            //printf("file %d state %d\n", doc, queries2[doc].empty()?1:0);
            while (!queries2[doc].empty()) {
                //cout<<"inserting in "<<doc<<endl;
                int p = queries2[doc].front();
                queries2[doc].pop();
                //printf("testing for %d root %d\n", p, x);
                bool b = is_signed(p, x);
                //printf("testing for %d root %d result %d\n", p, x, b?1:0);
                answers[doc].push(b?"YES" : "NO");
            }
            doc++;
        }
        else {//test
            x = q.b;
            y = q.c;
            string ans = answers[y].front();
            answers[y].pop();
            cout<<ans<<endl;
        }
    }
    return 0;
}