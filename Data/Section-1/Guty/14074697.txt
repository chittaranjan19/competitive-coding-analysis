#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Circle
{
	Circle (tint xx, tint yy, tint rr)
	{
		x = xx;
		y = yy;
		r = rr;
	}
	tint x,y,r;
};


int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<Circle> circulito (n,Circle(0,0,0));
	forn(i,n)
	{
		tint x,y,r;
		cin >> x >> y >> r;
		circulito[i] = Circle(x,y,r);
	}
	cout << "(";
	forn(i,n)
	{
		forn(j,n)
		{
			if (i != j)
			{
				cout << "(t-" << circulito[j].x << ")/(" << circulito[i].x <<"-"<<circulito[j].x<<")*";
			}
		}
		if (i < n-1)
			cout << circulito[i].x << "+";
		else 
			cout << circulito[i].x;
	}
	cout << ")*";
	forsn(t,n,51)
	{
		if (t < 50)
			cout << "(t-" << t << ")*";
		else
			cout << "(t-" << t << ")";
	}
	cout << "+" << circulito[0].x << "*";
	forn(i,n)
	{
		if (i < n-1)
			cout << "(t-" << i << ")*";
		else
			cout << "(t-" << i << ")";
	}
	
	cout << endl;
	
	cout << "(";
	forn(i,n)
	{
		forn(j,n)
		{
			if (i != j)
			{
				cout << "(t-" << circulito[j].y << ")/(" << circulito[i].y <<"-"<<circulito[j].y<<")*";
			}
		}
		if (i < n-1)
			cout << circulito[i].y << "+";
		else 
			cout << circulito[i].y;
	}
	cout << ")*";
	forsn(t,n,51)
	{
		if (t < 50)
			cout << "(t-" << t << ")*";
		else
			cout << "(t-" << t << ")";
	}
	cout << "+" << circulito[0].y <<"*";
	forn(i,n)
	{
		if (i < n-1)
			cout << "(t-" << i << ")*";
		else
			cout << "(t-" << i << ")";
	}
	
	return 0;
}



