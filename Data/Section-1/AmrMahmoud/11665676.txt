#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

string s;

LL DP[5002][5002];

LL eval(int i, int j)
{
  LL &temp = DP[i][j];
  if(temp != -1) return temp;
  for(int x=i;x<=j;x++)
    if(s[x] == '+')
      return temp = eval(i, x - 1) + eval(x + 1, j);
  temp = 1;
  for(int x=i;x<=j;x+=2)
    temp*=s[x] - '0';
  return temp;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin >> s;
  vector<int > v;
  setdp(DP);
  for(int i=0;i<s.size();i++)
  {
    if(s[i] == '*')
      v.pb(i);
  }
  LL res = eval(0, s.size() - 1);
  for(int i=0;i<v.size();i++)
  {
    int ind = v[i];
    LL tmp = 1, suff = 0;
    for(int j=ind+1;j<s.size();j+=2)
    {
      if(s[j-1] == '+')
      {
        suff = eval(j, s.size() - 1);
        break;
      }
      tmp*=s[j] - '0';
    }
    LL tmpex = 0, last = 0;
    for(int j=ind-1;j>=0;j-=2)
    {
      if(s[j+1] == '+')
      {
        last = 0;
        tmpex-=last;
        LL x = 1;
        for(int k=j;k<ind;k+=2)
        {
          x*=s[k] - '0';
          if(s[k+1] == '+') break;
        }
        last = x;
        tmpex+=x;
      }
      else
      {
        tmpex-=last;
        LL x = 1;
        for(int k=j;k<ind;k+=2)
        {
          x*=s[k] - '0';
          if(s[k+1] == '+') break;
        }
        last = x;
        tmpex+=x;
      }
      LL mul = 1, pref = 0;
      for(int k=j-2;k>=0;k-=2)
      {
        if(s[k+1] == '+')
        {
          pref = eval(0, k);
          break;
        }
        mul*=s[k] - '0';
      }
      res = max(res, suff + pref + tmp * mul * tmpex);
    }
  }
  reverse(s.begin(), s.end());
  setdp(DP);
  for(int i=0;i<v.size();i++)
  {
    int ind = v[i];
    LL tmp = 1, suff = 0;
    for(int j=ind+1;j<s.size();j+=2)
    {
      if(s[j-1] == '+')
      {
        suff = eval(j, s.size() - 1);
        break;
      }
      tmp*=s[j] - '0';
    }
    LL tmpex = 0, last = 0;
    for(int j=ind-1;j>=0;j-=2)
    {
      if(s[j+1] == '+')
      {
        last = 0;
        tmpex-=last;
        LL x = 1;
        for(int k=j;k<ind;k+=2)
        {
          x*=s[k] - '0';
          if(s[k+1] == '+') break;
        }
        last = x;
        tmpex+=x;
      }
      else
      {
        tmpex-=last;
        LL x = 1;
        for(int k=j;k<ind;k+=2)
        {
          x*=s[k] - '0';
          if(s[k+1] == '+') break;
        }
        last = x;
        tmpex+=x;
      }
      LL mul = 1, pref = 0;
      for(int k=j-2;k>=0;k-=2)
      {
        if(s[k+1] == '+')
        {
          pref = eval(0, k);
          break;
        }
        mul*=s[k] - '0';
      }
      res = max(res, suff + pref + tmp * mul * tmpex);
    }
  }
  cout << res;
  return 0;
}
