#include <iostream>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); a - массв, n - кол-во эл-тов
#include <cstdlib>      // min() max()
#include <iomanip>      // setw()
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#define SRT srand(int(time(0)))
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
using namespace std;
int ten[7] = {1, 10, 100, 1000, 10000, 100000, 1000000};
void get_data(const string &, int &pl, int &mi, int &n);
int main()
{
    int pl = 1, mi = 0, n = 0, x, y = 1, np[100], nm[100];
    string s;
    getline(cin, s);
    get_data(s, pl, mi, n);
    if (mi != 0)
    {
        x = (n + mi) / pl;
        if (x > 0 && x <= n)
        {
            int dif = n - pl * x + mi;
            if (n == x && dif > 0)
            {
                cout << "Impossible\n";
            }
            else
            {
                for (int i = 0; i < pl; ++i)
                {
                    np[i] = x;
                    if (dif != 0)
                    {
                        ++np[i];
                        --dif;
                    }
                }
                cout << "Possible\n";
                cout << np[0] << ' ';
                for (int i = 2, inp = 1; s[i] != '='; i += 4)
                {
                    if (s[i] == '+')
                        printf("+ %d ", np[inp++]);
                    else
                        printf("- 1 ");
                }
                printf("= %d\n", n);
            }
        }
        else
        {
            x = 1;
            y = (pl - n) / mi;
            if (y > 0 && y <= n)
            {
                int dif = pl - mi * y - n;
                if (n == y && dif > 0)
                {
                    cout << "Impossible\n";
                }
                else
                {
                    for (int i = 0; i < mi; ++i)
                    {
                        nm[i] = y;
                        if (dif != 0)
                        {
                            ++nm[i];
                            --dif;
                        }
                    }
                    cout << "Possible\n";
                    cout << "1 ";
                    for (int i = 2, inm = 0; s[i] != '='; i += 4)
                    {
                        if (s[i] == '+')
                            printf("+ 1 ");
                        else
                            printf("- %d ", nm[inm++]);
                    }
                    printf("= %d\n", n);
                }
            }
            else
            {
                cout << "Impossible\n";
            }
        }
    }
    else
    {
        int x = n / pl, dif = n - x * pl, np[100];
        if (x < 1)
            cout << "Impossible\n";
        else
        {
            for (int i = 0; i < pl; ++i)
            {
                np[i] = x;
                if (dif != 0)
                {
                    ++np[i];
                    --dif;
                }
            }
            cout << "Possible\n";
            cout << np[0] << ' ';
            for (int i = 2, npi = 1; s[i] != '='; i += 4)
                printf("+ %d ", np[npi++]);
            printf("= %d\n", n);
        }
    }
    return 0;
}
void get_data(const string &s, int &pl, int &mi, int &n)
{
    int num = 0;
    while (s[num] != '=')
    {
        if (s[num] == '+')
            ++pl;
        else if (s[num] == '-')
            ++mi;
        num += 2;
    }
    num += 2;
    int r = 0;
    while (s[num++] != '\0')
        ++r;
    num -= 2;
    for (int i = num; s[i] != ' '; --i)
        n += ten[num - i] * (int(s[i]) - '0');
}