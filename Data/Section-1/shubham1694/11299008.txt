#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define inf 1000000000
#define maxn 1000000

#define ll long long
#define pii pair<int, int>
#define pb push_back
#define sin scanint
#define bitcount(x) __builtin_popcount(x)
#define fill(s, p) memset(s, p, sizeof(s));
#define gc getchar

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

ll modpow(ll a, ll b)
{
    ll x=1ll, y=a;
    while(b){
        if(b%2)
            x=(x*y)%MOD;
        y=(y*y)%MOD;
        b/=2;
    }
    return x;
}

ll gcd(ll a, ll b)
{
    if(a%b==0)
        return b;
    else
        return gcd(b, a%b);
}

map<ll, ll> m1;
map<ll, ll> m2;

int main()
{
    //#ifndef ONLINE_JUDJE
    //  freopen("input.txt", "r", stdin);
    //#endif
    ll m, x1, x2, a1, a2, y11, y22, h1, h2, j, p1, p2, prev1, c1, c2, prev2, fl1, fl2, i, n;
    scanf("%I64d%I64d%I64d%I64d%I64d%I64d%I64d%I64d%I64d", &m, &h1, &a1, &x1, &y11, &h2, &a2, &x2, &y22);
    m1[h1] = 0;
    prev1 = h1;
    i = 1;
    fl1=fl2=-1;
    while(1){
        c1 = (x1*prev1+y11)%m;
        if(c1==a1 && fl1==-1)
            fl1 = i;
        if(m1.find(c1)!=m1.end()){
            p1 = i-m1[c1];
            break;
        }
        m1[c1] = i;
        i++;
        prev1 = c1;
    }
    m2[h2] = 0;
    prev2 = h2;
    i = 1;
    while(1){
        //cout << "1\n";
        c2 = (x2*prev2+y22)%m;
        //cout << c2 << endl;
        if(c2==a2 && fl2==-1)
            fl2 = i;
        if(m2.find(c2)!=m2.end()){
            p2 = i-m2[c2];
            break;
        }
        m2[c2] = i;
        i++;
        prev2 = c2;
    }
    //cout << fl1 << " " << fl2 << endl;
    if(fl1==-1 || fl2==-1){
        printf("-1\n");
        return 0;
    }
    if(p1==p2 && fl1!=fl2){
        printf("-1\n");
        return 0;
    }
    if(p1==p2 && fl1==fl2){
        printf("%I64d\n", fl1);
        return 0;
    }
    n = (fl1-fl2)/(p2-p1);
    n = fl1 + n*p1;
    printf("%I64d\n", n);
    return 0;
}