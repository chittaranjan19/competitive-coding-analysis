import java.io.*;
import java.util.*;
import java.math.*;

public class Solution {

	void solve() throws IOException {
		int n = nextInt();
		int kk = nextInt();
		int[] a = new int[n];
		for (int i=0; i<n; i++) a[i] = nextInt();
		Arrays.sort(a);
		double cof = 1-kk/100.;
		double sum = 0;
		for (int x : a) sum += x;
		double l = 0, r = sum / n;
		for (int it=0; it<100; it++) {
			double mid = (l+r)/2;
			double less = 0;
			int k = 0;
			for (; a[k]+eps<mid && k<n; k++)
				less += a[k];
			double more = sum - less;
			if ( cof*(more-(n-k)*mid) >= (k)*mid-less) l = mid; else r = mid;
				
			
		}
		out.printf(Locale.US, "%1.8f", (l+r)/2);
		
		
		
		
	
	}	
	
	
	
	
	
	
	
	
	
	
	
    static final int inf = 1000000000+10;
    static final long linf = 1l<<62;
    static final double eps = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;    
    
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }
    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }
    long nextLong() throws IOException {
            return Long.parseLong(next());
    }
    public static void main(String[] args) {        
    	new Solution().run();    
    }    
}
