#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 200001
#define maxC 1000000007
#define mp make_pair
#define F first
#define S second
#define pb push_back

using namespace std;
int n, m, pa[mn], h[mn], getRoot[mn], r, top;
long long x[mn], que[70], st[70];
pair<int, int> edge[mn];
vector< pair<int, long long> > g[mn];

int root(int u)
{
    if (getRoot[u])
        return (getRoot[u] = root(getRoot[u]));
    return u;
}

void setup()
{
    int u, v;
    long long w;
    cin >> n >> m;
    FOR(i, 1, n - 1)
    {
        cin >> u >> v >> w;
        edge[i] = mp(u, v);
        g[u].pb(mp(v, w));
        g[v].pb(mp(u, w));
    }
    memset(getRoot, 0, sizeof(getRoot));
}

void dfs(int u)
{
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        long long w = g[u][i].S;
        if (v == pa[u])
            continue;
        if (w == 1)
            getRoot[v] = root(u);
        h[v] = h[u] + 1;
        pa[v] = u;
        x[v] = w;
        dfs(v);
    }
}

void querry1()
{
    int a, b, dem = 0;
    r = top = 0;
    long long y;
    cin >> a >> b >> y;
    a = root(a);
    b = root(b);
    while (a != b)
    {
        int xx = a, yy = b;
        if (h[xx] >= h[yy])
        {
            que[++ r] = x[a];
            a = root(pa[a]);
            dem ++;
        }
        if (h[xx] <= h[yy])
        {
            st[++ top] = x[b];
            b = root(pa[b]);
            dem ++;
        }
        if (dem >= 64)
        {
            cout << "0\n";
            return;
        }
    }
    FOR(i, 1, r)
        y /= que[i];
    while (top)
        y /= st[top --];
    cout << y << '\n';
}

void querry2()
{
    int p, u, v;
    long long c;
    cin >> p >> c;
    u = edge[p].F;
    v = edge[p].S;
    if (v == pa[u])
        swap(u, v);
    if (c == 1)
        getRoot[v] = root(u);
    else
        x[v] = c;
}

void xuly ()
{
    int type;
    h[1] = 1;
    dfs(1);
    FOR(i, 1, m)
    {
        cin >> type;
        if (type == 1)
            querry1();
        else
            querry2();
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
