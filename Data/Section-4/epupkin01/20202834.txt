#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<ll, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

const int S = 1e5;
ll add[S];

int main()
{
    ll m;
    cin >> m;
    if (m < 8)
    {
        cout << m << ' ' << m << '\n';
        return 0;
    }
    
    ll i;
    for (i = 1; i <= S; ++i)
        add[i - 1] = i*i*i;
    
    Pair b[4] = {Pair(6, 6), Pair(6, 6), Pair(7, 7), Pair(7, 7)};
    
    int coef;
    for (int k = 0; k < 4; ++k)
    {
        coef = k % 2 == 0 ? 8 : 16;
        if (b[k].first + coef <= m)
            b[k].first += coef, b[k].second += k % 2 == 0 ? 1 : 2;
        
        for (i = 2; i < S && b[k].first + add[i] < m; ++i)
            b[k].first += add[i], ++b[k].second;
        
        //cout << ' ' << b[k].first;
    }
    //cout << '\n';
    
    Pair *ans = b;
    for (i = 1; i < 4; ++i)
        if (ans->first < b[i].first)
            ans = b + i;
    
    cout << ans->second << ' ' << ans->first << '\n';
    
    return 0;
}