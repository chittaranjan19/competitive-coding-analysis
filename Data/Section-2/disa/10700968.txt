#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
#include <iomanip>
#include <map>
#include <cmath>
#include <queue>
#include <time.h>
using namespace std;

typedef long long ll;

#if _DEBUG
#include <fstream>
ifstream cin("input.txt");
ofstream cout("output.txt");
#else
#include <iostream> 
#endif

const int sz = 1e5 + 2;

int group[sz];

struct edge {
	int to, w;
	edge() {}
	edge(int to, int w) : to(to), w(w) {}
};

vector < vector < edge > > vv;


const int INF = 1e9;

int d[502][502];

int size[sz], parent[sz];

void make_set(int v) {
	parent[v] = v;
	size[v] = 1;
}

int find_set(int v) {
	if (parent[v] == v)
		return v;
	return parent[v] = find_set(parent[v]);
}

void union_set(int a, int b) {
	a = find_set(a);
	b = find_set(b);
	if (a != b) {
		if (size[a] < size[b])
			swap(a, b);
		parent[b] = a;
		size[a] += size[b];
	}
}

int main() {
	int n, m, k;
	cin >> n >> m >> k;
	vv.resize(n + 1);
	int cnt = 1;
	for (int i = 0; i < k; i++) {
		int x;
		cin >> x;
		for (int j = 0; j < x; j++) {
			group[cnt] = i + 1;
			cnt++;
		}
	}
	for (int i = 1; i <= n; i++)
		make_set(i);
	for (int i = 0; i < m; i++) {
		int from, to, w;
		cin >> from >> to >> w;
		if (w == 0) {
			union_set(from, to);
		}
		vv[from].push_back(edge(to, w));
		vv[to].push_back(edge(from, w));
	}
	for (int i = 1; i <= n; i++) {
		if (group[i] == group[i - 1] && find_set(i) != find_set(i - 1)) {
			cout << "No\n";
			return 0;
		}
	}
	cout << "Yes\n";
	for (int i = 1; i <= k; i++) {
		for (int j = 1; j <= k; j++) {
			if (i == j)
				d[i][j] = 0;
			else
				d[i][j] = INF;
		}
	}
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j < vv[i].size(); j++) {
			int from = i, to = vv[i][j].to, w = vv[i][j].w;
			from = group[from];
			to = group[to];
			if (from == to) continue;
			d[from][to] = min(d[from][to], w);
			d[to][from] = min(d[to][from], w);
		}
	}
	for (int q = 1; q <= k; q++) {
		for (int i = 1; i <= k; i++) {
			for (int j = 1; j <= k; j++) {
				d[i][j] = min(d[i][j], d[i][q] + d[q][j]);
			}
		}
	}
	for (int i = 1; i <= k; i++) {
		for (int j = 1; j <= k; j++) {
			if (d[i][j] == INF) {
				cout << -1 << ' ';
			}
			else {
				cout << d[i][j] << ' ';
			}
		}
		cout << '\n';
	}
	return 0;
}