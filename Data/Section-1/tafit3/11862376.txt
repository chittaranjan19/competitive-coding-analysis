import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        int[] a = intarr();
        int[] d = intarr();
        int[] s = new int[100001];
        int[] c = new int[100001];
        Map<Integer, int[]> m = new HashMap<>();
        int[] left = new int[201];
        for(int i=0;i<n;i++) {
            s[a[i]] += d[i];
            c[a[i]]++;
            int[] q = m.get(a[i]);
            if(q == null) {
                q = new int[201];
                m.put(a[i],q);
            }
            q[d[i]]++;
            left[d[i]]++;
        }
        int res = 0;
        int cur = 100000;
        int k = n;
        int best = Integer.MAX_VALUE;
        while(cur > 0 && k > 1) {
            if(c[cur] > 0) {
                if(c[cur] > k/2) {
                    break;
                }
                int[] q = m.remove(cur);
                for(int y=0;y<=200;y++) {
                    left[y] -= q[y];
                }
                int toRemove = k - c[cur]*2 + 1;
                int j = 0;
                int cost = 0;
                boolean ok = true;
                while(toRemove > 0 && j <= 200 && ok) {
                    if(left[j] > 0) {
                        if(left[j] >= toRemove) {
                            cost += j*toRemove;
                            toRemove = 0;
                        } else {
                            cost += j*left[j];
                            toRemove -= left[j];
                        }
                        if(res + cost > best) {
                            ok = false;
                            break;
                        }
                    }
                    j++;
                }
                if(ok) {
                    best = Math.min(best, res + cost);
                }
                res += s[cur];
                k -= c[cur];
            }
            cur--;
        }
        best = Math.min(best, res);
        out(best);
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
