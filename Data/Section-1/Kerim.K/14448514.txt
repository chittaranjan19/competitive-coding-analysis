#include<bits/stdc++.h>
#define MAXN 499
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"You can do IT.I belive YOU!!!"<<endl;
#define ff first
#define ss second
#define lg(x) ceil(log2(x))
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int vis[409][409],dis[MAXN],p[MAXN];
vector<int>adj[MAXN],dj[MAXN];
int main(){
	int n,m;
	cin>>n>>m;
	while(m--){
		int u,v;
		cin>>u>>v;
		adj[u].pb(v);
		adj[v].pb(u);
		vis[u][v]=1;
		vis[v][u]=1;
	}
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			if(!vis[i][j]){
				dj[i].pb(j);
				dj[j].pb(i);				
				vis[i][j]=1;
				vis[j][i]=1;
			}
		}
	}
	fill(dis,dis+MAXN,INF);
	priority_queue<PII,vector<PII>,greater<PII> >q;
	q.push(mp(0,1));
	dis[1]=0;
	while(!q.empty()){
		int u=q.top().ss,w=q.top().ff;
		q.pop();
		if(u==n)
			break;
		if(dis[u]==w){
			for(int i=0;i<adj[u].size();i++){
				int v=adj[u][i];
				if(dis[v]>dis[u]+1){
					dis[v]=dis[u]+1;
					p[v]=u;
					q.push(mp(dis[v],v));	
				}
			}
		}
	}
	if(dis[n]==INF){
		cout<<"-1"<<endl;
		return 0;
	}
	int ans=dis[n];
	vector<int>g;
	int k=n;
	while(1){
		if(p[k]==0)
			break;
		g.pb(k);	
		k=p[k];	
	}
	g.pb(1);
	reverse(all(g));
	fill(dis,dis+MAXN,INF);
	fill(p,p+MAXN,0);
	priority_queue<PII,vector<PII>,greater<PII> >qq;
	qq.push(mp(0,1));
	dis[1]=0;
	int c=0;
	while(!qq.empty()){
		int u=qq.top().ss,w=qq.top().ff;
		qq.pop();
		if(u==n)
			break;
		if(dis[u]==w){
			c++;
			for(int i=0;i<dj[u].size();i++){
				int v=dj[u][i];
				if(dis[v]>dis[u]+1 and v!=g[c]){
					dis[v]=dis[u]+1;
					qq.push(mp(dis[v],v));	
				}
			}
		}
	}
	if(dis[n]==INF){
		cout<<"-1"<<endl;
		return 0;
	}	
	cout<<max(ans,dis[n])<<endl;
	return 0;
}
