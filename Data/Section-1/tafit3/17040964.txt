import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemB {
    BufferedReader rd;

    ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] q = intarr();
        int n = q[0];
        int m = q[1];
        Map<Integer, NavigableMap<Integer, Set<String>>> z = new HashMap<>();
        for(int i=0;i<n;i++) {
            String[] h = split(rd.readLine());
            int reg = pint(h[1]);
            int pts = pint(h[2]);
            z.computeIfAbsent(reg, k -> new TreeMap<>()).computeIfAbsent(pts, k-> new HashSet<>()).add(h[0]);
        }
        StringBuilder buf = new StringBuilder();
        for(int i=1;i<=m;i++) {
            if(i > 1) {
                buf.append('\n');
            }
            NavigableMap<Integer, Set<String>> u = z.get(i);
            if(u.size() == 1) {
                Map.Entry<Integer, Set<String>> e = u.firstEntry();
                if(e.getValue().size() <= 2) {
                    append(buf, e.getValue());
                } else {
                    buf.append('?');
                }
            } else {
                Map.Entry<Integer, Set<String>> last = u.lastEntry();
                Map.Entry<Integer, Set<String>> next = u.lowerEntry(last.getKey());
                if(last.getValue().size() == 1) {
                    if(next.getValue().size() == 1) {
                        buf.append(last.getValue().iterator().next()).append(' ').append(next.getValue().iterator().next());
                    } else {
                        buf.append('?');
                    }
                } else if(last.getValue().size() == 2) {
                    append(buf, last.getValue());
                } else {
                    buf.append('?');
                }
            }
        }
        out(buf);
    }

    private void append(StringBuilder buf, Set<String> s) {
        Iterator<String> it = s.iterator();
        buf.append(it.next()).append(' ').append(it.next());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
