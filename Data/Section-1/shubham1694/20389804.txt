#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 55;

int n, k;
int graph[2][maxn][maxn], adj[2][maxn][maxn], cost[2][maxn][maxn];
int dist[maxn];
pii parent[maxn];

int dijkstra()
{
	int i, j, l;
	for(i=1; i<=n; i++)
		dist[i] = inf;
	priority_queue<pii, vector<pii>, greater<pii> > pq;
	pq.push(mp(0, 1));
	dist[1] = 0;
	while(!pq.empty()){
		int d = pq.top().f;
		int u = pq.top().s;
		pq.pop();
		if(d > dist[u])
			continue;
		for(i=0; i<2; i++){
			for(j=1; j<=n; j++){
				if(graph[i][u][j]>0 && dist[j] > (d + cost[i][u][j])){
					dist[j] = d + cost[i][u][j];
					parent[j] = mp(i, u);
					pq.push(mp(dist[j], j));
				}
			}
		}
	}
	return dist[n];
}

int solve()
{
	int i, j, l;
	for(i=0; i<2; i++){
		for(j=1; j<=n; j++){
			for(l=1; l<=n; l++)
				graph[i][j][l] = adj[i][j][l];
		}
	}
	int flow = 0;
	while(1){
		int x = dijkstra();
		if(x>k)
			break;
		int cur = n;
		int minval = mod;
		while(cur != 1){
			minval = min(minval, graph[parent[cur].f][parent[cur].s][cur]);
			cur = parent[cur].s;
		}
		if(x)
			minval = min(minval, k/x);
		k -= (minval*x);
		flow += minval;
		cur = n;
		while(cur != 1){
			graph[parent[cur].f][parent[cur].s][cur] -= minval;
			graph[parent[cur].f][cur][parent[cur].s] += minval;
			cur = parent[cur].s;
		}
	}
	return flow;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j;
	scanf("%d%d", &n, &k);
	for(i=1; i<=n; i++){
		for(j=1; j<=n; j++){
			scanf("%d", &adj[0][i][j]);
			if(adj[0][i][j]){
				adj[1][i][j] = inf;
				cost[1][i][j] = 1;
			}
		}
	}
	int ans = solve();
	printf("%d\n", ans);
	return 0;
}
