#include <bits/stdc++.h>
#define pb push_back

using namespace std;

class node{
public:
    int index;
    vector<int> near;
};

node a[1000010];
bool bf1[1000010],bf2[1000010],bf3[1000010];
int a1[1000010],a2[1000010],a3[1000010];

int main()
{
    int n,m;
    scanf("%d %d\n",&n,&m);
    char u;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            scanf("%c",&u);
          //  cout<<u;
            a[(i-1)*m+j].index=u-48;
            if(u!='#')
            {
                int k,l;
                if(a[(i-1)*m+j].index>0){k=1000005+a[(i-1)*m+j].index;}
                else k=(i-1)*m+j;
                if(j>1)
                {
                    if(a[(i-1)*m+j-1].index!=-13)
                    {
                        if(a[(i-1)*m+j-1].index>0){l=1000005+a[(i-1)*m+j-1].index;}
                        else l=(i-1)*m+j-1;
                        a[l].near.pb(k);
                        a[k].near.pb(l);
                    }
                }

                if(i>1)
                {
                    if(a[(i-2)*m+j].index!=-13)
                    {
                        if(a[(i-2)*m+j].index>0){l=1000005+a[(i-2)*m+j].index;}
                        else l=(i-2)*m+j;
                        a[l].near.pb(k);
                        a[k].near.pb(l);
                    }
                }
            }
        }
        if(i<n)scanf("\n");
    }

    list<int> q;

    //fill_n(*a1, sizeof a1 / sizeof **a1, 100000000);
    //fill_n(&a[0], sizeof(a) / sizeof(a[0]), 10);
    memset(a1, 10, 4*1000010);
    memset(a2, 10, 4*1000010);
    memset(a3, 10, 4*1000010);

    bf1[1000005+1]=1;
    a1[1000005+1]=-1;
    q.pb(1000005+1);
    while(!q.empty())
    {
        int j=q.front();
        //cout<<j<<endl;
        q.pop_front();
        vector<int> v=a[j].near;
        for(int i=0;i<v.size();i++)
        {
            if(!bf1[v[i]])
            {
                a1[v[i]]=a1[j]+1;
             // cout<<v[i]<<" "<<a1[v[i]]<<endl;
                bf1[v[i]]=1;
                q.push_back(v[i]);
            }
        }
    }
    bf2[1000005+2]=1;
    a2[1000005+2]=-1;
    q.pb(1000005+2);
    while(!q.empty())
    {
        int j=q.front();
        //cout<<j<<endl;
        q.pop_front();
        vector<int> v=a[j].near;
        for(int i=0;i<v.size();i++)
        {
            if(!bf2[v[i]])
            {
                a2[v[i]]=a2[j]+1;
            //  cout<<v[i]<<" "<<a2[v[i]]<<endl;
                bf2[v[i]]=1;
                q.push_back(v[i]);
            }
        }
    }

    bf3[1000005+3]=1;
    a3[1000005+3]=-1;
    q.pb(1000005+3);
    while(!q.empty())
    {
        int j=q.front();
        //cout<<j<<endl;
        q.pop_front();
        vector<int> v=a[j].near;
        for(int i=0;i<v.size();i++)
        {
            if(!bf3[v[i]])
            {
                a3[v[i]]=a3[j]+1;
         //       cout<<v[i]<<" "<<a3[v[i]]<<endl;
                bf3[v[i]]=1;
                q.push_back(v[i]);
            }
        }
    }

    int mi=100000000;
    if(a1[1000007]==0){mi=min(a1[1000008],a2[1000008]);}
    else if(a1[1000008]==0){mi=min(a1[1000007],a3[1000007]);}
    else if(a2[1000008]==0){mi=min(a3[1000006],a2[1000006]);}
    else {
    for(int i=1;i<=n*m;i++)
    {
       //cout<<a1[i]<<a2[i]<<a3[i]<<endl;
        {mi=min(mi,a1[i]+a2[i]+a3[i]+(a[i].index<0));}
    }
    }
    //mi=min(a1[1000007]+a1[1000008],mi);
    //mi=min(a2[1000006]+a2[1000008],mi);
    //mi=min(a3[1000006]+a3[1000007],mi);
    if(mi>90000000){cout<<"-1"<<endl;}
    else {cout<<mi<<endl;}
}
