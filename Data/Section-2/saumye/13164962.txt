#include<stdio.h>
#include<queue>
#include<list>
using namespace std;
int cat[100001],maxi[100001];
bool leaf[100001];
int max(int a,int b)
{
	return a>b?a:b;
}
int main()
{
	int i,n,m,a,b;
	bool has[100001];
	list<int> tree[1000001];
	list<int>::iterator it;
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++)
		scanf("%d",&has[i]);
	for(i=0;i<n-1;i++)
	{
		scanf("%d%d",&a,&b);
		tree[a].push_back(b);
		tree[b].push_back(a);
	}
	//printf("input...comp\n");
	queue<int> q;
	bool vis[100001]={0};//setmem 0
	q.push(1);
	vis[1]=1;
	cat[1]=has[1];
	maxi[1]=cat[1];
	while(!q.empty())
	{
		int parent=q.front();
		q.pop();
		bool lf=1;
		for(it=tree[parent].begin();it!=tree[parent].end();it++)
		{
			if(!vis[*it])
			{
				lf=0;
				q.push(*it);
				vis[*it]=1;
				if(has[*it])
				{
					cat[*it]=cat[parent]+1;
				}
				else
				{
					cat[*it]=0;
				}
				maxi[*it]=max(cat[*it],maxi[parent]);
			}
		}
		if(lf==1)
			leaf[parent]=1;
	}
	int cnt=0;
	for(i=1;i<=n;i++)
	{
		if(leaf[i] && maxi[i]<=m)
		{
			cnt++;
		}
	}
	printf("%d\n",cnt);
	/*for(i=1;i<=n;i++)
		printf("%d ",maxi[i]);*/
	return 0;
}
