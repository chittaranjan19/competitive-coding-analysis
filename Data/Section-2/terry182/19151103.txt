#include <iostream>
#include <vector>
using namespace std;
struct node{
    vector<int> childs;
    int total;
    int father;
    double delay;

    node(){
        total = 1; 
        father = 1;
        delay = .0;
    }
} a[100024];

void dfs(int x)
{   int len = a[x].childs.size();
    for (int i = 0; i < len; ++i)
    {   dfs(a[x].childs[i]);
        a[x].total += a[ a[x].childs[i] ].total;
    }

    for (int i = 0; i < len; ++i)
    {   int removeme = (a[x].total - a[a[x].childs[i]].total)-1;
        double dec = 1./len;
        int comb = 1;
        int ddd = len-1, ccc = 1;
        node* ptr = a + a[x].childs[i];
        ptr->delay += dec; // First one
        for (int j = 1; j < len; ++j)
        {   dec *= 1./(len-j) * j ;
            comb *= ddd; comb /= ccc;
            ptr->delay += dec * (removeme + comb);
            ccc++; ddd--;
        }
    }
}

double dp[100024];
void dps(int x)
{   
    if ( x != 1 ) dp[x] = dp[a[x].father] + a[x].delay;
    int len = a[x].childs.size();
    for (int i  = 0; i < len; ++i)
        dps(a[x].childs[i]);
}


int main()
{   int n;
    cin >> n;
    for (int i = 2; i <= n; ++i)
    {   cin >> a[i].father;
        a[ a[i].father ].childs.push_back(i);
    }
    dfs(1);
    dp[1] = 1.0;
    dps(1);
    for (int i = 1;  i <= n; ++i)
        cout << dp[i] << " ";
    cout << endl;
}
