#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

struct node
{
  int cnt4, cnt7, up, down;

  node(int a, int b, int c, int d): cnt4(a), cnt7(b), up(c), down(d){};

  node(){};
} tree[4000005];
bool lazy[4000005];

char s[1000005];

void build(int i,int L,int R)
{
  if(L == R)
  {
    if(s[L] == '4')
      tree[i] = node(1, 0, 1, 1);
    else tree[i] = node(0, 1, 1, 1);
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  tree[i].cnt4 = tree[i*2 + 1].cnt4 + tree[i*2 + 2].cnt4;
  tree[i].cnt7 = tree[i*2 + 1].cnt7 + tree[i*2 + 2].cnt7;
  tree[i].up = max(max(tree[i].cnt4, tree[i].cnt7), max(tree[i*2 + 1].cnt4 + tree[i*2 + 2].up, tree[i*2 + 1].up + tree[i*2 + 2].cnt7));
  tree[i].down = max(max(tree[i].cnt4, tree[i].cnt7), max(tree[i*2 + 1].cnt7 + tree[i*2 + 2].down, tree[i*2 + 1].down + tree[i*2 + 2].cnt4));
}

void update(int i,int L,int R,int x,int y)
{
  if(lazy[i])
  {
    swap(tree[i].up, tree[i].down);
    swap(tree[i].cnt4, tree[i].cnt7);
    if(L != R)
    {
      lazy[i*2+1] = !lazy[i*2+1];
      lazy[i*2+2] = !lazy[i*2+2];
    }
    lazy[i] = 0;
  }
  if(L >= x && R <= y)
  {
    lazy[i] = !lazy[i];
    if(lazy[i])
    {
      swap(tree[i].up, tree[i].down);
      swap(tree[i].cnt4, tree[i].cnt7);
    }
    if(L != R)
    {
      lazy[i*2+1] = !lazy[i*2+1];
      lazy[i*2+2] = !lazy[i*2+2];
    }
    lazy[i] = 0;
    return;
  }
  if(L > y || R < x)
    return;
  update(i*2 + 1, L, (L + R) / 2, x, y);
  update(i*2 + 2, (L + R) / 2 + 1, R, x, y);
  tree[i].cnt4 = tree[i*2 + 1].cnt4 + tree[i*2 + 2].cnt4;
  tree[i].cnt7 = tree[i*2 + 1].cnt7 + tree[i*2 + 2].cnt7;
  tree[i].up = max(max(tree[i].cnt4, tree[i].cnt7), max(tree[i*2 + 1].cnt4 + tree[i*2 + 2].up, tree[i*2 + 1].up + tree[i*2 + 2].cnt7));
  tree[i].down = max(max(tree[i].cnt4, tree[i].cnt7), max(tree[i*2 + 1].cnt7 + tree[i*2 + 2].down, tree[i*2 + 1].down + tree[i*2 + 2].cnt4));
}

char tmp[10];

int main()
{
  //freopen("approximation.in", "r", stdin);
  //freopen("approximation.out", "w", stdout);
  int n, q, x, y;
  scanf("%d %d", &n, &q);
  scanf("%s", s);
  build(0, 0, n - 1);
  while(q--)
  {
    scanf("%s", tmp);
    if(tmp[0] == 'c')
      printf("%d\n", tree[0].up);
    else
    {
      scanf("%d %d", &x, &y);
      update(0, 0, n - 1, x - 1, y - 1);
    }
  }
  return 0;
}