#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e9;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;
const ll P = 239;

int main()
{
    //freopen("point.in", "r", stdin);
    //freopen("point.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    string s;
    cin >> s;
    int n = s.size();
    int last[26][n + 1];
    for (int c = 0; c < 26; c++)
    {
        int curr = -1;
        for (int i = 0; i < n; i++)
        {
            last[c][i] = curr;
            if (s[i] - 'a' == c)
                curr = i;
        }
        last[c][n] = curr;
    }
    int dp[n][50];
    int come[n][50];
    pair<int, int> pref[n + 1];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < 50; j++)
            dp[i][j] = -1;
    pair<int, int> ans = {-1, -1};
    int currl = 0;
    for (int i = 0; i < n; i++)
    {
        dp[i][0] = last[s[i] - 'a'][n];
        if (dp[i][0] != -1)
            if (2 - (dp[i][0] == i ? 1 : 0) > currl)
            {
                currl = 2 - (dp[i][0] == i ? 1 : 0);
                ans = {0, i};
            }
    }
    for (int j = 1; j < 50; j++)
    {
        pref[0] = {-1, -1};
        for (int i = 0; i < n; i++)
            pref[i + 1] = max(pref[i], {dp[i][j - 1], i});
        for (int i = 0; i < n; i++)
        {
            int x = pref[i].first;
            if (x == -1)
                continue;
            int next = last[s[i] - 'a'][x];
            if (next >= i)
            {
                dp[i][j] = next;
                come[i][j] = pref[i].second;
                if ((j + 1) * 2 - (dp[i][j] == i ? 1 : 0) > currl)
                {
                    currl = (j + 1) * 2 - (dp[i][j] == i ? 1 : 0);
                    ans = {j, i};
                }
            }
        }
    }
    string s1 = "", s2 = "";
    while (true)
    {
        s1 += s[ans.second];
        if (dp[ans.second][ans.first] > ans.second)
            s2 += s[ans.second];
        if (ans.first == 0)
            break;
        ans.second = come[ans.second][ans.first];
        ans.first--;
    }
    reverse(s1.begin(), s1.end());
    cout << s1 + s2 << endl;
    return 0;
}
