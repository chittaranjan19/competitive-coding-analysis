//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1 << 13;

void setmin (int &a, int b) {
	if (a > b) {
		a = b;
	}
}

void setmax (int &a, int b) {
	if (a < b) {
		a = b;
	}
}

int N, R[MAXN];
vector<int> adj[MAXN];
int tree[2 * MAXN];
int vmax[MAXN];	//visited max
int ans;

void update (int x, int v) {
	vmax[x] = v;
	for (tree[x += MAXN] = v; x >>= 1; ) {
		tree[x] = max(tree[2 * x], tree[2 * x + 1]);
	}
}

int query (int a, int b, int cur = 1, int l = 0, int r = MAXN) {
	if (r <= a || b <= l) {
		return 0;
	}
	if (a <= l && r <= b) {
		return tree[cur];
	}
	int mid = (l + r) / 2;
	return max(query(a, b, 2 * cur, l, mid), query(a, b, 2 * cur + 1, mid, r));
}

void dfs (int x, int p) {
	setmax(ans, vmax[R[x]]);
	rep(it, adj[x]) {
		int t = *it;
		if (t != p) {
			int r = R[t], tmp = vmax[r];
			update(r, query(0, r) + 1);
			dfs(t, x);
			update(r, tmp);
		}
	}
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces490F.in", "r", stdin);
#endif
	scanf("%d", &N);
	vector<int> allr;
	for (int i = 1; i <= N; i++) {
		scanf("%d", &R[i]);
		allr.push_back(R[i]);
	}
	sort(allr.begin(), allr.end());
	allr.resize(unique(allr.begin(), allr.end()) - allr.begin());
	for (int i = 1; i <= N; i++) {
		R[i] = lower_bound(allr.begin(), allr.end(), R[i]) - allr.begin() + 1;
	}
	for (int i = 1, a, b; i < N; i++) {
		scanf("%d %d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	for (int i = 1; i <= N; i++) {
		update(R[i], 1);
		dfs(i, -1);
		update(R[i], 0);
	}
	printf("%d\n", ans);
}