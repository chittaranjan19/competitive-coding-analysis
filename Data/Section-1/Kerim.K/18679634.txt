#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int n,m;
int n1,m1;
int ar1[123],ar2[123];
int go(int x){
	int res=1;
	while(x>=7){
		res++;
		x/=7;
	}
	return res;
}
ll dp[11][500][2];
ll cp[11][500][2];
ll f2(int x,int mask,int t){
	if(x>m1)
		return 1LL;
	ll &ret=cp[x][mask][t];
	if(~ret)
		return ret;ret=0LL;
	if(t){
		for(int i=0;i<ar2[x];i++){
			if(((1<<i)&mask))
				continue;
			ret+=f2(x+1,(mask|(1<<i)),0);
		}
		if(!((1<<ar2[x])&mask))
			ret+=f2(x+1,(mask|(1<<ar2[x])),1);
	}
	else{
		for(int i=0;i<7;i++){
			if(((1<<i)&mask))
				continue;
			ret+=f2(x+1,(mask|(1<<i)),0);	
		}
	}
	return ret;
}
ll f(int x,int mask,int t){
//	cout<<x<<" "<<mask<<" "<<t<<endl;
	if(x>n1)
		return f2(1,mask,1);
	ll &ret=dp[x][mask][t];
	if(~ret)
		return ret;ret=0LL;
	if(t){
		for(int i=0;i<ar1[x];i++){
			if(((1<<i)&mask))
				continue;
			ret+=f(x+1,(mask|(1<<i)),0);
		}
		if(!((1<<ar1[x])&mask))
			ret+=f(x+1,(mask|(1<<ar1[x])),1);
	}
	else{
		for(int i=0;i<7;i++){
			if(((1<<i)&mask))
				continue;
			ret+=f(x+1,(mask|(1<<i)),0);	
		}
	}
	return ret;
}
int main(){
	memset(dp,-1,sizeof(dp));
	memset(cp,-1,sizeof(cp));
	scanf("%d%d",&n,&m);n--,m--;
	n1=go(n);m1=go(m);
	int nn=n,mm=m;
	for(int i=n1;i>=1;i--){
		ar1[i]=nn%7;
		nn/=7;
	}
	for(int i=m1;i>=1;i--){
		ar2[i]=mm%7;
		mm/=7;
	}
	printf("%lld\n",f(1,0,1));
	return 0;
}
