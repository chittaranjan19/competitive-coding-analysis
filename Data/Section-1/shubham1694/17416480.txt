#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 200010;

vector<int> adj[maxn];
int n, m, sub[maxn], req[maxn], dp[maxn][2], taken[maxn], val[maxn], ans[maxn];
set<pii> mset[maxn];

void dfs1(int cur, int p)
{
	if(req[cur])
		sub[cur] = 1;
	for(auto it:adj[cur]){
		if(it!=p){
			dfs1(it, cur);
			sub[cur]+=sub[it];
		}
	}
	for(auto it:adj[cur]){
		if(it!=p && sub[it]){
			dp[cur][1] = (dp[cur][1] + 2 + dp[it][1]);
			mset[cur].insert(mp(dp[it][1]-dp[it][0]+1, it));
		}
	}
	if(!mset[cur].empty()){
		auto it = mset[cur].end();
		--it;
		dp[cur][0] = dp[cur][1] - (*it).f;
		taken[cur] = (*it).s;
		val[cur] = (*it).f;
	}
}

void dfs2(int cur, int p)
{
	if(sub[cur]==m)
		ans[cur] = dp[cur][0];
	else{
		if(sub[p]==m){
			if(taken[p]==cur){
				auto dt = mset[p].find(mp(val[p], taken[p]));
				mset[p].erase(dt);
				if(!mset[p].empty()){
					auto it = mset[p].end();
					--it;
					ans[cur] = dp[p][1] - 1 - (*it).f;
				}
				else
					ans[cur] = dp[cur][1] + 1; 
				mset[p].insert(mp(val[p], taken[p]));
			}
			else{
				if(sub[cur])
					ans[cur] = dp[p][0] - 1;
				else
					ans[cur] = dp[p][0] + 1;
			}
		}
		else{
			if(sub[cur])
				ans[cur] = ans[p] - 1;
			else
				ans[cur] = ans[p] + 1; 
		}
	}
	for(auto it:adj[cur]){
		if(it!=p)
			dfs2(it, cur);
	}
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, u, v, ind;
	scanf("%d%d", &n, &m);
	for(i=1; i<n; i++){
		scanf("%d%d", &u, &v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	for(i=1; i<=m; i++){
		scanf("%d", &j);
		req[j] = 1;
	}
	dfs1(1, 0);
	dfs2(1, 0);
	int sol = inf;
	for(i=1; i<=n; i++){
	    if(sol>ans[i]){
			ind = i;
			sol = ans[i];
		}
	}
	printf("%d\n%d\n", ind, sol);
	return 0;
}
