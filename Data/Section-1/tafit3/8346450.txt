import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class ProblemDDiv2_LongJumps {
    BufferedReader rd;

    private ProblemDDiv2_LongJumps() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        int[] a = intarr();
        int n = a[0];
        int l = a[1];
        int x = a[2];
        int y = a[3];
        a = intarr();
        boolean cx = contains(a,x,l);
        boolean cy = contains(a,y,l);
        if(cx && cy) {
            out(0);
        } else if(cx) {
            out(1);
            out(y);
        } else if(cy) {
            out(1);
            out(x);
        } else {
            Set<Integer> xs = new HashSet<Integer>();
            Set<Integer> ys = new HashSet<Integer>();
            for(int g: a) {
                int u = g - x;
                int v = g + x;
                if(u >= 0) {
                    if(ys.contains(u)) {
                        out(1);
                        out(u);
                        return;
                    }
                    xs.add(u);
                }
                if(v <= l) {
                    if(ys.contains(v)) {
                        out(1);
                        out(v);
                        return;
                    }
                    xs.add(v);
                }
                u = g - y;
                v = g + y;
                if(u >= 0) {
                    if(xs.contains(u)) {
                        out(1);
                        out(u);
                        return;
                    }
                    ys.add(u);
                }
                if(v <= l) {
                    if(xs.contains(v)) {
                        out(1);
                        out(v);
                        return;
                    }
                    ys.add(v);
                }
            }
            out(2);
            out(x);
            out(y);
        }
    }

    private boolean contains(int[] a, int x, int l) {
        for(int g: a) {
            for(int u: new int[] { g-x, g+x }) {
                if(u >= 0 && u <= l) {
                    int t = Arrays.binarySearch(a,u);
                    if(t >= 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = s.split(" ");
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemDDiv2_LongJumps();
    }
}
