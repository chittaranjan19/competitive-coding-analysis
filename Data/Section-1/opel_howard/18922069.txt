#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <climits>
#ifdef DEBUG
	#include <ctime>
#endif
using namespace std;

// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(it, n) for(int it = 0; it < n; ++it)
#define loop1(it, n) for(int it = 1; it <= n; ++it)
#define loopft(it, from, to) for(int it = (from); it <= (to); ++it)
#define reverse_iterate(it, cont) for(__typeof((cont).rend()) it = (cont).rbegin(); it != (cont).rend(); ++it)
#define iterate(it, cont) for(__typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define all(cont) (cont).begin(), (cont).end()

typedef unsigned long long ull;
typedef long long ll;

const int INF = INT_MAX;
const int NINF = INT_MIN;
const ll INF_LL = LLONG_MAX;
const ll NINF_LL = LLONG_MIN;
const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, ##args)
	#define rep_rt() printf("[Run time: %.3fs]\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...)
#endif

// end of template

bool check(ii &p) {
	if ((p.a < 0) or (p.b < 0) or (p.a > 3) or (p.b > 2))
		return false;
	if (p.a == 3) {
		if (p.b != 1)
			return false;
	}
	return true;
}

int main() {
#ifdef DEBUG
	freopen("689A.in", "r", stdin);
#endif
    
    vii positions(10);
    positions[0] = mp(3, 1);
    positions[1] = mp(0, 0);
    positions[2] = mp(0, 1);
    positions[3] = mp(0, 2);
    positions[4] = mp(1, 0);
    positions[5] = mp(1, 1);
    positions[6] = mp(1, 2);
    positions[7] = mp(2, 0);
    positions[8] = mp(2, 1);
    positions[9] = mp(2, 2);
    int n;
    scanf("%d%*c", &n);
    string str;
    getline(cin, str);
    vii my_positions;
    iterate(c_p, str) {
    	my_positions.pub(positions[*c_p-'0']);
    }
    int x_mov[] = {1, 0, -1, 0};
    int y_mov[] = {0, 1, 0, -1};
    bool other_poss = false;
    loop(mov_id, 4) {
    	vii new_positions(my_positions);
    	bool is_valid = true;
    	iterate(new_position_p, new_positions) {
    		ii &np = *new_position_p;
    		np.a += y_mov[mov_id];
    		np.b += x_mov[mov_id];
    		is_valid = is_valid and check(np);
    	}
    	if (is_valid)
    		other_poss = true;
    }
    if (other_poss)
    	puts("NO");
    else
    	puts("YES");

#ifdef DEBUG
    rep_rt();
#endif
    return 0;
}