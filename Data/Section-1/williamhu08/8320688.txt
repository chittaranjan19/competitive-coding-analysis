#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define debug(...) fprintf(stderr, __VA_ARGS__)

typedef long long ll;
typedef pair<int, int> pii;

int N, L, X[2], A[100010];
set<int> st;

void kill (int v) {
	cout << "1\n" << v << endl;
	exit(0);
}

int get (int v, int j, int k) {
	return v + X[j] * (k ? 1 : -1);
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces480B.in", "r", stdin);
#endif
	cin >> N >> L >> X[0] >> X[1];
	for (int i = 1; i <= N; i++) {
		cin >> A[i];
		st.insert(A[i]);
	}
	//see if both of them are already there
	bool cnt[2] = {false, false};
	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < 2; j++) {
			if (st.count(A[i] + X[j])) {
				cnt[j] = true;
			}
		}
	}
	if (cnt[0]) {
		if (cnt[1]) {
			cout << "0\n";
			return 0;
		} else {
			kill(X[1]);
		}
	} else if (cnt[1]) {
		kill(X[0]);
	}
	//otherwise see if you need just one or two
	for (int i = 1; i <= N; i++) {
		for (int j = 0; j < 2; j++) {
			//try placing A[i] pm X[j]
			for (int k = 0; k < 2; k++) {
				int val = get(A[i], j, k);
				if (val < 0 || val > L) {
					continue;
				}
				//see if it is X[!j] from another one
				for (int m = 0; m < 2; m++) {
					int nv = get(val, !j, m);
					if (nv < 0 || nv > L) {
						continue;
					}
					if (st.count(nv)) {
						kill(val);
					}
				}
			}
		}
	}
	cout << "2\n" << X[0] << ' ' << X[1] << endl;
}