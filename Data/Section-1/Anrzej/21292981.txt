
#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

int x[N], y[N];
map<int, set<int> > dwn_sum;
map<int, set<int> > up_sum;
ll ans[N];

int main()
{
	int n, m, k;
	cin >> n >> m >> k;
	
	for (int i = 0; i < k; i++){
		cin >> x[i] >> y[i];
		ans[i] = -1;
		dwn_sum[x[i] + y[i]].insert(i);
		up_sum[max(x[i], y[i]) - min(x[i], y[i])].insert(i);
	}

	int cur_dir = 1; // up
	ll cur_t = 0;
	int cur_x = 0, cur_y = 0, dx = 1, dy = 1;

	while (1){
		if (cur_dir == 1){
			int sum = max(cur_x, cur_y) - min(cur_x, cur_y);
			vector<int> del;
			for (set<int>::iterator it = up_sum[sum].begin(); it != up_sum[sum].end(); it++){
				int i = *it;
				ll dt = abs(cur_x - x[i]);
				if (ans[i] == -1)
					ans[i] = dt + cur_t;
				del.push_back(i);
			}
			for (int i = 0; i < del.size(); i++)
				up_sum[sum].erase(del[i]), dwn_sum[x[del[i]]+y[del[i]]].erase(del[i]);
		}
		else{
			int sum = cur_x + cur_y;
			vector<int> del;
			for (set<int>::iterator it = dwn_sum[sum].begin(); it != dwn_sum[sum].end(); it++){
				int i = *it;
				ll dt = abs(cur_x - x[i]);
				if (ans[i] == -1)
					ans[i] = dt + cur_t;
				del.push_back(i);
			}
			for (int i = 0; i < del.size(); i++){
				int _i = del[i];
				up_sum[max(x[_i], y[_i]) - min(x[_i], y[_i])].erase(del[i]), dwn_sum[sum].erase(del[i]);
			}
		}
		int deltax, deltay;
		if (dx == 1)
			deltax = n - cur_x;
		else deltax = cur_x;
		if (dy == 1)
			deltay = m - cur_y;
		else deltay = cur_y;
		int delta = min(deltax, deltay);
		cur_t += delta;
		cur_x += dx*delta;
		cur_y += dy*delta;
		if (cur_x == 0)
			dx = 1;
		if (cur_y == 0)
			dy = 1;
		if (cur_x == n)
			dx = -1;
		if (cur_y == m)
			dy = -1;
		cur_dir *= -1;
		if (cur_x != 0 && cur_x != n) continue;
		if (cur_y != 0 && cur_y != m) continue;
		break;
	}
	//ans[0] = 1e18;
	for (int i = 0; i < k; i++)
		cout << ans[i] << '\n';
	return 0;
}