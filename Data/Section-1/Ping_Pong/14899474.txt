#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;
const int MAX_N = 50;
vector<vector<int> > graph(MAX_N);
bool used[MAX_N];

int dfs(int x)
{
    used[x] = true;
    int cnt = 1;
    for (int i = 0; i < graph[x].size(); i++)
        if (!used[graph[x][i]])
            cnt += dfs(graph[x][i]);
    return cnt;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, m, p, q;
    cin >> n >> m;
    for (int i = 0; i < m; i++)
    {
        cin >> p >> q;
        graph[p - 1].push_back(q - 1);
        graph[q - 1].push_back(p - 1);
    }
    for (int i = 0; i < n; i++)
        used[i] = false;
    int ans = 0;
    for (int i = 0; i < n; i++)
        if (!used[i])
            ans += (dfs(i) - 1);
    long long cnt = 1;
    cout << (cnt << ans);
    return 0;
}