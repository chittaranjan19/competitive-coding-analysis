#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define eps 1e-9

using namespace std;

struct point{
    double x;
    double y;
};

point dif(point a, point b){
    point v;

    v.x = b.x - a.x;
    v.y = b.y - a.y;

    return v;
}

double len(point a){
    return sqrt((a.x * a.x) + (a.y * a.y));
}

double ang(point v1, point v2){
    return acos((v1.x * v2.x + v1.y * v2.y) / (len(v1) * len(v2)));
}

double gcd(double x, double y){
    while (fabs(x) > eps && fabs(y) > eps){
        if (x > y){
            x -= floor(x / y) * y;
        }
        else{
            y -= floor(y / x) * x;
        }
    }

    return x + y;
}

int main(void){
    point p1, p2, p3;
    point v12, v21, v31;
    point v13, v23, v32;
    //point vm12, vm23;
    double ang1, ang2, ang3;
    double x, y;
    double ANG, r;

    cin >> x >> y;
    p1.x = x;
    p1.y = y;

    cin >> x >> y;
    p2.x = x;
    p2.y = y;

    cin >> x >> y;
    p3.x = x;
    p3.y = y;

    v12 = dif(p1, p2);
    v13 = dif(p1, p3);
    v21 = dif(p2, p1);
    v23 = dif(p2, p3);
    v31 = dif(p3, p1);
    v32 = dif(p3, p2);

    ang1 = ang(v12, v13);
    ang2 = ang(v21, v23);
    ang3 = ang(v31, v32);

    r = sqrt((len(v23) * len(v23)) / (2.0 * (1.0 - cos(2.0 * ang1))));

    ANG = gcd(2.0 * ang1, gcd(2.0 * ang2, 2.0 * ang3));

    printf("%.6lf\n", (acos(-1) * r * r * sin(ANG)) / ANG);

    return 0;
}
