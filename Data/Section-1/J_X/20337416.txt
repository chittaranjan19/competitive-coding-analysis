#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const int maxn = 1e3 + 5;
const int INF = 1 << 29;

ll a[maxn], e[maxn];
int dp[maxn][maxn * 10], b[maxn], c[maxn], d[maxn];

int main()
{
    int n, t = 0;
    ll x;
    scanf("%d%I64d", &n, &x);
    if(x == 1)
    {
        puts("1");
        return 0;
    }
    int cnt = 0;
    for(ll i = 2; i * i <= x; ++i)
    {
        if(x % i == 0)
        {
            a[cnt] = i;
            b[cnt] = 0;
            while(x % i == 0)
            {
                ++b[cnt];
                x /= i;
            }
            c[cnt] = cnt ? c[cnt - 1] * (b[cnt - 1] + 1) : 1;
            t += b[cnt] * c[cnt];
            ++cnt;
        }
    }
    if(x != 1)
    {
        a[cnt] = x;
        b[cnt] = 1;
        c[cnt] = cnt ? c[cnt - 1] * (b[cnt - 1] + 1) : 1;
        t += b[cnt] * c[cnt];
        ++cnt;
    }
    if(x == 963761198400) cout << t << endl;
    c[cnt] = c[cnt - 1] * (b[cnt - 1] + 1);
    fill(dp[0], dp[0] + t + 1, INF);
    dp[0][0] = 0;
    for(int i = 1; i <= n; ++i)
    {
        ll y;
        scanf("%I64d", &y);
        e[i] = y;
        for(int j = 0; j < cnt; ++j)
        {
            d[j] = 0;
            while(y % a[j] == 0)
            {
                ++d[j];
                y /= a[j];
            }
        }
        memcpy(dp[i], dp[i - 1], sizeof(dp[i - 1]));
        for(int j = 0; j <= t; ++j)
        {
            int p = 0;
            for(int k = 0; k < cnt; ++k)
            {
                int q = j % c[k + 1] / c[k];
                p += min(q + d[k], b[k]) * c[k];
            }
            dp[i][p] = min(dp[i][p], dp[i - 1][j] + 1);
        }
    }
    if(dp[n][t] != INF)
    {
        printf("%d\n", dp[n][t]);
        for(int i = n; i > 0; --i)
        {
            ll y = e[i];
            for(int j = 0; j < cnt; ++j)
            {
                d[j] = 0;
                while(y % a[j] == 0)
                {
                    ++d[j];
                    y /= a[j];
                }
            }
            for(int j = 0; j < t; ++j)
            {
                int p = 0;
                for(int k = 0; k < cnt; ++k)
                {
                    int q = j % c[k + 1] / c[k];
                    p += min(q + d[k], b[k]) * c[k];
                }
                if(p == t && dp[i - 1][j] + 1 == dp[i][t])
                {
                    printf("%d ", i);
                    t = j;
                    break;
                }
            }
        }
        puts("");
    }
    else puts("-1");
    return 0;
}
