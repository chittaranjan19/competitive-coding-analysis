#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

#include <complex>

typedef complex<double> point;

#define X real()
#define Y imag()
#define polar(r, t) (r * exp(point(0, t)))
#define length(a) hypot(a.X, a.Y)
#define angle(a) atan2(a.Y, a.X)
#define vec(a, b) (b - a)
#define dot(a, b) ((conj(a) * b).X)
#define cross(a, b) ((conj(a) * b).Y)
#define lengthsqr(a) dot(a, a)
#define vec_rot(v, t) (v * exp(point(0, t)))
#define vec_rot_around(v, t, a) (vec_rot(vec(a, v), t) + a)
#define reflect(v, m) (conj(v / m) * m)

bool three_points_collinear(const point &a, const point &b, const point &c)
{
  return (a.Y - b.Y) * (a.X - c.X) == (a.Y - c.Y) * (a.X - b.X);
}

point arr[2005], center;

bool sorter(point x, point y)
{
  double a = angle(vec(center, x));
  double b = angle(vec(center, y));
  if(a < b) return true;
  return false;
}

int main()
{
  ios_base::sync_with_stdio(0);
  int n, x , y;
  cin >> n;
  if(n < 3)
  {
    cout << 0;
    return 0;
  }
  LL res = n * 1LL * (n - 1) * (n - 2) / 6;
  for(int i=0;i<n;i++)
  {
    cin >> x >> y;
    arr[i] = point(x, y);
  }
  for(int i=0;i<n - 1;i++)
  {
    center = arr[i];
    vector<point> v;
    for(int j=i+1;j<n;j++)
      v.pb(arr[j]);
    sort(v.begin(), v.end(), sorter);
    for(int j=0;j<v.size();)
    {
      int x = j;
      while(x + 1 < v.size() && three_points_collinear(center, v[j], v[x + 1]))
        x++;
      x++;
      int tmp = x;
      x-=j;
      j = tmp;
      res-=x * 1LL * (x - 1) / 2;
    }
  }
  cout << res;
  return 0;
}
