#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

LL get_intersection(int a,int b, int n)
{
    if(!a || !b) return 0;
    int diff = a + b - n - 1;
    if(diff <= 0) return 0;
    return diff * 1LL * (diff + 1) / 2;
}

int main()
{
    ios_base::sync_with_stdio(0);
    int n,x,y,c;
    cin >> n >> x >> y >> c;
    int L = 0, R = 1000000;
    while(R != L)
    {
        int mid = L + (R - L) / 2;
        mid++;
        LL temp = 2LL * mid * mid - 2LL * mid + 1;
        mid--;
        LL x1,x2,x3,x4;
        x1 = (x + mid > n) ? (x + mid - n) : 0;
        x2 = (y - mid < 1) ? (1 - y + mid) : 0;
        x3 = (x - mid < 1) ? (1 - x + mid) : 0;
        x4 = (y + mid > n) ? (y + mid - n) : 0;
        temp-=x1 * x1 + x2 * x2 + x3 * x3 + x4 * x4;
        temp+=get_intersection(x1, x2, mid);
        temp+=get_intersection(x2, x3, mid);
        temp+=get_intersection(x3, x4, mid);
        temp+=get_intersection(x4, x1, mid);
        if(temp < c)
            L = mid + 1;
        else R = mid;
    }
    cout << L;
    return 0;
}