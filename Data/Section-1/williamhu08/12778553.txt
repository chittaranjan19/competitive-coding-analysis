#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define fi first
#define se second

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10;

int N;
vector<int> adj[MAXN];
int dist1[MAXN], dist2[MAXN];

void dfs (int x, int p, int *dist, int d = 0) {
	dist[x] = d++;
	for (int t : adj[x]) {
		if (t != p) {
			dfs(t, x, dist, d);
		}
	}
}

int getmxid (int *dist) {
	//max distance id, and >= 3 or >= 4
	pii res(0, 0);
	for (int i = 1; i <= N; i++) {
		if (adj[i].size() >= 3) {
			res = max(res, pii(dist[i], i));
		}
	}
	return res.second;
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d", &N);
	for (int i = 1, x, y; i < N; i++) {
		scanf("%d %d", &x, &y);
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	int nthree = 0;
	for (int i = 1; i <= N; i++) {
		nthree += (adj[i].size() >= 3);
	}
	if (nthree <= 2) {
		puts("Yes");
		return 0;
	}
	//farthest one with deg
	int d3;
	for (int i = 1; i <= N; i++) {
		if (adj[i].size() >= 3) {
			d3 = i;
			break;
		}
	}
	dfs(d3, 0, dist2);
	int a = getmxid(dist1);	//diameter of "dist>=3" tree
	dfs(a, 0, dist1);
	int b = getmxid(dist2);
	dfs(b, 0, dist2);
	assert(dist1[b] == dist2[a]);
	int dit = dist1[b];
	for (int i = 1; i <= N; i++) {
		if (adj[i].size() < 3) {
			continue;
		}
		int val = dist1[i] + dist2[i];
		bool on = (val == dit), close = (val == dit + 2);
		bool bad1 = (adj[i].size() >= 3 && !on && !close);
		bool bad2 = (adj[i].size() >= 4 && !on);
		if (bad1 || bad2) {
			puts("No");
			return 0;
		}
	}
	puts("Yes");
}