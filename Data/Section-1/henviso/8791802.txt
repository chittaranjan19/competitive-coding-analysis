#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <set>
#include <iomanip>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector< ii > vii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INF 0x3f3f3f3f
#define EPS 1e-9
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S)) 
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL 
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//__builtin_popcount(m)
//scanf(" %d ", &t);

int n, s, l;
int a[120000];
int lg[120000];

int mx[120000][17];
int mn[120000][17];

void processMin(int M[120000][17], int A[120000], int N){
    int i, j;
    for (i = 0; i < N; i++)
          M[i][0] = i;
    for (j = 1; 1 << j <= N; j++)
          for (i = 0; i + (1 << j) - 1 < N; i++)
              if (A[M[i][j - 1]] < A[M[i + (1 << (j - 1))][j - 1]])
                  M[i][j] = M[i][j - 1];
              else
                  M[i][j] = M[i + (1 << (j - 1))][j - 1];
}

void processMax(int M[120000][17], int A[120000], int N){
    int i, j;
    for (i = 0; i < N; i++)
          M[i][0] = i;
    for (j = 1; 1 << j <= N; j++)
          for (i = 0; i + (1 << j) - 1 < N; i++)
              if (A[M[i][j - 1]] < A[M[i + (1 << (j - 1))][j - 1]])
                  M[i][j] = M[i + (1 << (j - 1))][j - 1];
              else
                  M[i][j] = M[i][j - 1];
                 
}

int rmqMin(int i, int j){
    int k = lg[j - i + 1];
    return min(a[mn[i][k]], a[mn[j-(1 << k)+1][k]]);
}

int rmqMax(int i, int j){
    int k = lg[j - i + 1];
    return max(a[mx[i][k]], a[mx[j-(1 << k)+1][k]]);
}

int can(int i, int j){
    return (i >= n) || ((j < n) && (j-i+1 >= l) && ((rmqMax(i, j) - rmqMin(i, j)) <= s));
}

int main(){
    cin >> n >> s >> l;
    REP(i, n){
        cin >> a[i];
    }
    processMax(mx, a, n);
    processMin(mn, a, n);
    
    REPP(i, 1, 100001){
        int r = 0, x = i;
        while(x >>= 1) ++r; 
        lg[i] = r;
    }
    
    bool imp = false;
    int ans = 0;
    int i = 0;
    while(i < n){
        int lo = i, hi = n, mid, ANS = i;
        while(hi-lo > 1){
            mid = (hi+lo)/2;
            if(can(i, mid) && can(mid+1, mid+l)){
                ANS = mid;
                lo = mid;
            }
            else hi = mid;
        }
        if(ANS-i+1 < l){
            imp = true;
            break;
        }
        ans++;
        i = ANS+1;
    }
    if(imp) cout << "-1\n";
    else cout << ans << endl;
}
