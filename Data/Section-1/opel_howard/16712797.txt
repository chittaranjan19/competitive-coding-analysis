#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

struct Op {
	int com, p, a;
	bool will_do;
	Op(int com, int p, int a) {
		this->com = com;
		this->p = p;
		this->a = a;
		will_do = false;
	}
};

int main() {
    // freopen("631B.in", "r", stdin);
    
    int n, m, k;
    scanf("%d %d %d", &n, &m, &k);
    vector<vi> matx(n, vi(m, 0));

    vector<Op> ops;
    while (k--) {
    	int com, p, a;
    	scanf("%d %d %d", &com, &p, &a);
    	--p;
    	ops.pub(Op(com, p, a));
    }

    vb do_rows(n, false), do_cols(m, false);
    reverse(all(ops));
    iterate(op, ops) {
    	if (op->com == 1) {
    		if (!do_rows[op->p]) {
    			do_rows[op->p] = true;
    			op->will_do = true;
    		}
    	} else {
    		if (!do_cols[op->p]) {
    			do_cols[op->p] = true;
    			op->will_do = true;
    		}
    	}
    }
    reverse(all(ops));
    iterate(op, ops) {
    	if (!op->will_do)
    		continue;
    	if (op->com == 1) {
    		for (int j = 0; j < m; ++j)
    			matx[op->p][j] = op->a;
    	} else {
    		for (int i = 0; i < n; ++i)
    			matx[i][op->p] = op->a;
    	}
    }


    for (int i = 0; i < n; ++i) {
    	for (int j = 0; j < m; ++j) {
    		if (j)
    			printf(" ");
    		printf("%d", matx[i][j]);
    	}
    	printf("\n");
    }

    return 0;
}