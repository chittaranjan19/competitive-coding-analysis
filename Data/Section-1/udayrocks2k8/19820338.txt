#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
using namespace std;

#define INF (1 << 30)
#define INFL (1LL << 50)
#define pb push_back
#define loop_it(it, elements) for(auto it = elements.begin(); it != elements.end(); it++)
#define loop(i, l, r) for(int i = l; i < r; i++)
#define loop_r(i, r, l) for(int i = r; i >= l; i--)
#define loop_k(i, l, r, k) for(int i = l; i < r; i+=k)
#define test_cases int test_cases;scanf("%d", &test_cases);while (test_cases--)

typedef long long i64;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<i64> vi64;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef map<pii, vi> mpiivi;
typedef map<int, int> mii;
typedef map<int, vi> mivi;

i64 gcd(i64 a, i64 b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}
 
i64 lcm(i64 a, i64 b) {
    return (a * b) / gcd(a, b);
}

i64 power(i64 a, i64 b) {
	if (b == 0) return 1;
	int ans = power(a, b >> 1);
	ans = (ans * (i64) ans);
	if (b & 1) ans = (ans * (i64) a);
	return ans;
} 

struct node {
	node* ptr;
	node* ptr1;
	int i, j;
	int value;
};

void swap(node* n1, node* n2) {
	auto tmp = n1->ptr;
	n1->ptr = n2->ptr;
	n2->ptr = tmp;
}

void swap1(node* n1, node* n2) {
	auto tmp = n1->ptr1;
	n1->ptr1 = n2->ptr1;
	n2->ptr1 = tmp;
}

int main() {
	int m, n, q;
	cin >> m >> n >> q;
	vvi mat(m + 1, vi(n + 1));
	
	loop(i, 1, m + 1) {
		loop(j, 1, n + 1) {
			cin >> mat[i][j];
		}		
	}
	
	vector<vector<node*>> mat1(m + 1, vector<node*>(n + 1));
	loop(i, 0, m + 1) {
		loop(j, 0, n + 1) {
		mat1[i][j] = new node();
		mat1[i][j]->value = mat[i][j];
	  }
	}
	loop(i, 0, m) {
		loop(j, 0, n + 1) {
		mat1[i][j]->ptr = mat1[i + 1][j];
	  }
	}
	loop(i, 0, m + 1) {
		loop(j, 0, n) {
			mat1[i][j]->ptr1 = mat1[i][j + 1];
	  }
	}
	while (q--) {
		vector<pair<node*,node*>> s, s1;
		int x0, y0, x1, y1, h, w;
		cin >> x0 >> y0 >> x1 >> y1 >> h >> w;
		auto cur0 = mat1[x0][0];
		loop(i, 0, y0 - 1) cur0 = cur0->ptr1;
		auto cur1 = mat1[x1][0];
		loop(i, 0, y1 - 1) cur1 = cur1->ptr1;
		loop(i, 0, h) {
			s1.pb(make_pair(cur0, cur1));
			cur0 = cur0->ptr;
			cur1 = cur1->ptr;
		}
		cur0 = mat1[x0][0];
		loop(i, 0, y0 + w - 1) cur0 = cur0->ptr1;
		cur1 = mat1[x1][0];
		loop(i, 0, y1 + w - 1) cur1 = cur1->ptr1;
		loop(i, 0, h) {
			s1.pb(make_pair(cur0, cur1));
			cur0 = cur0->ptr;
			cur1 = cur1->ptr;
		}
		cur0 = mat1[0][y0];
		loop(i, 0, x0 - 1) cur0 = cur0->ptr;
		cur1 = mat1[0][y1];
		loop(i, 0, x1 - 1) cur1 = cur1->ptr;
		loop(i, 0, w) {
			s.pb(make_pair(cur0, cur1));
			cur0 = cur0->ptr1;
			cur1 = cur1->ptr1;
		}
		cur0 = mat1[0][y0];
		loop(i, 0, x0 + h - 1) cur0 = cur0->ptr;
		cur1 = mat1[0][y1];
		loop(i, 0, x1 + h - 1) cur1 = cur1->ptr;
		loop(i, 0, w) {
			s.pb(make_pair(cur0, cur1));
			cur0 = cur0->ptr1;
			cur1 = cur1->ptr1;
		}
		loop_it(it, s1) {
			swap1(it->first, it->second);
		}
		loop_it(it, s) {
			swap(it->first, it->second);
		}
	}
	loop(i, 1, m + 1) {
		auto cur = mat1[i][0];
		loop(j, 0, n) {
			cur = cur->ptr1;
			cout << cur->value << " ";
		}	
		cout << endl;
	}	
	return 0;
}