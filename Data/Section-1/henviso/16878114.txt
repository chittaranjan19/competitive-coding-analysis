#include <iostream>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <bitset>
#include <cstring>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector< ii > vii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define MOD 1000000007LL
#define PI 3.1415926535897932384626
#define MAX_PRIME 11111

int n, a, b;

class Node{
	public:	
		Node *nxt, *prev;
		int data;
	
	Node(){
		data = 0;
		nxt = prev = NULL;
	}
	Node(int info){
		data = info;
		nxt = prev = this;
	}
	Node(int info, Node *pv, Node *nx){
		data = info;
		nxt = nx;
		prev = pv;
	}
	
	~Node(){
		if(this->nxt != this){
			this->nxt->prev = this->prev;
			this->prev->nxt = this->nxt;  
		}
	}
};

class LinkedList{
	public:
	
	Node *first;
	
	LinkedList(){
		first = NULL;
	}
	
	Node *getNode(int info){
		if(first != NULL){
			Node *aux = first;
			do{
				if(aux->data == info) return aux;
				aux = aux->nxt;
			}while(aux != first);
		}
		return NULL;
	}
	
	void push_back(int info){
		if(first == NULL) first = new Node(info);
		else first->prev->nxt = first->prev = new Node(info, first->prev, first);
	}
	
	void push_front(int info){
		if(first == NULL) first = new Node(info);
		else first = first->prev->nxt = first->prev = new Node(info, first->prev, first);
	}
	
	Node *front(){
		return first;
	}
	
	Node *back(){
		if(first == NULL) return NULL;
		return first->prev;
	}
	
	void erase(Node *node){
		Node *aux = node;
		if(aux != NULL){
			if(aux == aux->nxt) first = NULL;
			else if(aux == first) first = first->nxt;
			delete aux;
		}
	}
	
	void erase(int info){
		erase(getNode(info));
	}
	
	void pop_front(){
		erase(first);
	}
	
	bool isEmpty(){
		return (first == NULL);
	}
	
	void print(){
		if(first != NULL){
			Node *aux = first;
			do{
				printf(" %d", aux->data);
				aux = aux->nxt;
			}while(aux != first);
		}
		else printf("//");
		printf("\n");
	}
	
	int size(){
		int ans = 0;
		Node *aux = first;
		if(aux != NULL){
			do{
				ans++;
				aux = aux->nxt;
			}while(aux != first);
		}
		return ans;
	}
	
} NODE;

LinkedList circuit;

vi g[1100], path;
int madj[1100][1100];

void dfs(int s, int t){
	if(s == t || g[s].empty()) return;
	int x = g[s].back(); g[s].pop_back();
	dfs(x);
}

void addPath(vi path){
	
}

int main(){
	scanf(" %d ", &n);
	CLEAR0(madj);
	if(n%2){
		for(int i = 0; i<n; i++)
		for(int j = i+1; j<n; j++){
			madj[i][j] = madj[j][i] = 1;
			g[i].push_back(j);
			g[j].push_back(i);
		}
		for(int i = 0; i<n; i++){
			while(!g[i].empty()){
				
			}
		}
	}
	else{
		
	}
	for(int i = 0; i<n; i++){
		printf("%d:", i);
		adjList[i].print();
	}
}


