//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<pii, int> piii;

const int N = 500 * 1000 + 100;
const int SQ = 750;

ll sum[SQ];
ll a[N];
int n, q;
set <pii> s[SQ];

inline int readInt(){
	int _integer=0;
	char _char=0;
	while(_char<48)
		_char=getchar();
	while(_char>=48)
	{
		_integer = (_integer << 1) + (_integer << 3) + (_char-48);
		_char = getchar();
	}
	return _integer;
}

inline void add(int l, int r, ll val){
	while(l % SQ != 0 && l < r){
		s[l / SQ].erase(MP(a[l], l));
		a[l] += val;
		s[l / SQ].insert(MP(a[l], l));
		l ++;
	}
	while(r % SQ != 0 && l < r){
		r --;
		s[r / SQ].erase(MP(a[r], r));
		a[r] += val;
		s[r / SQ].insert(MP(a[r], r));
	}
	for(; l < r; l += SQ)
		sum[l / SQ] += val; 
}

inline int get(int x){
	int k = 0;
	int l = -1, r = -1;
	for(int i = 0; i < n; i += SQ){
		if(l == -1 && SZ(s[k])){	
			auto it = s[k].lower_bound(MP(x - sum[k], 0));
			if(it != s[k].end() && it -> X == x - sum[k])
				l = it -> Y;
		}
		k ++;
	}
	while(k --){
		if(!SZ(s[k])) continue;
		auto it = s[k].lower_bound(MP(x + 1 - sum[k], 0));
		if(it != s[k].begin()) it --;
		if(it -> X == x - sum[k]){
			r = it -> Y;
			break;
		}
	}
	if(l == -1) return -1;
	return r - l;
}

int main(){
	n = readInt();
	q = readInt();
	for(int i = 0; i < n; ++i){
		a[i] = readInt();
		s[i / SQ].insert(MP(a[i], i));
	}
	for(int i = 0; i < q; ++i){
		int t;
		t = readInt();
		if(t == 1){
			int l, r, x;
			l = readInt();
			r = readInt();
			x = readInt();	
			l --;
			add(l, r, x);
		}
		else{
			int x;
			x = readInt();
			cout << get(x) << "\n";
		}
	}
	return 0;
}
