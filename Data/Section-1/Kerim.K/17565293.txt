#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<ll,ll>PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
ll P[MAXN][28],lvl[MAXN],sub[MAXN],TIM;
ll in[MAXN],out[MAXN];
vector<ll>adj[MAXN];
ll sum[MAXN];
void dfs(ll nd,ll pr){
	P[nd][0]=pr;sub[nd]=1;
	in[nd]=++TIM;
	lvl[nd]=lvl[pr]+1;
	for(ll i=0;i<adj[nd].size();i++){
		ll to=adj[nd][i];
		if(to==pr)
			continue;
		dfs(to,nd);
		sum[nd]+=sum[to]+sub[to];
		sub[nd]+=sub[to];	
	}
	out[nd]=TIM;
}
ll ss[MAXN];
ll n,q;
void dfs2(int nd,int pr){
	ss[nd]=sum[nd];
	if(nd!=1)
		ss[nd]+=ss[P[nd][0]]-(sum[nd]+sub[nd])+(n-sub[nd]);
	for(int i=0;i<adj[nd].size();i++){
		int to=adj[nd][i];
		if(to==pr)
			continue;
		dfs2(to,nd);	
	}
}
void build(){
	for(ll j=1;j<18;j++)
		for(ll i=1;i<=n;i++)
			if(P[i][j-1]!=-1)
				P[i][j]=P[P[i][j-1]][j-1];
}
ll LCA(ll x,ll y){
	if(lvl[x]<lvl[y])
		swap(x,y);
	for(ll i=17;i>=0;i--)
		if(lvl[x]-(1<<i)>=lvl[y])
			x=P[x][i];
	if(x==y)
		return x;
	for(ll i=17;i>=0;i--)
		if(P[x][i]!=-1 and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];
	return P[x][0];					
}
ll bir(ll x,ll y){
	if(in[x]<=in[y] and out[y]<=out[x])
		return 1;
	if(in[y]<=in[x] and out[x]<=out[y])
		return 1;
	return 0;	
}
ll dis(ll x,ll y){
	return (lvl[x]+lvl[y])-(lvl[LCA(x,y)]<<1);
}
ll atla(ll x,ll y){
	for(ll i=17;i>=0;i--)
		if(lvl[y]-(1<<i)>=x)
			y=P[y][i];
	return y;		
}
int main(){
	cout.precision(12);
	memset(P,-1,sizeof(P));
	scanf("%lld%lld",&n,&q);
	for(ll i=0;i<n-1;i++){
		ll u,v;
		scanf("%lld%lld",&u,&v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1,0);
	dfs2(1,0);
	build();
	while(q--){
		ll u,v;
		scanf("%lld%lld",&u,&v);
		long double road=0.00000000000;
		if(bir(u,v)){
			if(in[v]<=in[u] and out[u]<=out[v])
				swap(u,v);
			ll us=0,vs=sub[v];
			ll k=atla(lvl[u]+1,v);
			us=(n-sub[u])+(sub[u]-sub[k]);
			ll way=us*vs;
			ll h=ss[u]-(sum[k]+sub[k]);
		//	ll h=(sum[u]-(sum[k]+sub[k]));
			long long ans=(dis(u,v)+1)*way+((h*vs)+(sum[v]*us));
			road=double(1.00000000000/way);
			road*=double(ans);
		}
		else{		
			ll way=sub[u]*sub[v];
			long long ans=(dis(u,v)+1)*way+((sum[u]*sub[v])+(sum[v]*sub[u]));
			road=double(1.00000000000/way);
			road*=double(ans);
		}
		cout<<fixed<<road<<endl;
	}
	return 0;
}
//LooK aT mY COde ONlinE +_+
/*
10 5
8 10
3 6
7 3
7 4
8 9
9 4
5 1
10 5
6 2

7 6
*/
