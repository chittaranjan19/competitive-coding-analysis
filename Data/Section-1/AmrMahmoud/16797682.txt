#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[100005];
int tree[400005];

void update(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree[i] = val;
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree[i] = tree[i*2 + 1] + tree[i*2 + 2];
}

int query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return query(i*2 + 1, L, (L + R) / 2, x, y) + query(i*2 + 2, (L + R) / 2 + 1, R, x, y);
}

int main()
{
  int n, k;
  cin >> n >> k;
  if(n == 1)
  {
    cout << 0;
    return 0;
  }
  for(int i=0;i<n;i++)
    arr[i] = i;
  int L = 0, R = n - 1;
  while(k--)
  {
    if(L < R)
    {
      swap(arr[L], arr[R]);
      L++, R--;
    }
    //else swap(arr[n - 1], arr[n - 2]);
  }
  LL res = 0;
  for(int i=n - 1;i>=0;i--)
  {
    res += query(0, 0, n - 1, 0, arr[i]);
    update(0, 0, n - 1, arr[i], 1);
  }
  cout << res;
  return 0;
}
