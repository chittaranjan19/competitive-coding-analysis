#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<string>
#include<queue>
#include<vector>
#include<map>
#include<cmath>
#define lowbit(x) ((x)&(-x))
#define Max(a,b) (a>b?a:b)
#define Min(a,b) (a>b?b:a)
#define lron(x)  ((x) << 1)
#define rson(x) ((x)<<1|1)
#define dad(x) ((x)>>1)
#define INF 0x3f3f3f3f
#define rep(i,a,b) for(int i=a;i<(b);++i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define pb push_back
#define de(x) cout << #x << "=" << x << endl
using namespace std;
typedef __int64 ll;
//typedef long long ll;
int const Max_N = 505;
int N;
ll arr[Max_N][Max_N] = {0};
int main()
{
	scanf("%d",&N);
	ll col[Max_N] = {0};
	ll row[Max_N] = {0};
	ll diag1 = 0;
	ll diag2 = 0;
	ll x,y;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			scanf("%I64d",arr[i]+j);			
			if(arr[i][j] == 0)
			{
				x = i;
				y = j;
			}
			col[i] += arr[i][j];			
		}
	}
	if(N==1)
	{
		printf("1\n");
		return 0;
	} 
	for (int i = 0; i < N; i++)
	{
		diag1 += arr[i][i];
		diag2 += arr[i][N-i-1];
		for (int j = 0; j < N; j++)
		{
			row[i] += arr[j][i];			
		}
	}
	ll ans = col[(x+1)%N] - col[x];
	if(ans<=0)
	{
		printf("-1\n");
		return 0;
	}
	col[x] += ans;
	row[y] += ans;
	if(x==y) diag1 += ans;
	if(x+y==N-1) diag2 += ans;
	bool f = true; 
	if(diag1!=diag2||diag1!=col[0]||diag1!=row[0]) f = false;
	for(int i = 1; i < N; i++)
	{
		if(col[i]!=col[i-1]||row[i]!=row[i-1])
		{
			f = false;
			break;
		}
	}
	if(f) printf("%I64d\n",ans);
	else printf("-1\n");
	return 0;
}

