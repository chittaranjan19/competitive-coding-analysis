#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <vector>
#include <set>
#include <algorithm>
#define N 100010
#define INF 99999999
#define ll long long
using namespace std;
struct node
{
	int u, v;
	friend bool operator < (node a, node b)
	{
		if (a.u == b.u)	return a.v < b.v;
		return a.u < b.u;
	}
}edge[2*N];

int n, m, deg[N], ans[N];
int main()
{
#ifndef ONLINE_JUDGE
	freopen("1.txt", "r", stdin);
#endif
//	ios::sync_with_stdio(false);
//	cin.tie(0);
	int i, j, t, tt;
	scanf("%d%d", &n, &m);
	memset(deg, 0, sizeof(deg));
	for (i = 0; i < m; i++)
	{
		scanf("%d%d", &t, &tt);
		deg[t]++;
		deg[tt]++;
		if (t > tt)
		{
			t = t + tt;
			tt = t - tt;
			t = t -  tt;
		}
		edge[i].u = t;
		edge[i].v = tt;
	}
	sort(edge, edge+m);
	for (i = 0; i <= n; i++)	ans[i] = 1;
	for (i = 0; i < m; i++)
		if (edge[i].u < edge[i].v)
			ans[edge[i].v] = max(ans[edge[i].v], ans[edge[i].u]+1);
	for (i = 0; i < m; i++)
		if (edge[i].u < edge[i].v)
			ans[edge[i].v] = max(ans[edge[i].v], ans[edge[i].u]+1);
	t = 1;
//	for (i = 1; i <= n; i++)	printf("%d  %d  %d\n", i, ans[i], deg[i]);
	for(i = 2; i <= n; i++)
		if (ans[t] < ans[i])
			t = i;
	printf("%d", ans[t]*deg[t]);
	return 0;
} 
