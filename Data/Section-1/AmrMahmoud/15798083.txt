#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

vector<int> g[505];

bool done[505], v[505];
int c = 0;
vector<int> vec;

void dfs(int node)
{
  v[node] = true;
  c++;
  vec.pb(node);
  for(int i=0;i<g[node].size();i++)
  {
    if(done[g[node][i]] || v[g[node][i]]) continue;
    dfs(g[node][i]);
  }
}

bool e[505][505];

int main()
{
  int n, m, x, y;
  scanf("%d %d", &n, &m);
  string s = "";
  for(int i=0;i<n;i++)
    s += "#";
  for(int i=0;i<m;i++)
  {
    scanf("%d %d", &x, &y);
    x--, y--;
    g[x].pb(y);
    g[y].pb(x);
    e[x][y] = true;
    e[y][x] = true;
  }
  for(int i=0;i<n;i++)
  {
    if(g[i].size() == n - 1)
    {
      s[i] = 'b';
      done[i] = true;
    }
  }
  bool test = true;
  char nxt = 'a';
  for(int i=0;i<n;i++)
  {
    if(done[i] || v[i]) continue;
    dfs(i);
    int cnt = 0;
    for(int j=0;j<vec.size();j++)
      for(int k=j+1;k<vec.size();k++)
        cnt += e[vec[j]][vec[k]];
    if(cnt != c * 1LL * (c - 1) / 2)
      break;
    for(int j=0;j<vec.size();j++)
      s[vec[j]] = nxt;
    if(nxt == 'c') break;
    nxt = 'c';
    vec.clear();
    c = 0;
  }
  for(int i=0;i<n && test;i++)
  {
    if(s[i] == '#')
      test = false;
  }
  if(test)
  {
    printf("Yes\n");
    cout << s;
  }
  else printf("No");
  return 0;
}
