#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

struct parIndexado
{
	pair<char, char> par;
	int ind;
};

bool operator < (const parIndexado& p1, const parIndexado& p2)
{
	if (p1.par.first < p2.par.first)
		return true;
	else if (p1.par.first == p2.par.first && p1.par.second < p2.par.second)
		return true;
	else
		return false;
};
bool operator == (const parIndexado& p1, const parIndexado& p2)
{
	return (p1.par.first == p2.par.first && p1.par.second == p2.par.second);
};


void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}


int main()
{
	int n,hamD;
	string s,t;
	cin >> n >> s >> t;
	vector<parIndexado> pares;
	vector<parIndexado> paresSwap;
	hamD = 0;
	forn(i,n)
	{
		if (s[i] != t[i])
		{
			hamD++;
			parIndexado p1;
			p1.par.first = s[i];
			p1.par.second = t[i];
			p1.ind = i;
			parIndexado p2;
			p2.par.first = t[i];
			p2.par.second = s[i];
			p2.ind = i;
			pares.push_back(p1);
			paresSwap.push_back(p2);
		}
	}
	sort(pares.begin(), pares.end());
	sort(paresSwap.begin(), paresSwap.end());
	int i = 0;
	int j = 0;
	int memory [3] = {};
	int largo = pares.size();
	while (i < largo && j < largo)
	{
		if (pares[i] == paresSwap[j])
		{
			cout << hamD - 2 << endl << pares[i].ind + 1 << " " << paresSwap[j].ind + 1 << endl;
			return 0;
		}
		if (pares[i].par.first == paresSwap[j].par.first)
		{
				memory[0] = pares[i].ind + 1;
				memory[1] = paresSwap[j].ind + 1;
				memory[2] = 1;
		}
		if (pares[i] < paresSwap[j])
			i++;
		else 
			j++;
	}
	if (memory[2] == 0)
		cout << hamD << endl << -1 << " " << -1 << endl;
	else
		cout << hamD - memory[2] << endl << memory[0] << " " << memory[1] << endl;
	
	return 0;
}

