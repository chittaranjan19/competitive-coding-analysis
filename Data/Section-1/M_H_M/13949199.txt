#include <bits/stdc++.h>

#define SZ(x) ((int)x.size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, pii> plii;

const int N = 100 * 1000 + 100;

plii seg[4 * N];
int n, q;

plii merge(plii a, plii b){
	plii c;
	c.X = a.X + b.X;
	c.Y = max(a.Y, b.Y);
	return c;
}

void update(int v, int s, int e, int p, int val){
	if(p < s || p >= e) return;
	if(e - s == 1){
		seg[v].X = val;
		seg[v].Y = MP(val, s);
		return;
	}
	int mid = (s + e) / 2;
	update(2 * v + 0, s, mid, p, val);
	update(2 * v + 1, mid, e, p, val);
	seg[v] = merge(seg[2 * v + 0], seg[2 * v + 1]);
}

plii get(int v, int s, int e, int l, int r){
	if(r <= s || e <= l) return MP(0, MP(0, 0));
	if(l <= s && e <= r) return seg[v];
	int mid = (s + e) / 2;
	return merge(get(2 * v + 0, s, mid, l, r), get(2 * v + 1, mid, e, l, r));
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> q;
	for(int i = 0; i < n; ++i){
		int t;
		cin >> t;
		update(1, 0, n, i, t);
	}
	for(int i = 0; i < q; ++i){
		int t;
		cin >> t;
		if(t == 1){
			int l, r;
			cin >> l >> r;
			l --;
			cout << get(1, 0, n, l, r).X << "\n";
		}
		if(t == 2){
			int l, r, x;
			cin >> l >> r >> x;
			l --;
			plii tmp = get(1, 0, n, l, r);
			while(tmp.Y.X >= x){
				update(1, 0, n, tmp.Y.Y, tmp.Y.X % x);
				tmp = get(1, 0, n, l, r);
			}
		}
		if(t == 3){
			int k, x;
			cin >> k >> x;
			k --;
			update(1, 0, n, k, x);
}
	}
	return 0;
}
