#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Intervalo
{
	tint s,e;
	Intervalo(tint ss, tint ee)
	{
		s = ss;
		e = ee;
	}
	Intervalo()
	{
		s = -1;
		e = -1;
	}
};

bool operator < (Intervalo i1, Intervalo i2)
{
	return make_tuple (i1.e,i1.s) < make_tuple(i2.e,i2.s);
}

void proximoIntervalo (tint &p, vector<tint> &a)
{
	map<tint,tint> app;
	map<tint,tint> pos;
	bool flag = false;
	forsn(i,p,a.size())
	{
		app[a[i]]++;
		if (app[a[i]] == 2 && pos[a[i]] >= p)
		{
			p = i + 1;
			flag = true;
			break;
		}
		else if (app[a[i]] == 2)
		{
			pos[a[i]] = i;
			app[a[i]] = 1;
		}
		else
			pos[a[i]] = i;
	}
	if (!flag)
		p = a.size() + 1; 
	
	
}

int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint n;
	while (cin >> n)
	{
		vector<tint> a (n);
		forn(i,n)
			cin >> a[i];
		vector<Intervalo> ans = {Intervalo(-1,-1)};
		tint p = 0, last = 0, k = 0;
		while (p <= n)
		{
			proximoIntervalo(p,a);
			if (p <= n)
			{
				if (k > 0)
					ans[k-1].e = last;
				ans[k].s = last+1;
				last = p;
				k++;
				ans.push_back(Intervalo(last + 1, -1));
			}
			else if (k > 0)
				ans[k-1].e = n;
		}
		if (ans[0].s == -1)
			cout << -1 << endl;
		else
		{
			cout << ans.size()-1 << endl;
			forn(i,ans.size()-1)
				cout << ans[i].s << " " << ans[i].e << endl;
		}

		
	}
	return 0;
}



