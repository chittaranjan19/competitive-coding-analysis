#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef long double real;

///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR(v) memset(v, 0, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define MOD 100
#define INCMOD(a,b) a = (a+b)%MOD
#define DECMOD(a,b) a = (a+MOD-b)%mod
#define ROUNDINT(a) (int)((double)a + 0.5)
#define INF 2000000000
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
//scanf(" %d ", &t);

int tamInt(int x){
	int c = 0;
	while(x){
		x /= 10;
		c++;
	}
	return c;
}

int main(){
	int n;
	while(scanf(" %d ", &n) != EOF){
		int tam = tamInt(n);
		if(tam < 3){
				printf("%d\n", n);
		}
		else{
			int c = 99;
			for(int t = 3; t<=tam; t++){
				for(int i = 1; i<=9; i++){
					int num = 0, pot = 1;
					for(int k = 0; k<t; k++){
						num += i*pot;
						pot *= 10;
					}
					if(num <= n){
						//cout << "NUM " << num << endl;
						c++;
					}
					else break;
				}
			}
				
			for(int t = 3; t<=tam; t++){
				for(int i = 0; i<=8; i++){
					//cout << " I EH " << i << endl;
					for(int j = i+1; j<=9; j++){
						//cout << " J EH " << j << endl;
						int mask = 1, lim = (1 << t)-1;
						while(mask != lim){
							long long int num = 0, pot = 1, k;
							for(k = 0; k<t-1; k++){
								if(CHECK(mask, k)) num += pot*i;
								else num += pot*j;
								pot *= 10;
							}
							if(CHECK(mask, k)){
								if(i == 0){
									mask++;
									continue;
								}
								num += pot*i;
							}
							else num += pot*j;
							//cout << " NUM " << num << " " << n << endl;
							if(num <= n){
								//cout << "NUM " << num << endl;
								c++;
							}
							mask++;
						}
					}
				}
			}
			printf("%d\n", c);
		}
	}
}

