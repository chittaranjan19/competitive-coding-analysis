import java.io.*;
import java.util.*;
import java.math.*;

public class Task {
	int n;
	boolean[][] p, a;
	void go(int x, int y, int d) {
		if (d==0) return;
		for (int i=0; i<n; i++) 
			for (int j=0; j<n; j++)
				if (p[i][j]) {
					for (int ii=0; ii<d; ii++)
						for (int jj=0; jj<d; jj++)
							a[x+ii+d*i][y+jj+d*j] = true;
				} else go(x+d*i, y+d*j, d/n);
	}
    void solve() throws IOException {
    	n = nextInt();
    	int k = nextInt();
    	p = new boolean[n][n];
    	int nk = (int)Math.pow(n, k);
    	a = new boolean[nk][nk];
    	for (int i=0; i<n; i++) {
    		char[] s = next().toCharArray();
    		for (int j=0; j<n; j++) p[i][j] = s[j]=='*';
    	}
    	go(0, 0, nk/n);
    	for (int i=0; i<nk; i++) {
    		for (int j=0; j<nk; j++)
    			if (a[i][j]) out.print('*'); else out.print('.');
    		out.println();
    	}
    }
    
    


    static final int inf = 1000000000;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            //br = new BufferedReader(new InputStreamReader(System.in));
            //out = new PrintWriter(System.out);
            br = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
            return Long.parseLong(next());
    }

    public static void main(String[] args) {        
            new Task().run();
    
    }
}