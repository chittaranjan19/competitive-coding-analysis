#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
struct point { ll x, y; };
ll comparar(ll d1, ll d2)
{
    if(d2 - d1 > 0) return -1;
    if(d1 - d2 > 0) return 1;
    return 0;
}
ll turn(point p, point q, point r)
{
    ll result = (r.x - q.x) * (p.y - q.y) - (r.y - q.y) * (p.x - q.x);
    return comparar(result, 0);
}
bool cw(point p, point q, point r)
{
    return turn(p, q, r) < 0;
    // Para que NO acepte puntos colineares:
    // return turn(p, q, r) <= 0;
}
bool cmp(point p1,point p2)
{
    return p1.x < p2.x || (p1.x == p2.x && p1.y < p2.y);
}
vector<point> convexHull(vector<point> P)
{
    ll n = (ll)P.size(), k = 0;
    vector<point> H(2 * n);
    sort(P.begin(), P.end(),cmp);
    for(ll i = 0; i < n; i++) // Hull superior
    {
    while(k >= 2 && cw(H[k - 2], H[k - 1], P[i])) k--;
    H[k++] = P[i];
    }
    for(ll i = n - 2, t = k + 1; i >= 0; i--) // Hull inferior
    {
    while(k >= t && cw(H[k - 2], H[k - 1], P[i])) k--;
    H[k++] = P[i];
    }
    H.resize(k); H.pop_back(); // Eliminamos el ultimo punto
    return H;
}
ll cross(point a, point b, point c){
    ll res= ((b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x));
    return comparar(res,0);
}
int main(){
    ll n;
    cin>>n;
    ll x,y;
    cin>>x>>y;
    ll outer=0,inner=10000000000000000LL;
    vector<point> vp;
    for(ll i=0;i<n;++i){
        ll a,b;
        cin>>a>>b;
        a-=x;b-=y;
        point p={a,b};
        vp.push_back(p);
        outer=max(outer,a*a+b*b);
        inner=min(inner,a*a+b*b);
    }
    vector<point> convex=convexHull(vp);
    point origin={0,0};
    ll csize=convex.size();
    bool nonneg=true;
    bool nonpos=true;
    for(ll i=0;i<csize;++i){
        point p1=convex[i%csize];
        point p2=convex[(i+1)%csize];
        ll side=cross(p1,p2,origin);
        if(side<0) nonneg=false;
        if(side>0) nonpos=false;
    }
    if(nonneg||nonpos) inner=0;
    printf("%.07f",M_PI*(outer-inner));
}