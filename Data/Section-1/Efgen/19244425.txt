import java.io.*;
import java.util.*;

public class Main implements Runnable {

    void solve() throws IOException {
        int n = nextInt();
        int[] p = new int[n+1];
        int[] color = new int[n+1];
        for (int i=1; i<=n; i++) {
            p[i] = nextInt();
        }
        Vector<Integer> cycles = new Vector<>();
        int root = -1;
        int t = 0;
        int res = 0;
        for (int i=1; i<=n; i++) {
            int x = p[i];
            if (color[x]>0) continue;
            t++;
            while (color[p[x]] == 0) {
                color[x] = t;
                x = p[x];
            }
            if (color[p[x]] != t) {
                continue;
            }

            if (x==p[x]) {
                if (root<0) {
                    root = x;
                } else {
                    p[x] = root;
                    res++;
                }
            } else {
               cycles.add(x);
            }
        }

        res += cycles.size();
        if (root<0) {
            root = cycles.elementAt(0);
        }
        for (int x:cycles) {
            p[x] = root;
        }

        out.println(res);
        for (int i=1; i<=n; i++) {
            out.print(p[i]+" ");
        }



    }

    public void run() {
        try {
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(123);
        }
    }

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;


    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public static void main(String[] args) {
        new Thread(new Main()).start();
    }
}
