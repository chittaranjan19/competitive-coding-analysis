#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

#define eps 1e-8

long long res;
int i, j, k, N, a[10], sum;
int cnt[105];
int dp[11][101];
long long cnk[105][105];

/*long long Cnk(int n, int k)
{
    long long res = 1;
    int i, j, m;
    memset(cnt, 0, sizeof(cnt));
    for(i = k + 1; i <= n; i++)
    {
        j = i;
        for(m = 2; m * m <= j; m++)
            while(j % m == 0)
                cnt[m]++, j /= m;
        cnt[j]++;
    }
    for(i = 2; i <= n - k; i++)
    {
        j = i;
        for(m = 2; m * m <= j; m++)
            while(j % m == 0)
                cnt[m]--, j /= m;
        cnt[j]--;
    }
    for(i = 2; i < 100; i++)
        for(j = 0; j < cnt[i]; j++)
            res = (res * i) % 1000000007;
    return res;
}*/

long long Cnk(int n, int k)
{
    if(cnk[n][k] != -1) return cnk[n][k];
    long long res = 1;
    int j = 1;
    for(int i = k + 1; i <= n; i++)
    {
        res = (res * i) % 1000000007;
        while(j <= n - k && res % j == 0)
            res /= j, j++;
    }
    return cnk[n][k] = res;
}

int solve(int i, int ost)
{
    if(dp[i][ost] != -1) return dp[i][ost];
    if(ost == 0 && i != 10 && a[i] != 0) return 0;
    if(ost == 0 && i == 10) return 1;
    if(i == 10) return 0;
    long long res = 0;
    int j;
    if(i == 0)
    {
        for(j = a[i]; j < ost; j++)
            res = (res + Cnk(ost - 1, j) * solve(i + 1, ost - j)) % 1000000007;
    }
    else
    {
        for(j = a[i]; j <= ost; j++)
            res = (res + Cnk(ost, j) * solve(i + 1, ost - j)) % 1000000007;
    }
    return dp[i][ost] = res;
}

int main()
{
    scanf("%d", &N);
    memset(cnk, -1, sizeof(cnk));
    for(i = 0; i < 10; i++)
    {
        scanf("%d", &a[i]);
        sum += a[i];
    }
    for(i = max(a[0] + 1, sum); i <= N; i++)
    {
        memset(dp, -1, sizeof(dp));
        res = (res + solve(0, i)) % 1000000007;
    }
    cout << res << endl;
    return 0;
}
