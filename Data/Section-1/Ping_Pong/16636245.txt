#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const int inf = (int)1e9;
const int MOD = (int)1e9 + 7;
const int p = 239;
const int MAX_N = 1000000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

int tree[MAX_N * 4];
int cnt_ver = 1;
bool used[MAX_N];

void build(int n)
{
    while (cnt_ver < n)
        cnt_ver <<= 1;
    for (int i = 0; i < cnt_ver - 1; i++)
        tree[i] = inf;
    for (int i = cnt_ver - 1; i < cnt_ver * 2 - 1; i++)
        tree[i] = i - (cnt_ver - 1) + 1;
}

void push(int x)
{
    tree[x * 2 + 1] = min(tree[x * 2 + 1], tree[x]);
    tree[x * 2 + 2] = min(tree[x * 2 + 2], tree[x]);
    tree[x] = inf;
}

void update(int x, int lx, int rx, int l, int r, int val)
{
    if (lx > r || rx < l)
        return;
    else if (lx >= l && rx <= r)
    {
        if (lx != rx)
            push(x);
        tree[x] = min(tree[x], val);
    }
    else
    {
        push(x);
        update(x * 2 + 1, lx, (lx + rx) / 2, l, r, val);
        update(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r, val);
    }
}

int main()
{
    //ifstream ifs("input.txt");
    //ofstream ofs("output.txt");
    //freopen("candies.in", "r", stdin);
    //freopen("candies.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    int n;
    scanf("%d", &n);
    int a[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    build(MAX_N);
    for (int i = 0; i < MAX_N; i++)
        used[i] = false;
    /*for (int i = cnt_ver - 1; i < cnt_ver * 2 - 1; i++)
        cout << tree[i] << " ";
    cout << endl;*/
    for (int i = 0; i < n; i++)
        if (!used[a[i] - 1])
        {
            used[a[i] - 1] = true;
            for (int j = a[i]; j <= MAX_N - a[i]; j += a[i])
                update(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + j - 1, cnt_ver - 1 + j + a[i] - 2, j);
        }
    for (int i = 0; i < cnt_ver - 1; i++)
        push(i);
    /*for (int i = cnt_ver - 1; i < cnt_ver * 2 - 1; i++)
        cout << tree[i] << " ";
    cout << endl;*/
    int ans = 0;
    for (int i = 1; i <= MAX_N; i++)
        if (used[i - 1])
            ans = max(ans, i - tree[cnt_ver - 1 + i - 1]);
    printf("%d", ans);
    return 0;
}
