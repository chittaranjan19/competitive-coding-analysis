using namespace std;
#include<bits/stdc++.h>
#define FOR(i, a, b) for (int i = a; i < b; i++)
#define FORE(i, a, b) for (int i = a; i <= b; i++)
#define FORD(i, a, b) for (int i = a; i >= b; i--)
const int MAXN = 2*1e5;
const int INF  = 1e9 + 7;

int n, a[MAXN], L[MAXN], R[MAXN], odd[MAXN], Left[MAXN], Right[MAXN];
long long mmax[MAXN],  SumOdd[MAXN];

int main()
{
    ios::sync_with_stdio(false); cin.tie(0);

    //freopen("202E.inp", "r", stdin);
    //freopen("202E.out", "w", stdout);

    cin >> n;
    FORE(i, 1, n - 1) cin >> a[i];
    Left[1] = 0;
    FORE(i, 2, n) {
        int x = a[i - 1];
        if (x % 2 == 1) x--;
        if (!x) Left[i] = 0;
        else {
            Left[i] = Left[i - 1] + x;
        }
    }

    Right[n] = 0;
    FORD(i, n - 1, 1){
        int x = a[i];
        if (x % 2 == 1) x--;
        if (!x) Right[i] = 0;
        else {
            Right[i] = Right[i + 1] + x;
        }
    }

    FORE(i, 2, n) {
        odd[i - 1] = a[i - 1];
        if (odd[i - 1] % 2 == 0) odd[i - 1]--;
        SumOdd[i] = SumOdd[i - 1] + odd[i - 1];
    }
    //cout<<SumOdd[n]<<endl;
    mmax[n] = Right[n] + SumOdd[n];
    FORD(i, n - 1, 1) mmax[i] = max(mmax[i + 1], Right[i] + SumOdd[i]);
    long long ans = 0;
    //FORE(i, 1, n) {
    //    ans = max(ans, Left[i] - SumOdd[i] + mmax[i]);
    //    cout<<i<<" "<<ans<<"wtf"<<endl;
    //}

    //FORE(i, 1, n) cout<<Left[i]<<" ";cout<<endl;
    //FORE(i, 1, n) cout<<Right[i]<<" ";cout<<endl;
    //FORE(i, 1, n) cout<<SumOdd[i]<<" ";cout<<endl;
    cout<<ans;
    return 0;
}
