#include <vector>
#include <queue>
#include <map>
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream>
#include <iomanip>
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

#define MOD 1000000007

int main()
{
    int n, i, j;
    scanf("%d", &n);
    string s1, s2;
    map<string, string> m1;
    map<string, bool> m2;
    vector<string> v;
    for(i=0; i<n; i++){
        cin >> s1 >> s2;
        m2[s2]=true;
        m1[s1]=s2;
        v.push_back(s1);
    }
    int cnt=0;
    for(i=0; i<v.size(); i++){
        if(m2.find(v[i])!=m2.end())
            continue;
        else
            cnt++;
    }
    cout << cnt << endl;
    for(i=0; i<v.size(); i++){
        if(m2.find(v[i])!=m2.end())
            continue;
        s1=m1[v[i]];
        while(m1.find(s1)!=m1.end())
            s1=m1[s1];
        cout << v[i] << " " << s1 << endl;
    }
    return 0;
}
