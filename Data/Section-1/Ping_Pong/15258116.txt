#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 2100;
const long double pi = 3.1415926;
const long double eps = 1e-6;

bool ok(string s1, string s)
{
    int a1[26], a[26];
    for (int i = 0; i < 26; i++)
    {
        a1[i] = 0;
        a[i] = 0;
    }
    for (int i = 0; i < s1.size(); i++)
        a1[s1[i] - 'a']++;
    for (int i = 0; i < s.size(); i++)
        a[s[i] - 'a']++;
    for (int i = 0; i < 26; i++)
        if (a[i] > 0 && a1[i] == 0)
            return false;
    return true;
}

int len1[MAX_N][MAX_N], len2[MAX_N][MAX_N];
int dp[MAX_N][2];
pair<int, int> come[MAX_N][2];

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    string s1, s;
    cin >> s1 >> s;
    if (!ok(s1, s))
    {
        cout << -1;
        return 0;
    }
    int l1 = s1.size(), l = s.size();
    for (int i = 0; i < l; i++)
        for (int j = 0; j < l1; j++)
            if (s[i] != s1[j])
                len1[i][j] = 0;
            else
            {
                if (i > 0 && j > 0)
                    len1[i][j] = len1[i - 1][j - 1] + 1;
                else
                    len1[i][j] = 1;
            }
    for (int i = 0; i < l; i++)
        for (int j = l1 - 1; j >= 0; j--)
            if (s[i] != s1[j])
                len2[i][j] = 0;
            else
            {
                if (i > 0 && j < l1 - 1)
                    len2[i][j] = len2[i - 1][j + 1] + 1;
                else
                    len2[i][j] = 1;
            }
    for (int i = 0; i < l; i++)
        for (int j = 0; j < 2; j++)
            dp[i][j] = inf;
    for (int i = 0; i < l; i++)
    {
        int cnt = 0, x = -1;
        for (int j = 0; j < l1; j++)
            if (len1[i][j] > cnt)
            {
                cnt = len1[i][j];
                x = j;
            }
        if (cnt == i + 1)
        {
            dp[i][0] = 1;
            come[i][0] = make_pair(x - cnt + 1, x);
        }
        else
        {
            for (int j = 1; j <= cnt; j++)
                if (min(dp[i - j][0], dp[i - j][1]) + 1 < dp[i][0])
                {
                    dp[i][0] = min(dp[i - j][0], dp[i - j][1]) + 1;
                    come[i][0] = make_pair(x - j + 1, x);
                }
        }

        cnt = -1, x;
        for (int j = 0; j < l1; j++)
            if (len2[i][j] > cnt)
            {
                cnt = len2[i][j];
                x = j;
            }
        if (cnt == i + 1)
        {
            dp[i][1] = 1;
            come[i][1] = make_pair(x + cnt - 1, x);
        }
        else
        {
            for (int j = 1; j <= cnt; j++)
                if (min(dp[i - j][0], dp[i - j][1]) + 1 < dp[i][1])
                {
                    dp[i][1] = min(dp[i - j][0], dp[i - j][1]) + 1;
                    come[i][1] = make_pair(x + j - 1, x);
                }
        }
    }
    vector<pair<int, int> > ans;
    int curr = l - 1;
    while (curr >= 0)
        if (dp[curr][0] <= dp[curr][1])
        {
            ans.push_back(come[curr][0]);
            curr -= (come[curr][0].second - come[curr][0].first + 1);
        }
        else
        {
            ans.push_back(come[curr][1]);
            curr -= (come[curr][1].first - come[curr][1].second + 1);
        }
    cout << min(dp[l - 1][0], dp[l - 1][1]) << endl;
    for (int i = ans.size() - 1; i >= 0; i--)
        cout << ans[i].first + 1 << " " << ans[i].second + 1 << endl;
    return 0;
}