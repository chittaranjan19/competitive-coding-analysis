#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<int> tree[200005];
int cnt[200005];

void dfs(int node, int parent)
{
  if(tree[node].size() == 0)
  {
    cnt[node] = 1;
    return;
  }
  for(int i=0;i<tree[node].size();i++)
  {
    int nxt = tree[node][i];
    if(nxt == parent) continue;
    dfs(nxt, node);
    cnt[node]+=cnt[nxt];
  }
}

int solve(int node, int parent, int h, bool b)
{
  if(tree[node].size() == 0)
  {
    if(b) return 1;
    return cnt[1];
  }
  vector<int> v;
  for(int i=0;i<tree[node].size();i++)
  {
    int nxt = tree[node][i];
    if(nxt == parent) continue;
    int tmp = solve(nxt, node, h + 1, b);
    v.pb(tmp);
  }
  if(!b)
  {
    sort(v.begin(), v.end(), greater<int>());
    for(int i=1;i<v.size();i++)
      if(v[i] >= v[i - 1])
        v[i] = v[i - 1] - 1;
    if(h & 1) return v[v.size() - 1];
    else return v[0];
  }
  else
  {
    sort(v.begin(), v.end());
    for(int i=1;i<v.size();i++)
      if(v[i] <= v[i - 1])
        v[i] = v[i - 1] + 1;
    if((h & 1) == 0) return v[v.size() - 1];
    else return v[0];
  }
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("3.txt", "r", stdin);
  //freopen("out.out", "w", stdout);
  int n,x ,y;
  cin >> n;
  if(n == 1)
  {
    cout << "1 1";
    return 0;
  }
  for(int i=0;i<n - 1;i++)
  {
    cin >> x >> y;
    tree[x].pb(y);
  }
  dfs(1, 1);
  cout << solve(1, 1, 0, 0) << " " << solve(1, 1, 0, 1);
  return 0;
}
