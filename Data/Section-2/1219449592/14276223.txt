#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string.h>
#include <queue>
using namespace std;
const long long M = 100000+10, N = 1e9+7;
struct node
{
	int x, y;
}coor[10];
int n;

int main()
{
#ifndef   ONLINE_JUDGE
	freopen("1.txt", "r", stdin);
#endif
	int i, j, num[10];
	cin >> n;
	for(i = 0; i < n; i++)
	{
		cin >> coor[i].x >> coor[i].y;
	}
	if (n == 1)
	{
		cout << "-1\n";
		return 0;
	}
	if (n == 2)
	{
		if (coor[0].x == coor[1].y || coor[0].y == coor[1].x)
		{
			cout << "-1\n";
			return 0;
		}
		else
		{
			cout << abs((coor[0].x-coor[1].x)*(coor[0].y-coor[1].y))<< endl;
			return 0;
		}
	}
	if (n == 3)
	{
		num[0] = (coor[0].x-coor[1].x)*(coor[0].x-coor[1].x)+(coor[0].y-coor[1].y)*(coor[0].y-coor[1].y);
		num[1] = (coor[0].x-coor[2].x)*(coor[0].x-coor[2].x)+(coor[0].y-coor[2].y)*(coor[0].y-coor[2].y);
		num[2] = (coor[2].x-coor[1].x)*(coor[2].x-coor[1].x)+(coor[2].y-coor[1].y)*(coor[2].y-coor[1].y);
		sort(num, num+3);
		if (num[0]+num[1] == num[2])
		{
			cout << sqrt(num[0]+num[1]) << endl;
		}
		else
		{
			cout << "-1\n";
		}
		
	}
	if (n == 4)
	{
		num[0] = (coor[0].x-coor[1].x)*(coor[0].x-coor[1].x)+(coor[0].y-coor[1].y)*(coor[0].y-coor[1].y);
		num[1] = (coor[0].x-coor[2].x)*(coor[0].x-coor[2].x)+(coor[0].y-coor[2].y)*(coor[0].y-coor[2].y);
		num[2] = (coor[2].x-coor[1].x)*(coor[2].x-coor[1].x)+(coor[2].y-coor[1].y)*(coor[2].y-coor[1].y);
		num[3] = (coor[3].x-coor[1].x)*(coor[3].x-coor[1].x)+(coor[3].y-coor[1].y)*(coor[3].y-coor[1].y);
		num[4] = (coor[3].x-coor[2].x)*(coor[3].x-coor[2].x)+(coor[3].y-coor[2].y)*(coor[3].y-coor[2].y);
		num[5] = (coor[2].x-coor[1].x)*(coor[2].x-coor[1].x)+(coor[2].y-coor[1].y)*(coor[2].y-coor[1].y);
		sort(num, num+6);
		if (num[0] == num[1] && num[2] == num[3] && num[4] == num[5] && num[0]+num[2] == num[4])
		{
			cout << sqrt(num[0]+num[2]) << endl;
		}
		else
		{
			cout << "-1\n";
		}
	}
	return 0;
}
