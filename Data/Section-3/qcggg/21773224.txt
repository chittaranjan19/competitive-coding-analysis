#include <iostream>
#include <vector>

using namespace std;

vector<int> decompose(int s){
    vector<int> v(10, 0);
    int i = 9;
    while (s > 0){
        v[i] = s / i;
        v[0] += v[i];
        //cout << v[i] << " ";
        s = s % i;
        --i;
    }

    return v;
}

void print_min_number(vector<int> digits, int zero){
    int i = 1;
    vector<int> number;
    while (number.empty()){
        //cout << number << endl;
        if (digits[i] > 0){
            number.push_back(i);
            digits[i] -= 1;
        }
        ++i;
    }
    //cout << number << endl;

    while (zero){
        number.push_back(0);
        --zero;
    }

    for (int i = 1; i < 10; ++i){
        while (digits[i]){
            number.push_back(i);
            --digits[i];
        }
    }

    for (size_t i = 0; i < number.size(); ++i)
        cout << number[i];
}

void print_max_number(vector<int> digits, int zero){
    vector<int> number;
    for (int i = 9; i > 0; --i){
        while (digits[i]){
            number.push_back(i);
            --digits[i];
        }
    }

    while (zero){
        number.push_back(0);
        --zero;
    }

    for (size_t i = 0; i < number.size(); ++i)
        cout << number[i];
}

int main(){
    int m, s;
    cin >> m >> s;

    vector<int> digits = decompose(s);
    //cout << digits[0];
    if (digits[0] == 0 || m < digits[0])
        cout << -1  << " " << -1 << endl;
    else{
        print_min_number(digits, m - digits[0]);
        cout << " ";
        print_max_number(digits, m - digits[0]);
        cout << endl;
    }

    return 0;
}
