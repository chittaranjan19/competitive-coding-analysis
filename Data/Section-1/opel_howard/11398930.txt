#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)

typedef unsigned long long ull;
typedef long long ll;

template <typename U> class Comparator {
public:
    bool operator() (const U lhs, const U rhs) {
        // implement
        return true;
    }
};
// end of template

bool func(pair<pair<string, string>, int> lhs, pair<pair<string, string>, int> rhs) {
	return lhs.b < rhs.b;
}

int main() {
    // freopen("159A.in", "r", stdin);

    int n, d;
    scanf("%d %d", &n, &d);
    vector<pair<pair<string, string>, int> > logs;
    while (n--) {
    	string a, b;
    	int t;
    	cin >> a >> b >> t;
    	logs.push_back(make_pair(make_pair(a, b), t));
    }

    sort(logs.begin(), logs.end(), func);

    map<pair<string, string>, int> message;
    map<pair<string, string>, bool> isFriend;
    vector<pair<string, string> > ans;
    for (vector<pair<pair<string, string>, int> >::iterator log = logs.begin(); log != logs.end(); ++log) {
    	string a = log->a.a, b = log->a.b;
    	int t = log->b;

    	// cout << a << " " << b << " " << t << endl;

    	if (!isFriend.count(make_pair(a, b))) {
    		isFriend[make_pair(a, b)] = false;
    	}
    	else if (isFriend[make_pair(a, b)]) {
    		continue;
    	}

    	message[make_pair(a, b)] = t;
    	if ((message.count(make_pair(b, a))) and (t-message[make_pair(b, a)] <= d)) {
    		isFriend[make_pair(a, b)] = isFriend[make_pair(b, a)] = true;
    		ans.push_back(make_pair(a, b));
    	}
    }

    printf("%d\n", ans.size());
   	for (vector<pair<string, string> >::iterator abc = ans.begin(); abc != ans.end(); ++abc) {
   		cout << abc->a << " " << abc->b << endl;
   	}

    return 0;
}