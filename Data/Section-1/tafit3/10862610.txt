import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;

public class ProblemB2 {
    private static final long B = 1000000007;

    BufferedReader rd;

    private ProblemB2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        char[] p = rd.readLine().toCharArray();
        int[] ys = intarr();
        if(a[1] == 0) {
            out(pow(26,a[0]));
            return;
        }

        int pl = p.length;

        int[] pi = new int[pl];
        int k = 0;
        for(int q=2;q<=pl;q++) {
            while(k > 0 && p[k]!=p[q-1]) {
                k = pi[k-1];
            }
            if(p[k] == p[q-1]) {
                k++;
            }
            pi[q-1] = k;
        }
        Set<Integer> allowed = new HashSet<>();
        int x = pl;
        while(pi[x-1] >= 1) {
            allowed.add(pl-pi[x-1]);
            x = pi[x-1];
        }
        for(int j=1;j<ys.length;j++) {
            int diff = ys[j]-ys[j-1];
            if(diff < pl && !allowed.contains(diff)) {
                out(0);
                return;
            }
        }

        int n = a[0];
        int[] c = new int[n+1];
        for(int y: ys) {
            int yp = y-1;
            c[yp]++;
            c[yp+pl]--;
        }
        int[] d = new int[n+1];
        d[0] = c[0];
        for(int i=1;i<n+1;i++) {
            d[i] = d[i-1] + c[i];
        }
        int zeros = 0;
        for(int i=0;i<n;i++) {
            if(d[i] == 0) {
                zeros++;
            }
        }
        out(pow(26,zeros));
    }

    private long pow(long a, long b) {
        if(b > 1) {
            long x = pow(a,b/2);
            x = x*x;
            x %= B;
            if(b%2==1) {
                x*=a;
                x%=B;
            }
            return x;
        } else if(b == 1) {
            return a%B;
        } else {
            return 1;
        }
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        if(n == 0) {
            return new String[0];
        }
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB2();
    }
}
