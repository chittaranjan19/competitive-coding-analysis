//Cok tavsanin pesinde kosan hicbrini yakalayamaz!
#include<bits/stdc++.h>
#define MAXN 6009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int arr[MAXN],a,c,s[MAXN<<2],dp[MAXN],ans,lvl[MAXN],mxlvl;
vector<int>adj[MAXN],level[MAXN];
map<int,int>pm;
void upd(int p,int v,int nd,int x,int y){
	if(y==x){
		umax(s[nd],v);
		return;
	}
	int mid=(x+y)>>1;
	if(p<=mid)
		upd(p,v,nd<<1,x,mid);
	else
		upd(p,v,nd<<1|1,mid+1,y);
	s[nd]=max(s[nd<<1],s[nd<<1|1]);			
}
int tap(int l,int r,int nd,int x,int y){
	if(l>y or x>r)
		return 0;
	if(l<=x and y<=r)
		return s[nd];
	int mid=(x+y)>>1;		
	int i1=tap(l,r,nd<<1,x,mid);
	int i2=tap(l,r,nd<<1|1,mid+1,y);
	return max(i1,i2);
}
void dfs(int nd,int pr){
	if(pr!=-1)
		lvl[nd]=lvl[pr]+1;
	level[lvl[nd]].pb(nd);	
	umax(mxlvl,lvl[nd]);
	for(int i=0;i<adj[nd].size();i++){
		int to=adj[nd][i];
		if(to==pr)
			continue;
		dfs(to,nd);		
	}
}
int main(){
	scanf("%d",&a);
	for(int i=1;i<=a;i++)
		scanf("%d",arr+i),pm[arr[i]]=true;	
	for(int i=1;i<a;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	tr(i,pm)
		i->ss=++c;
	for(int i=1;i<=a;i++)
		arr[i]=pm[arr[i]];
	for(int i=1;i<=a;i++){
		memset(s,0,sizeof(s));
		memset(dp,0,sizeof(dp));
		memset(lvl,0,sizeof(dp));
		mxlvl=0;
		dfs(i,-1);
		for(int i=mxlvl;i>=0;i--){
			for(int j=0;j<level[i].size();j++){
				int to=level[i][j];
				dp[to]=tap(1,arr[to]-1,1,1,c)+1;
				umax(ans,dp[to]);
			}
			for(int j=0;j<level[i].size();j++){
				int to=level[i][j];
				upd(arr[to],dp[to],1,1,c);
			}
			level[i].resize(0);
		}
	}
	printf("%d\n",ans);
	return 0;
}
