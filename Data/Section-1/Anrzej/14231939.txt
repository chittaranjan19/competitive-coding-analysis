#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

int n, m, k;
string s[2222];
int ans[1111][1111];
bool used[1111][1111];



int main()
{
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++)
        cin >> s[i];
    memset(used, 0, sizeof(used));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (!used [i][j] && s[i][j] == '.')
            {
                int anss = 0;
                int mx = j, my = i, mx0 = j, my0 = i;
                queue<pair<int, int> > q;
                vector<pair<int, int> > need;
                q.push(mp(j, i));
                used[i][j] = 1;
                while (!q.empty())
                {
                    int cx, cy;
                    pair<int, int> g = q.front();
                    cx = g.fs, cy = g.sc;
                    need.push_back(mp(cy, cx));
                    q.pop();
                    for (int x = -1; x < 2; x++)
                    {
                        for (int y = -1; y < 2; y++)
                        {
                            if (x != y && x + y != 0 && !used[y+cy][x+cx])
                            {
                                if (s[cy + y][cx + x] == '.')
                                {
                                    used[cy+y][cx+x] = 1;
                                    q.push(mp(cx + x, cy + y));
                                    mx = max(mx, cx + x);
                                    my = max(my, cy + y);
                                }
                                else anss++;
                            }
                        }
                    }
                }
                for (int i = 0; i < need.size(); i++)
                {
                    ans[need[i].fs][need[i].sc] = anss;
                }
            }
        }
    }
    for (int i = 0; i < k; i++)
    {
        int x, y;
        cin >> x >> y;
        x--, y--;
        cout << ans[x][y] << endl;
    }
    return 0;
}