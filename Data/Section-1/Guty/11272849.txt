#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

vector<int> respuesta;
int n;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

void aventura (vector<set<int> > studIndex, vector<int> studOrder, int vert)
{
	int largo = studOrder.size();
	if ( largo == n )
		respuesta = studOrder;
	while (largo < n && !studIndex[vert].empty() )
	{
		studOrder.push_back(*studIndex[vert].begin());
		studIndex[vert].erase(studIndex[vert].begin());
		//imprimirVector(studOrder); // Borrar
		//debug(vert); // Borrar
		//cout << "--------" << endl; // Borrar
		aventura(studIndex,studOrder, vert + 1);
		if ( vert >= 2)
			aventura(studIndex,studOrder, vert - 2);	
		break; // What the actual fuck?	
	}


}

int main()
{
	cin >> n;
	vector<set<int> > studIndex (n); // Aca podr√≠a ser un vector<set<int> > sin problemas
	forn(i,n)
	{
		int a;
		cin >> a;
		studIndex[a].insert(i+1);
	}
	vector<int> studOrder;
	aventura(studIndex,studOrder,0);
	
	if (respuesta.size() > 0)
	{
		cout << "Possible" << endl;
		forn(i,n)
			cout << respuesta[i] << " ";
		cout << endl;
	}
	else
		cout << "Impossible" << endl;
	return 0;
}
