#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

vector<pair<int, pii> >edges;
vector<int> nodes;
pii graph[maxn];
int cur, p2;

pii find()
{
	if(cur >= nodes.size())
		return mp(-1, -1);
	if(p2 >= cur-1){
		cur++;
		p2 = 0;
		return find();
	}
	pii ret =  mp(nodes[cur], nodes[p2]);
	p2++;
	return ret;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int n, m, i, j, u, v, nxt;
	pii temp;
	scanf("%d%d", &n, &m);
	edges.resize(m);
	for(i=0; i<m; i++)
		scanf("%d%d", &edges[i].f, &edges[i].s.f), edges[i].s.s = i, edges[i].s.f^=1;
	sort(all(edges));
	nodes.pb(1);
	nxt = 2;
	cur = 2;
	p2 = 0;
	//for(i=0; i<m; i++)
	//	cout << edges[i].s.f << " " << edges[i].f << "\n"; 
	//cout << "\n\n";
	for(i=0; i<m; i++){
		//cout << edges[i].s.f << " " << edges[i].f << "\n";
		if(!edges[i].s.f){
			graph[edges[i].s.s] = mp(nodes.back(), nxt);
			nodes.pb(nxt++);
		}
		else{
			temp = find();
			if(temp.f==-1){
				printf("-1\n");
				return 0;
			}
			graph[edges[i].s.s] = temp;
		}
	}
	for(i=0; i<m; i++)
		printf("%d %d\n", graph[i].f, graph[i].s);
	return 0;
}
