#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <set>
#include <iomanip>
#include <utility>    
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector< ii > vii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INF 0x3f3f3f3f
#define EPS 1e-11
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S)) 
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL 
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//__builtin_popcount(m)
//scanf(" %d ", &t);
//L[i]=L[i/2]+1;

#define PI 3.14159265359

int n, m;
vi g[4000100];
int dist[4000100];
queue<int> q;
set<ii> hist;

int ps[300];
int nxt[12] = {        0,             2,            1,            4,            6,             3,             5,             9,            10,            8,            7,           11};
char c[12] = {	      '+',           '-',          '|',          '^',          '>',           '<',          'v',            'L',          'R',           'U',           'D',         '*'};
int dx[12][4] = { {1, 1, 1, 1}, {0, 1, 0, 1}, {1, 0, 1, 0}, {1, 0, 0, 0}, {0, 1, 0, 0},  {0, 0, 0, 1}, {0, 0, 1, 0},  {1, 1, 1, 0},  {1, 0, 1, 1},  {0, 1, 1, 1},  {1, 1, 0, 1},  {0, 0, 0, 0}};
int dr[4] = {-1, 0, 1, 0};
int dc[4] = {0, 1, 0, -1};

int vert(int i, int j, int k){
	return k*n*m + i*m + j;
}

void putEdge(int i, int j, int k, int r, int c, int z){
	if( min(min( min(i, r), min(j, c)), min(k, z)) < 0 || max(i, r) >= n || max(j, c) >= m || max(k, z) >= 4) return;
	int v = vert(i, j, k), w = vert(r, c, z);
	g[v].push_back(w); 
}

int bfs(int sr, int sc, int tr, int tc){
	int ans = 0, v = vert(sr, sc, 0);
	CLEAR(dist, INF); dist[v] = 0; q.push(v);
	while(!q.empty()){
		v = q.front(); q.pop();
		if( ((v%(n*m))/m) == tr && (v%m) == tc){
			return dist[v];
		}
		REP(i, g[v].size()){
			int u = g[v][i];
			if(dist[u] == INF){
				dist[u] = dist[v]+1;
				q.push(u);
			}
		}
	}
	return -1;
}

int main(){
	cin >> n >> m;
	char c;
	ps['+'] = 0; ps['-'] = 1; ps['|'] = 2; ps['^'] = 3; ps['>'] = 4; ps['<'] = 5;
	ps['v'] = 6; ps['L'] = 7; ps['R'] = 8; ps['U'] = 9; ps['D'] = 10; ps['*'] = 11;
	REP(i, n){
		REP(j, m){
			cin >> c;
			int x = ps[c];
			REP(k, 4){
				putEdge(i, j, k, i, j, (k+1)%4);
				REP(l, 4){
					ii p = make_pair(vert(i, j, k), vert((i+dr[l]+n)%n, (j+dc[l]+m)%m, k));
					if(dx[x][l]){
						if(hist.count(ii(p.second, p.first))){
							putEdge(i, j, k, i+dr[l], j+dc[l], k);
							putEdge(i+dr[l], j+dc[l], k, i, j, k);
							hist.erase(ii(p.second, p.first));
						} 
						else hist.insert(p);
					}
				}
				x = nxt[x];
			}
		}
	}
	hist.clear();
	int sr, sc;
	int tr, tc;
	cin >> sr >> sc >> tr >> tc;
	cout << bfs(sr-1, sc-1, tr-1, tc-1) << endl;
}
