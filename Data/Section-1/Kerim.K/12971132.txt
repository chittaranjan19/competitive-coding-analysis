/*
PROG:kerim
LANG:C++
*/
#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define ff first
#define ss second
#define lgN 19
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<ll,int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
vector<int>E[MAXN];
int level[MAXN],pr[MAXN],P[MAXN][lgN+9],a;
int dfs(int nd,int par)
{
	level[nd]=level[par]+1;
	pr[nd]=par;
	for(int i=0;i<E[nd].size();i++)
		dfs(E[nd][i],nd);		
}
void build()
{
	for(int i=1;i<=a;i++)
		for(int j=0;j<=lgN;j++)
			P[i][j]=-1;
	for(int i=1;i<=a;i++)	
		P[i][0]=pr[i];
	for(int j=1;j<=lgN;j++)
		for(int i=1;i<=a;i++)
			if(P[i][j-1] > 0)
				P[i][j]=P[P[i][j-1]][j-1];
}
int LCA(int x,int y)
{
	if(level[x]<level[y])
		swap(x,y);
	for(int i=lgN;i>=0;i--)
		if(level[x]-(1<<i)>=level[y])
			x=P[x][i];
	
	if(x==y)
		return x;	
	for(int i=lgN;i>=0;i--)
		if(P[x][i] > 0 and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];
	return pr[x];
}
int main()
{
	cin>>a;
	for(int i=1;i<a;i++)
	{
		int x,y;
		cin>>x>>y;
		E[x].pb(y);
	}
	dfs(1,0);
	build();	
	while(1){
		int l,r;
		cin>>l>>r;
		cout<<LCA(l,r)<<endl;
	}
	return 0;
}
