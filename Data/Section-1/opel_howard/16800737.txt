#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

inline int sqr(int x) {
	return x*x;
}

inline double sqr(double x) {
	return x*x;
}

int main() {
    // freopen("600D.in", "r", stdin);
    
    int x1_i, y1_i, r1_i;    
    scanf("%d %d %d", &x1_i, &y1_i, &r1_i);
    int x2_i, y2_i, r2_i;
    scanf("%d %d %d", &x2_i, &y2_i, &r2_i);

    double d = sqrtf(sqr(x1_i-x2_i)+sqr(y1_i-y2_i));
    if (d > r1_i+r2_i) {
    	puts("0.0");
    	return 0;
    }
    if (d < 1e-10) {
    	printf("%.16lf\n", PI*sqr(r1_i));
    	return 0;
    }
    double det1 = sqr(d)+sqr(r1_i)-sqr(r2_i);
    double det2 = sqr(d)-sqr(r1_i)+sqr(r2_i);
    double area = sqr(r1_i)*acos(det1/(2*d*r1_i))+sqr(r2_i)*acos(det2/(2*d*r2_i));
    area -= sqrtf((-d+r1_i+r2_i)*(d-r1_i+r2_i)*(d+r1_i-r2_i)*(d+r1_i+r2_i))/2;
    printf("%.16lf\n", area);

    return 0;
}