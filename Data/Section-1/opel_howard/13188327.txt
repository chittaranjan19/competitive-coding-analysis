#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

int main() {
    // freopen("580C.in", "r", stdin);
    
    int n, m;
    scanf("%d %d", &n, &m);

    vi hasCat(n+1, 0);
    loop1(it, n)
        scanf("%d", &hasCat[it]);

    vector<vi> edges(n+1);
    loop(it, n-1) {
        int a, b;
        scanf("%d %d", &a, &b);
        edges[a].pub(b);
        edges[b].pub(a);
    }

    int ans = 0;
    vector<bool> visited(n+1, false);
    visited[1] = true;
    que<int> q;
    q.push(1);
    while (!q.empty()) {
        int idx = q.front();
        q.pop();
        if (hasCat[idx] > m)
            continue;
        bool isLeaf = true;
        iterate(neighbor, edges[idx]) {
            if (visited[*neighbor])
                continue;
            if (hasCat[*neighbor])
                hasCat[*neighbor] += hasCat[idx];
            q.pu(*neighbor);
            visited[*neighbor] = true;
            isLeaf = false;
        }
        if (isLeaf)
            ans++;
    }
    printf("%d\n", ans);

    return 0;
}