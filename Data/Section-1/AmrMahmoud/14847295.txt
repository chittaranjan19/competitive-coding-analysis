#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> dist[405][405][2];
vector<int> g1[405];
vector<int> g2[405];
bool taken[405][405], v[405][405][2];
int n;

struct state
{
  pair<int, int> t;
  int train, bus;
  bool turn;

  state(){};

  state(int x, int y, bool tu, int xx, int yy)
  {
    train = x;
    bus = y;
    turn = tu;
    t = mp(xx, yy);
  }

  bool operator < (const state &s) const
  {
    if(max(s.t.f, s.t.s) == max(t.f, t.s))
      return min(s.t.f, s.t.s) < min(t.f, t.s);
    return max(s.t.f, s.t.s) < max(t.f, t.s);
  }
};

int main()
{
  int m, x, y, z;
  scanf("%d %d", &n, &m);
  for(int i=0;i<m;i++)
  {
    scanf("%d %d", &x, &y);
    taken[x][y] = taken[y][x] = true;
    g1[x].pb(y);
    g1[y].pb(x);
  }
  for(int i=1;i<=n;i++)
    for(int j=1;j<=n;j++)
    {
      if(i != j && !taken[i][j])
        g2[i].pb(j);
      dist[i][j][0] = mp(1 << 30, 1 << 30);
      dist[i][j][1] = mp(1 << 30, 1 << 30);
    }
  priority_queue<state> q;
  q.push(state(1, 1, 0, 0, 0));
  dist[1][1][0] = mp(0, 0);
  while(!q.empty())
  {
    x = q.top().train;
    y = q.top().bus;
    z = q.top().turn;
    q.pop();
    if(v[x][y][z]) continue;
    v[x][y][z] = true;
    if(x == y && x != 1 && !z)
    {
      if(x == n)
      {
        printf("%d", max(dist[x][y][z].f, dist[x][y][z].s));
        return 0;
      }
      continue;
    }
    if(!z)
    {
      for(int i=0;i<g1[x].size();i++)
      {
        int xx = g1[x][i];
        state tmp = state(xx, y, 1, dist[x][y][z].f + 1, dist[x][y][z].s);
        if(!(tmp < state(xx, y, 1, dist[xx][y][1].f, dist[xx][y][1].s)))
        {
          dist[xx][y][1] = mp(dist[x][y][z].f + 1, dist[x][y][z].s);
          q.push(tmp);
        }
      }
    }
    else
    {
      for(int i=0;i<g2[y].size();i++)
      {
        int yy = g2[y][i];
        state tmp = state(x, yy, 0, dist[x][y][z].f, dist[x][y][z].s + 1);
        if(!(tmp < state(x, yy, 0, dist[x][yy][0].f, dist[x][yy][0].s)))
        {
          dist[x][yy][0] = mp(dist[x][y][z].f, dist[x][y][z].s + 1);
          q.push(tmp);
        }
      }
    }
  }
  printf("-1");
  return 0;
}
