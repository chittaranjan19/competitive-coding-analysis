import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemA2 {
    BufferedReader rd;

    private ProblemA2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] y = intarr();
        int[] m = intarr();
        int[] c = intarr();
        int[] x = new int[3];

        int cost = 0;
        boolean costcon = true;
        while(costcon) {
            int i=0;
            boolean igo = true;
            while(costcon && igo) {
                int j=0;
                while(true) {
                    int k = cost - i*c[0];
                    if(k < 0) {
                        igo = false;
                        break;
                    }
                    k -= j*c[1];
                    if(k < 0) {
                        break;
                    }
                    if(k%c[2] == 0) {
                        x[0] = y[0]+i;
                        x[1] = y[1]+j;
                        x[2] = y[2]+k/c[2];
                        if(yangWins(x,m)) {
                            costcon = false;
                            break;
                        }
                    }
                    j++;
                }
                i++;
            }
            if(costcon) {
                cost++;
            }
        }
        out(cost);
    }

    private boolean yangWins(int[] x, int[] m) {
        int decM = Math.max(0, x[1] - m[2]);
        int decY = Math.max(0, m[1] - x[2]);
        if(decY == 0) {
            return decM > 0;
        }
        if(decM == 0) {
            return false;
        }
        int stepsY = x[0] / decY;
        for(int i=-1;i<=1;i++) {
            int steps = stepsY + i;
            if(steps >= 0) {
                int hY = x[0] - steps*decY;
                int hM = m[0] - steps*decM;
                if(hY > 0 && hM <= 0) {
                    return true;
                }
            }
        }
        int stepsM = m[0] / decM;
        for(int i=-1;i<=1;i++) {
            int steps = stepsM + i;
            if(steps >= 0) {
                int hY = x[0] - steps*decY;
                int hM = m[0] - steps*decM;
                if(hY > 0 && hM <= 0) {
                    return true;
                }
            }
        }
        return false;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = s.split(" ");
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA2();
    }
}
