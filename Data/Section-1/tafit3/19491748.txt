import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemD {
    private static final int DIST = 0;
    private static final int TIME = 1;
    private static final long INF = Long.MAX_VALUE / 3;
    private BufferedReader rd;
    private long d,k,a,b,t;

    ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        long[] q = longarr();
        d = q[0];
        k = q[1];
        a = q[2];
        b = q[3];
        t = q[4];
        long res;
        if(k >= d) {
            res = d*a;
        } else {
            long min = 0;
            long max = (d / a) + 1;
            while(max - min > 4) {
                long df = max - min;
                long df3 = df / 3;
                long g = min + df3;
                long h = g + df3;

                long gTime = time(g);
                long hTime = time(h);
                if(gTime <= hTime) {
                    max = h;
                } else {
                    min = g;
                }
            }
            res = INF;
            for(long i=-10;i<=10;i++) {
                long p = min + i;
                if(p >= 0) {
                    res = Math.min(res, time(p));
                }
            }
        }
        out(res);
    }

    private long time(long x) {
        long[] dt = distTime(x);
        if(dt[DIST] > d) {
            long[] y = distTime(x-1);
            if(y[DIST] > d) {
                return INF;
            }
            return y[TIME] + t + (d - y[DIST]) * a;
        }
        return dt[TIME] + (d - dt[DIST]) * b;
    }

    private long[] distTime(long x) {
        long dist = (x+1)*k;
        long time = (x+1)*k*a + x*t;
        return new long[] { dist, time };
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
