#include<bits/stdc++.h>
#define MAXN 250009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define y1 DevC
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
ll dis(int x,int y,int z,int t){
	ll x2=(x-z)*(x-z);
	ll y2=(y-t)*(y-t);
	return sqrt(x2+y2);
}
map<ll,int>pm;
struct query{
	ll uzak;
	int mass,powr,rad;
	void init(){
		pm[uzak]=1;
		pm[mass]=1;
		pm[powr]=1;
		pm[rad]=1;
	}
	void compress(){
		uzak=pm[uzak];
		mass=pm[mass];
		powr=pm[powr];
		rad=pm[rad];
	}
	void show(){
		printf("%d %lld %d %d\n",mass,uzak,powr,rad);
	}
}Q[MAXN];
set<PII> adj[MAXN<<2];
PII s[MAXN<<4];
void build(int nd,int x,int y){
	if(x==y){
		if(adj[x].size()==0)
			s[nd]=mp(INF,INF);
		else	
			s[nd]=*adj[x].begin();	
		return;	
	}
	int mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);	
	s[nd]=min(s[nd<<1],s[nd<<1|1]);
}
PII tap(int l,int r,int nd,int x,int y){
	if(l>y or x>r)
		return mp(INF,INF);
	if(l<=x and y<=r)
		return s[nd];
	int mid=(x+y)>>1;
	PII i1=tap(l,r,nd<<1,x,mid);		
	PII i2=tap(l,r,nd<<1|1,mid+1,y);
	return min(i1,i2);		
}/*
void upd(int l,int r,int p,int nd,int x,int y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r){	
		if(s[nd].size()==0)
			return;
		typeof((s[nd]).begin())	it=s[nd].begin();
		while(it!=s[nd].end()){
			if(it->ff>p)
				break;
			que[++tail]=*it;		
			it++;
		}
		return;	
	}
	int mid=(x+y)>>1;
	upd(l,r,p,nd<<1,x,mid);
	upd(l,r,p,nd<<1|1,mid+1,y);
}*/
void poz(int p,PII z,int nd,int x,int y){
	if(x==y){
		adj[x].erase(z);
		if(adj[x].size()==0)
			s[nd]=mp(INF,INF);
		else	
			s[nd]=*adj[x].begin();	
		return;
	}
	int mid=(x+y)>>1;
	if(p<=mid)
		poz(p,z,nd<<1,x,mid);
	else
		poz(p,z,nd<<1|1,mid+1,y);
	s[nd]=min(s[nd<<1],s[nd<<1|1]);
}
int main(){
	int x1,y1,p1,r1,n,c=0;
	scanf("%d%d%d%d%d",&x1,&y1,&p1,&r1,&n);
	pm[p1]=pm[r1]=1;
	for(int i=1;i<=n;i++){
		int x,y,m,p,r;
		scanf("%d%d%d%d%d",&x,&y,&m,&p,&r);
		Q[i].uzak=dis(x,y,x1,y1);
		Q[i].mass=m;
		Q[i].powr=p;
		Q[i].rad=r;
		Q[i].init();
	}
	tr(it,pm)
		it->ss=++c;
	p1=pm[p1];r1=pm[r1];
	for(int i=1;i<=n;i++){
		Q[i].compress();
		adj[Q[i].mass].insert(mp(Q[i].uzak,i));
	//	Q[i].show();
	}
	build(1,1,c);
	queue<PII>q;int ans=0;
	q.push(mp(p1,r1));
	while(!q.empty()){
		int pp=q.front().ff;
		int rr=q.front().ss;
		q.pop();
		while(1){
			PII tt=tap(1,pp,1,1,c);
			if(tt.ff>rr)
				break;
			//upd(1,pp,rr,1,1,c);	
			ans++;
			int ind=tt.ss;
			poz(Q[ind].mass,tt,1,1,c);
			q.push(mp(Q[ind].powr,Q[ind].rad));
		}
	}
	printf("%d\n",ans);	
	return 0;
}
