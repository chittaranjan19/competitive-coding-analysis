#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>

using namespace std;

typedef long long ll;

const int MAXN = 32 * 100000 + 5;

struct trie
{
    int ch[MAXN][2], sz, val[MAXN];

    void init()
    {
        sz = 0;
        memset(ch[0], 0, sizeof(ch[0]));
        val[0] = 0;
    }

    void insert(int x)
    {
        int u = 0;
        for(int i = 30; i >= 0; --i)
        {
            int c = x >> i & 1;
            if(!ch[u][c])
            {
                ch[u][c] = ++sz;
                memset(ch[sz], 0, sizeof(ch[sz]));
                val[u] = 0;
            }
            u = ch[u][c];
        }
        ++val[u];
    }

    ll ask(int x)
    {
        int u = 0;
        for(int i = 30; i >= 0; --i)
        {
            int c = x >> i & 1;
            u = ch[u][c];
            if(!u) return 0;
        }
        return val[u];
    }

    void del(int x)
    {
        int u = 0;
        for(int i = 30; i >= 0; --i)
        {
            int c = x >> i & 1;
            u = ch[u][c];
        }
        --val[u];
    }
} tree;
int block, a[MAXN];
struct question
{
    int x, y, id;
    ll ans;
} q[MAXN];

bool cmp1(const question &a, const question &b)
{
    return a.x / block == b.x / block ? a.y < b.y : a.x / block < b.x / block;
}

bool cmp2(const question &a, const question &b)
{
    return a.id < b.id;
}

int main()
{
    int n, m, k;
    while(~scanf("%d%d%d", &n, &m, &k))
    {
        tree.init();
        block = sqrt(n);
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", a + i);
            a[i] ^= a[i - 1];
        }
        for(int i = 0; i < m; ++i)
        {
            scanf("%d%d", &q[i].x, &q[i].y);
            q[i].id = i;
        }
        sort(q, q + m, cmp1);
        int l = 0, r = 0;
        ll ans = 0;
        tree.insert(0);
        for(int i = 0; i < m; ++i)
        {
            while(l < q[i].x - 1)
            {
                tree.del(a[l]);
                ans -= tree.ask(a[l] ^ k);
                ++l;
            }
            while(l > q[i].x - 1)
            {
                --l;
                ans += tree.ask(a[l] ^ k);
                tree.insert(a[l]);
            }
            while(r < q[i].y)
            {
                ++r;
                ans += tree.ask(a[r] ^ k);
                tree.insert(a[r]);
            }
            while(r > q[i].y)
            {
                tree.del(a[r]);
                ans -= tree.ask(a[r] ^ k);
                --r;
            }
            q[i].ans = ans;
        }
        sort(q, q + m, cmp2);
        for(int i = 0; i < m; ++i)
        {
            printf("%I64d\n", q[i].ans);
        }
    }
    return 0;
}
