#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<vector<pair<pair<int,int>,int> > > graph(100005);
LL dist[100005];
bool visited[100005],train[100005];
int trainss[100005];
vector<pair<int,int> > trains;

bool compare(pair<int,int> a,pair<int,int> b)
{
    if(a.first == b.first)
        return a.second > b.second;
    return a.first < b.first;
}

int main()
{
    int n,m,k,x,y,z;
    cin >> n >> m >> k;
    for(int i=1;i<=n;i++)
        dist[i] = -1 * (LL)(1e16);
    for(int i=0;i<m;i++)
    {
        scanf("%d %d %d",&x,&y,&z);
        graph[x].pb(mp(mp(-z,y),0));
        graph[y].pb(mp(mp(-z,x),0));
    }
    for(int i=0;i<k;i++)
    {
        scanf("%d %d",&x,&y);
        trains.push_back(mp(x,-y));
    }
    sort(trains.begin(),trains.end(),compare);
    int counter = 0;
    for(int i=0;i<k;i++)
    {
        if(i == 0)
            graph[1].push_back(mp(mp(trains[i].second,trains[i].first),1));
        else if(trains[i].first != trains[i-1].first)
            graph[1].push_back(mp(mp(trains[i].second,trains[i].first),1));
        else counter++;
    }
    priority_queue<pair<pair<LL,int>,int> > dijkstra;
    dijkstra.push(mp(mp(0,1),0));
    dist[1] = 0;
    while(!dijkstra.empty())
    {
        int temp = dijkstra.top().first.second;
        int tempo = dijkstra.top().second;
        LL path = dijkstra.top().first.first;
        dijkstra.pop();
        if(path == dist[temp])
            train[temp] = tempo;
        if(visited[temp])
            continue;
        visited[temp] = true;
        train[temp] = tempo;
        for(int i=0;i<graph[temp].size();i++)
        {
            if((!visited[graph[temp][i].first.second] && graph[temp][i].first.first + dist[temp] > dist[graph[temp][i].first.second]) || ((graph[temp][i].first.first + dist[temp] == dist[graph[temp][i].first.second] && !graph[temp][i].second)))
            {
                dist[graph[temp][i].first.second] = graph[temp][i].first.first + dist[temp];
                dijkstra.push(mp(make_pair(graph[temp][i].first.first + dist[temp],graph[temp][i].first.second),graph[temp][i].second));
            }
        }
    }
    for(int i=0;i<k;i++)
    {
        if(i && trains[i].first == trains[i-1].first)
            continue;
        if(trains[i].second < dist[trains[i].first])
            counter++;
        else if(!train[trains[i].first])
            counter++;
    }
    cout << counter;
    return 0;
}