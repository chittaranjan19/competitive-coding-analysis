import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemE {
    BufferedReader rd;

    ProblemE() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int p = intarr()[2];
        char[] c = rd.readLine().toCharArray();
        char[] ops = rd.readLine().toCharArray();
        int n = c.length;
        int[] next = new int[n + 10];
        int[] prev = new int[n + 10];
        int[] other = new int[n + 10];
        int[] level = new int[n + 10];
        int cur = 0;
        int first = 0;
        for(int i=0;i<n;i++) {
            next[i] = i+1;
            prev[i] = i-1;
            if(c[i] == '(') {
                level[cur] = i;
                cur++;
            } else if(c[i] == ')') {
                cur--;
                other[i] = level[cur];
                other[level[cur]] = i;
            }
        }
        p--;
        for(char op: ops) {
            switch (op) {
                case 'L':
                    p = prev[p];
                    break;
                case 'R':
                    p = next[p];
                    break;
                case 'D':
                    if(other[p] < p) {
                        int before = prev[other[p]];
                        if(next[p] < n) {
                            prev[next[p]] = before;
                            if(before >= 0) {
                                next[before] = next[p];
                            } else {
                                first = next[p];
                            }
                            p = next[p];
                        } else {
                            next[before] = n;
                            p = before;
                        }
                    } else {
                        int before = prev[p];
                        if(next[other[p]] < n) {
                            if(before >= 0) {
                                next[before] = next[other[p]];
                            } else {
                                first = next[other[p]];
                            }
                            prev[next[other[p]]] = before;
                            p = next[other[p]];
                        } else {
                            next[before] = n;
                            p = before;
                        }
                    }
                    break;
            }
        }
        StringBuilder buf = new StringBuilder();
        p = first;
        while(p < n) {
            buf.append(c[p]);
            p = next[p];
        }
        out(buf);
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemE();
    }
}
