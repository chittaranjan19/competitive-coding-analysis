//link: https://www.hackerrank.com/challenges/emma-and-sum-of-products

#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const double PI = 4*atan(1);
typedef complex<double> base;
vector<base> omega;
long long FFT_N,mod=100003;
void init_fft(long long n)
{
  FFT_N  = n;
  omega.resize(n);
  double angle = 2 * PI / n;
  for(int i = 0; i < n; i++)
    omega[i] = base( cos(i * angle), sin(i * angle));
}
void fft (vector<base> & a)
{
  long long n = (long long) a.size();
  if (n == 1)  return;
  long long half = n >> 1;
  vector<base> even (half),  odd (half);
  for (int i=0, j=0; i<n; i+=2, ++j)
    {
      even[j] = a[i];
      odd[j] = a[i+1];
    }
  fft (even), fft (odd);
  for (int i=0, fact = FFT_N/n; i < half; ++i)
    {
      base twiddle =  odd[i] * omega[i * fact] ;
      a[i] =  even[i] + twiddle;
      a[i+half] = even[i] - twiddle;
    }
}
void multiply (const vector<long long>  a, const vector<long long>  b, vector<long long> & res)
{
  vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
  long long n = 1;
  while (n < 2*max (a.size(), b.size()))  n <<= 1;
  fa.resize (n),  fb.resize (n);

  init_fft(n);
  fft (fa),  fft (fb);
  for (size_t i=0; i<n; ++i)
    fa[i] = conj( fa[i] * fb[i]);
  fft (fa);
  res.resize (n);
  for (size_t i=0; i<n; ++i)
    {
      res[i] = (long long) (fa[i].real() / n + 0.5);
      if(res[i]>=1)
        res[i] = 1;
    }
}

void polypow(int k, vector<ll> &a, vector<ll> &ret)
{
    vector<ll> x(all(a));
    vector<ll> y(all(a));
    while(k){
        if(k&1)
            multiply(x, y, x);
        multiply(y, y, y);
        k/=2;
    }
    ret = x;
}

int main()
{
    //freopen("i.txt", "r", stdin);
    //freopen("o.txt", "w", stdout);
    int n, k, i, j;
    vector<ll> ret(1001, 0), ans;
    scanf("%d%d", &n, &k);
    for(i=0; i<n; i++){
        scanf("%d", &j);
        ret[j] = 1;
    }
    ans = ret;
    polypow(k-1, ret, ans);
    for(i=0; i<ans.size(); i++){
        if(ans[i])
            printf("%d ", i);
    }
    printf("\n");
    return 0;
}