// Fox And Box Accumulation

#include<iostream>
#include<cstdlib>
using namespace std;

class box
{
public:
	int number;
	int count;
	box()
	{
		count=0;
	}
};

int compare(const void *a, const void *b)
{
	return *(int *)a-*(int *)b;
}

int main()
{
	int n,i,num,l=0,flag,j,ans=0,c,p,start,end;
	cin>>n;
	box arr[n];
	for(i=0;i<n;i++)
	{
		cin>>num;
		flag=0;
		for(j=0;j<l;j++)
		{
			if(arr[j].number==num)
			{
				flag=1;
				arr[j].count++;
			}
		}
		if(flag==0)
		{
			arr[l].number=num;
			arr[l].count++;
			l++;
		}
	}
	qsort(&arr[0],l,sizeof(arr[0]),compare);
	start=0;
	end=l-1;
	i=0;
	p=0;
	while(start<=end)
	{
		if(p<=arr[i].number)
			c=arr[i].number+1-p;
		if(arr[i].count>c)
		{
			arr[i].count-=c;
			p+=c;
			if(i==end) {p=0; i=start; ans++;}
			else i++;
		}
		else
		{
			p+=arr[i].count;
			arr[i].count=0;
			if(i==start) {start=i+1;}
			if(i==end) {end=i-1; i=start; p=0; ans++;}
			else i++;
		}
	}
	cout<<ans<<endl;
	return 0;
}