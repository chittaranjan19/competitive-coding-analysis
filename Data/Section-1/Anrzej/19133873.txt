#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _gcd(int a, int b, int & x, int & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	int _x1, _y1;
	int d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 20;
ll mod = 1e9 + 7;

int n;
vector<int> g[N];
int sz[N];
double ans[N];

void _sz(int v, int p){
	sz[v] = 1;
	for (int i = 0; i < g[v].size(); i++){
		int to = g[v][i];
		if (to == p) continue;
		_sz(to, v);
		sz[v] += sz[to];
	}
}

void dfs(int v, int p, double cur = 1.0){
	ans[v] = cur;
	double sum = 0;
	for (int i = 0; i < g[v].size(); i++){
		if (g[v][i] == p) continue;
		sum += sz[g[v][i]];
	}
	for (int i = 0; i < g[v].size(); i++){
		int to = g[v][i];
		if (to == p) continue;
		dfs(to, v, cur + 1.0 + (sum - sz[to]) / 2.0);
	}
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}

int main()
{

	ll p = 1, q = 2;
	cin >> n;
	bool isone = 0;
	ll cnt = 1;
	for (int i = 0; i < n; i++){
		ll a;
		cin >> a;
		cnt *= a;
		cnt %= mod;
		if (a == 1 && isone) continue;
		if (a == 1)
			isone = 1;
		q = (binpow(q, a)) % mod;
	}
	p = q;
	if (cnt % 2 == 0) p += 2;
	else p -= 2;
	p = (p + mod) % mod;
	ll in2 = 500000004, in6 = 166666668;
	q = (q * in2) % mod;
	p = (p * in6) % mod;
	cout << p << '/' << q;
	return 0;
}