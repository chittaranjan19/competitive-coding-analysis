//
// Created by Santiago on 11/04/2016.
//

#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;

class Compare {
public:
    bool operator()(pii a, pii b) {
        return a.second < b.second;
    }
};

vector<long long> dijkstra(vector<vector<pii> > &graph, int n) {
    long long k = (long long)1<<(long long)62;
    vector<long long> best(n+1, k);
    vector<bool> visited(n+1, false);
    priority_queue<pii, vector<pii>, Compare> pq;
    pq.push(make_pair(1, 0));
    best[1] = 0;
    while (!pq.empty()) {
        pii p = pq.top();
        pq.pop();
        if(visited[p.first])
            continue;
        visited[p.first] = true;
        for (int i = 0; i < graph[p.first].size(); ++i) {
            int t, d;
            t = graph[p.first][i].first;
            d = graph[p.first][i].second;
            if(!visited[t]) {
                if(p.second + d < best[t]) {
                    best[t] = best[p.first] + d;
                    pq.push(make_pair(t, best[t]));
                }
            }
        }
    }
    return best;
}

int main() {
    //freopen("jzzhu.in", "r", stdin);
    int n, m, k, ans = 0;
    cin>>n>>m>>k;
    vector<vector<pii> > graph(n+1);
    for (int i = 0; i < m; ++i) {
        int u, v, x;
        cin>>u>>v>>x;
        graph[u].push_back(make_pair(v, x));
        graph[v].push_back(make_pair(u, x));
    }
    vector<long long> best = dijkstra(graph, n);
    for (int i = 0; i < k; ++i) {
        int u, x;
        cin>>u>>x;
        if(x >= best[u])
            ans++;
    }
    cout<<ans;
    return 0;
}