#include <iostream>
#include <cstdio>
#include <string>
#include <cmath>

using namespace std;

const long double eps = 1e-10;

int dcmp(long double x)
{
    if(fabs(x) < eps) return 0;
    return x < 0 ? -1 : 1;
}

long double cal1(long double x, long double y, long double z)
{
    return z * log(y) + log(log(x));
}

long double cal2(long double x, long double y, long double z)
{
    return log(y * z * log(x));
}

int main()
{
    long double x, y, z;
    while(cin >> x >> y >> z)
    {
//        cout << pow(z, pow(y, x)) << ' ' << pow(pow(y, x), z)   <<' ' << pow(y, x * z) <<  endl;
//        long double aaa = log(x) * y, bbb = log(z * x);
//        cout << pow(z, exp(aaa)) << ' ' << pow(y, exp(bbb)) << endl;
        long double ans = 0;
        string s;
        long double tmp = cal1(x, y, z);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "x^y^z";
        }
        tmp = cal1(x, z, y);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "x^z^y";
        }
        tmp = cal2(x, y, z);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "(x^y)^z";
        }
        tmp = cal2(x, z, y);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "(x^z)^y";
        }
        tmp = cal1(y, x, z);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "y^x^z";
        }
        tmp = cal1(y, z, x);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "y^z^x";
        }
        tmp = cal2(y, x, z);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "(y^x)^z";
        }
        tmp = cal2(y, z, x);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "(y^z)^x";
        }
        tmp = cal1(z, x, y);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "z^x^y";
        }
        tmp = cal1(z, y, x);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "z^y^x";
        }
        tmp = cal2(z, x, y);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "(z^x)^y";
        }
        tmp = cal2(z, y, x);
        if(dcmp(tmp - ans) > 0)
        {
            ans = tmp;
            s = "(z^y)^x";
        }
//        cout << exp(cal2(y, x, z)) <<  ' ' << exp(cal1(z, y, x) )<< endl;
        cout << s << endl;
    }
    return 0;
}
