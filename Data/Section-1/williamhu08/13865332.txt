#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

int slope[100013];
ll yint[100013];

bool comp(int a, int b) {
	if (slope[a]==slope[b]) return yint[a]>yint[b];
	return slope[a]<slope[b];
}

inline void add(vector<int>& hull, int c, vector<pair<ll,ll> >& inter) {
	while (hull.size()>1) {
		int a = hull[hull.size()-2];
		int b = hull.back();
		ll one = (slope[c]-slope[a])*(yint[a]-yint[b]);
		ll two = (slope[b]-slope[a])*(yint[a]-yint[c]);
		if (one<two) {
			hull.pop_back();
			inter.pop_back();
		} else break;
	}
	if (hull.size()==1 && slope[hull[0]]==slope[c] && yint[hull[0]]>yint[c]) hull.pop_back();
	if (hull.size()>0) inter.push_back(make_pair(yint[hull.back()]-yint[c],slope[c]-slope[hull.back()]));
	hull.push_back(c);
}

inline ll get(int i, ll T) { return T*slope[i]+yint[i]; }

class CVT {
private:
	vector<int> has;
	vector<int> hull;
	vector<pair<ll,ll> > inter;
public:
	CVT() {}
	inline int size() { return has.size(); }
	inline void insert(int x) {
		has.push_back(x);
		add(hull,x,inter);
	}
	inline int query(ll T) {
		if (hull.size()==1 || inter[0].first<inter[0].second*T) return hull[0];
		if (inter.back().first>inter.back().second*T) return hull.back();
		int low = 0;
		int high = inter.size()-1;
		while (high-low>1) {
			int mid = (low+high)/2;
			if (inter[mid].first<inter[mid].second*T) high = mid;
			else if (inter[mid].first>inter[mid].second*T) low = mid;
			else low = high = mid+1;
		}
		low = high;
		ll best = get(hull[high],T);
		int which = hull[high];
		while (low>0 && get(hull[low-1],T)==best) {
			low-=1;
			which = min(which,hull[low]);
		}
		while (high<hull.size()-1 && get(hull[high+1],T)==best) {
			high+=1;
			which = min(which,hull[high]);
		}
		return which;
	}
	inline void remove(int x) {
		has.erase(find(has.begin(),has.end(),x));
		hull.clear();
		inter.clear();
		for (int i: has) add(hull,i,inter);
	}
};

const int SQRT = 1300;

int n;
int l[100013];
int t[100013];
CVT block[100013/SQRT+1];
vector<int> lines;
ll ans[100013];

int main() {
	scanf("%d",&n);
	for (int i=0;i<n;i++) {
		scanf("%d%d",&l[i],&t[i]);
		slope[i] = 2*t[i];
		yint[i] = l[i]-(ll) t[i]*t[i];
		lines.push_back(i);
	}
	sort(lines.begin(),lines.end(),comp);
	int on = 0;
	int has = 0;
	ll T = 0;
	for (int i=0;i<n;i++) {
		if (has==0) {
			if (on==n) break;
			T = max(T,slope[lines[on]]/2LL);
		}
		while (on<n && slope[lines[on]]/2<=T) {
			has+=1;
			block[lines[on]/SQRT].insert(lines[on]);
			on+=1;
		}
		ll val = 1e18;
		int which = 0;
		for (int j=0;j<n/SQRT+1;j++) if (block[j].size()>0) {
			int cur = block[j].query(T);
			ll pos = get(cur,T);
			if (pos<val || (pos==val && cur<which)) {
				val = pos;
				which = cur;
			}
		}
		T+=l[which];
		ans[which] = T;
		block[which/SQRT].remove(which);
		has-=1;
	}
	for (int i=0;i<n;i++) printf("%lld ",ans[i]);
	printf("\n");

	return 0;
}
