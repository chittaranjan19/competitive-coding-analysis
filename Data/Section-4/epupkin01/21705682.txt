#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<ll, ll> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<ll, ll> mMap;
typedef mMap::iterator mmIter;
typedef multiset<ll> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

int n;
ll t, w, t0, place, p;
mSet st;
mMap mp;
mMap::reverse_iterator it;

int main()
{
    cin >> n >> t0 >> w;
    int i;
    for (i = 0; i < n-1; ++i)
    {
        scanf("%lld%lld", &t, &w);
        if (t > t0)
            st.insert(w - t + 1);
        else
            mp.insert(Pair(t, w - t + 1));
    }
    
    if (st.empty())
    {
        cout << 1 << '\n';
        return 0;
    }
    place = st.size() + 1;
    t0 = t0 - *st.begin();
    st.erase(st.begin());
    while (t0 >= 0)
    {
        it = mp.rbegin();
        while (it != mp.rend() && it->first > t0)
        {
            st.insert(it->second);
            mp.erase(--it.base());
            ++it;
        }
        p = st.size() + 1;
        place = min(p, place);
        if (st.empty())
            break;
        t0 = t0 - *st.begin();
        st.erase(st.begin());
    }
    cout << place << '\n';
    return 0;
}