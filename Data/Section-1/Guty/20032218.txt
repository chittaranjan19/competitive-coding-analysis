#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,m,q;
	while (cin >> n >> m >> q)
	{
		deque<deque<tint> > v (n,deque<tint> (m));
		deque<pair<tint,tint> > inverso;
		forn(i,q)
		{
			tint t;
			cin >> t;
			if (t == 1)
			{
				tint r;
				cin >> r;
				tint x = v[r-1].front();
				v[r-1].pop_front();
				v[r-1].push_back(x);
				inverso.push_front(make_pair(1,r));
			}
			else if (t == 2)
			{
				tint c;
				cin >> c;
				deque<tint> aux (n);
				forn(j,n)
					aux[j] = v[j][c-1];
				tint x = aux.front();
				aux.pop_front();
				aux.push_back(x);
				forn(j,n)
					v[j][c-1] = aux[j];
				inverso.push_front(make_pair(2,c));
			}
			else
			{
				tint r,c,x;
				cin >> r >> c >> x;
				v[r-1][c-1] = x;
			}
		}
		for (auto d : inverso)
		{
			tint t = d.first;
			if (t == 1)
			{
				tint r = d.second;
				tint x = v[r-1].back();
				v[r-1].pop_back();
				v[r-1].push_front(x);
			}
			else if (t == 2)
			{
				tint c = d.second;
				deque<tint> aux (n);
				forn(j,n)
					aux[j] = v[j][c-1];
				tint x = aux.back();
				aux.pop_back();
				aux.push_front(x);
				forn(j,n)
					v[j][c-1] = aux[j];
			}
			
		}
		forn(i,n)
		{
			forn(j,m)
				cout << v[i][j] << " ";
			cout << endl;
		}
	}
	return 0;
}



