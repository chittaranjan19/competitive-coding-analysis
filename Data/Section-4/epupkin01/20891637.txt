#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

int main()
{
    int x[3], y[3];
    int i;
    for (i = 0; i < 3; ++i)
        cin >> x[i] >> y[i];
    
    if ((x[0] == x[1] && x[1] == x[2]) ||
        (y[0] == y[1] && y[1] == y[2]))
        cout << 1 << '\n';
    else if ( (x[0] == x[1] && (y[2] >= max(y[1], y[0]) || y[2] <= min(y[1], y[0]))) ||
              (y[0] == y[1] && (x[2] >= max(x[1], x[0]) || x[2] <= min(x[1], x[0]))) )
        cout << 2 << '\n';
    else if ( (x[1] == x[2] && (y[0] >= max(y[1], y[2]) || y[0] <= min(y[1], y[2]))) ||
              (y[1] == y[2] && (x[0] >= max(x[1], x[2]) || x[0] <= min(x[1], x[2]))) )
        cout << 2 << '\n';
    else if ( (x[0] == x[2] && (y[1] >= max(y[0], y[2]) || y[1] <= min(y[0], y[2]))) ||
              (y[0] == y[2] && (x[1] >= max(x[0], x[2]) || x[1] <= min(x[0], x[2]))) )
        cout << 2 << '\n';
    else
        cout << 3 << '\n';
    
    return 0;
}