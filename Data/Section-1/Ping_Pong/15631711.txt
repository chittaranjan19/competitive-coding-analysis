#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const int MAX_E = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int a[MAX_N];
vector<int> b[MAX_N];
int e[MAX_E + 1];
vector<int> pr;
vector<int> fact[MAX_N];
int max_val[MAX_N];
int dp[MAX_N];

void prime()
{
	for (int i = 0; i <= MAX_E; i++)
		e[i] = 0;
	for (int i = 2; i <= MAX_E; i++)
	{
		if (e[i] == 0)
		{
			e[i] = i;
			pr.push_back(i);
		}
		for (int j = 0; j < pr.size() && pr[j] <= e[i] && i * pr[j] <= MAX_E; j++)
			e[i * pr[j]] = pr[j];
	}
}

int main()
{
	//ifstream ifs("input.in");
	//ofstream ofs("output.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	prime();
	for (int i = 0; i < n; i++)
	{
		int curr = a[i];
		while (curr > 1)
		{
			fact[i].push_back(e[curr]);
			curr /= e[curr];
		}
	}
	for (int i = 2; i <= MAX_E; i++)
		max_val[i] = 0;
	for (int i = 0; i < n; i++)
	{
		dp[i] = 1;
		for (int j = 0; j < fact[i].size(); j++)
			dp[i] = max(dp[i], max_val[fact[i][j]] + 1);
		for (int j = 0; j < fact[i].size(); j++)
		max_val[fact[i][j]] = max(dp[i], max_val[fact[i][j]]);
	}
	int ans = 0;
	for (int i = 0; i < n; i++)
		ans = max(ans, dp[i]);
	cout << ans;
	return 0;
}