/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define set(a,b) fill(all(a),b)
#define let(x,a) __typeof(a) x(a)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define piw(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define all(a) (a).begin(),(a).end()
#define sorti(a) sort(all(a))
#define sortd(a) sort(a.rbegin(),a.rend()) 
#define len(s) s.length()
#define sz(s) s.size()
#define endl '\n'
#define nl printf("\n");
#define present1(c,x) ((c).find(x) != (c).end()) 
#define present2(c,x) (find(all(c),x) != (c).end())
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define PLL pair<LL,LL>
#define VI vector<int>
#define SI set<int>
#define VPII vector< PII >
#define SPII set< PII >
#define mod (int)1e9+7
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

string s;

class SegmentTree
{
public: 
	vector< int > st[26];
	vector< int > lazy[26];
	int left(int p)
	{
		return (p<<1)+1;
	}
	int right(int p)
	{
		return (p<<1)+2;
	}
	void build(int p, int l, int r)
	{
		if(l==r) st[s[l]-'a'][p]=1;
		else
		{
			build(left(p),l,(l+r)/2);
			build(right(p),(l+r)/2+1,r);
			rep1(i,26)
				st[i][p] = st[i][left(p)] + st[i][right(p)];
		}
	}
	SegmentTree(int n)
	{
		rep1(i,26)
		{
			st[i].assign(4*n,0);
			lazy[i].assign(4*n,-1);
		}
		build(0,0,n-1);
	}
	void lazyUpdate(int pos, int l, int r, int k)
	{
		if(lazy[k][pos]==-1) return;
		st[k][pos] = lazy[k][pos]*(r-l+1);
		if(l!=r)
		{
			lazy[k][left(pos)] = lazy[k][pos];
			lazy[k][right(pos)] = lazy[k][pos];
		}
		lazy[k][pos]=-1;
	}
	int query(int pos, int l, int r, int i, int j, int k)
	{
		lazyUpdate(pos,l,r,k);
		if(i>r || j<l || l>r) return 0;
		if(i<=l && r<=j)
		{
			return st[k][pos];
		}
		LL q1=query(left(pos),l,(l+r)/2,i,j,k);
		LL q2=query(right(pos),(l+r)/2+1,r,i,j,k);
		return (q1+q2);
	}
	void update(int pos, int l, int r, int i, int j, int val, int k)
	{
		lazyUpdate(pos,l,r,k);
		if(i>r || j<l || l>r) return;
		if(i<=l && r<=j)
		{
			st[k][pos] = val*(r-l+1);
			if(l!=r)
			{
				lazy[k][left(pos)] = val;
				lazy[k][right(pos)] = val;
			}
			return;
		}
		update(left(pos),l,(l+r)/2,i,j,val,k);
		update(right(pos),(l+r)/2+1,r,i,j,val,k);
		st[k][pos]=(st[k][left(pos)]+st[k][right(pos)]);
	}
};

int main()
{
	int n,q,l,r,type;
	cin>>n>>q;
	cin>>s;
	SegmentTree ST(n);
	while(q--)
	{
		cin>>l>>r>>type;
		l--; r--;
		int start,end,add;
		start=0; end=25; add=1;
		if(type==0)
		{
			swap(start,end);
			add*=-1;
		}
		VI cnt(26,0);
		for(int i=start;;i+=add)
		{
			cnt[i]=ST.query(0,0,n-1,l,r,i);
			if(i==end) break;
		}
		int something=0;
		for(int i=start;;i+=add)
		{
			if(cnt[i]==0) goto jump;
			ST.update(0,0,n-1,l,r,0,i);
			ST.update(0,0,n-1,l+something,l+something+cnt[i]-1,1,i);
			something+=cnt[i];
			jump: if(i==end) break;
		}
	}
	rep1(i,n)
	{
		rep1(j,26)
		{
			if(ST.query(0,0,n-1,i,i,j)==1)
			{
				s[i]='a'+j;
			}
		}
	}
	cout<<s<<endl;
	return 0;
}