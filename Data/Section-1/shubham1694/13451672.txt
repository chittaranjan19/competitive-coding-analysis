#include <bits/stdc++.h>

using namespace std;

#define ll long long

ll mulmod(ll a, ll b, ll mod)
{
    ll x = 0,y = a % mod;
    while (b > 0)
    {
        if (b % 2 == 1)
        {    
            x = (x + y) % mod;
        }
        y = (y * 2) % mod;
        b /= 2;
    }
    return x % mod;
}

ll modulo(ll base, ll exponent, ll mod)
{
    ll x = 1;
    ll y = base;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            x = (x * y) % mod;
        y = (y * y) % mod;
        exponent = exponent / 2;
    }
    return x % mod;
}

bool Miller(int p,int iteration)
{
    if(p<2)
        return false;
    if(p!=2 && p%2==0)
        return false;
    int s = p - 1, i;
    while(s%2 == 0)
        s/=2;
    for(i=0; i<iteration; i++){
        ll a = rand() % (p - 1) + 1, temp = s;
        ll mod = modulo(a, temp, p);
        while (temp != p - 1 && mod != 1 && mod != p - 1)
        {
            mod = mulmod(mod, mod, p);
            temp *= 2;
        }
        if (mod != p - 1 && temp % 2 == 0)
        {
            return false;
        }
    }
    return true;
}

int main()
{
    int n, i, a, b, st;
    scanf("%d", &n);
    if(n==3)
        printf("1\n3\n");
    else if(n==4)
        printf("2\n2 2\n");
    else if(n==5)
        printf("2\n2 3\n");
    else if(n==6)
        printf("2\n3 3\n");
    else if(n==7)
        printf("3\n2 2 3\n");
    else{
        if(n%2){
            n-=3;
            for(i=n-3; i>1; i-=2){
                //cout << i << " " << n-i << " " << Miller(i, 10) << " " << Miller(n-i, 10) << "\n";
                if(Miller(i, 5) && Miller(n-i, 5)){
                    a = i;
                    b = n-i;
                    break;
                }
            }
            printf("3\n");
            printf("3 %d %d\n", a, b);
        }
        else{
            n-=2;
            for(i=n-3; i>1; i-=2){
                //cout << i << " " << n-i << " " << Miller(i, 10) << " " << Miller(n-i, 10) << "\n";
                if(Miller(i, 5) && Miller(n-i, 5)){
                    a = i;
                    b = n-i;
                    break;
                }
            }
            printf("3\n");
            printf("2 %d %d\n", a, b);
        }
        
    }
    return 0;
}