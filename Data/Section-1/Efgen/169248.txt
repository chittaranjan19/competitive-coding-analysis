import java.io.*;
import java.util.*;
import java.math.*;

public class Task {
 	        Stack<Integer>[] id = new Stack[1100];
 	        TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
 	        String[] res;
 	        int n;
 	        int cnt;
 	        void go(String path) {
 	                if (cnt==0) return;
 	                if (map.lastKey()<path.length()) return;
 	                
 	                
 	                if (!id[path.length()+1].isEmpty()) {
 	                        res[id[path.length()+1].pop()] = path+"0";
 	                        int t = path.length()+1;
 	                        if (map.get(t)==1) map.remove(t); else map.put(t, map.get(t)-1);
 	                        cnt--;
 	                        go(path+"1");
 	                        return;
 	                }
 	                if (!id[path.length()].isEmpty() && map.lastKey()<=path.length()) {
 	                        res[id[path.length()].pop()] = path;
 	                        int t = path.length();
 	                        if (map.get(t)==1) map.remove(t); else map.put(t, map.get(t)-1);
 	                        cnt--;
 	                        return;
 	                }               
 	        
 	                
 	                go(path+"0");
 	                go(path+"1");
 	        }
 	    void solve() throws IOException {
 	        n = nextInt();
 	        for (int i=0; i<1100; i++) id[i] = new Stack<Integer>();
 	        for (int i=0; i<n; i++) {
 	                int x = nextInt();
 	                if (map.containsKey(x)) map.put(x, map.get(x)+1); else map.put(x, 1);
 	                id[x].push(i);
 	        }
 	                
 	        
 	        
 	    /*  n = 1000;
 	        for (int i=0; i<1100; i++) id[i] = new Stack<Integer>();
 	        for (int i=0; i<n; i++) {
 	                int x = 1;
 	                if (map.containsKey(x)) map.put(x, map.get(x)+1); else map.put(x, 1);
 	                id[x].push(i);
 	        }
 	    */
 	        
 	        
 	        
 	        res = new String[n];
 	        cnt = n;
 	        go("");
 	        
 	        boolean ok = true;
 	        for (int i=0; i<n; i++) ok &= res[i]!=null;
 	        if (ok) {
 	                out.println("YES");
 	                for (int i=0; i<n; i++) out.println(res[i]);
 	        }
 	        else
 	                out.println("NO");
 	        
 	        
 	    }
 	
    
    


    static final int inf = 1000000000;
    static final double epd = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
            return Long.parseLong(next());
    }

    public static void main(String[] args) {        
            new Task().run();
    
    }
}