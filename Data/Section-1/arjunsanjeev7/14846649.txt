/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

VI path, marked;
vector< VI > V;

void dfs(int u)
{
	marked[u]=1;
	path.pb(u);
	for(int i=0;i<V[u].size();i++)
	{
		int v=V[u][i];
		if(!marked[v])
		{
			dfs(v);
		}
	}
}

int main()
{
	FastIO();
	int n,m,k,a,b,r=-1;
	cin>>n>>m>>k;
	marked.assign(n+1,0);
	V.assign(n+1,VI());
	rep1(i,m)
	{
		cin>>a>>b;
		V[a].pb(b);
		V[b].pb(a);
	}
	dfs(1);
	int u=path.back();
	for(int i=path.size()-k-1;i>=0;i--)
	{
		trace1(path[i]);
		for(int j=0;j<V[u].size();j++)
		{
			int v=V[u][j];
			if(v==path[i])
			{
				trace2(u,v);
				r=path.size()-i;
				break;
			}
		}
		if(r>0) break;
	}
	cout<<r<<endl;
	for(int i=0;i<r;i++)
	{
		cout<<path.back()<<" ";
		path.pop_back();
	}
	cout<<endl;
	return 0;
}