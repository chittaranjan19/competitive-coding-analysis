import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import static java.math.BigInteger.*;

public class ProblemD {
    private static final long B = 1_000_000_007L;
    private static final BigInteger TWO = BigInteger.valueOf(2);
    BufferedReader rd;

    ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        rd.readLine();
        long[] a = longarr();
        Map<Long, Integer> b = new HashMap<>();
        for(long x: a) {
            Integer c = b.get(x);
            if(c == null) {
                b.put(x, 1);
            } else {
                b.put(x, c+1);
            }
        }
        boolean odd = false;
        for(Map.Entry<Long, Integer> e: b.entrySet()) {
            if (e.getValue() % 2 == 1) {
                odd = true;
                break;
            }
        }
        BigInteger dc = ONE;
        for(Map.Entry<Long, Integer> e: b.entrySet()) {
            dc = dc.multiply(BigInteger.valueOf(e.getValue()).add(ONE));
        }
        long sqrt = 1;
        if(!odd) {
            for (Map.Entry<Long, Integer> e : b.entrySet()) {
                sqrt *= pow(e.getKey(), BigInteger.valueOf(e.getValue()).divide(TWO));
                sqrt %= B;
            }
        }
        long res = 1;
        for(long x: a) {
            res *= x;
            res %= B;
        }
        res = pow(res, dc.divide(TWO));
        if(!odd) {
            res *= sqrt;
            res %= B;
        }
        out(res);
    }

    private long pow(long a, BigInteger b) {
        if(b.compareTo(ONE) > 0) {
            long x = pow(a,b.divide(TWO));
            x = x*x;
            x %= B;
            if(b.mod(TWO).equals(ONE)) {
                x*=a;
                x%=B;
            }
            return x;
        } else if(b.equals(ONE)) {
            return a%B;
        } else {
            return 1;
        }
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
