#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

struct Op {
	int r;
	int a;
	Op(int r, int a) {
		this->r = r;
		this->a = a;
	}
};

int main() {
    // freopen("631C.in", "r", stdin);

    int n, m;
    scanf("%d %d", &n, &m);
    vi vals(n);
    iterate(val, vals)
    	scanf("%d", val);

    deque<Op> d;
    while (m--) {
    	int r, a;
    	scanf("%d %d", &r, &a);
    	while ((!d.empty()) and (d.back().a <= a)) {
    		d.pob();
    	}
    	d.pub(Op(r, a));
    }

    vi s_arr(vals.begin(), vals.begin()+d.front().a);
    sort(all(s_arr));

    int i = 0, j = s_arr.size()-1;
    int curr_r = d.front().r;
    int pos = j;
    while (pos >= 0) {
    	if ((!d.empty()) and (pos == d.front().a-1)) {
    		curr_r = d.front().r;
    		d.pof();
    	}
    	if (curr_r == 1) {
    		vals[pos--] = s_arr[j--];
    	} else {
    		vals[pos--] = s_arr[i++];
    	}
    }
    loop(idx, vals.size()) {
    	if (idx)
    		printf(" ");
    	printf("%d", vals[idx]);
    }
    printf("\n");

    return 0;
}