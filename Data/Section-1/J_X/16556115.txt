#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <math.h>
#include <stdlib.h>
using namespace std;
struct Point
{
	long long x,y;
}P[200005];
int a[200005];
long long sum[200005];
long long res;
int m;
int Cross(Point p1,Point p0,Point p2)
{
	return (p1.y-p2.y)*(p1.x-p0.x)-(p0.y-p1.y)*(p2.x-p1.x);
}
bool check(int x,int k)
{
	return P[x+1].y - P[x].y <= k * (P[x+1].x - P[x].x);
}
int main()
{
	int n;
	scanf("%d",&n);
	long long ans = 0;
	for(int i = 1 ; i <= n ; i++)
	{
		scanf("%d",&a[i]);
		sum[i] = sum[i-1] + a[i];
		ans += (long long)a[i]*i;
	}
	for(int i = 2 ; i <= n ; i++)
	{
		P[m].x = i - 1 , P[m++].y = -sum[i-2];
		while(m>2&&Cross(P[m-2],P[m-3],P[m-1])<=0)P[m-2]=P[m-1],m--;
		int l = -1 , r = m-1;
		while(r-l>1)
		{
			int mid = (l + r ) / 2;
		    if(P[mid].x*a[i]+P[mid].y<=P[mid+1].x*a[i]+P[mid+1].y) l = mid;
			else r = mid ;
		}
		res = max(res,(long long)(a[i])*P[r].x+P[r].y+sum[i-1]-(long long)a[i]*i);
	}
	m = 0;
	for(int i = n - 1 ; i >= 1 ; --i)
	{
		P[m].x = -(i + 1) , P[m++].y = -sum[i+1];
		while(m>2&&Cross(P[m-2],P[m-3],P[m-1])<=0)P[m-2]=P[m-1],m--;
		int l = -1 , r = m-1;
		while(r-l>1)
		{
			int mid = (l + r ) / 2;
			if(P[mid].x*(-a[i])+P[mid].y<=P[mid+1].x*(-a[i])+P[mid+1].y) l = mid;
			else r = mid ;
		}
		res = max(res,(long long)(-a[i])*P[r].x+P[r].y+sum[i]-(long long)a[i]*i);
	}
	printf("%I64d\n",res+ans);
    return 0;
}
