#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>
#include <unordered_map>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, l = 20;

int main()
{
	string a;
	int sqn[111];
	memset(sqn, 0, sizeof(sqn));
	char tmp = '1';
	sqn[0] = 1;
	int cur = 1;
	int mns = 0, pls = 1;
	while (tmp != '='){
		cin >> tmp;
		if (tmp == '?')
			continue;
		if (tmp == '+')
			sqn[cur++] = 1, pls++;
		if (tmp == '-')
			sqn[cur++] = -1, mns++;
	}
	int n;
	cin >> n;
	int sum = n;
	sum += mns;
	bool ok = 0;
	while (sum != 0){
		if (sum >= pls){
			int add = min(sum - pls + 1, n);
			for (int i = 0; i < 111; i++){
				sqn[i] = add;
				sum -= add;
				break;
			}
			pls--;
		}
		if (sum == (pls))
			ok = 1, sum = 0, pls = 0;
		if (sum < pls){
			ok = 0;
			break;
		}
	}
	if (!ok){
		cout << "Impossible" << endl;
		return 0;
	}
	cout << "Possible" << endl;
	int i = 1;
	cout << sqn[0];
	while (sqn[i] != 0){
		if (sqn[i] > 0)
			cout << " + " << sqn[i++];
		else
			cout << " - " << -sqn[i++];
	}
	cout << " = " << n;
	return 0;
}