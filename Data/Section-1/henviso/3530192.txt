#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <set>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define INRANGE0(x, n) ((x) > -1 && (x) < n)
#define INRANGE(x, a, b) ((x) >= a && (x) <= b)
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INCMOD(a,b,c) (((a)+b)%c)
#define DECMOD(a,b,c) (((a)+c-b)%c)
#define ROUNDINT(a) (int)((double)(a) + 0.5)
#define INF 2000000000
#define EPS 1e-9
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL  //J PRIMEIROS
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//scanf(" %d ", &t);

int e[10100];
int a[22][10100];
int f[10100];
int ans[22][10100];
int n, k;

int ind(int x){
	return n-x;
}

int main(){
	scanf(" %d %d ", &n, &k);
	int pot = 0;
	REP(i, n){
		e[n-1-i] = i;
		if(i == 1) pot++;
		else if(pot<<1 == i) pot = pot<<1;
		f[n-1-i] = pot;
		
		//cout << "f[" << n-1-i <<  "] = " << f[n-1-i] << " " << endl;
		//cout << "e[" << n-1-i <<  "] = " << e[n-1-i] << " " << endl;
	}

	CLEAR0(a);
	REP(i, n-1){
		a[0][i] = 1;
		//cout << a[0][i] << " ";
	}
	a[0][n-1] = 0;
	//cout << a[0][n-1] << endl;
	REPP(i, 1, k+1){
		REP(j, n){
			//cout << " CMP " << a[i-1][j] << " E " << e[j] << endl;
			if(a[i-1][j] == e[j]){
				ans[i][j] = n;
				a[i][j] = a[i-1][j];
			}
			else{
				if(f[j] != a[i-1][j]){
					ans[i][j] = j+1;
					a[i][j] = a[i-1][j] << 1;
				}
				else{
					//cout << " ACHEI PRIMEIRO BIT SOBROU " << e[j]-f[j] << endl; 
					ans[i][j] = ind(e[j]-f[j]);
					a[i][j] = a[i-1][j] + a[i-1][ans[i][j]-1];
				}
			}
			//cout << a[i][j] << " ";
		}
		//cout << endl;	
	}
	//cout << endl << endl;
	REP(i, k){
		printf("%d", ans[i+1][0]);
		REPP(j, 1, n) printf(" %d", ans[i+1][j]);
		printf("\n");
	} 
}
