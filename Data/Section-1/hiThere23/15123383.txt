#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define mn 200010
#define maxC 100000000000000007ll
#define F first
#define S second
#define mp make_pair

using namespace std;
int n;
long long k[4], t[mn];
set< pair<long long, int> > Set;
set< pair<long long, int> > :: iterator it;

void setup()
{
    cin >> n >> k[1] >> k[2] >> k[3];
    FOR(i, 1, n)
    {
        cin >> t[i];
        Set.insert(mp(- t[i], i));
    }
    sort(k + 1, k + 4);
    Set.insert(mp(-maxC, n + 1)); t[n + 1] = maxC;
    Set.insert(mp(-maxC, n + 2)); t[n + 2] = maxC;
    Set.insert(mp(-maxC, n + 3)); t[n + 3] = maxC;
    Set.insert(mp(maxC, n + 4)); t[n + 4] = -maxC;
    Set.insert(mp(maxC, n + 5)); t[n + 5] = -maxC;
    Set.insert(mp(maxC, n + 6)); t[n + 6] = -maxC;
}

bool checkThree()
{
    int choose[4];
    FORD(i, 3, 1)
    {
        it = Set.lower_bound(mp(- k[i], 0));
        choose[i] = (*it).S;
        Set.erase(it);
    }
    if (choose[1] > n || choose[2] > n || choose[3] > n)
    {
        FOR(i, 1, 3)
            Set.insert(mp(- t[choose[i]], choose[i]));
        return false;
    }
    return true;
}

bool checkTwo(int one)
{
    int a, b;
    it = Set.lower_bound(mp(- k[1] - k[2] - k[3] + k[one], 0));
    b = (*it).S;
    Set.erase(it);
    it = Set.lower_bound(mp(- k[one], 0));
    a = (*it).S;
    Set.erase(it);
    if (a > n || b > n)
    {
        Set.insert(mp(- t[a], a));
        Set.insert(mp(- t[b], b));
        return false;
    }
    return true;
}

bool checkOne()
{
    it = Set.lower_bound(mp(-k[1] - k[2] - k[3], 0));
    int a = (*it).S;
    Set.erase(it);
    if (a > n)
    {
        Set.insert(mp(-t[a], a));
        return false;
    }
    return true;
}

void xuly()
{
    int ans = 0, remain = n;
    while(remain)
    {
        ans ++;
        if (checkThree())
        {
            remain -= 3;
            continue;
        }
        if (checkTwo(1))
        {
            remain -= 2;
            continue;
        }
        if (checkTwo(2))
        {
            remain -= 2;
            continue;
        }
        if (checkTwo(3))
        {
            remain -= 2;
            continue;
        }
        if (checkOne())
        {
            remain --;
            continue;
        }
        cout << -1;
        return;
    }
    cout << ans;
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
