import java.io.*;
import java.util.*;
import java.math.*;

public class Task {

    void solve() throws IOException {
    	int n = nextInt();
    	int max = nextInt();
    	int reg = nextInt();
    	int[] pow = new int[n];
    	int[] dmg = new int[n];
    	for (int i=0; i<n; i++) {
    		pow[i] = nextInt();
    		dmg[i] = nextInt();
    	}
    	boolean[] f = new boolean[n];
    	Vector<Integer> rest = new Vector<Integer>();
    	Vector<Integer> ress = new Vector<Integer>();
    	int z = max;
    	int time = 0;
    	while (z>0) {
    		int bi = -1;
    		for (int i=0; i<n; i++)
    			if (!f[i] && pow[i]*max>=z*100) {
    				if (bi<0 || dmg[i]>dmg[bi]) {
    					bi = i;
    				}
    			}
    		
    		if (bi<0) {
    			if (reg>=0) {
    				out.println("NO");
    				return;
    			}
    		}    		
    		else {
    			reg -= dmg[bi];
    			f[bi] = true;
    			rest.add(time);
    			ress.add(bi+1);
    		}
    		z += reg;
    		if (z>max) z = max;
    		time++;
    	}
    	out.println("YES");
    	out.println(time+" "+ress.size());
    	for (int i=0; i<ress.size(); i++) out.println(rest.get(i)+" "+ress.get(i));
    	
    	
    }
    
    


    static final int inf = 1000000000;
    static final double epd = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
            return Long.parseLong(next());
    }

    public static void main(String[] args) {        
            new Task().run();
    
    }
}