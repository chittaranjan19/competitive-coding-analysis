#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _gcd(int a, int b, int & x, int & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	int _x1, _y1;
	int d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

int _cnt = 0;

vector<int> factor(int n){
	vector<int> f;
	for (int i = 2; i*i <= n; i++){
		if (n % i != 0) continue;
		while (n % i == 0){
			n /= i;
			f.push_back(i);
		}
	}
	if (n != 1)
		f.push_back(n);
	sort(f.begin(), f.end());
	return f;
}

vector<int> _factor(int n){
	vector<int> f;
	for (int i = 2; i*i <= n; i++){
		if (n % i != 0) continue;
		f.push_back(i);
		n /= i;
		while (n % i == 0){
			n /= i;
			f[f.size() - 1] *= i;
		}
	}
	if (n != 1)
		f.push_back(n);
	sort(f.begin(), f.end());
	return f;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 1e6 + 10, lg = 20;
ll mod = 1e9 + 7;
int n;
int a[N];
int b[N];
ll pw3[N];
ll cnt[N];
ll get_cnt(ll mx){
	ll cnt = 0;
	for (ll i = 2; i * 8 <= mx; i++){
		ll l = 0, r = 1e6;
		while (l < r){
			ll m = l + r;
			m >> 1;
			if (pw3[m] * i > mx)
				r = m - 1;
			else l = m;
		}
		if (pw3[max(l, r)] <= mx)
			cnt += max(l, r);
		else cnt += min(l, r);
	}
	return cnt;
}

int main()
{
	for (ll i = 1; i <= N; i++)
		pw3[i] = i*i*i;

	ll n;
	cin >> n;
	ll cur_cnt = 0;
	for (ll i = 1; i <= N; i++){
		cur_cnt += cnt[i];
		if (cur_cnt == n){
			cout << i;
			return 0;
		}
		if (cur_cnt > n){
			cout << -1;
			return 0;
		}
		for (ll j = 2; j * j*j*j*i <= N; j++){
			cnt[i*j*j*j] += 1;
		}
	}
	cout << -2;
	return 0;
}

