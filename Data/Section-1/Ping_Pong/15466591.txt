#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int a[MAX_N], b[MAX_N];
int tree[MAX_N * 4];
int cnt_ver = 1, curr = 0;

void print_tree()
{
	int j = 0, c = (cnt_ver * 2 - 1) / 2, c1 = 1;
	for (int i = 0; i < curr + 1; i++)
	{
		for (int k = 0; k < c; k++)
			cout << " ";
		for (int i = 0; i < c1; i++)
		{
			if (tree[j] >= 0)
				cout << " ";
			cout << (tree[j] >= 0 ? tree[j] + 1 : -1);
			j++;
			for (int r = 0; r < c * 2 + 1; r++)
				cout << " ";
		}
		cout << endl << endl;
		c1 *= 2;
		c /= 2;
	}
}

void make_tree(int n)
{
	while (cnt_ver < n)
	{
		cnt_ver <<= 1;
		curr++;
	}
	for (int i = 0; i < cnt_ver * 2 - 1; i++)
		tree[i] = -1;
}

void update(int x, int lx, int rx, int l, int pos, int len)
{
	if (lx > l + len - 1 || rx < l)
		return;
	else if (lx >= l && rx <= l + len - 1)
		tree[x] = pos + lx - l;
	else
	{
		if (tree[x] != -1)
		{
			tree[x * 2 + 1] = tree[x];
			tree[x * 2 + 2] = tree[x] + (rx - lx) / 2;
			tree[x] = -1;
		}
		update(x * 2 + 1, lx, (lx + rx) / 2, l, pos, len);
		update(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, pos, len);
	}
}

int ans(int x, int lx, int rx, int l, int r)
{
	if (rx < l || lx > r)
		return 0;
	else if (lx >= l && rx <= r)
	{
		if (tree[x] != -1)
			return a[tree[x]];
		else
			return b[x - (cnt_ver - 1)];
	}
	else
	{
		if (tree[x] != -1)
		{
			tree[x * 2 + 1] = tree[x];
			tree[x * 2 + 2] = tree[x] + (rx - lx + 1) / 2;
			tree[x] = -1;
		}
		return ans(x * 2 + 1, lx, (lx + rx) / 2, l, r) + ans(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r);
	}
}

int main()
{
	//ifstream ifs("input.in");
	//ofstream ofs("output.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, m, t, x, y, k;
	scanf_s("%d %d", &n, &m);
	for (int i = 0; i < n; i++)
		scanf_s("%d", &a[i]);
	for (int i = 0; i < n; i++)
		scanf_s("%d", &b[i]);
	make_tree(n);
	for (int i = 0; i < m; i++)
	{
		scanf_s("%d", &t);
		if (t == 1)
		{
			scanf_s("%d %d %d", &x, &y, &k);
			update(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + y - 1, x - 1, k);
		}
		else
		{
			scanf_s("%d", &x);
			printf("%d\n", ans(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + x - 1, cnt_ver - 1 + x - 1));
		}
		//print_tree();
	}
	return 0;
}