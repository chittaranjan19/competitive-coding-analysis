//Diplav
#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(a) (int)(a.size())
#define all(c) (c).begin(),(c).end()
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define dout(n) printf("%d\n",n)
#define REP(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
//Works for forward as well as backward iteration
#define TRvi(c,it) for(vi::iterator it = (c).begin();it! = (c).end();it++)
#define MOD 1000000007
#define PI 3.14159265359
#define endl '\n'

#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

typedef long long int ll;
typedef vector<int> vi;
typedef pair<int,int > ii;
typedef vector<ii> vii;
typedef pair<int,ii > ip;
typedef pair< ii,ii > pp;
typedef map<string, int> msi;
typedef vector< vi > vvi;
typedef long long ll;
typedef pair<long long,long long> pll;
typedef vector<long long> vll;
typedef vector<pll> vpll;
typedef vector<vll> vvll;
typedef pair<pll,pll>  ppll;
typedef priority_queue < ll , vector < ll > , greater < ll > > minheap;
typedef priority_queue < ll , vector < ll > , less < ll > > maxheap;
struct sort_pred {
    bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) 
    { 
        return left.second < right.second; 
    }
};
//sort(v,v+n,sort_pred())
void optimise()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
long long int gcd(long long int m, long long int n)
{
    if(n == 0)
        return m;
    return gcd(n, m % n);
}
ll powmod(ll a,ll b)
{
    if(b==0)return 1;
    ll x=powmod(a,b/2);
    ll y=(x*x)%MOD;
    if(b%2)
        return (a*y)%MOD;
    return y%MOD;
}
void max_no(int n,int m1,vi* a,int d)
{
    if(n==0 || m1==0)
        return;
    else if(m1>=10)
    {
        (*a)[d-n]=9;
        max_no(n-1,m1-9,a,d);
    }
    else
    {
        (*a)[d-n]=m1;
        max_no(n-1,0,a,d);
    }
}
int bin_srch(vi* s2,int l,int r,int x)
{

    while (l <= r)
  {
    int m = l + (r-l)/2;
   // trace4(m,l,r,x);
   // trace1((*s2)[m]);
    // Check if x is present at mid
    if (((*s2)[m] > x)&&((*s2)[m-1] <= x)) 
        return m;  
    // If x greater, ignore left half  
    if ((*s2)[m] <= x) 
        l = m + 1; 
 
    // If x is smaller, ignore right half 
    else
         r = m - 1; 
  }
  return -1;
}
//Template ends here
int main()
{
    int n;
    si(n);
    std::vector<int> a(n);
    for(int i=0;i<n;i++)
    {
        si(a[i]);
    }
    std::vector<ll> sw(n);
    sw[0]=a[0];
    for(int i=1;i<n;i++)
    {
        sw[i]=sw[i-1]+a[i];
    }
  /*  sort(sw.begin(),sw.begin()+n);
    for(int i=0;i<n;i++)
    {
        trace2(i,sw[i]);
    } */
    std::vector<int> s1,s2;
    int bar=sw[n-1]/3;//trace1(bar);
    for(int i=0;i<n-1;i++)
    {
        if(sw[i]==bar)
        {
            s1.push_back(i);
        }
        if(sw[i]==2*bar)
        {
            s2.push_back(i);
        }
    }
   /* for(int i=0;i<s1.size();i++)
    {
        trace2(i,s1[i]);
    } */
/*    for(int i=0;i<s2.size();i++)
    {
        trace2(i,s2[i]);
    } */
    int ans=0,foo=0;
  //  trace2(s1.size(),s2.size());
    for(int i=0;i<s1.size();i++)
    {
        foo=bin_srch(&s2,0,s2.size()-1,s1[i]);//trace1(foo);
        if(foo>=0)
        {
            ans+=s2.size()-foo;
        }
    }
    cout << ans << endl;
    return 0;
}