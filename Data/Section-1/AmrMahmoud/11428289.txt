#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<int> graph[1000005];
int n;

int main()
{
  ios_base::sync_with_stdio(0);
  int k;
  cin >> k;
  if(k % 2 == 0)
  {
    cout << "NO";
    return 0;
  }
  if(k == 1)
  {
    cout << "YES\n2 1\n1 2\n";
    return 0;
  }
  cout << "YES\n";
  vector<int> nodes;
  nodes.push_back(1);
  n = 1;
  while(1)
  {
    int x = nodes.size();
    if(x * 1LL * (k - 1) % 2 == 0 && x * 1LL * (k - 1) / 2 <= x * 1LL * (x - 1) / 2)
    {
      bool test = true;
      for(int i=0;i<nodes.size() && test;i++)
      {
        x = nodes[i];
        for(int j=1;graph[x].size() < k;j++)
        {
          graph[x].pb(nodes[i + j]);
          graph[nodes[i + j]].pb(x);
        }
        test = (graph[x].size() == k);
      }
      assert(test);
      break;
    }
    else
    {
      x = nodes.back();
      nodes.pop_back();
      for(int i=0;i<k-1;i++)
      {
        graph[x].pb(x + i + 1);
        graph[x + i + 1].pb(x);
        nodes.push_back(x + i + 1);
      }
      n+=k-1;
    }
  }
  vector<pair<int, int> > e;
  for(int i=1;i<=n;i++)
  {
    for(int j=0;j<graph[i].size();j++)
    {
      int x = graph[i][j];
      if(i < x)
      {
        e.push_back(mp(i, x));
        e.push_back(mp(i + n, x + n));
      }
    }
  }
  e.push_back(mp(1, n + 1));
  cout << n * 2 << " " << e.size() << "\n";
  for(int i=0;i<e.size();i++)
    cout << e[i].f << " " << e[i].s << "\n";
  return 0;
}
