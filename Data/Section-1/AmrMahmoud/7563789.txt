#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

struct edge
{
    int from,to,cost;

    edge(int x,int y,int z)
    {
        from = x,to = y,cost = z;
    }

    bool operator < (const edge e) const
    {
        return cost < e.cost;
    }
};

int n,m,counter;
vector<edge> edges;
vector<vector<edge> > part;
int DP[300005],visited[300005];

int main()
{
    cin >> n >> m;
    int x,y,z;
    for(int i=0;i<m;i++)
    {
        scanf("%d %d %d",&x,&y,&z);
        edges.push_back(edge(x,y,z));
    }
    sort(edges.begin(),edges.end());
    vector<edge> temp;
    temp.push_back(edges[0]);
    for(int i=1;i<m;i++)
    {
        if(edges[i].cost != edges[i-1].cost)
        {
            part.push_back(temp);
            temp.clear();
        }
        temp.push_back(edges[i]);
    }
    part.push_back(temp);
    counter = part.size();
    for(int p=0;p<part.size();p++)
    {
        setdp(visited);
        for(int i=0;i<part[p].size();i++)
        {
            if(visited[part[p][i].to] == -1)
                visited[part[p][i].to] = DP[part[p][i].to];
            if(visited[part[p][i].from] == -1)
                DP[part[p][i].to] = max(DP[part[p][i].to], DP[part[p][i].from] + 1);
            else DP[part[p][i].to] = max(DP[part[p][i].to], visited[part[p][i].from] + 1);
        }
    }
    int res = 1;
    for(int i=1;i<=n;i++)
        res = max(res, DP[i]);
    cout << res;
    return 0;
}