#include <bits/stdc++.h>

using namespace std;

#define ll long long

const int maxn = 301;

int dp[maxn][513][3], len[maxn], cost[maxn];
int factors[maxn], n, m;
vector<int> pf;

int solve(int cur, int mask, int emp)
{
    if(cur>=n){
        //cout << "b " << mask << "\n";
        if(mask==(1<<m)-1 && emp>1)
            return 0;
        else
            return 1000000000;
    }
    if(dp[cur][mask][emp]!=-1)
        return dp[cur][mask][emp];
    int ret = solve(cur+1, mask, emp);
    int nemp = emp;
    if(nemp!=2)
        nemp++;
    ret = min(ret, cost[cur]+solve(cur+1, mask|factors[cur], nemp));
    return dp[cur][mask][emp] = ret;
}

int main()
{
    //freopen("i.txt", "r", stdin);
    int i, j, k, temp, ans;
    scanf("%d", &n);
    for(i=0; i<n; i++)
        scanf("%d", &len[i]);
    for(i=0; i<n; i++)
        scanf("%d", &cost[i]);
    ans = 1000000000;
    for(i=0; i<n; i++){
        temp = len[i];
        pf.clear();
        if(!(temp%2)){
            pf.push_back(2);
            while(!(temp%2))
                temp/=2;
        }
        for(j=3; j<=sqrt(temp); j+=2){
            if(!(temp%j)){
                pf.push_back(j);
                while(!(temp%j))
                    temp/=j;
            }
        }
        if(temp>1)
            pf.push_back(temp);
        m = pf.size();
        /*cout << "Prine f's \n";
        for(j=0; j<m; j++)
            cout << pf[j] << " " ;
        cout << "\n";*/
        for(j=0; j<n; j++){
            factors[j] = 0;
            for(k=0; k<m; k++){
                if((len[j]%pf[k]))
                    factors[j]|=(1<<k);
            }
        }
        /*for(j=0; j<n; j++){
            for(k=0; k<=(1<<m); k++)
                dp[j][k][0] = dp[j][k][1] = dp[j][k][2] = -1;
        }*/
        memset(dp, -1, sizeof(dp));
        /*for(j=0; j<n; j++)
            cout << factors[j] << " ";
        cout << "\n";
        cout << "c " << solve(0, 0, 0) << "\n";*/
        ans = min(ans, cost[i]+solve(0, 0, 1));
        //cout << ans << "\n";
    }
    if(ans==1000000000)
        printf("-1\n");
    else
        printf("%d\n", ans);
    return 0;
}