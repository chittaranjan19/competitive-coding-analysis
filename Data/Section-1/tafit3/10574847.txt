import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class ProblemBDiv2 {
    BufferedReader rd;

    private ProblemBDiv2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        rd.readLine();
        String s = rd.readLine();
        String t = rd.readLine();
        int[][] p = new int[26][26];
        int n = s.length();
        int h = 0;
        for(int i=0;i<n;i++) {
            char sc = s.charAt(i);
            char tc = t.charAt(i);
            if(sc != tc && p[sc-'a'][tc-'a'] == 0) {
                h++;
                p[sc-'a'][tc-'a'] = i+1;
            }
        }
        for(int i=0;i<26;i++) {
            for(int j=0;j<26;j++) {
                if(i != j) {
                    if(p[i][j] != 0 && p[j][i] != 0) {
                        out(h-2);
                        out(p[i][j]+" "+p[j][i]);
                        return;
                    }
                }
            }
        }

        Set<Integer> cand = new HashSet<>();
        for(int i=0;i<26;i++) {
            for(int j=0;j<26;j++) {
                if(i != j) {
                    if(p[i][j] != 0) {
                        cand.add(p[i][j]);
                    }
                }
            }
        }
        if(cand.size() > 1) {
            Iterator<Integer> c = cand.iterator();
            int a = c.next();
            int b = c.next();
            out(h-1);
            out(a + " " + b);
            return;
        }
        out(h);
        out("-1 -1");
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }



    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }



    private long plong() throws IOException {
        return plong(rd.readLine());
    }

    private long plong(String s) {
        return Long.parseLong(s);
    }



    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        int n = s.length();
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemBDiv2();
    }
}
