import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemB {
    BufferedReader rd;
    int n,m;

    ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        n = intarr()[0];
        int[][] c = new int[n][];
        for(int i=0;i<n;i++) {
            c[i] = intarr();
        }
        m = c[0].length;
        List<List<Integer>> ds = new ArrayList<>();
        boolean res = true;
        for(int i=0;i<n;i++) {
            List<Integer> d = new ArrayList<>();
            for(int j=0;j<m;j++) {
                if(c[i][j] != j+1) {
                    d.add(j);
                }
            }
            if(d.size() > 4) {
                res = false;
            } else if(d.size() == 3 || d.size() == 4) {
                ds.add(d);
            }
        }
        if(res) {
            if(ds.size() > 0) {
                Set<Pair> all = new HashSet<>();
                List<Set<Pair>> ps = new ArrayList<>();
                for(List<Integer> d: ds) {
                    int len = d.size();
                    Set<Pair> local = new HashSet<>();
                    for(int i=0;i<len;i++) {
                        for(int j=i+1;j<len;j++) {
                            Pair p = new Pair(d.get(i), d.get(j));
                            all.add(p);
                            local.add(p);
                        }
                    }
                    ps.add(local);
                }
                res = false;
                for(Pair p: all) {
                    int[][] c2 = colSwitch(c,p.v[0],p.v[1]);
                    if(singleSwitches(c2)) {
                        res = true;
                        break;
                    }
                }
            }
        }
        out(res?"YES":"NO");
    }

    class Pair {
        final int[] v;

        Pair(int a, int b) {
            v = new int[] { a, b };
        }

        Pair(int[] x) {
            v = x;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o instanceof Pair) {
                return Arrays.equals(v, ((Pair) o).v);
            }
            return false;
        }

        public int hashCode() {
            return v != null ? Arrays.hashCode(v) : 0;
        }

        public String toString() {
            return Arrays.toString(v);
        }
    }

    private int[][] colSwitch(int[][] c, int a, int b) {
        int[][] d = new int[n][];
        for(int i=0;i<n;i++) {
            d[i] = Arrays.copyOf(c[i], m);
        }
        for(int i=0;i<n;i++) {
            int tmp = d[i][a];
            d[i][a] = d[i][b];
            d[i][b] = tmp;
        }
        return d;
    }

    private boolean singleSwitches(int[][] c) {
        for(int i=0;i<n;i++) {
            int count = 0;
            for(int j=0;j<m;j++) {
                if(c[i][j] != j+1) {
                    count++;
                }
            }
            if(count > 2) {
                return false;
            }
        }
        return true;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
