#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(int i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

// CRIBA

//const tint maxN = 1000500;
//int p[maxN + 1] = {1, 1};
//
//map<tint,tint> factorizar (tint n)
//{
//	map<tint,tint> f;
//	while (n > 1) 
//	{ 
//		f[p[n]]++;
//		n /= p[n]; 
//	}
//	return f;
//}
// ESTO VA EN EL MAIN
//	for (int i = 1; i <= maxN; ++i)
//		if (p[i] == 1)
//			for (int j = i; j <= maxN; j += i)
//				p[j] = i;

struct Gadget
{
	int power, id;
	Gadget (int pp , int ii)
	{
		power = pp;
		id = ii;
	}
};


bool operator < (Gadget c1, Gadget c2)
{
	return make_pair(c1.power, c1.id) < make_pair(c2.power, c2.id);
}


int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	int n,m;
	while (cin >> n >> m)
	{
		// Leemos la entrada
		vector<Gadget> c (n,Gadget(-1,-1));
		forn(i,n)
		{
			int pp;
			cin >> pp;
			c[i] = Gadget(pp,i);
		}
		vector<Gadget> s (m,Gadget(-1,-1));
		forn(j,m)
		{
			int pp;
			cin >> pp;
			s[j] = Gadget(pp,j);
		}
			
		vector<int> a (m);
		vector<int> b (n,-1);
		
		sort(c.begin(),c.end());
		sort(s.begin(),s.end());
		
		int i = 0;
		int j = 0;
		int r = 0;
		int u = 0;
		vector<Gadget> newS;
		unordered_map<int, unordered_set<int> > mapita;
		while (i < n && j < m)
		{
			if (c[i].power == s[j].power)
			{
				b[c[i].id] = s[j].id;
				i++;
				j++;
				r++;
			}
			else if (c[i].power < s[j].power)
			{
				mapita[c[i].power].insert(c[i].id);
				i++;
				
			}
			else
			{
				newS.push_back(s[j]);
				j++;
			}
		}
		forsn(jj,j,m)
			newS.push_back(s[jj]);
		
		int w = int(newS.size());
		forn(q,w)
		{
			int adapters = 0;
			
			while(newS[q].power > 0)
			{
				
				int tamano = int(mapita[newS[q].power].size());
				
				if (tamano > 0)
				{
					int computadora = *mapita[newS[q].power].begin();
					mapita[newS[q].power].erase(computadora);
					r++;
					
					a[newS[q].id] = adapters;
					b[computadora] = newS[q].id;
					newS[q].power = 0;
				}
				else
				{
					newS[q].power = (newS[q].power+1)/2;
					adapters++;
					u++;
				}
			}
		}
		cout << r << " " << u << "\n";
		forn(jj,m)
			cout << a[jj] << " ";
		cout << "\n";
		forn(ii,n)
			cout << b[ii]+1 << " ";
		cout << "\n";
		
		
		
		
		
	}
	return 0;
}



