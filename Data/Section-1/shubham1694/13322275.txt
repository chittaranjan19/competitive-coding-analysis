#include <bits/stdc++.h>

using namespace std;

#define ll long long

ll dp[3100][3100];
int n, k, p[3100], m[3100];

ll solve(int strt, int nxt)
{
    //cout << strt << " " << nxt << "\n";
    if(dp[strt][nxt]!=-1)
        return 0;
    if(strt>n)
        return dp[strt][nxt] = 1;
    if(nxt>n)
        return dp[strt][nxt] = 1ll;
    //if(dp[strt][nxt]!=-1)
      //  return dp[strt][nxt];
    int rd, i;
    rd = strt-1 + (nxt-strt-1);
    if(rd==k)
        return 1ll;
    ll ret = 1ll;
    if(p[strt]==0){
        if(p[nxt]==100)
            ret+=solve(nxt, nxt+1);
        else if(m[nxt]==0)
            ;
        else
            ret+=solve(nxt, nxt+1);
    }   
    else if(p[strt]<100){
        if(p[nxt]==100)
            ret+=solve(nxt, nxt+1)+solve(nxt+1, nxt+2);
        else if(m[nxt]==0)
            ret+=solve(strt, nxt+1);
        else
            ret+=solve(nxt, nxt+1)+solve(nxt+1, nxt+2)+solve(strt, nxt+1);
    } 
    else{
        if(p[nxt]==100)
            ret+=solve(nxt+1, nxt+2);
        else if(m[nxt]==0)
            ret+=solve(strt, nxt+1);
        else
            ret+=solve(strt, nxt+1)+solve(nxt+1, nxt+2);
    }
    return dp[strt][nxt] = ret;
}

int main()
{
    int i, j;
    scanf("%d%d", &n, &k);
    for(i=1; i<=n; i++)
        scanf("%d", &p[i]);
    m[n+1] = 0;
    for(i=n; i>=1; i--)
        m[i] = max(m[i+1], p[i]);
    memset(dp, -1, sizeof(dp));
    ll ans = 0;
    ans = solve(1, 2);
    /*for(i=1; i<=n; i++){
        for(j=i+1; j<=n+1; j++){
            if(dp[i][j]!=-1)
                ans+=dp[i][j];
        }
    }*/
    printf("%I64d\n", ans);
    return 0;
}