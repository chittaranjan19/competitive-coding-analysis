#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _gcd(int a, int b, int & x, int & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	int _x1, _y1;
	int d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

bool ok = 1;

vector<int> factor(int n){
	vector<int> f;
	for (int i = 2; i*i <= n; i++){
		if (n % i != 0) continue;
		f.push_back(i);
		int cnt = 0;
		while (n % i == 0){
			n /= i;
			cnt++;
		}
		ok &= cnt < 2;
	}
	if (n != 1)
		f.push_back(n);
	sort(f.begin(), f.end());
	return f;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 20;
ll mod = 1e9 + 7;
ll n, m, k;
int a[N*4];
int need[N*4];


int main()
{
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	vector<int> f = factor(k);
	memset(need, 0, sizeof(need));
	int cnt = f.size();
	for (int i = 0; i < f.size(); i++){
		need[f[i]] = 1;
	}
	for (int i = 0; i < n; i++){
		if (need[a[i]])
			cnt--;
		need[a[i]] = 0;
		if (a[i] == k){
			cout << "Yes";
			return 0;
		}
	}
	if (ok && cnt == 0){
		cout << "Yes";
	}
	else cout << "No";
	return 0;
}