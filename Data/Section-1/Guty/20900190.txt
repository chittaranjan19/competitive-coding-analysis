#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Number
{
	tint n,i;
	Number (tint nn, tint ii)
	{
		n = nn;
		i = ii;
	}
};

bool operator < (Number n1, Number n2)
{
	return make_pair(n1.n,n1.i) < make_pair(n2.n,n2.i);
}


int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		vector<string> ans;
		set<Number> numbers;
		tint k = 0;
		forn(i,n)
		{
			string s;
			cin >> s;
			if (s == "insert")
			{
				
				tint a;
				cin >> a;
				numbers.insert(Number(a,k++));
				string r = "insert " + toString(a) + "\n";
				ans.push_back(r);
			}
			else if (s == "removeMin")
			{
				if (numbers.empty())
				{
					ans.push_back("insert 1\n");
					numbers.insert(Number(0,k++));
				}
				numbers.erase(*numbers.begin());
				ans.push_back("removeMin\n");
			}
			else
			{
				tint a;
				cin >> a;
				if (!numbers.empty() && (*numbers.begin()).n > a)
				{
					string r1 = "insert " + toString(a) + "\n";
					numbers.insert(Number(a,k++));	
					ans.push_back(r1);
				}
				else if ( !numbers.empty() && (*numbers.begin()).n < a)
				{
					while (!numbers.empty() && (*numbers.begin()).n < a)
					{
						numbers.erase(*numbers.begin());
						ans.push_back("removeMin\n");
					}
				}
				if (numbers.empty() or (*numbers.begin()).n > a)
				{
					string r1 = "insert " + toString(a) + "\n";
					numbers.insert(Number(a,k++));	
					ans.push_back(r1);
				}
			
				string r2 = "getMin " + to_string(a) + "\n";
				ans.push_back(r2);
			}
		}
		cout << ans.size() << "\n";
		for (auto x :   ans)
			cout << x;
		
	}
	return 0;
}



