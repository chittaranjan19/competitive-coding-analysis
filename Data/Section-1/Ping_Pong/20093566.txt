#include <bits/stdc++.h>

#define ll long long

using namespace std;

const int N = 100000;
const int inf = (int)1e9;
const int MOD = (int)1e9 + 7;

vector<vector<int> > g;
vector<int> height;
vector<int> start;
vector<pair<int, int> > order;

void dfs(int u, int par, int h)
{
    height[u] = h;
    start[u] = order.size();
    order.push_back({h, u});
    for (int v : g[u])
        if (v != par)
        {
            dfs(v, u, h + 1);
            order.push_back({h, u});
        }
}

vector<vector<pair<int, int> > > st;
vector<int> log_2;

void build_st()
{
    int n = order.size();
    log_2.resize(n + 1);
    log_2[1] = 0;
    for (int i = 2; i <= n; i++)
        if (i >= (1 << (log_2[i - 1] + 1)))
            log_2[i] = log_2[i - 1] + 1;
        else
            log_2[i] = log_2[i - 1];
    int sz = 1;
    while ((1 << sz) <= n)
        sz++;
    st.resize(n, vector<pair<int, int> > (sz));
    for (int i = 0; i < n; i++)
        st[i][0] = order[i];
    for (int j = 1; j < sz; j++)
        for (int i = 0; i < n; i++)
            if (i + (1 << j) <= n)
                st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
}

int get_lca(int u, int v)
{
    int l = start[u], r = start[v];
    if (l > r)
        swap(l, r);
    r++;
    int len = log_2[r - l];
    return min(st[l][len], st[r - (1 << len)][len]).second;
}

vector<int> dist;
queue<int> q;

void bfs()
{
    while (!q.empty())
    {
        int u = q.front();
        q.pop();
        for (int v : g[u])
            if (dist[u] + 1 < dist[v])
            {
                dist[v] = dist[u] + 1;
                q.push(v);
            }
    }
}

int main()
{
    //freopen("power.in", "r", stdin);
    //freopen("power.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    int n, m;
    scanf("%d %d", &n, &m);
    g.resize(n);
    height.resize(n);
    start.resize(n);
    for (int i = 0; i < n - 1; i++)
    {
        int a, b;
        cin >> a >> b;
        g[a - 1].push_back(b - 1);
        g[b - 1].push_back(a - 1);
    }
    dfs(0, -1, 0);
    build_st();

    vector<int> red;
    red.push_back(0);
    dist.resize(n);
    vector<int> tmp;

    int sz = round(sqrt(m));
    for (int i = 0; i < m; i++)
    {
        if (i % sz == 0)
        {
            for (int j = 0; j < n; j++)
                dist[j] = inf;
            for (int j : red)
            {
                dist[j] = 0;
                q.push(j);
            }
            bfs();
            tmp.clear();
        }
        int t, v;
        scanf("%d %d", &t, &v);
        v--;
        if (t == 1)
        {
            red.push_back(v);
            tmp.push_back(v);
        }
        else
        {
            int ans = dist[v];
            for (int j : tmp)
            {
                int lca = get_lca(v, j);
                ans = min(ans, height[v] - height[lca] + height[j] - height[lca]);
            }
            printf("%d\n", ans);
        }
    }
    return 0;
}
