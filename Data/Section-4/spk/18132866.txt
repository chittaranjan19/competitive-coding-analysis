#include<iostream>
#include<cstdio>
#include<map>
#include<string>
#include<cstring>
#include<vector>
#include<algorithm>
#include<queue>
#include<cmath>

#define fill(a,val) memset(a, (val), sizeof a)
#define pb push_back
#define scantype long
#define min(a,b) a<b?a:b
#define max(a,b) a>b?a:b

using namespace std;

void scan(scantype &x); //IMPORTANT: for positive only

double dist(pair<double,double> p1, pair<double,double> p2)
{
     double l =  sqrt( (p1.first-p2.first)*(p1.first-p2.first) +  (p1.second-p2.second)*(p1.second-p2.second) );
     return  l;
}

bool mycmp( pair< pair<double,double> , double > p1 , pair< pair<double,double> , double > p2)
{
    double l,r;
    l = max( p1.second-p1.first.first,p1.second-p1.first.second);
    r = max( p2.second-p2.first.first,p2.second-p2.first.second);
    if(l>r)
        return true;
    else if(l==r)
    {

    }
    return false;
}
int main(void)
{
  pair<long,long> co[3];
  long x,y;
  for(int i=0;i<3;i++)
  {
      cin >> x >> y;
      co[i] = {x,y};
  }

  int n;

  cin >> n;

  pair<long,long> bot[n];
  for(int i=0;i<n;i++)
  {
      scan(x);
      scan(y);
      bot[i] = {x,y};
  }

  pair< pair<double,double> , double> di[n];

  for(int i=0;i<n;i++)
  {
      di[i].first.first = dist(bot[i],co[0]) + dist(bot[i],co[2]);
      di[i].first.second = dist(bot[i],co[1]) + dist(bot[i],co[2]);

      di[i].second = 2*dist(bot[i],co[2]);
  }

  sort(di,di+n,mycmp);

  for(int i=0;0;i++)
  {
      cout << di[i].first.first << "    " << di[i].first.second << "   " << di[i].second << endl;
  }

  double ans=0,ans1=0;


   ans+= di[0].first.first;
   if(di[1].first.second<di[1].second)
        ans+= di[1].first.second;
   else
        ans+= di[1].second;

   for(int i=2;i<n;i++)
   {
      ans+= di[i].second;
   }

   ans1+= di[0].first.second;
   if(di[1].first.first<di[1].second)
        ans1+= di[1].first.first;
   else
        ans1+= di[1].second;

   for(int i=2;i<n;i++)
   {
      ans1+= di[i].second;
   }



  printf("%lf",min(ans,ans1));
  return 0;
}









void scan(scantype &x)
{
    register int c = getchar(); //for positive
    x = 0;
    for(;(c<48 || c>57);c = getchar());
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}

   /* register int c = getchar(); //for negative/positive
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = getchar());
    if(c=='-') {neg=1;c=getchar();}
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x; */
}
