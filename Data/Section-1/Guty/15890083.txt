#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Punto
{
	tint x,y,indice;
	Punto (tint xx, tint yy, tint indy)
	{
		x = xx;
		y = yy;
		indice = indy;
	}
};

bool operator < (Punto p1, Punto p2)
{
	return make_pair (p1.x,p1.y) < make_pair(p2.x,p2.y);
}

bool colineales (Punto p1, Punto p2, Punto p3)
{
	return (p2.y-p1.y)*(p3.x-p2.x) == (p3.y-p2.y)*(p2.x-p1.x);
}

int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint n;
	while (cin >> n)
	{
		vector<Punto> p (n,Punto(0,0,0));
		forn(i,n)
		{
			tint x,y;
			cin >> x >> y;
			p[i] = Punto(x,y,i+1);
		}
		sort(p.begin(),p.end());
		Punto p1 = p[0],p2 = p[1],p3 = p[2];
		tint k = 3;
		while (p1.x == p2.x && p2.x == p3.x)
		{
			if (colineales(p1,p2,p3))
			{
				Punto copia = p2;
				p2 = p3;
				p1 = copia;
			}
			p3 = p[k];
			k++;
		}
		cout << p1.indice << " " << p2.indice << " " << p3.indice << endl;
	}
	return 0;
}



