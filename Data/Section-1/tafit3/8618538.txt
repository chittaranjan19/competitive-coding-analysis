import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemC2 {
    BufferedReader rd;
    char[][] cur;
    char[] qq;
    int src;
    int n;

    private ProblemC2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        String cd = rd.readLine();
        cur = new char[2][];
        cur[0] = cd.toCharArray();
        cur[1] = cd.toCharArray();
        n = cur[0].length;
        qq = new char[n *2];
        int shuffleCount = pint();
        StringBuilder buf = new StringBuilder();
        for(int i=0;i<shuffleCount;i++) {
            int[] a = intarr();
            if(a[1] > 1 && a[1] < a[0]) {
                shuffle(a[0],a[1]);
                src = 1-src;
            }
            for(int j=0;j< n;j++) {
                buf.append(cur[src][j]);
            }
            buf.append('\n');
        }
        out(buf);
    }

    private void shuffle(int k, int d) {
        int[] p = new int[k];
        int t = 0;
        int u = 0;
        int y = 1;
        while(t < k) {
            p[t] = u;
            u += d;
            if(u >= k) {
                u = y;
                y++;
            }
            t++;
        }

        int[] od = new int[k];
        for(int i=0;i<k;i++) {
            od[p[i]] = i;
        }

        boolean[] used = new boolean[k];
        int[] queue = new int[k];
        int s = 1;
        int len = 1;
        while(len < k && s < k) {
            s = p[s];
            used[s] = true;
            queue[len] = s;
            s++;
            len++;
        }

        List<List<Integer>> cycles = new ArrayList<>();
        for(int i=1;i<k;i++) {
            if(!used[i]) {
                List<Integer> cycle = new ArrayList<>();
                cycle.add(i);
                used[i] = true;
                int g = od[i]-1;
                while(g != i) {
                    cycle.add(g);
                    used[g] = true;
                    g = od[g]-1;
                }
                cycles.add(cycle);
            }
        }

        int head = 0;
        int tail = 0;
        for(int i=0;i<len;i++) {
            qq[head++] = cur[src][queue[i]];
        }
        int dst = 1-src;
        for(int i=0;i< n -k;i++) {
            cur[dst][i] = qq[tail++];
            qq[head++] = cur[src][i+k];
        }
        for(int i=0;i<len;i++) {
            cur[dst][n -k+od[queue[i]]] = qq[tail++];
        }

        for(List<Integer> cycle: cycles) {
            int cs = cycle.size();
            int offset = (n -k) % cs;
            for(int i=0;i<cs;i++) {
                int idx = (cs+i-offset)%cs;
                cur[dst][n -k + od[cycle.get(i)]] = cur[src][cycle.get(idx)];
            }
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = s.split(" ");
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC2();
    }
}
