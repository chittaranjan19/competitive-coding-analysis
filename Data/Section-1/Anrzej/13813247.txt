#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
#include <string>
#define ll long long
using namespace std;

struct point
{
	long long x, y;
};

long area(point a, point b, point c)
{
	long long x = (b.x - a.x) * (c.y - a.y) - (c.x - a.x)*(b.y - a.y);
	return x > 0 ? 1 : (x < 0 ? -1 : 0);
}



long intersect2(ll a, ll b, ll c, ll d)
{
	if (a > b) swap(a, b);
	if (c > d) swap(c, d);
	return max(a, c) <= min(b, d);
}

long intersect(point a, point b, point c, point d)
{
	if (area(a, b, c) * area(a, b, d) <= 0 && area(c, d, a) * area(c, d, b) <= 0 && intersect2(a.x, b.x, c.x, d.x) && intersect2(a.y, b.y, c.y, d.y))
		return true;
	else
		return false;
}

const int N = 1000;

int n;
long long t[N], s[N], f[N];
long long ans[N];

int main() {
	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> t[i] >> s[i] >> f[i];
	}

	for (int i = 0; i < n; i++)
	for (int j = i + 1; j < n; j++) {
		point a, b, c, d;
		a.x = t[i], a.y = s[i];
		b.x = t[i] + abs(s[i] - f[i]), b.y = f[i];
		c.x = t[j], c.y = s[j];
		d.x = t[j] + abs(s[j] - f[j]), d.y = f[j];
		if (intersect(a, b, c, d))
			ans[i]++, ans[j]++;
	}

	for (int i = 0; i < n; i++)
		cout << ans[i] << ' ';

	return 0;
}