#include <bits/stdc++.h>

using namespace std;

struct line{
    long double a, b, c;
};

struct point{
    long double x, y;
};

struct point intersect(line l1, line l2)
{
    long double x, y;
    x = (long double)(l2.b*l1.c-l2.c*l1.b)/(l2.a*l1.b-l1.a*l2.b);
    y = (long double)(l2.c*l1.a-l1.c*l2.a)/(l2.a*l1.b-l1.a*l2.b);
    return (point){x,y};
}

bool sat(line l, point p)
{
    long double eq;
    eq = l.a*p.x+l.b*p.y+l.c;
    if(eq==0)
        return true;
    else
        return false;
}

int main()
{
    int n, i, j;
    long double x1, y1, x2, y2, a, b, c, m;
    cin >> x1 >> y1 >> x2 >> y2 >> n;
    line arr[n];
    for(i=0; i<n; i++){
        cin >> arr[i].a >> arr[i].b >> arr[i].c;
    }
    a = y1-y2;
    b = x2-x1;
    c = x1*y2-x2*y1;
    vector<point> v;
    map<point, bool> m1;
    long long ans = 0;
    for(i=0; i<n; i++){
        if(b*arr[i].a!=arr[i].b*a){
            point p1 = intersect((line){a,b,c}, arr[i]);
            //cout << p1.x << " " << p1.y << "\n";
            if((x2<=p1.x && p1.x<=x1||(x1<=p1.x && p1.x<=x2)))
                ans++;
        }
        /*for(j=0; j<i; j++){
            if(arr[j].a*arr[i].b==arr[i].a*arr[j].b)
                continue;
            point p = intersect(arr[i], arr[j]);
            if(sat((line){a,b,c},p))
                ans+=2;
        }*/
    }
    cout << ans << "\n";
    return 0;
}
