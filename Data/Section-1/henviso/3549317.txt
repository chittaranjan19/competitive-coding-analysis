#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define INRANGE0(x, n) ((x) > -1 && (x) < n)
#define INRANGE(x, a, b) ((x) >= a && (x) <= b)
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INCMOD(a,b,c) (((a)+b)%c)
#define DECMOD(a,b,c) (((a)+c-b)%c)
#define ROUNDINT(a) (int)((double)(a) + 0.5)
#define INF 2000000000
#define EPS 1e-9
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL  //J PRIMEIROS
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//scanf(" %d ", &t);
#define DFS_WHITE -1
#define DFS_BLACK 1
#define DFS_GRAY 2

int n, m, u, v, l, r;
vi e[10100];
vi g[10100];

bitset<11000> bs;

int dfs(int v){
	bs[v] = true;
	REP(i, g[v].size()) if(!bs[g[v][i]] && (e[v][i] < l || e[v][i] > r)) dfs(g[v][i]);
}

int main(){
	scanf(" %d %d ", &n, &m);
	REP(i, n) g[i].clear();
	REPP(i, 1, m+1){
		scanf(" %d %d ", &u, &v);
		g[u].pb(v);
		e[u].pb(i);
		e[v].pb(i);
		g[v].pb(u);
	}
	
	map< ii , int > ans;
	int cc, k;
	scanf(" %d ", &k);
	REP(i, k){
		scanf(" %d %d ", &l, &r);
		
		if(!ans.count(mp(l,r))){	
			cc = 0; bs.reset();
			REPP(i, 1, n+1){
				if(!bs[i]){
					dfs(i);
					cc++;
				}
			}
			ans[mp(l, r)] = cc;
		}
		printf("%d\n", ans[mp(l, r)]);
	}
}
