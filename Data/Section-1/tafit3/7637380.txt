import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemD {
    private ProblemD() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String h = rd.readLine();
        String[] q = h.split("\\s+");
        int n = Integer.parseInt(q[0]);
        int k = Integer.parseInt(q[1]);
        int[][] idx = new int[k][n];
        for(int i=0;i<k;i++) {
            h = rd.readLine();
            q = h.split("\\s+");
            for(int j=0;j<n;j++) {
                int a = Integer.parseInt(q[j]);
                idx[i][a-1] = j;
            }
        }

        Map<Integer, Set<Integer>> pred = new HashMap<Integer, Set<Integer>>();
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(i != j) {
                    boolean ok = true;
                    int m = 0;
                    while(ok && m < k) {
                        ok = idx[m][i] < idx[m][j];
                        m++;
                    }
                    if(ok) {
                        Set<Integer> p = pred.get(j);
                        if(p == null) {
                            p = new HashSet<Integer>();
                            pred.put(j,p);
                        }
                        p.add(i);
                    }
                }
            }
        }

        int len = 1;
        if(!pred.isEmpty()) {
            boolean[] checked = new boolean[n];
            Set<Integer> initial = new HashSet<Integer>();
            for(Map.Entry<Integer, Set<Integer>> e: pred.entrySet()) {
                Queue<Integer> toCheck = new LinkedList<Integer>();
                toCheck.add(e.getKey());
                while(!toCheck.isEmpty()) {
                    int p = toCheck.poll();
                    if(!checked[p]) {
                        checked[p] = true;
                        if(pred.containsKey(p)) {
                            for(Integer p1: pred.get(p)) {
                                if(!checked[p1]) {
                                    toCheck.add(p1);
                                }
                            }
                        } else {
                            initial.add(p);
                        }
                    }
                }
            }

            Map<Integer, Set<Integer>> succ = pred;
            succ.clear();
            for(int i=0;i<n;i++) {
                for(int j=0;j<n;j++) {
                    if(i != j) {
                        boolean ok = true;
                        int m = 0;
                        while(ok && m < k) {
                            ok = idx[m][i] < idx[m][j];
                            m++;
                        }
                        if(ok) {
                            Set<Integer> s = succ.get(i);
                            if(s == null) {
                                s = new HashSet<Integer>();
                                succ.put(i,s);
                            }
                            s.add(j);
                        }
                    }
                }
            }

            for(Integer ini: initial) {
                boolean[] visited = new boolean[n];
                Queue<int[]> queue = new LinkedList<int[]>();
                queue.add(new int[] { ini, 1 });
                while(!queue.isEmpty()) {
                    int[] p = queue.poll();
                    visited[p[0]] = true;
                    Set<Integer> s = succ.get(p[0]);
                    if(s != null) {
                        if(len < p[1]+1) {
                            len = p[1]+1;
                        }
                        for(Integer s1: s) {
                            if(!visited[s1]) {
                                queue.add(new int[] { s1, p[1]+1 });
                            }
                        }
                    }
                }
            }
        }
        out(len);
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
