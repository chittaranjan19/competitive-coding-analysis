#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

tint countCeros (string s)
{
	tint ceros = 0;
	tint unos  = 0;
	tint r = s.size();
	forn(i,r)
	{
		if (s[i] == '0')
			ceros++;
		if (s[i] == '1')
			unos++;
	}
	if ((unos == 1) && (unos + ceros == r))
		return ceros;
	else if (unos == 0 && ceros == 1 && r == 1)
		return -2;
	else
		return -1;
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<string> numbers (n);
	tint ceros = 0;
	string p = "";
	bool hayUnCero = false;
	bool hayUnNumero = false;
	forn(i,n)
	{
		cin >> numbers[i];
		tint q = countCeros(numbers[i]);
		if (q != -1 && q != -2)
			ceros += q;
		else if (q == -1)
		{
			p = numbers[i];
			hayUnNumero = true;
		}
		else
			hayUnCero = true;
	}
	if (hayUnCero)
	{
		cout << 0 << endl;
		return 0;
	}
	
	if (!hayUnNumero)
		p = "1";
	cout << p;
	forn(i,ceros)
		cout << "0";
	cout << endl;	

	
	
	return 0;
}



