#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <queue>
#define ll long long
#define MAXN 1003
#define MAXM 40004
using namespace std; 
const int INF = 0x3f3f3f3f;
int dir[4][2]={1, 0, -1, 0, 0, 1, 0, -1};

int n, m;
struct point{
	int x, y, cnt, num;
	friend bool operator < (point a, point b){
		return a.cnt > b.cnt;
	}
}s,e;
int num;
char g[MAXN][MAXN];
bool vis[MAXN][MAXN];
priority_queue<point> q;
void fun(int x, int y, int cnt, int num){
	if (x <= 0 || x > n || y <= 0 || y > m)	return ;
	if (vis[x][y] || g[x][y] == '*')	return ;
	point t;
	t.x = x;
	t.y = y;
	t.cnt = cnt+1;
	t.num = num;
	q.push(t);
	vis[x][y] = true;
	return ;
}
char ex(char c){
	if (c == '^')	return '>';
	if (c == '>')	return 'v';
	if (c == 'v')	return '<';
	if (c == '<')	return '^';
	if (c == 'U')	return 'R';
	if (c == 'R')	return 'D';
	if (c == 'D')	return 'L';
	if (c == 'L')	return 'U';
	if (c == '|')	return '-';
	if (c == '-')	return '|';
	return c;
}
int bfs(){
	while(!q.empty())q.pop();
	q.push(s);
	point t1, t2;
	int x, y, cnt;
	char c, u, d, l, r;
	while(!q.empty()){
		t1 = q.top();
		q.pop();
		if (t1.x == e.x && t1.y == e.y){
			return t1.cnt;
		}
		x = t1.x;
		y = t1.y;
		cnt = t1.cnt;
		c = g[x][y];
		u = g[x-1][y];
		d = g[x+1][y];
		l = g[x][y-1];
		r = g[x][y+1];
		for (int i = 0; i < t1.num; i++){
			c = ex(c);
			u = ex(u);
			d = ex(d);
			l = ex(l);
			r = ex(r);
		}
		switch(c){
			case '+': 
			if (d=='+'||d=='|'||d=='^'||d=='L'||d=='R'||d=='D') fun(x+1, y, cnt, t1.num);
			if (u=='+'||u=='|'||u=='v'||u=='L'||u=='R'||u=='U') fun(x-1, y, cnt, t1.num);
			if (r=='+'||r=='-'||r=='<'||r=='L'||r=='U'||r=='D') fun(x, y+1, cnt, t1.num);
			if (l=='+'||l=='-'||l=='>'||l=='R'||l=='U'||l=='D') fun(x, y-1, cnt, t1.num); 
			break;
			
			case '-': 
			if (r=='+'||r=='-'||r=='<'||r=='L'||r=='U'||r=='D') fun(x, y+1, cnt, t1.num);
			if (l=='+'||l=='-'||l=='>'||l=='R'||l=='U'||l=='D') fun(x, y-1, cnt, t1.num); 
			break;
			
			case '|': 
			if (d=='+'||d=='|'||d=='^'||d=='L'||d=='R'||d=='D') fun(x+1, y, cnt, t1.num);
			if (u=='+'||u=='|'||u=='v'||u=='L'||u=='R'||u=='U') fun(x-1, y, cnt, t1.num);
			break;
			
			case '^': 
			if (u=='+'||u=='|'||u=='v'||u=='L'||u=='R'||u=='U') fun(x-1, y, cnt, t1.num);
			break;
			
			case '>': 
			if (r=='+'||r=='-'||r=='<'||r=='L'||r=='U'||r=='D') fun(x, y+1, cnt, t1.num);
			break;
			
			case '<': 
			if (l=='+'||l=='-'||l=='>'||l=='R'||l=='U'||l=='D') fun(x, y-1, cnt, t1.num); 
			break;
			
			case 'v': 
			if (d=='+'||d=='|'||d=='^'||d=='L'||d=='R'||d=='D') fun(x+1, y, cnt, t1.num);
			break;
			
			case 'L': 
			if (r=='+'||r=='-'||r=='<'||r=='L'||r=='U'||r=='D') fun(x, y+1, cnt, t1.num);
			if (d=='+'||d=='|'||d=='^'||d=='L'||d=='R'||d=='D') fun(x+1, y, cnt, t1.num);
			if (u=='+'||u=='|'||u=='v'||u=='L'||u=='R'||u=='U') fun(x-1, y, cnt, t1.num);
			break;
			
			case 'R': 
			if (l=='+'||l=='-'||l=='>'||l=='R'||l=='U'||l=='D') fun(x, y-1, cnt, t1.num); 
			if (d=='+'||d=='|'||d=='^'||d=='L'||d=='R'||d=='D') fun(x+1, y, cnt, t1.num);
			if (u=='+'||u=='|'||u=='v'||u=='L'||u=='R'||u=='U') fun(x-1, y, cnt, t1.num);
			break;
			
			case 'U': 
			if (l=='+'||l=='-'||l=='>'||l=='R'||l=='U'||l=='D') fun(x, y-1, cnt, t1.num); 
			if (r=='+'||r=='-'||r=='<'||r=='L'||r=='U'||r=='D') fun(x, y+1, cnt, t1.num);
			if (d=='+'||d=='|'||d=='^'||d=='L'||d=='R'||d=='D') fun(x+1, y, cnt, t1.num);
			break;
			
			case 'D': 
			if (l=='+'||l=='-'||l=='>'||l=='R'||l=='U'||l=='D') fun(x, y-1, cnt, t1.num); 
			if (r=='+'||r=='-'||r=='<'||r=='L'||r=='U'||r=='D') fun(x, y+1, cnt, t1.num);
			if (u=='+'||u=='|'||u=='v'||u=='L'||u=='R'||u=='U') fun(x-1, y, cnt, t1.num);
			break;
		}
		switch(g[t1.x][t1.y]){
			case '-': t1.cnt++; q.push(t1); t1.num++; break;
			case '|': t1.cnt++; t1.num++; q.push(t1); break;
			case '^': t1.cnt++; t1.num++; q.push(t1); break;
			case '>': t1.cnt++; t1.num++; q.push(t1); break;
			case '<': t1.cnt++; t1.num++; q.push(t1); break;
			case 'v': t1.cnt++; t1.num++; q.push(t1); break;
			case 'L': t1.cnt++; t1.num++; q.push(t1); break;
			case 'R': t1.cnt++; t1.num++; q.push(t1); break;
			case 'U': t1.cnt++; t1.num++; q.push(t1); break;
			case 'D': t1.cnt++; t1.num++; q.push(t1); break;
		}
	}
	return -1;
}
int main(){
	int i, j, k, t;
	scanf("%d%d", &n, &m);
	memset(vis, 0, sizeof(vis));
	num = 0;
	for (i = 1;  i <= n; i++){
		scanf("%s", g[i]+1);
	}
	scanf("%d%d", &s.x, &s.y);
	s.cnt = 0;
	scanf("%d%d", &e.x, &e.y);
	printf("%d", bfs());
	return 0;
}