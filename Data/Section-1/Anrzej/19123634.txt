#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _gcd(int a, int b, int & x, int & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	int _x1, _y1;
	int d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 20;
ll mod = 1e9 + 7;

ll q;
vector<pair<pair<int, ll>, pair<ll, ll> > > qq;
vector<ll> vv;
set<ll> vs;

map < ll, set<ll> > g;
map < ll, ll> pr;
map<pair<ll, ll>, ll> cost;

int main()
{	
	cin >> q;
	while (q--){
		ll t, u, v, c;
		cin >> t;
		if(t == 1)
			cin >> u >> v >> c;
		else cin >> u >> v,
		c = -1;
		qq.push_back(mp(mp(t, c), mp(u, v)));

		if (vs.count(u) == 0)
			vv.push_back(u), vs.insert(u);

		if (vs.count(v) == 0)
			vv.push_back(v), vs.insert(v);
	}

	for (int i = 0; i < vv.size(); i++){
		ll v = vv[i];
		ll prev = v;
		while (v != 0){
			v /= 2;
			pr[prev] = v;
			g[v].insert(prev);
			prev = v;
		}
	}

	pr[1] = 0;
	for (int i = 0; i < qq.size(); i++){
		int t = qq[i].fs.fs;
		ll u, v, _u, _v, c = qq[i].fs.sc;
		_u  = u = qq[i].sc.fs;
		_v = v = qq[i].sc.sc;
		set<ll> w1;
		while (_u != 0)
			w1.insert(_u), _u = pr[_u];

		ll lca = -1;
		while (_v != 0){
			if (w1.count(_v)){
				lca = _v;
				break;
			}
			else _v = pr[_v];
		}

		_u = u, _v = v;
		if (t == 1){
			ll ans = 0;
			while (u != lca)
				cost[mp(pr[u], u)] += c, u = pr[u];
			while (v != lca)
				cost[mp(pr[v], v)] += c, v = pr[v];
		}
		else{
			ll ans = 0;
			while (u != lca)
				ans += cost[mp(pr[u], u)], u = pr[u];
			while (v != lca)
				ans += cost[mp(pr[v], v)], v = pr[v];
			cout << ans << endl;
		}
	}
	return 0;
}

