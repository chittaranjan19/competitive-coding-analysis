#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Intervalo
{
	Intervalo (tint ee, tint tt)
	{
		empieza = ee;
		termina = tt;
	}
	tint empieza, termina;
};

bool operator < (Intervalo i1, Intervalo i2)
{
	if (i1.empieza == i2.empieza)
		return i1.termina > i2.termina;
	else 
		return i1.empieza < i2.empieza;
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	tint x1,x2;
	cin >> x1 >> x2;
	vector<tint> k (n);
	vector<tint> b (n);
	vector<Intervalo> intervalo (n,Intervalo(0,0));
	
	forn(i,n)
	{
		cin >> k[i] >> b[i];
		intervalo[i] = Intervalo(k[i]*x1 + b[i],k[i]*x2 + b[i]);
	}	
	sort(intervalo.begin(),intervalo.end());
	bool overlapping = false;
	tint maxEnding = intervalo[0].termina;
	tint maxStart  = intervalo[0].empieza;
	forsn(i,1,n)
	{
		tint start = intervalo[i].empieza;
		if (start < maxEnding && start > maxStart)
		{
			overlapping = true;
			break;
		}
		else
		{
			maxEnding = intervalo[i].termina;
			maxStart  = intervalo[i].empieza;
		}
	}
	if (overlapping)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
	
	
	
	
		
		
	return 0;
}



