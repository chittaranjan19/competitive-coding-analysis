#include <bits/stdc++.h>

#define f       first
#define s       second
#define mp      make_pair
#define rank    something_which_is_supposed_to_be_rank
#define left    something_which_is_supposed_to_be_left
#define right   something_which_is_supposed_to_be_right

using namespace std;

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const int N = 200000;

int n, m, s, t, ds, dt, parent[N + 1], rank[N + 1];
vector<pair<int,int>> edges, spanning_tree;

int get(int u) {
    return (u == parent[u] ? u : parent[u] = get(parent[u]));
}

bool check(int u) {
    return (u == s && !ds) || (u == t && !dt);
}

inline void join(int u, int v) {
    pair<int,int> edge = {u, v};
    u = get(u);
    v = get(v);
    if (u == v || check(u) || check(v)) {
        return;
    }
    spanning_tree.push_back(edge);
    if (rank[v] < rank[u]) {
        swap(u, v);
    }
    parent[u] = v;
    rank[v] += (rank[u] == rank[v]);
}

int main() {
    cin.sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 0, a, b; i < m; ++i) {
        cin >> a >> b;
        edges.push_back({a, b});
    }
    cin >> s >> t >> ds >> dt;
    for (int i = 0; i <= n; ++i) {
        parent[i] = i;
    }
    for (auto e: edges) {
        join(e.f, e.s);
    }
    if ((int) spanning_tree.size() == n - 1) {
        cout << "Yes\n";
        for (auto e: spanning_tree) {
            cout << e.f << " " << e.s << "\n";
        }
    } else {
        cout << "No\n";
    }
    cerr << "Time elapsed: " << (ld) clock() / CLOCKS_PER_SEC << "\n";
    return 0;
}