#include <iostream>
#include <vector>

using namespace std;

int n;
vector<int> h[100000];
int pre[100000];

int sols[100000][2], solsv;
int sole[100000][2], solev;

void dfs(int p) {
    for(int q:h[p]) {
        if(q == pre[p]) continue;
        pre[q] = p;
        dfs(q);
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin >> n;
    for(int i=0; i<n-1; i++) {
        int x,y; cin >> x >> y; x--; y--;
        h[x].push_back(y); h[y].push_back(x);
    }

    pre[0] = -1;
    dfs(0);

    cout << n-1 << endl;
    for(int i=1; i<n; i++) cout << 2 << ' ' << (i+1) << ' ' << (pre[i]+1) << endl;

    int f = h[0][0];
    for(int p:h[0]) {
        if(f == p) continue;
        cout << f << ' ' << p << endl;
    }
    for(int i=1; i<n; i++) {
        if(pre[i] == 0) continue;
        cout << pre[i] << ' ' << i << endl;
    }

    return 0;
}
