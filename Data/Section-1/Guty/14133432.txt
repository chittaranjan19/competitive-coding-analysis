#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

tint techoRaiz (tint x)
{
	tint csup = x;
	tint cinf = 0;
	while (csup - cinf > 1)
	{
		tint c = (cinf  + csup) / 2;
		if (c*c < x)
			cinf = c;
		else
			csup = c;
	}
	return csup;
}

struct Terna
{
	Terna(tint prod, tint first, tint second)
	{
		producto = prod;
		primero = first;
		segundo = second;
	}
	tint producto, primero, segundo;
};

bool operator < (Terna t1, Terna t2)
{
	return make_tuple(t1.producto, t1.primero, t1.segundo) < make_tuple(t2.producto, t2.primero, t2.segundo);
}

int main()
{
	ios_base::sync_with_stdio(0);
	bool cambio = false;
	tint n,a,b;
	cin >> n >> a >> b;
	if (a > b) // cambio porque en mis cuentas asumo a <= b
	{
		tint aux = b;
		b = a;
		a = aux;
		cambio = true;
	}
	if (a*b >= 6*n) // Si al comenzar cumple, entonces ya esta.
	{
		cout << a*b << endl << a << " " << b << endl;
		return 0;
	}
	tint k = techoRaiz(6*n); 
	vector<Terna> p;
	forsn(r,a,k+1) // Pruebo todos los valores de a posibles desde el original hasta techo de la raiz (como a es el menor me alcanza con probar hasta ahi, notar que sabemos que a*b < 6*n)
		p.push_back(Terna(r*(max(b,(6*n+r-1)/r)), r, max(b,(6*n+r-1)/r)) ); // Para cada a, puedo despejar el menor valor de b que hace que se cumpla la condicion del enunciado, pero debe ser al menos igual al b original.
	Terna ans = *min_element(p.begin(),p.end()); // De todos esos me quedo con el que tiene menor area.
	if (!cambio)
		cout << ans.producto << endl << ans.primero << " " << ans.segundo << endl;	
	else
		cout << ans.producto << endl << ans.segundo << " " << ans.primero << endl;	
	
	return 0;
}



