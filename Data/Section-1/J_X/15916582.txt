#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>

using namespace std;

const int maxn = 1e5 + 5;

char s[maxn], t[maxn];

int solve(int l, int r, int pre, int nxt)
{
    int ret = l;
    bool flag = false;
    while(l < r)
    {
        int p = s[r] - '0', q = s[l] - '0', x, y;
        if(p == 9 && q == 0) q = 10;
        else if(p == 0 && q == 9) p = 10;
        if(abs(p - q) > 1) return -1;
        flag |= s[r] != '0' || s[l] != '0';
        if(!pre && !nxt)
        {
            if(q < p) return -1;
            x = 0, y = p;
            nxt = q > p, pre = x + y >= 10;
        }
        else if(!pre && nxt)
        {
            if(q < p) return -1;
            x = 9, y = (p + 1) % 10;
            nxt = q > p, pre = x + y >= 10;
        }
        else if(pre && !nxt)
        {
            if(q > p) return -1;
            x = 0, y = (p + 9) % 10;
            nxt = q == p, pre = x + y >= 9;
        }
        else
        {
            if(q > p) return -1;
            x = 9, y = p;
            nxt = q == p, pre = x + y >= 9;
        }
        t[l] = y + '0', t[r] = x + '0';
        ++l, --r;
    }
    if(l == r)
    {
        int c = s[l] - '0' - pre;
        if(c & 1) return -1;
        t[l] = (nxt ? c / 2 + 5 : c / 2) + '0';
    }
    else if(nxt != pre || !flag) return -1;
    return ret;
}

int main()
{
    while(cin >> s)
    {
        int n = strlen(s);
        int flag = -1;
        if(s[n - 1] != '0') flag = solve(0, n - 1, 0, 0);
        if(flag == -1 && s[0] == '1' && n > 1) flag = solve(1, n - 1, 0, 1);
        t[n] = 0;
        if(~flag) cout << t + flag << endl;
        else cout << 0 << endl;
    }
    return 0;
}
