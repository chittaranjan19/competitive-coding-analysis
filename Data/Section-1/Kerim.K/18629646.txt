#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int memo[1009][1009],n,m,mx=0;
int operation=0;
char arr[1009][1009];
char num[]={'D','I','M','A'};
int dx[]={+1,-1,0,0};
int dy[]={0,0,+1,-1};
int rec(int x,int y){
	if(x<1 or x>n or y<1 or y>m)
		return 0;
	int &ret=memo[x][y];	
	if(~memo[x][y]){
		if(ret==-INF){
			printf("Poor Inna!\n");
			exit(0);
		}
		return memo[x][y];
	}
	ret=-INF;	
	char now='X';	
	for(int i=0;i<4;i++)
		if(num[i]==arr[x][y])
			now=num[(i+1)%4];	
	for(int i=0;i<4;i++){
		int nx=dx[i]+x;
		int ny=dy[i]+y;
		if(nx<1 or nx>n or ny<1 or ny>m or arr[nx][ny]!=now)
			continue;	
		umax(ret,rec(nx,ny));	
	}
	umax(ret,0);
	return ret=(arr[x][y]=='A')+ret;
}
int main(){
	memset(memo,-1,sizeof(memo));
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			scanf(" %c",&arr[i][j]);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			if(arr[i][j]=='D' and memo[i][j]==-1)
				umax(mx,rec(i,j));
	if(!mx)
		return printf("Poor Dima!\n"),0;
	printf("%d\n",mx);						
	return 0;
}
