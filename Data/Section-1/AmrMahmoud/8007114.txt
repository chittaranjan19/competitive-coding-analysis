#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int arr[2005][2005];
vector<vector<pair<int,int> > > tree(2005);

struct disjointset
{
    vector<int> rank, parent;

    disjointset(int n)
    {
        for(int i=0;i<n;i++)
            rank.pb(1),parent.pb(i);
    }

    int find_set(int x)
    {
        if(x == parent[x])
            return x;
        return parent[x] = find_set(parent[x]);
    }

    void link(int x,int y)
    {
        if(rank[x] > rank[y])
            swap(x, y);
        parent[x] = y;
        if(rank[x] == rank[y])
            rank[y]++;
    }

    bool union_sets(int x,int y)
    {
        x = find_set(x),y = find_set(y);
        if(x != y)
        {
            link(x,y);
        }
        return x != y;
    }

    bool same_set(int x,int y)
    {
        return find_set(x) == find_set(y);
    }
};

struct edge
{
    int from,to;
    int cost;

    edge(){}

    edge(int x,int y,int z)
    {
        from = x,to = y,cost = z;
    }

    bool operator < (const edge &e) const
    {
        return e.cost > cost;
    }
};

bool visited[2005];

LL dfs(int x,int y)
{
    visited[x] = true;
    for(int i=0;i<tree[x].size();i++)
    {
        if(!visited[tree[x][i].first])
        {
            if(tree[x][i].first == y)
            {
                visited[x] = false;
                return tree[x][i].second;
            }
            LL test = dfs(tree[x][i].first, y);
            if(test != -1)
            {
                visited[x] = false;
                return test + tree[x][i].second;
            }
        }
    }
    visited[x] = false;
    return -1;
}

int main()
{
    //freopen("straight.in","r",stdin);
    //freopen("straight.out","w",stdout);
    ios_base::sync_with_stdio(0);
    int n;
    cin >> n;
    disjointset temp(n+2);
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin >> arr[i][j];
    for(int i=0;i<n;i++)
        if(arr[i][i] != 0)
        {
            cout << "NO";
            return 0;
        }
    vector<edge> graph;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i][j] == 0 || arr[i][j] != arr[j][i])
            {
                cout << "NO";
                return 0;
            }
            graph.pb(edge(i, j, arr[i][j]));
        }
    }
    sort(graph.begin(), graph.end());
    for(int i=0;i<graph.size();i++)
    {
        int x = graph[i].from, y = graph[i].to, z = graph[i].cost;
        if(!temp.union_sets(x, y))
        {
            LL test = dfs(x, y);
            if(test != z)
            {
                cout << "NO";
                return 0;
            }
        }
        else
        {
            tree[x].pb(mp(y, z));
            tree[y].pb(mp(x, z));
        }
    }
    cout << "YES";
    return 0;
}
