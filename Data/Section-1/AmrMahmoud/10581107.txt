#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <fstream>
#include <numeric>
#include <stdexcept>
#include <cassert>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

pair<pair<LL, LL>, LL> Extended_Euclidean(LL a, LL b)
{
  if(b == 0) return mp(mp(1, 0), a);
  pair<pair<LL, LL>, LL> nextSolution = Extended_Euclidean(b, a % b);
  LL p = nextSolution.f.f;
  LL q = nextSolution.f.s;
  LL g = nextSolution.s;
  pair<pair<LL, LL>, LL> res;
  res.f.f = q;
  res.f.s = (p - a / b * q);
  res.s = g;
  return res;
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("suffix.in", "r", stdin);
  //freopen("suffix.out", "w", stdout);
  LL n, x, y, c, cc;
  cin >> n >> x >> y >> c >> cc;
  pair<LL, LL> a = Extended_Euclidean(c, cc).f;
  LL z = Extended_Euclidean(c, cc).s;
  n = (LL)(n / z) * 1LL * z;
  while(1)
  {
    LL temp = n / z;
    a.f*=temp;
    a.s*=temp;
    c/=z, cc/=z;
    LL ce = ceil(-(double) a.f / cc), fl = floor((double) a.s / c);
    LL cost = x * cc - y * c;
    if(cost * ce > cost * fl)
      a.f+=cc * ce, a.s-=c * ce;
    else a.f+=cc * fl, a.s-=c * fl;
    //cout << a.f << " " << a.s << "\n";
    cout << a.f * 1LL * x + y * 1LL * a.s << "\n";
    break;
  }
  return 0;
}
