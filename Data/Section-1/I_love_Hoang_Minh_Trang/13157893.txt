using namespace std;
#include<bits/stdc++.h>
#define FOR(i, a, b) for (int i = a; i < b; i++)
#define FORE(i, a, b) for (int i = a; i <= b; i++)
#define FORD(i, a, b) for (int i = a; i >= b; i--)
const int MAXN = 2*1e5;
const int INF  = 1e9 + 7;

vector<int> adj[MAXN];

int n, m, f[MAXN], g[MAXN], a[MAXN], vet[MAXN];
long long ans = 0;

void dfs(int u)
{
   // cout<<u<<" "<<f[1]<<"wtf"<<endl;
    int roof = 0;
    for(int i = 0; i < adj[u].size(); i++) {
        int v = adj[u][i];
        if (vet[v] == 0) {
            roof++;
            if (a[v] == 1) f[v] = f[u] + 1;
                else f[v] = 0;
            g[v] = max(g[u], f[v]);
            vet[v] = 1;
            dfs(v);
        }
    }
    if (roof == 0) {
      //  cout<<u<<" "<<g[u]<<endl;
   //   cout<<f[1]<< " "<<f[2]<<" "<<f[3]<<endl;
    }
    if (roof == 0 && g[u] <= m) ans++;
}
int main()
{
    ios::sync_with_stdio(false);
    //freopen("580C.inp", "r", stdin);
    //freopen("580C.out", "w", stdout);
    cin >> n >> m;
    FORE(i, 1, n) cin >> a[i];
    FORE(i, 1, n - 1) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    f[1] = a[1];
    g[1] = a[1];

    memset(vet, 0, sizeof(vet));
    vet[1] = 1;
    dfs(1);
    //cout<<f[1]<<"wtf"<<a[1]<<endl;
    cout<<ans<<endl;
    return 0;
}
