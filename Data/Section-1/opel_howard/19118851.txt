#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <climits>
#ifdef DEBUG
	#include <ctime>
#endif
using namespace std;

// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define rep(it, n) for(int it = 0; it < n; ++it)
#define rep1(it, n) for(int it = 1; it <= n; ++it)
#define loop(it, from, to) for(int it = (from); it <= (to); ++it)
#define reverse_iterate(it, cont) for(__typeof((cont).rend()) it = (cont).rbegin(); it != (cont).rend(); ++it)
#define iterate(it, cont) for(__typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define all(cont) (cont).begin(), (cont).end()

typedef unsigned long long ull;
typedef long long ll;

const int INF = INT_MAX;
const int NINF = INT_MIN;
const ll INF_LL = LLONG_MAX;
const ll NINF_LL = LLONG_MIN;
const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, ##args)
	#define rep_rt() printf("[Run time: %.3fs]\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...)
#endif

// end of template

int get(string str) {
	for (int idx = str.length()-1; idx >= 0; --idx) {
		if (str[idx] != '0')
			return idx+1;
	}
	return 0;
}

int main() {
#ifdef DEBUG
	freopen("697B.in", "r", stdin);
#endif
    
    string str;
    getline(cin, str);
    string integer = "", decimal = "";
    int idx = 0;
    bool after_coma = false;
    for (idx = 0; str[idx] != 'e'; ++idx) {
    	char c = str[idx];
    	if (c == '.') {
    		after_coma = true;
    		continue;
    	}
    	if (!after_coma)
    		integer += c;
    	else
    		decimal += c;
    }
    // idx stops at period
    int e = 0;
    ++idx;
    while (idx != str.length()) {
    	e = (e*10) + (str[idx]-'0');
    	++idx;
    }
    bool has_meet_1st_digit = false;
    if (integer != "0") {
    	has_meet_1st_digit = true;
    	cout << integer;
    }
    decimal = decimal.substr(0, get(decimal));
	rep(idx, (int) decimal.length()) {
    	if (e == 0) {
    		if (!has_meet_1st_digit) {
    			cout << "0";
    			has_meet_1st_digit = true;
    		}
    		cout << ".";
    	}
    	if ((has_meet_1st_digit) or (decimal[idx] != '0')) {
    		cout << decimal[idx];
    		has_meet_1st_digit = true;
    	}
    	--e;
    }
    if (has_meet_1st_digit) {
	    if (e > 0)
	    	cout << string(e, '0');
	} else {
		cout << "0";
	}
    cout << endl;

#ifdef DEBUG
    rep_rt();
#endif
    return 0;
}