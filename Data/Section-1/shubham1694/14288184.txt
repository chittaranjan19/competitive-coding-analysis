#include <bits/stdc++.h>

using namespace std;

#define ll long long

const int off = 100005;

vector<pair<int, int> > v[1000010], ans;
int w[1000010], ind[1000010], x[1000010], y[1000010];
int segtree[1000010];

void init(int s, int e, int node)
{
    if(s==e){
        segtree[node] = -1;
        return;
    }
    int mid, lc, rc;
    mid = (s+e)>>1;
    lc = 2*node+1;
    rc = lc+1;
    init(s, mid, lc);
    init(mid+1, e, rc);
    segtree[node] = -1;
}

void update(int s, int e, int q, int val, int node)
{
    if(s>e || s>q || q>e)
        return;
    if(s==e){
        segtree[node] = max(segtree[node], val);
        return;
    }
    int mid, lc, rc;
    mid = (s+e)>>1;
    lc = 2*node+1;
    rc = lc+1;
    update(s, mid, q, val, lc);
    update(mid+1, e, q, val, rc);
    segtree[node] = max(segtree[lc], segtree[rc]);
}

int query(int s, int e, int qs, int qe, int node)
{
    if(s>e || s>qe || qs>e)
        return -1;
    if(s>=qs && qe>=e)
        return segtree[node];
    int mid, lc, rc;
    mid = (s+e)>>1;
    lc = 2*node+1;
    rc = lc+1;
    return max(query(s, mid, qs, qe, lc), query(mid+1, e, qs, qe, rc));
}

int main()
{
    //freopen("i.txt", "r", stdin);
    int n, i, j, diff, mx, my, cx, cy, sum, msum;
    scanf("%d", &n);
    for(i=0; i<n; i++){
        scanf("%d%d", &x[i], &y[i]);
        //x[i] = rand()%100000, y[i] = rand()%100000;
        diff = off+y[i]-x[i];
        v[diff].push_back(make_pair(x[i], y[i]));
    }
    for(i=0; i<off*3; i++){
        if(v[i].size())
            sort(v[i].begin(), v[i].end());
    }
    for(i=0; i<n; i++){
        scanf("%d", &w[i]);
        //w[i] = rand()%100000;
        w[i]+=off;
    }
    ans.resize(n);
    int f = 1;
    mx = my = msum = -1;
    init(0, off, 0);
    for(i=0; i<n; i++){
        if(ind[w[i]]>=v[w[i]].size()){
            f = 0;
            break;
        }
        cx = v[w[i]][ind[w[i]]].first;
        cy = v[w[i]][ind[w[i]]].second;
        my = query(0, off, cx, off, 0);
        //cout << i << " " << my << " " << cx << " " << cy << "\n";
        if(my>=cy){
            f = 0;
            break;
        }
        ans[i] = v[w[i]][ind[w[i]]];
        ind[w[i]]++;
        update(0, off, cx, cy, 0);
        //for(j=0; j<=7; j++)
        //  cout << "seg " << segtree[j] << "\n";
    }
    //cout << i << "\n";
    if(f){
        printf("YES\n");
        for(i=0; i<n; i++)
            printf("%d %d\n", ans[i].first, ans[i].second);
    }
    else
        printf("NO\n");
    return 0;
}