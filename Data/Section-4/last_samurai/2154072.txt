
/* Author:
    * Rohit Laddha */
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <tr1/random>
#include <tr1/unordered_map>
using namespace std;
using namespace std::tr1;
#define VAR(a,b) __typeof(b) a=(b)
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define ALL(c) (c).begin(),(c).end()
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;

/*
   test case error
6 1 
2 2 2 2 2 0
0 0 0 0 0 0
*/
int t[100050],n,x;
bool myfunc(int a,int b){
	return a>b;
}
int b_search(int i , int j){
	int mid = (i+j)/2;
	if(t[mid]==x){
		if(mid==n-1 || t[mid]!=t[mid+1])
			return mid;
	}
	if(i==j){
//		if(x==t[i] || i == n-1) //if all numbers are greater than x
		if(x==t[i] ){
			return i;
		}
//		if(i==n-1) return i;
		else
			return i-1;
	}
	if(x>t[mid])
		b_search(i,mid);
	else if(x<=t[mid])
		b_search(mid+1,j);
}
int main(){
	while(cin >> n >> x){
	int a[n],b[n],i;
	for(i=0;i<n;i++)
		cin >> a[i];
	for(i=0;i<n;i++)
		cin >> b[i];
	for(i=0;i<n;i++)
		t[i]=a[i]+b[i];
	sort(t,t+n,myfunc);
	if(x<t[n-1])
		cout << "1 " << n << endl;
	else
		cout << "1 " << b_search(0,n-1)+1 << endl;
	}
	return 0;
}
