import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] q = intarr();
        int n = q[0];
        int d = q[1];
        int h = q[2];

        if(n <= 6) {
            solveSmall(n,d,h);
        } else {
            solveLarge(n,d,h);
        }
    }

    private void solveLarge(int n, int d, int h) {
        if(d == 1 || d > 2*h) {
            out(-1);
        } else {
            StringBuilder buf = new StringBuilder();
            for(int i=0;i<h;i++) {
                if(i > 0) {
                    buf.append('\n');
                }
                buf.append((i+1)+" "+(i+2));
            }
            int center = 1;
            if(d == h) {
                center = h/2+1;
            }
            for(int i=0;i<d-h;i++) {
                buf.append('\n');
                if(i == 0) {
                    buf.append("1 "+(h+2+i));
                } else {
                    buf.append((h+1+i)+" "+(h+2+i));
                }
            }
            for(int i=0;i<n-d-1;i++) {
                buf.append('\n').append(center+" "+(d+2+i));
            }
            out(buf);
        }
    }

    private void solveSmall(int n, int d, int h) {
        boolean[][] e = new boolean[n][n];
        for(int i=0;i<h;i++) {
            e[i][i+1] = true;
            e[i+1][i] = true;
        }
        int sMax = (n-1)*n/2;
        int[][] b = new int[sMax][2];
        int s = 0;
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                if(!e[i][j]) {
                    b[s][0] = i;
                    b[s][1] = j;
                    s++;
                }
            }
        }
        Queue<Integer> qu = new ArrayDeque<>();
        int z = 1<<s;
        for(int i=0;i<z;i++) {
            for(int j=0;j<s;j++) {
                int x = b[j][0];
                int y = b[j][1];
                boolean v = (i&(1<<j)) > 0;
                e[x][y] = v;
                e[y][x] = v;

                boolean[] vis = new boolean[n];
                vis[0] = true;
                qu.add(0);
                while(!qu.isEmpty()) {
                    int w = qu.poll();
                    for(int k=0;k<n;k++) {
                        if(e[k][w] && !vis[k]) {
                            vis[k] = true;
                            qu.add(k);
                        }
                    }
                }
                int k=0;
                while(k<n && vis[k]) k++;
                if(k == n) {
                    int[][] r = new int[n][n];
                    for(int g=0;g<n;g++) {
                        for(int c=0;c<n;c++) {
                            r[g][c] = g==c?0:(e[g][c]?1:100000);
                        }
                    }
                    for(int a=0;a<n;a++) {
                        for(int c=0;c<n;c++) {
                            for(int g=0;g<n;g++) {
                                if(r[c][g] > r[c][a] + r[a][g]) {
                                    r[c][g] = r[c][a] + r[a][g];
                                }
                            }
                        }
                    }
                    int max = 0;
                    for(int a=0;a<n;a++) {
                        for(int c=0;c<n;c++) {
                            max = Math.max(max, r[a][c]);
                        }
                    }
                    if(max == d) {
                        for(int a=0;a<n;a++) {
                            for(int c=a+1;c<n;c++) {
                                if(e[a][c]) {
                                    out((a+1)+" "+(c+1));
                                }
                            }
                        }
                        return;
                    }
                }
            }
        }
        out(-1);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
