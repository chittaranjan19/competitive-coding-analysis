import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        Node root = new Node();
        StringBuilder buf = new StringBuilder();
        char[] s = new char[20];
        for (int i = 0; i < n; i++) {
            String u = rd.readLine();
            rev(u, s);
            switch(u.charAt(0)) {
                case '+':
                    add(root, s);
                    break;
                case '-':
                    del(root, s);
                    break;
                default:
                    if(buf.length() > 0) {
                        buf.append('\n');
                    }
                    buf.append(count(root, s, 0, lastIndexOf(s,'1')));
            }
        }
        out(buf);
    }

    private int lastIndexOf(char[] c, char x) {
        int res = c.length-1;
        while(res >= 0) {
            if(c[res] == x) {
                return res;
            }
            res--;
        }
        return res;
    }

    private void rev(String s, char[] d) {
        int n = s.length()-2;
        for(int i=0;i<d.length;i++) {
            d[i] = '0';
        }
        for(int i=0;i<n;i++) {
            d[n-1-i] = s.charAt(i+2);
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private void add(Node n, char[] s) {
        add(n, s, 0);
    }

    private void add(Node n, char[] s, int p) {
        if(p == s.length) {
            add(n.m, s, 1);
        } else {
            int ix = s[p]%2;
            if(n.n[ix] == null) {
                n.n[ix] = new Node();
            }
            add(n.n[ix], s, p+1);
        }
    }

    private void add(int[] m, char[] s, int x) {
        m[s[s.length-1]%2] += x;
    }

    private void del(Node n, char[] s) {
        del(n, s, 0);
    }

    private void del(Node n, char[] s, int p) {
        if(p == s.length) {
            add(n.m, s, -1);
        } else {
            int ix = s[p]%2;
            if(n.n[ix] != null) {
                del(n.n[ix], s, p+1);
            }
        }
    }

    private int count(Node n, char[] pat, int p, int lastOne) {
        if(n == null) {
            return 0;
        }
        int s;
        if(pat.length == p) {
            s = n.sum();
        } else {
            s = 0;
            if(p > lastOne) {
                s += n.sum();
            }
            s += count(n.n[pat[p]%2], pat, p+1, lastOne);
        }
        return s;
    }

    private class Node {
        Node[] n = new Node[2];
        int[] m = new int[2];

        int sum() {
            return m[0] + m[1];
        }
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
