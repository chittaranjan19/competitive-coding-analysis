#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

char s[15][15];
bool v[15][15][4];
bool taken[15][15];
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  for(int i=0;i<n;i++)
    scanf("%s", s[i]);
  int dir = 0, x, y;
  for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
    {
      if(s[i][j] == 'R') dir = 0, x = i, y = j;
      if(s[i][j] == 'D') dir = 1, x = i, y = j;
      if(s[i][j] == 'L') dir = 2, x = i, y = j;
      if(s[i][j] == 'U') dir = 3, x = i, y = j;
    }
  int res = 0;
  while(1)
  {
    if(v[x][y][dir]) break;
    if(!taken[x][y])
      res++;
    v[x][y][dir] = true;
    taken[x][y] = true;
    if(x + dx[dir] < n && x + dx[dir] >= 0 && y + dy[dir] < m && y + dy[dir] >= 0 && s[x + dx[dir]][y + dy[dir]] != '*')
    {
      x += dx[dir];
      y += dy[dir];
    }
    else
    {
      dir++;
      if(dir == 4) dir = 0;
    }
  }
  cout << res;
  return 0;
}
