#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

int n, m;
char a[1111][1111];
int d1[1111][1111], d2[1111][1111];
int a12 = 1e9, a13 = 1e9, a21 = 1e9, a23 = 1e9;
pair<int, int> q1, q2;

int main()
{
	cin >> n >> m;
	for (int i = 0; i <= n + 1; i++){
		for (int j = 0; j < m + 2; j++){
			a[i][j] = '#';
			d1[i][j] = 1e9;
			d2[i][j] = 1e9;
		}
	}
	for (int i = 1; i <= n; i++){
		for (int j = 1; j <= m; j++){
			cin >> a[i][j];
			if (a[i][j] == '1')
				q1 = mp(i, j);
			if (a[i][j] == '2')
				q2 = mp(i, j);
		}
	}
	queue<pair<int, int>> q;
	d1[q1.fs][q1.sc] = 0;
	q.push(q1);
	while (!q.empty()){
		q1 = q.front();
		q.pop();
		int x = q1.sc, y = q1.fs;
		for (int i = -1; i < 2; i++){
			for (int j = -1; j < 2; j++){
				if (i == j && i + j == 0) continue;
				int nx, ny;
				nx = x + i, ny = y + j;
				if (a[ny][nx] == '1'){
					if (d1[ny][nx] > 0)
					{
						d1[ny][nx] = 0;
						q.push(mp(ny, nx));
					}
				}
				if (a[ny][nx] == '.'){
					if (d1[ny][nx] > d1[y][x] + 1)
					{
						d1[ny][nx] = d1[y][x] + 1;
						q.push(mp(ny, nx));
					}
				}
				if (a[ny][nx] == '2'){
					if (a[y][x] == '.')
						a12 = min(a12, d1[y][x] + 1);
					else a12 = 0;
				}
				if (a[ny][nx] == '3'){
					if (a[y][x] == '.')
						a13 = min(a13, d1[y][x] + 1);
					else a13 = 0;
				}
			}
		}
	}
	d2[q2.fs][q2.sc] = 0;
	q.push(q2);
	while (!q.empty()){
		q1 = q.front();
		q.pop();
		int x = q1.sc, y = q1.fs;
		for (int i = -1; i < 2; i++){
			for (int j = -1; j < 2; j++){
				if (i == j && i + j == 0) continue;
				int nx, ny;
				nx = x + i, ny = y + j;
				if (a[ny][nx] == '2'){
					if (d2[ny][nx] > 0)
					{
						d2[ny][nx] = 0;
						q.push(mp(ny, nx));
					}
				}
				if (a[ny][nx] == '.'){
					if (d2[ny][nx] > d2[y][x] + 1)
					{
						d2[ny][nx] = d2[y][x] + 1;
						q.push(mp(ny, nx));
					}
				}
				if (a[ny][nx] == '1'){
					if (a[y][x] == '.')
						a21 = min(a21, d2[y][x] + 1);
					else a21 = 0;
				}
				if (a[ny][nx] == '3'){
					if (a[y][x] == '.')
						a23 = min(a23, d2[y][x] + 1);
					else a23 = 0;
				}
			}
		}
	}
	int ans = 1e9;
	if (a12 != 1e9 && a13 != 1e9){
		ans = min(ans, a12 + a13);
	}
	if (a12 != 1e9 && a23 != 1e9){
		ans = min(ans, a12 + a23);
	}
	if (a21 != 1e9 && a23 != 1e9){
		ans = min(ans, a21 + a23);
	}
	if (ans != 1e9)
		cout << ans;
	else cout << -1;
	return 0;
}