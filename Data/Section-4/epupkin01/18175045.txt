#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};

typedef map<int, bool> Map;
typedef Map::iterator mIter;
typedef pair<int, bool> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef list<Pair> List;
typedef List::iterator lIter;

Map l, r;
Set numb;

int main()
{
    int n, a;
    cin >> n >> a;
    numb.insert(a);
    l.insert(Pair(a, true));
    r.insert(Pair(a, true));
    
    sIter it;
    mIter im;
    for (int i = 1; i < n; ++i)
    {
        scanf("%d", &a);
        
        // right from little, left from bigger
        it = numb.upper_bound(a);
        if (it == numb.end())
        {
            im = r.end();
            (--im)->second = false;
            --it;
        }
        else if (it == numb.begin())
            l.begin()->second = false;
        else if ( l[*it] )
            l[*it] = false;
        else
            r[*(--it)] = false;
        
        printf("%d ", *it);
        
        numb.insert(a);
        l.insert(Pair(a, true));
        r.insert(Pair(a, true));
    }
    cout << '\n';
    
    return 0;
}