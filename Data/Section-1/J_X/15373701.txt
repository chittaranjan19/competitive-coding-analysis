#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

typedef long long ll;

const int maxn = 100000 + 5;
const int INF = 1e9 + 5;

struct treap
{
    int val[maxn], ran[maxn], sz[maxn], ch[maxn][2], cnt[maxn], tot, root;
    ll sum[maxn];

    void newnode(int &rt, int v)
    {
        rt = ++tot;
        val[rt] = v;
        ran[rt] = rand();
        ch[rt][0] = ch[rt][1] = 0;
        sum[rt] = v;
        sz[rt] = cnt[rt] = 1;
    }

    void init()
    {
        tot = root = 0;
    }

    void up(int rt)
    {
        sz[rt] = sz[ch[rt][0]] + sz[ch[rt][1]] + cnt[rt];
        sum[rt] = sum[ch[rt][0]] + sum[ch[rt][1]] + 1LL * cnt[rt] * val[rt];
    }

    void rotate(int &rt, int k)
    {
        int tmp = ch[rt][!k];
        ch[rt][!k] = ch[tmp][k];
        ch[tmp][k] = rt;
        up(rt);
        up(tmp);
        rt = tmp;
    }

    void insert(int &rt, int v)
    {
        if(!rt)
        {
            newnode(rt, v);
        }
        else if(val[rt] == v)
        {
            ++cnt[rt];
            ++sz[rt];
            sum[rt] += v;
        }
        else
        {
            int k = v > val[rt];
            insert(ch[rt][k], v);
            ran[ch[rt][k]] > ran[rt] ? rotate(rt, !k) : up(rt);
        }
    }

    int querynum(int rt, int v)
    {
        if(!rt) return 0;
        return val[rt] <= v ? sz[ch[rt][0]] + querynum(ch[rt][1], v) + 1LL * cnt[rt] : querynum(ch[rt][0], v);
    }

    ll querysum(int rt, int v)
    {
        if(!rt) return 0;
        return val[rt] <= v ? sum[ch[rt][0]] + querysum(ch[rt][1], v) + 1LL * cnt[rt] * val[rt] : querysum(ch[rt][0], v);
    }
} tree;
struct mystr
{
    int x, y;
} a[maxn];

bool cmp1(const mystr &a, const mystr &b)
{
    return a.x > b.x;
}

bool cmp2(const mystr &a, const mystr &b)
{
    return a.y < b.y;
}

bool C(int m, ll mind)
{
    ll tmp1 = tree.querysum(tree.root, m), tmp2 = 1LL * m * tree.querynum(tree.root, m);
    return tmp1 + mind >= tmp2;
}

int main()
{
    srand(time(0));
    int n;
    while(~scanf("%d", &n))
    {
        int A, cf, cm;
        ll m;
        scanf("%d%d%d%I64d", &A, &cf, &cm, &m);
        tree.init();
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", &a[i].x);
            a[i].y = i;
        }
        sort(a + 1, a + n + 1, cmp1);
        ll tmp = 0;
        int i = 0;
        for(i = 1; i <= n && tmp + A - a[i].x <= m; ++i)
        {
            tmp += A - a[i].x;
        }
        --i;
        int min_ = A;
        for(int j = n; j > i; --j)
        {
            min_ = min(min_, a[j].x);
            tree.insert(tree.root, a[j].x);
        }
        int minl = 0, pos = 0;
        ll ans = 0;
        while(i >= 0)
        {
            ll mind = m - tmp;
            int l = min_, r = A + 1;
            while(r - l > 1)
            {
                int mid = (l + r) >> 1;
                C(mid, mind) ? l = mid : r = mid;
            }
            ll tt = 1LL * i * cf + 1LL * l * cm;
            if(tt > ans)
            {
                ans = tt;
                pos = i;
                minl = l;
            }
            tree.insert(tree.root, a[i].x);
            min_ = min(min_, a[i].x);
            tmp -= A - a[i].x;
            --i;
        }
        for(int j = 1; j <= pos; ++j)
        {
            m -= A - a[j].x;
            a[j].x = A;
        }
//        cout << minl << endl;
        for(int j = pos + 1; j <= n; ++j)
        {
            if(a[j].x <= minl)
            {
                m -= minl - a[j].x;
                a[j].x = minl;
            }
        }
        sort(a + 1, a + n + 1, cmp2);
        printf("%I64d\n", ans);
        for(int i = 1; i <= n; ++i)
        {
            printf("%d ", a[i].x);
        }
        puts("");
    }
    return 0;
}
