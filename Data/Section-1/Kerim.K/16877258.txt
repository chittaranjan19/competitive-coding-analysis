#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define oo (1e-9)
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<ll,int> PII;
typedef pair<pair<int,int>,int> PI;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout)
PI arr[MAXN];
vector<PI>s[MAXN<<2];
vector<PI>line[MAXN<<2];
vector<double>cros[MAXN<<2];
void merge(int nd){
	int p=0;
	int q=0;
	int sz=s[nd<<1].size()+s[nd<<1|1].size();
	for(int i=0;i<sz;i++){
		if(p>=s[nd<<1].size())
			s[nd].pb(s[nd<<1|1][q++]);
		else if(q>=s[nd<<1|1].size())
			s[nd].pb(s[nd<<1][p++]);
		else if(s[nd<<1][p]>=s[nd<<1|1][q])
			s[nd].pb(s[nd<<1][p++]);
		else
			s[nd].pb(s[nd<<1|1][q++]);			
	}
}
double intersection(PI x,PI y){
	return double(x.ff.ff-y.ff.ff)/(y.ff.ss-x.ff.ss);
}
void Igloo(int nd){
	line[nd].pb(s[nd][0]);
	cros[nd].pb(oo-0.000000001);
	for(int i=1;i<s[nd].size();i++){
		PI Ox=s[nd][i],Oy=line[nd].back();
		if(Ox.ff.ss<=Oy.ff.ss)
			continue;
		while(line[nd].size()>0 and intersection(Ox,Oy)<cros[nd].back()){
			cros[nd].erase(cros[nd].end()-1);
			line[nd].erase(line[nd].end()-1);
			Oy=line[nd].back();
		}
		cros[nd].pb(double(intersection(Ox,Oy)));
		line[nd].pb(Ox);
	}
}
void build(int nd,int x,int y){
	if(x==y){
		s[nd].pb(arr[x]);
		line[nd].pb(arr[x]);
		cros[nd].pb(oo-0.000000001);
		return;
	}
	int mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);
	merge(nd);Igloo(nd);
}
PII tap(int l,int r,double v,int nd,int x,int y){
	if(l>y or x>r)
		return mp(-imx,-imx);
	if(l<=x and y<=r){
		int pos=upper_bound(all(cros[nd]),v)-cros[nd].begin();pos--;
		ll ans=line[nd][pos].ff.ff+line[nd][pos].ff.ss*ll(v)*1LL;
		return mp(ans,line[nd][pos].ss);
	}
	int mid=(x+y)>>1;
	PII i1=tap(l,r,v,nd<<1,x,mid);
	PII i2=tap(l,r,v,nd<<1|1,mid+1,y);
	return max(i1,i2);
}
int main(){
	int n,q;
	scanf("%d%d",&n,&q);
	for(int i=1;i<=n;i++){
		int a,b;
		scanf("%d%d",&a,&b);
		arr[i]=mp(mp(a,b),i);
	}
	build(1,1,n);
	while(q--){
		int l,r;double t;
		scanf("%d%d%lf",&l,&r,&t);
		printf("%d\n",tap(l,r,t,1,1,n).ss);
	}
	return 0;
}
