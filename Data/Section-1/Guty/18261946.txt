#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

bool puedoComprarHastaC(vector<tint> &a, tint c, tint m)
{
	tint n = a.size();
	tint value = c*(c+1)/2;
	forn(i,n)
		if (a[i] <= c)
			value -= a[i];
	return (value <= m);
}


int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	tint n,m;
	while (cin >> n >> m)
	{
		vector<tint> a (n);
		forn(i,n)
			cin >> a[i];
			
		tint cinf = 0; // le alcanza la plata y no compra ningun juguete				} Indica el ultimo 
		tint csup = 1000000000; // compra todos y mas tambien y no le alcanza la plata 	}  que compramos
		while (csup - cinf > 1)
		{
			tint c = (csup + cinf)/2;
			if (puedoComprarHastaC(a,c,m))
				cinf = c;
			else
				csup = c;
		}
		set<tint> ans;
		forsn(i,1,csup)
			ans.insert(i);
		forn(i,n)
			ans.erase(a[i]);
		cout << ans.size() << endl;
		for (auto x : ans)
			cout << x << " ";
		cout << endl;
			
		
			
			
	}
	return 0;
}



