#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define ls rt << 1
#define rs rt << 1 | 1
#define lson ls, l, mid
#define rson rs, mid + 1, r

using namespace std;

const int maxn = 1000000 + 5;
const int maxh = 20 + 3;

int v[maxn][maxh], c[maxn][maxh], b[maxn], mm[maxn];

void init(int n)
{
    for(int j = 0; (1 << (j + 1)) <= n; ++j)
    {
        for(int i = 1; i + (1 << (j + 1)) - 1 <= n; ++i)
        {
            v[i][j + 1] = max(v[i][j], v[i + (1 << j)][j]);
            c[i][j + 1] = min(c[i][j], c[i + (1 << j)][j]);
        }
    }
}

int rmqmax(int l, int r)
{
    int k = mm[r - l + 1];
    return max(v[l][k], v[r - (1 << k) + 1][k]);
}

int rmqmin(int l, int r)
{
    int k = mm[r - l + 1];
    return min(c[l][k], c[r - (1 << k) + 1][k]);
}

int main()
{
    mm[0] = -1;
    for(int i = 1; i < maxn; ++i) mm[i] = i & (i - 1) ? mm[i - 1] : mm[i - 1] + 1;
    int n, k;
    while(~scanf("%d%d", &n, &k))
    {
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", &v[i][0]);
            v[i][0] *= 100;
        }
        for(int i = 1; i <= n; ++i) scanf("%d", &c[i][0]);
        init(n);
        int j = n;
        for(int i = n; i; --i)
        {
            if(c[i][0] <= v[i][0])
            {
                b[i] = c[i][0];
                j = i - 1;
            }
            else
            {
//                b[i] = max(min(v[j], c[j]), min(v[j + 1], c[j + 1]));
                b[i]= min(rmqmax(i, j), rmqmin(i, j));
                if(j < n) b[i] = max(b[i], min(rmqmax(i, j + 1), rmqmin(i, j + 1)));
            }
        }
        sort(b + 1, b + n + 1);
        long double t = 1.0 * k / n, ans = 0;
        for(int i = 1; i <= n - k + 1; ++i)
        {
            ans += b[i] * t;
            t = t * (n - i - k + 1) / (n - i);
        }
        printf("%.10f\n", (double)ans);
    }
    return 0;
}

