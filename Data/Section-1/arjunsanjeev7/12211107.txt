/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define set(a,b) fill(all(a),b)
#define let(x,a) __typeof(a) x(a)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define piw(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define all(a) (a).begin(),(a).end()
#define sorti(a) sort(all(a))
#define sortd(a) sort(a.rbegin(),a.rend()) 
#define len(s) s.length()
#define sz(s) s.size()
#define endl '\n'
#define nl printf("\n");
#define present1(c,x) ((c).find(x) != (c).end()) 
#define present2(c,x) (find(all(c),x) != (c).end())
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define PLL pair<LL,LL>
#define VI vector<int>
#define SI set<int>
#define VPII vector< PII >
#define SPII set< PII >
#define mod (int)1e9+7
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

string s;

bool check(int start, int end)
{
	int l=end-start+1;
	for(int i=0;i<l/2;i+=2)
	{
		if(s[start+i]!=s[end-i]) return false;
	}
	return true;
}

class Trie
{
public:
	char ch;
	Trie *next[2];
	int cnt;
	int sum;
	Trie(char c)
	{
		ch=c;
		next[0]=next[1]=NULL;
		cnt=0;
	}
};

Trie start('*');
Trie *root=&start;

void addToTrie(string s)
{
	Trie *cur=root;
	rep1(i,len(s))
	{
		char c=s[i];
		if(cur->next[c-'a']==NULL)
		{
			cur->next[c-'a']=new Trie(c);
		}
		cur=cur->next[c-'a'];
	}
	cur->cnt++;
}

int findCount(Trie *node)
{
	if(node==NULL) return 0;
	node->sum=node->cnt+findCount(node->next[0])+findCount(node->next[1]);
	return node->sum;
}

int count(Trie *node)
{
	if(node==NULL) return 0;
	return node->sum;
}

int main()
{
	cin>>s;
	int k;
	cin>>k;
	int l=s.length();
	rep1(i,l)
	{
		rep2(j,i,l-1)
		{
			if(check(i,j))
			{
				addToTrie(s.substr(i,j-i+1));
			}
		}
	}
	findCount(root);
	Trie *node=root;
	string ans;
	while(k)
	{
		if(node!=root)
		{
			ans+=node->ch;
		}
		if(k<=node->cnt)
		{
			break;
		}
		else k-=(node->cnt);
		int l=count(node->next[0]);
		int r=count(node->next[1]);
		if(k<=l)
		{
			node=node->next[0];
		}
		else
		{
			k-=l;
			node=node->next[1];
		}
	}
	cout<<ans<<endl;
	return 0;
}