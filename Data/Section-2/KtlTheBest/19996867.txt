#include <algorithm>
#include <iostream>
#include <vector>
#include <set>
using namespace std;

#define fr first
#define sc second
#define mkp make_pair
#define pb push_back

typedef long long ll;

const ll INF = 1e18;
const ll N = 1e5;

int n, m, k, a[N + 1]; 
ll d[N + 1], mn1 = INF, mn2 = INF, pos;
vector <pair <int, int> > v[N + 1];
bool u[N + 1];
set <pair <ll, int> > st;

void dei(){
	while(st.size()){
		pair <int, int> x = *st.begin();
		st.erase(x);
		for(int i = 0; i < v[x.sc].size(); i ++){
		 	int to = v[x.sc][i].fr;
		 	if(d[to] > d[x.sc] + v[x.sc][i].sc){
		 		d[to] = d[x.sc] + v[x.sc][i].sc;
		 		st.insert(mkp(d[to], to));
		 	}
		}
	}
}

int main(){
	cin >> n >> m >> k;
	for(int i = 0; i < m; ++ i){
		int x, y, c;
		cin >> x >> y >> c;
		v[x].pb(mkp(y, c));
		v[y].pb(mkp(x, c));
	}
	for(int i = 1; i <= n; ++ i){
		d[i] = INF;
	}
	for(int i = 0; i < k; ++ i){
		cin >> a[i];
		d[a[i]] = 0;
		u[a[i]] = 1;
		st.insert(mkp(d[i], a[i]));
	}
	if(k == 0){
		cout << -1;
		return 0;
	}
	dei();
	for(int i = 1; i <= n; ++ i){
		if(u[i]){
			d[i] = INF;
		} else
		if(d[i] == INF){
			pos ++;
		}
	}
	if(pos == n - k){
		cout << -1;
		return 0;
	}
	for(int i = 1; i <= n; ++ i){
		mn1 = min(mn1, d[i]);
	}
	cout << mn1;
	return 0;
}