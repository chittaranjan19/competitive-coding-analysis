#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<ll, ll> Map;
typedef Map::iterator mIter;
typedef pair<ll, ll> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

int n;
ll v, r, h;
Map mp;
mIter it;

//void show1();

int main()
{
    cout.precision(30);
    cout << showpoint;
    
    r = 1;
    cin >> n >> r >> h;
    v = (ll) r * r * h;
    mp.insert(Pair(v, v));
    
    ll sum = v;
    for (int i = 1; i < n; ++i)
    {
        scanf("%I64d%I64d", &r, &h);
        v = (ll) r * r * h;
        it = mp.lower_bound(v);
        if (it == mp.begin())
        {
            mp[v] = v;
            sum = sum < v ? v : sum;
            continue;
        }
        --it;
        sum = max( (mp[v] = v + it->second) , sum);
    }
    
    cout << pi * sum << '\n';
    
    //show1();
    
    return 0;
}