#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

struct Dia
{
	Dia (int x, int y)
	{
		record = x;
		copado = y;
	}
	int record, copado;
};

bool operator < (Dia d1, Dia d2)
{
	if (d1.record != d2.record)
		return ( d1.record < d2.record);
	else
		return (d1.copado < d2.copado);
}

bool operator == (Dia d1, Dia d2)
{
	return (d1.record == d2.record && d1.copado == d2.copado);
}

bool operator > (Dia d1, Dia d2)
{
	if (d1.record != d2.record)
		return ( d1.record > d2.record);
	else
		return (d1.copado > d2.copado);
}


int main()
{
	int n;
	cin >> n;
	vector<Dia> dates;
	forn(i,n)
	{
		int a,b;
		cin >> a >> b;
		dates.push_back(Dia(a,b));
	}
	sort(dates.begin(),dates.end());
	int anterior = 0;
	forn(i,n)
	{
		if (min(dates[i].record,dates[i].copado) >= anterior)
			anterior = min(dates[i].record,dates[i].copado);
		else
			anterior = max(dates[i].record,dates[i].copado);		
	}
	cout << anterior << endl;
	
	
	
	return 0;
}
