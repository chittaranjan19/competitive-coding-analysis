#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

bool tuttiFila (vector<vector<tint> > &a, tint t, tint fila)
{
	bool ans = true;
	tint n = a.size();
	forn(j,n)
		if (j != fila)
			ans &= (a[fila][j] == t);
	return ans;
}

bool tuttiColumna (vector<vector<tint> > &a, tint t, tint columna)
{
	bool ans = true;
	tint n = a.size();
	forn(i,n)
		if (i != columna)
			ans &= (a[i][columna] == t);
	return ans;
}

int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint n;
	while (cin >> n)
	{
		vector<vector<tint> > a (n,vector<tint> (n));
		forn(i,n)
		forn(j,n)
			cin >> a[i][j];
		vector<tint> p (n);
		tint actual = 1;
		while (actual <= n)
		{
			tint r = a.size();
			vector<vector<tint> > aNew (r-1,vector<tint> (r-1));
			if (r == 1)
			{
				forn(i,n)
					if (p[i] == 0)
						p[i] = actual;
				break;
			}
			else
			{
				forn(i,r)
				{
					if (tuttiFila(a,actual,i) && tuttiColumna(a,actual,i))
					{
						//debug(actual);
						tint s = 0,d = 0;
						
						while (d < n && s < i + 1)
						{
							if (p[d] == 0)
								s++;
							d++;
						}
						p[d-1] = actual;
						actual++;
						//debug(i);
						forn(k,r-1)
						forn(j,r-1)
						{
							if (k < i && j < i)
								aNew[k][j] = a[k][j];
							else if (k < i && j >= i)
								aNew[k][j] = a[k][j+1];
							else if (k >= i && j < i)
								aNew[k][j] = a[k+1][j];
							else if (k >= i && j >= i)
								aNew[k][j] = a[k+1][j+1];
						}
						//imprimirVector(p);
						break;
						
					}
				}
			}
			//for (auto fila : aNew)
			//{
			//	for (auto c : fila)
			//		cout << c << " ";
			//	cout << endl;
			//}
			a = aNew;
		}
		forn(i,n)
			cout << p[i] << " ";
		cout << endl;
	}
	return 0;
}



