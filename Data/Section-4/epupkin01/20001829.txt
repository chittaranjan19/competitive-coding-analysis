#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<Pair> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

void Resheto_Eratosfena(bool *pm, int Max_number);

const int S = 100004;
bool pm[S];
ll n;

int main()
{
    cin >> n;
    Resheto_Eratosfena(pm, S - 1);
    
    ll k, m, sq;
    // 1
    for (k = 1; k < S; ++k)
    {
        m = n + k * k;
        sq = sqrt(m);
        if (sq * sq == m)
        {
            cout << 2 * sq * k << ' ' << m + k * k << '\n';
            return 0;
        }
    }
    
    //2
    for (k = 1; k < S; ++k)
    {
        m = n - k * k;
        if (m <= 0) break;
        
        sq = sqrt(m);
        if (sq * sq == m)
        {
            if (m > k*k)
                cout << m - k*k << ' ' << 2 * sq * k << '\n';
            else
                cout << k*k - m << ' ' << 2 * sq * k << '\n';
            return 0;
        }
    }
    
    //3
    for (k = 2; k < S; ++k)
    {
        if (!pm[k])
        {
            m = n / (2 * k);
            if (m * 2 * k == n)
            {
                if (m > k)
                    cout << m*m - k*k << ' ' << m*m + k*k << '\n';
                else
                    cout << k*k - m*m << ' ' << m*m + k*k << '\n';
                return 0;
            }
        }
    }
    
    cout << -1 << '\n';
    
    return 0;
}

void Resheto_Eratosfena(bool *pm, int m)
{
    pm[0] = pm[1] = true;
    for (int j = 4; j <= m; j += 2)
        pm[j] = true;
    for (int i = 3; i * i <= m; i += 2)
        if (!(pm[i]))
            for (int j = i * i; j <= m; j += 2 * i)
                pm[j] = true;
}