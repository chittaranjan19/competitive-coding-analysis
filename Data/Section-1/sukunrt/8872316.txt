#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <sstream>

using namespace std;

#define pb push_back
#define fi first
#define se second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define REP(i, n) for (int i = 0; i < (int) n; ++i)
#define FORD(i, a, b) for (int i = ((int) a); i >= ((int) b); --i)

#define debug(x) cerr << #x" = " << x << '\n';

template <typename T>
inline T sqr( T x ) {
	return x * x;
}

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;

const double EPS = 1e-9;

const int MAXN = 1e5 + 5;
const int MOD = 1e9 + 7;

int add(int x, int y) {
  return (x + y) % MOD;
}

int mult(int x, int y) {
  return x * 1ll * y % MOD;
}



ll dp[1005][20050];
int a[10005];

const int offset= 10005;
int main(){
    ios::sync_with_stdio(false);
    int n;
    cin >> n;
    REP(i, n) cin >> a[i+1];

    for(int i = 1; i <= n; i++){
        dp[i][-a[i] + offset] = 1;
        dp[i][a[i] + offset] = 1;
        for(int j = -10004; j <= 10004; j++){
            dp[i][j+offset] += dp[i-1][j - a[i] + offset];
            dp[i][j+offset] %= MOD;
            dp[i][j+offset] += dp[i-1][j + a[i] + offset];
            dp[i][j+offset] %= MOD;
        }

    }

    ll res = 0;
    REP(i, n){
        res += dp[i+1][offset];
        res %= MOD;
    }

    cout << res << endl;
}
    

        
