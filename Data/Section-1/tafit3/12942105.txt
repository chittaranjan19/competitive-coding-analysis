import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        List<int[]> p = new ArrayList<>(n+1);
        for(int i=0;i<n;i++) {
            int[] a = intarr();
            int[] q = new int[3];
            q[0] = a[0];
            q[1] = a[1];
            q[2] = i+1;
            p.add(q);
        }
        List<Integer> res = solve(p, 100000);
        StringBuilder buf = new StringBuilder();
        for(Integer r: res) {
            if(buf.length() > 0) {
                buf.append(' ');
            }
            buf.append(r);
        }
        out(buf);
    }

    private List<Integer> solve(List<int[]> p, int q) {
        List<Integer> res = new ArrayList<>();
        if(q == 1) {
            Set<Pair> all = new HashSet<>();
            for(int[] g: p) {
                all.add(new Pair(g));
            }
            List<Pair> v = solve(all);
            for(Pair g: v) {
                res.add(g.v[2]);
            }
        } else {
            Map<Pair, List<int[]>> m = new HashMap<>();
            for(int[] g: p) {
                int x = g[0] / q;
                int y = g[1] / q;
                Pair pair = new Pair(x,y);
                List<int[]> u = m.get(pair);
                if(u == null) {
                    u = new ArrayList<>(2);
                    m.put(pair,u);
                }
                u.add(g);
            }
            List<Pair> pairs = solve(m.keySet());
            for(Pair g: pairs) {
                res.addAll(solve(m.get(g), q / 10));
            }
        }
        return res;
    }

    private List<Pair> solve(Set<Pair> p) {
        NavigableMap<Integer, NavigableSet<Pair>> byY = new TreeMap<>();
        for(Pair g: p) {
            NavigableSet<Pair> t = byY.get(g.v[1]);
            if(t == null) {
                t = new TreeSet<>(cmp);
                byY.put(g.v[1], t);
            }
            t.add(g);
        }
        List<Pair> res = new ArrayList<>();
        boolean left = true;
        for(Map.Entry<Integer, NavigableSet<Pair>> e: byY.entrySet()) {
            NavigableSet<Pair> r = e.getValue();
            if(left) {
                res.addAll(r);
            } else {
                res.addAll(r.descendingSet());
            }
            left = !left;
        }
        return res;
    }

    private Comparator<Pair> cmp = new Comparator<Pair>() {
        @Override
        public int compare(Pair a, Pair b) {
            return Integer.compare(a.v[0], b.v[0]);
        }
    };

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    class Pair {
        final int[] v;

        Pair(int a, int b) {
            v = new int[] { a, b };
        }

        Pair(int[] x) {
            v = x;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o instanceof Pair) {
                return Arrays.equals(v, ((Pair) o).v);
            }
            return false;
        }

        public int hashCode() {
            return v != null ? Arrays.hashCode(v) : 0;
        }

        public String toString() {
            return Arrays.toString(v);
        }
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
