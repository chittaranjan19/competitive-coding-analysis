#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

vector<char> aux = {'R','G','B'};


void solution (map<char,tint> &c, set<char> &ans)
{
	if ( (c['R'] + c['G'] + c['B']) == 1 )
	{
		for (auto r : c)
			if (r.second == 1)
				ans.insert(r.first);		
	}
	else 
	{
		for(auto x : aux)
			if (c[x] > 1)
			{
				c[x]-= 1;
				solution(c,ans);
				c[x]+= 1;
			}
		for (auto r1 : aux)
		for (auto r2 : aux)
		for (auto r3 : aux)
			if (r1 != r2 && r1 != r3 && r2 != r3 && c[r1] > 0 && c[r2] > 0)
			{
				c[r1]--; c[r2]--;c[r3]++;
				solution(c,ans);
				c[r1]++; c[r2]++;c[r3]--;
			}
	}
}


int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint n;
	string s;
	while (cin >> n >> s)
	{
		map<char, tint> c;
		forn(i,n)
			c[s[i]]++;
		set<char> ans;
		solution(c,ans);
		for (auto r : ans)
			cout << r;
		cout << endl;
	}
	return 0;
}



