#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <set>
#include <iomanip>
#include <cstring>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector< ii > vii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INF 0x3f3f3f3f
#define EPS 1e-9
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S)) 
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL 
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//__builtin_popcount(m)
//scanf(" %d ", &t);

int n, t;
long double p[3000];
long double cp[3000];
long double bn[2010][2010];


int main(){
    cp[0] = p[0] = 1.0;
    scanf(" %d %Lf %d ", &n, &p[1], &t);
    cp[1] = 1.0 - p[1];
    long double ans = 0.0;
    long double pa = 1.0, pb = 1.0;
    REP(i, 2001) bn[i][0] = 1.0; bn[1][0] = bn[1][1] = 1.0;
    REPP(i, 2, 2010){
        REPP(j, 1, i) bn[i][j] = bn[i-1][j] + bn[i-1][j-1]; bn[i][i] = 1.0;
        p[i] = p[i-1]*p[1];
        cp[i] = cp[i-1]*cp[1];
    }
    
    REP(i, t+1){
        long double I = i;
        long double N = n;
        if(i >= n){
            ans += N*bn[t][i]*p[i]*cp[t-i];
        }
        else{
            ans += I*bn[t][i]*p[i]*cp[t-i];
        }
    }
    printf("%.10Lf\n", ans);
}
