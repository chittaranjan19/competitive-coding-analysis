/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

vector< VI > V,pos,add;
VI marked;
int ans;

void dfs(int u, int h)
{
	ans=max(ans,h);
	marked[u]=1;
	for(int i=0;i<V[u].size();i++)
	{
		int v=V[u][i];
		if(!marked[v])
		{
			dfs(v,h+1);
		}
	}
}

int main()
{
	FastIO();
	int n,k,num;
	cin>>n>>k;
	V.assign(n+1,VI());
	marked.assign(n+1,0);
	pos.assign(k+1,VI(n+1,0));
	add.assign(n+1,VI(n+1,0));
	for(int i=1;i<=k;i++)
	{
		for(int j=1;j<=n;j++)
		{
			cin>>num;
			pos[i][num]=j;
		}
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=i+1;j<=n;j++)
		{
			for(int l=1;l<=k;l++)
			{
				add[i][j]+=1;
				add[j][i]+=1;
				if(pos[l][i]<pos[l][j])
				{
					add[j][i]-=1;
				}
				else if(pos[l][i]>pos[l][j])
				{
					add[i][j]-=1;
				}
			}
			if(add[i][j]==k) V[i].pb(j);
			else if(add[j][i]==k) V[j].pb(i);
		}
	}
	for(int i=1;i<=n;i++)
	{
		marked.assign(n+1,0);
		dfs(i,1);
	}
	cout<<ans<<endl;
	return 0;
}