#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl 

typedef long long tint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int main()
{
	int maxi = 999999;
	int n;
	cin >> n;
	vector<int> errorOrig (n);
	forn(i,n)
	cin >> errorOrig[i];
	vector<int> error1 (n,maxi);
	forn(i,n-1)
	cin >> error1[i];
	vector<int> error2 (n,maxi);
	forn(i,n-2)
	cin >> error2[i];
	sort(errorOrig.begin(), errorOrig.end());
	sort(error1.begin(), error1.end());
	sort(error2.begin(), error2.end());
	int primero = -99;
	int segundo = -99;

	forn(i,n)
	{
		if(errorOrig[i] != error1[i])
		{
			primero = errorOrig[i];
			break;
		}	
	}
	forn(i,n)
	{
		if(error1[i] != error2[i])
		{
			segundo = error1[i];
			break;
		}	
	}
	cout << primero << endl << segundo << endl;
	return 0;
}
