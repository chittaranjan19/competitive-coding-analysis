#include <iostream>
#include<vector>
#include<string>
#include<map>
#include<algorithm>
#include<cmath>
using namespace std;

int main()
{
    int n,i,a,m,k,b,l,j,pod1,pod2,et1,et2,spysk,up,kuda,otvet;
    cin>>n>>m>>k;
    cin>>a>>b;
    if (a%(m*k)==0) pod1=a/(m*k);
    else if (a%(m*k)!=0) pod1=a/(m*k)+1;
    if (b%(m*k)==0) pod2=b/(m*k);
    else if (b%(m*k)!=0) pod2=b/(m*k)+1;
if (pod1-pod2!=0){
    if ((a-(pod1-1)*m*k)%k==0) et1=(a-(pod1-1)*m*k)/k;
    else  et1=(a-(pod1-1)*m*k)/k+1;
    if ((b-(pod2-1)*m*k)%k==0) et2=(b-(pod2-1)*m*k)/k;
    else  et2=(b-(pod2-1)*m*k)/k+1;
    if ((et1-1)*5<=10+(et1-1)) spysk=(et1-1)*5;
    else spysk =10+(et1-1);
    if ((et2-1)*5<=10+(et2-1)) up=(et2-1)*5;
    else up =10+(et2-1);
    if ((abs(pod1-pod2))<=(n-(abs(pod1-pod2)))) kuda=abs(pod1-pod2)*15;
    else kuda=(n-(abs(pod1-pod2)))*15;
    cout<<pod1<<endl;
    cout<<pod2<<endl;
    cout<<kuda<<endl;
    otvet=spysk+up+kuda;
    cout<<otvet;
}
else{
    if ((a-(pod1-1)*m*k)%k==0) et1=(a-(pod1-1)*m*k)/k;
    else  et1=(a-(pod1-1)*m*k)/k+1;
    if ((b-(pod2-1)*m*k)%k==0) et2=(b-(pod2-1)*m*k)/k;
    else  et2=(b-(pod2-1)*m*k)/k+1;
    if (et1>et2){
        if ((et1-et2)*5<=10+(et1-et2)) otvet=(et1-et2)*5;
        else otvet=10+(et1-et2);
    }
    else
    if (et1==et2) otvet=0;
    else
    if (et2>et1){
        if ((et2-et1)*5<=10+(et2-et1)) otvet=(et2-et1)*5;
        else otvet=10+(et2-et1);
    }
    cout<<otvet;
}
    return 0;

}
