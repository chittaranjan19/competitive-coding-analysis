//~  Inshaallah
/*
ID: omarmuh1
PROG: test
LANG: C++
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define pp pop_back
#define pii pair<int ,int>
#define pll pair<ll , ll>
#define mid(x , y)	(x+y)/2
#define sz(x) int(x.size())
#define db		cout << "****" << endl;
#define all(x) 	x.begin() , x.end()
#define lgn 	19
#define N 		100007
#define INF 	1000000007
#define LLINF 	1000000000000000009
#define tr(i, c) for(__typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
#define Help_me  ios_base::sync_with_stdio(false);

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> omar;

template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}

//~ freopen("test.out" , "r" , stdin);
//~ freopen("test.out" , "w",  stdout);

ll a , b , c ,d[N] , h[N] , n , m , rr[N] , a1 , b1;

struct love2{
	ll S , L , R;
};

love2 T[N<<2];

void youthink(ll v , ll l)
{
	T[v].S = h[l]*2LL;
	T[v].L = h[l]*2LL - rr[l];
	T[v].R = h[l]*2LL + rr[l];
}

void thatmycode(ll v)
{
	T[v].S = max(max(T[v<<1].S , T[v<<1|1].S) , T[v<<1].L + T[v<<1|1].R);
	T[v].L = max(T[v<<1].L , T[v<<1|1].L);
	T[v].R = max(T[v<<1].R , T[v<<1|1].R);
}

love2 isthesameas()
{
	love2 tr;
	tr.S = -1;
	tr.L = 0;
	tr.R = 0;
	
	return tr;
}

love2 codeofkerimright(love2 x , love2 y)
{
	if(x.S == -1)	return y;
	if(y.S == -1)	return x;
	
	love2 tr;
	
	tr.S = max(max(x.S , y.S) , x.L + y.R);
	tr.L = max(x.L , y.L);
	tr.R = max(x.R , y.R);
	
	return tr;
}

void form_tree(ll l , ll r , ll v)
{
	if(l == r)
	{
		youthink(v , l);
		return;
	}
	
	form_tree(l , mid(l , r) , v<<1);
	form_tree(mid(l , r)+1 , r , v<<1|1);
	
	thatmycode(v);
}

love2 bul(ll x , ll y , ll l , ll r , ll v)
{
	if(y < l || r < x)
		return isthesameas();
	
	if(x <= l && r <= y)
		return T[v];
	
	return codeofkerimright(bul(x , y , l , mid(l , r) , v<<1) , bul(x , y , mid(l , r)+1 , r , v<<1|1));
}

int main()
{
	scanf("%lld%lld" , &n , &m);
	
	for(ll i = 1 ; i <= n ; i++)	scanf("%lld" , d + i) , rr[i] = rr[i-1] + d[i-1];
	for(ll i = 1 ; i <= n ; i++)	scanf("%lld" , h + i);
	for(ll i = n+1 ; i <= n+n ; i++)	h[i] = h[i-n] , rr[i] = rr[i-1] + d[(i-1 == n ? i-1 : i-n-1)];
	
	form_tree(1 , n+n , 1);
	
	while(m--)
	{
		scanf("%lld%lld" , &a , &b);
		
		a1 = b1 = 0;
		
		if(a <= b)
			a1 = b+1 , b1 = n+a-1;
		else
			a1 = b+1 , b1 = a-1;
			
		printf("%lld\n" , bul(a1 , b1 , 1 , n+n , 1).S);
	}
	
	return 0;
}
//~ YoU cAn SaVe aND lOOk aT My coDe oFFliNE :}
