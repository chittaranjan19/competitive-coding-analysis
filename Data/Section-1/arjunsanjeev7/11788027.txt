/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define set(a,b) fill(all(a),b)
#define let(x,a) __typeof(a) x(a)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define piw(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define all(a) (a).begin(),(a).end()
#define sorti(a) sort(all(a))
#define sortd(a) sort(a.rbegin(),a.rend()) 
#define len(s) s.length()
#define sz(s) s.size()
#define endl '\n'
#define nl printf("\n");
#define present1(c,x) ((c).find(x) != (c).end()) 
#define present2(c,x) (find(all(c),x) != (c).end())
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define PLL pair<LL,LL>
#define VI vector<int>
#define SI set<int>
#define VPII vector< PII >
#define SPII set< PII >
#define mod (int)1e9+7
#define inf INT_MAX

using namespace std;

class UF
{
public:
	VI parent;
	VI rank;
	int num;
	UF(int n)
	{
		parent.assign(n,0);
		rep1(i,n) parent[i]=i;
		rank.assign(n,0);
		num=n;
	}
	int findSet(int n)
	{
		if(n==parent[n]) return n;
		return parent[n]=findSet(parent[n]);
	}
	void Union(int a, int b)
	{
		a=findSet(a);
		b=findSet(b);
		if(a==b) return;
		num--;
		if(rank[a]>rank[b])
		{
			parent[b]=a;
		}
		else
		{
			parent[a]=b;
			if(rank[a]==rank[b]) rank[b]++;
		}
	}
};

int main()
{
	LL n,k,ans=0,num,prev,x;
	cin>>n>>k;
	UF uf(n);
	rep1(i,k)
	{
		cin>>num;
		prev=0;
		while(num--)
		{
			cin>>x;
			if(prev && x!=prev+1)
			{
				ans++;
			}
			else if(prev)
			{
				uf.Union(prev-1,x-1);
			}
			prev=x;
		}
	}
	cout<<ans+uf.num-1<<endl;
	return 0;
}