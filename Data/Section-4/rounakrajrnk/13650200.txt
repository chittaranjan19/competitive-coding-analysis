#include<bits/stdc++.h>
#define ll long long int
#define si(x) scanf("%d",&x);
#define sl(x) scanf("%lld",&x);
#define caset int t; si(t); while(t--)
#define pb(x) push_back(x)

using namespace std;

struct edge{
    vector<int> next;
    vector<int> resi;
};

edge g[100009];

vector<int> ans;

bool visited[100009];

bool dfs(int s,int d)
{
    int i;
    //cout<<s<<" "<<d<<endl;
    visited[s]=1;
    if( s == d ){
        //vector<int> :: iterator it;
       // it=g[s].resi.begin();
        for(i=0;i<(g[s].resi.size());i++)
            ans.push_back(g[s].resi[i]);
        return 1;
    }
    else{
        for(i=0;i<g[s].next.size();i++){
            if(!visited[g[s].next[i]]){
                if(dfs(g[s].next[i],d) == 1){
                   // visited[g[s].next[i]]=1;
                    for(int k=0;k<g[s].resi.size();k++)
                        ans.push_back(g[s].resi[k]);
                    return 1;
                }
            }
        }
    }
    return 0;
}

int min(int a,int b)
{
    return a<b?a:b;
}

int main()
{
   // freopen("in.txt","r",stdin);
    int n,m,q;
    si(n);
    si(m);
    si(q);
    int x,y,i,a;
    for(i=0;i<n-1;i++){
        si(x);
        si(y);
        g[x].next.push_back(y);
        g[y].next.push_back(x);
    }
    for(i=1;i<=m;i++)
    {
        si(x);
        //cout<<x<<" ";
        g[i].resi.pb(x);
    }
    while(q--){
        si(x);
        si(y);
        si(a);
        ans.clear();
        memset(visited,0,sizeof(visited));
       // cout<<x<<" "<<y<<" "<<a<<endl;
        dfs(x,y);
       /* if(ans.size()==0){
                memset(visited,0,sizeof(visited));
            dfs(y,x);
        }*/
        sort(ans.begin(),ans.end());
       // cout<<ans.size()<<endl;
        int l=min(ans.size(),a);
        printf("%d ",l);
        for(int i=0;i<l;i++)
            printf("%d ",ans[i]);
        printf("\n");
        //for(int i=0;i<=n;i++) cout<<visited[i]<<" ";cout<<endl;
    }
    return 0;
}
