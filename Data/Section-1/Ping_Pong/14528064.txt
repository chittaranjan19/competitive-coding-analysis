#include <bits/stdc++.h>
#include <stdlib.h>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <map>
#include <algorithm>

using namespace std;
int n, m;
vector<vector<char> > graph;
vector<int> cat;
vector<vector<bool> > used1;
set<pair<int, int> > used;

bool dfs(int x, int y, int xl, int yl)
{
    used1[x][y] = true;
    //cout << x << " " << y << endl;
    if (used.count({x, y}) == 1)
        return true;
    used.insert({x, y});
    bool b = false;
    if ((x > 0) && ((x - 1 != xl) || (y != yl)) && (graph[x - 1][y] == graph[x][y]))
        b = b || dfs(x - 1, y, x, y);
    if ((x < n - 1) && ((x + 1 != xl) || (y != yl)) && (graph[x + 1][y] == graph[x][y]))
        b = b || dfs(x + 1, y, x, y);
    if ((y > 0) && ((x != xl) || (y - 1 != yl)) && (graph[x][y - 1] == graph[x][y]))
        b = b || dfs(x, y - 1, x, y);
    if ((y < m - 1) && ((x != xl) || (y + 1 != yl)) && (graph[x][y + 1] == graph[x][y]))
        b = b || dfs(x, y + 1, x, y);
    return b;
}

int main()
{
    char c;
    scanf("%d %d", &n, &m);
    vector<char> v;
    vector<bool> v1;
    for (int i = 0; i < n; i++)
        graph.push_back(v);
    for (int i = 0; i < n; i++)
    {
        scanf("%c", &c);
        for (int j = 0; j < m; j++)
        {
            scanf("%c", &c);
            graph[i].push_back(c);
        }
    }
    for (int i = 0; i < n; i++)
    {
        used1.push_back(v1);
        for (int j = 0; j < m; j++)
            used1[i].push_back(false);
    }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
        {
            used.clear();
            if (!used1[i][j])
            {
                if (dfs(i, j, -1, -1))
                {
                    printf("Yes");
                    return 0;
                }
            }
        }
    printf("No");
    return 0;
}