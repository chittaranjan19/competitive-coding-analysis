#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <climits>
#ifdef DEBUG
	#include <ctime>
#endif
using namespace std;

// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(it, n) for(int it = 0; it < n; ++it)
#define loop1(it, n) for(int it = 1; it <= n; ++it)
#define loopft(it, from, to) for(int it = (from); it <= (to); ++it)
#define reverse_iterate(it, cont) for(__typeof((cont).rend()) it = (cont).rbegin(); it != (cont).rend(); ++it)
#define iterate(it, cont) for(__typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define all(cont) (cont).begin(), (cont).end()

typedef unsigned long long ull;
typedef long long ll;

const int INF = INT_MAX;
const int NINF = INT_MIN;
const ll INF_LL = LLONG_MAX;
const ll NINF_LL = LLONG_MIN;
const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, ##args)
	#define rep_rt() printf("[Run time: %.3fs]\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...)
#endif

// end of template

int main() {
#ifdef DEBUG
	freopen("689B.in", "r", stdin);
#endif
    
    int n;
    scanf("%d", &n);
    vi arr_a(n);
    iterate(e, arr_a) {
    	scanf("%d", e);
    	(*e)--;
    }
    vi ans(n, -1);
    que<int> q;
    ans[0] = 0;
    q.pu(0);
    loop(curr_cos, n) {
    	if (ans[curr_cos] == -1) {
    		q.pu(curr_cos);
    		ans[curr_cos] = curr_cos;
    	}
    	int curr_q_sz = q.size();
    	vi checks;
    	while (curr_q_sz--) {
    		int this_idx = q.front();
    		checks.pub(this_idx);
    		q.po();
    		int next = arr_a[this_idx];
    		if (next == this_idx)
    			continue;
    		if (ans[next] == -1) {
    			ans[next] = curr_cos+1;
    			q.pu(next);
    		}
    	}
    	iterate(this_idx_p, checks) {
    		int this_idx = *this_idx_p;
    		if (ans[this_idx-1] == -1) {
    			ans[this_idx-1] = curr_cos+1;
    			q.pu(this_idx-1);
    		}
    		if ((this_idx+1 < n) and (ans[this_idx+1] == -1)) {
    			ans[this_idx+1] = curr_cos+1;
    			q.pu(this_idx+1);
    		}
    	}
    }
    loop(idx, n) {
    	if (idx)
    		printf(" ");
    	printf("%d", ans[idx]);
    }
    printf("\n");

#ifdef DEBUG
    rep_rt();
#endif
    return 0;
}