#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const int MAX_B = 17;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int a[MAX_N];
long long bin[MAX_B];
pair<int, bool> tree[MAX_B][MAX_N * 4];
int cnt_ver = 1, curr = 0;

void ready()
{
	for (int i = 0; i < MAX_B; i++)
		for (int j = 0; j < MAX_N; j++)
			tree[i][j] = make_pair(0, false);
}

void make_tree(int n)
{
	while (cnt_ver < n)
	{
		cnt_ver <<= 1;
		curr++;
	}
	for (int i = 0; i < MAX_B; i++)
	{
		for (int j = 0; j < n; j++)
			tree[i][cnt_ver - 1 + j].first = (a[j] >> i) & 1;
		for (int j = cnt_ver - 2; j >= 0; j--)
			tree[i][j].first = tree[i][j * 2 + 1].first + tree[i][j * 2 + 2].first;
	}
}

void update(int i, int x, int lx, int rx, int l, int r)
{
	if (rx < l || lx > r)
		return;
	else if (lx >= l && rx <= r)
	{
		tree[i][x].first = rx - lx + 1 - tree[i][x].first;
		tree[i][x].second ^= true;
	}
	else
	{
		update(i, x * 2 + 1, lx, (lx + rx) / 2, l, r);
		update(i, x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r);
		if (!tree[i][x].second)
			tree[i][x].first = tree[i][x * 2 + 1].first + tree[i][x * 2 + 2].first;
		else
			tree[i][x].first = rx - lx + 1 - (tree[i][x * 2 + 1].first + tree[i][x * 2 + 2].first);
	}
}

int sum(int i, int x, int lx, int rx, int l, int r, bool b)
{
	if (rx < l || lx > r)
		return 0;
	else if (lx >= l && rx <= r)
	{
		if (!b)
			return tree[i][x].first;
		else
			return rx - lx + 1 - tree[i][x].first;
	}
	else
		return sum(i, x * 2 + 1, lx, (lx + rx) / 2, l, r, b ^ tree[i][x].second) + sum(i, x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r, b ^ tree[i][x].second);
}

int main()
{
	//ifstream ifs("input.in");
	//ofstream ofs("output.out");
	//ios_base::sync_with_stdio(0);
	//cin.tie(0);
	ready();
	int n;
	scanf_s("%d", &n);
	for (int i = 0; i < n; i++)
		scanf_s("%d", &a[i]);
	make_tree(n);
	for (int i = 0; i < MAX_B; i++)
		bin[i] = 1 << i;
	int m;
	scanf_s("%d", &m);
	for (int i = 0; i < m; i++)
	{
		int t;
		scanf_s("%d", &t);
		if (t == 1)
		{
			int l, r;
			long long ans = 0;
			scanf_s("%d %d", &l, &r);
			for (int j = 0; j < MAX_B; j++)
				ans += (bin[j] * (long long)sum(j, 0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + l - 1, cnt_ver - 1 + r - 1, false));
			printf("%I64d\n", ans);
		}
		else
		{
			int l, r, x;
			scanf_s("%d %d %d", &l, &r, &x);
			for (int j = 0; j < MAX_B; j++)
				if ((x >> j) & 1)
					update(j, 0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + l - 1, cnt_ver - 1 + r - 1);
		}
	}
	return 0;
}