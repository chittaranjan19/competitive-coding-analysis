#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _c(int k, int n){
	int nm = 1, dm = 1;
	while (k){
		nm *= n;
		dm *= k;
		n--, k--;
	}
	return nm / dm;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 2e5 + 10, lg = 20;
ll mod = 1e9 + 7;

int n1, n2, k;
int dp[1111][1111][11][2];
string s1, s2;

int main()
{
	cin >> n1 >> n2 >> k;
	cin >> s1 >> s2;
	for (int i = 0; i <= n1; i++){
		for (int j = 0; j <= n2; j++){
			for (int cnt = 1; cnt <= k; cnt++){
				if (s1[i] == s2[j]){
					dp[i + 1][j + 1][cnt+1][1] = max(max(dp[i][j][cnt][0]+1, 0), dp[i + 1][j + 1][cnt+1][1]);
					dp[i + 1][j + 1][cnt][1] = max(max(dp[i][j][cnt][1] + 1, 0), dp[i + 1][j + 1][cnt][1]);
				}
				dp[i + 1][j][cnt][0] = max(max(dp[i][j][cnt][0], dp[i][j][cnt][1]), dp[i + 1][j][cnt][0]);
				dp[i][j + 1][cnt][0] = max(max(dp[i][j][cnt][0], dp[i][j][cnt][1]), dp[i][j + 1][cnt][0]);
				//cout << i << ' ' << j << ' ' << cnt << " = " << dp[i][j][cnt][0] << ' ' << dp[i][j][cnt][1] << endl;
			}
		}
	}
	cout << max(dp[n1][n2][k][0], dp[n1][n2][k][1]);
	return 0;
}