//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 100010, MAXK = 310, INF = 0x3f3f3f3f;

int N, M, S, E;
int A[MAXN], B[MAXN];
vector<int> ind[MAXN];
int dp[MAXK];	//dp[last position in A][make the operation j times] = min deleted position in B

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	cin >> N >> M >> S >> E;
	for (int i = 1; i <= N; i++) {
		cin >> A[i];
	}
	for (int i = 1; i <= M; i++) {
		cin >> B[i];
		ind[B[i]].push_back(i);
	}
	fillchar(dp, 63);
	int ans = 0;
	dp[0] = 0;
	for (int i = 1; i <= N; i++) {
		//update the DP array. this is the last one
		for (int j = MAXK - 2; j >= 0; j--) {
			//let's update this in terms of previous guys
			int a = A[i];
			vector<int>::iterator it = lower_bound(ind[a].begin(), ind[a].end(), dp[j]);
			if (it == ind[a].end()) {
				continue;
			}
			int t = *it + 1;
			if (dp[j + 1] > t) {
				dp[j + 1] = t;
			}
		}
		for (int j = 1; j < MAXK; j++) {
			//update ans
			if (j * E + i + dp[j] - 1 <= S && ans < j) {
				ans = j;
			}
		}
	}
	printf("%d\n", ans);
}