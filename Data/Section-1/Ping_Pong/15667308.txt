#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-9;

typedef struct
{
    long long x;
    long long y;
    long long dist;
    long long num;
} point;

bool comp(point a, point b)
{
    return a.dist < b.dist;
}

int main()
{
	//ifstream ifs("a.in");
	//ofstream ofs("a.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	long long n;
	cin >> n;
	point a[n];
	for (long long i = 0; i < n; i++)
    {
        cin >> a[i].x >> a[i].y;
        a[i].num = i;
    }
    long long x1 = a[0].x, y1 = a[0].y;
    for (long long i = 0; i < n; i++)
        a[i].dist = (a[i].x - x1) * (a[i].x - x1) + (a[i].y - y1) * (a[i].y - y1);
    sort(a, a + n, comp);
    for (long long i = 2; i < n; i++)
    {
        long double d1 = sqrt((long double)a[i].dist);
        long double d2 = sqrt((long double)a[1].dist);
        long double d3 = sqrt((long double)((a[i].x - a[1].x) * (a[i].x - a[1].x) + (a[i].y - a[1].y) * (a[i].y - a[1].y)));
        if (d2 + d3 - d1 > eps)
        {
            cout << a[0].num + 1 << " " << a[1].num + 1 << " " << a[i].num + 1;
            return 0;
        }
    }
	return 0;
}