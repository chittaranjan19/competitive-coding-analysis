#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

LL solve1(LL a, LL b, LL c)
{
  LL sum = a + b + c;
  LL cnt = min(a, min(b, c));
  a -= cnt, b -= cnt, c -= cnt;
  cnt *= 3;
  LL tmp = max(a, max(b, c));
  if(c == tmp) cnt += tmp * 3;
  else if(b == tmp) cnt += (tmp - 1) * 3 + 2;
  else cnt += (tmp - 1) * 3 + 1;
  return cnt - sum;
}

LL solve2(LL a, LL b, LL c)
{
  LL sum = a + b + c;
  c = max(0LL, c - 1);
  LL cnt = min(a, min(b, c));
  a -= cnt, b -= cnt, c -= cnt;
  cnt *= 3;
  LL tmp = max(a, max(b, c));
  if(c == tmp) cnt += tmp * 3;
  else if(b == tmp) cnt += (tmp - 1) * 3 + 2;
  else cnt += (tmp - 1) * 3 + 1;
  return cnt + 1 - sum;
}

LL solve3(LL a, LL b, LL c)
{
  LL sum = a + b + c;
  c = max(0LL, c - 1);
  b = max(0LL, b - 1);
  LL cnt = min(a, min(b, c));
  a -= cnt, b -= cnt, c -= cnt;
  cnt *= 3;
  LL tmp = max(a, max(b, c));
  if(c == tmp) cnt += tmp * 3;
  else if(b == tmp) cnt += (tmp - 1) * 3 + 2;
  else cnt += (tmp - 1) * 3 + 1;
  return cnt + 2 - sum;
}

int main()
{
  LL a, b, c;
  cin >> a >> b >> c;
  if(max(a, max(b, c)) == 1)
  {
    cout << 0;
    return 0;
  }
  LL ans = INF_LL;
  ans = min(ans, solve1(a, b, c));
  ans = min(ans, solve2(a, b, c));
  ans = min(ans, solve3(a, b, c));
  cout << ans;
  return 0;
}
