#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _gcd(int a, int b, int & x, int & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	int _x1, _y1;
	int d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

int _cnt = 0;

vector<int> factor(int n){
	vector<int> f;
	for (int i = 2; i*i <= n; i++){
		if (n % i != 0) continue;
		while (n % i == 0){
			n /= i;
			f.push_back(i);
		}
	}
	if (n != 1)
		f.push_back(n);
	sort(f.begin(), f.end());
	return f;
}

vector<int> _factor(int n){
	vector<int> f;
	for (int i = 2; i*i <= n; i++){
		if (n % i != 0) continue;
		f.push_back(i);
		n /= i;
		while (n % i == 0){
			n /= i;
			f[f.size() - 1] *= i;
		}
	}
	if (n != 1)
		f.push_back(n);
	sort(f.begin(), f.end());
	return f;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 20;
ll mod = 1e9 + 7;
int n, k;
int c[1000];
bool can[1000];
bool _can[1000][1000];
int y[10] = { -3, 0, 0, 0, -1, -1, -1, -2, -2, -2 };
int x[10] = { -1, 0, -1, -2, 0, -1, -2, 0, -1, -2 };
int main()
{
	int n;
	cin >> n;
	ll a;
		string s;
		cin >> s;
		int lf = x[s[0]-'0'], rt = x[s[0]-'0'], tp = y[s[0]-'0'], bt = y[s[0]-'0'];
		bool ok = 1;
		for (int i = 0; i < n; i++){
			lf = max(lf, x[s[i] - '0']);
			rt = min(rt, x[s[i] - '0']);
			tp = max(tp, y[s[i] - '0']);
			bt = min(bt, y[s[i] - '0']);
			int dx = abs(rt - lf), dy = abs(tp - bt);
			if (max(dx, dy) == 3 || (dx == dy && dx == 2))
				ok = 0;
		}
		if (ok)
			cout << "NO";
		else cout << "YES";

	return 0;
}