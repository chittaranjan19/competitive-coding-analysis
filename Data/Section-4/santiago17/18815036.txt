#include <bits/stdc++.h>

using namespace std;

const int MAX = 100005;

vector<bool> visited(MAX, false);
vector<short> type(MAX, 0);
vector<int> parent(MAX, 0);
vector<int> graph[MAX];
vector<int> component[MAX];
queue<int> o1, o2;

bool DFS(int node) {
    stack<int> st;
    st.push(node);
    while(!st.empty()) {
        int p = st.top();
        st.pop();
        if(visited[p])
            continue;
        visited[p] = true;
        if(parent[p] == 0)
            type[p] = 1;
        else
            type[p] = (type[parent[p]] % 2) + 1;
        for (int i = 0; i < graph[p].size(); ++i) {
            int t = graph[p][i];
            if(!visited[t]) {
                parent[t] = p;
                st.push(t);
            }
            else if(t != parent[p] && type[t] == type[p])
                return false;
        }
        if(type[p] == 1)
            o1.push(p);
        else
            o2.push(p);
    }

    return true;
}

int main() {
    int n, m;
    bool possible = true;
    scanf("%d %d", &n, &m);
    for (int i = 0; i < m; ++i) {
        int a, b;
        scanf("%d %d", &a, &b);
        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    for (int i = 1; i <= n && possible; ++i) {
        if(!visited[i])
            possible = DFS(i);
    }
    if(possible) {
        printf("%d\n", o1.size());
        while(!o1.empty()) {
            printf("%d ", o1.front());
            o1.pop();
        }
        printf("\n%d\n", o2.size());
        while(!o2.empty()) {
            printf("%d ", o2.front());
            o2.pop();
        }
    }
    else
        printf("-1");

    return 0;
}