import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemD {
    BufferedReader rd;

    ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] nm = intarr();
        int n = nm[0];
        int m = nm[1];
        int[][] a = new int[m][];
        int[] out = new int[n];
        List<List<Integer>> e = new ArrayList<>(n);
        for(int i=0;i<n;i++) {
            e.add(new ArrayList<>(4));
        }
        for(int i=0;i<m;i++) {
            a[i] = intarr();
            a[i][0]--;
            a[i][1]--;
            out[a[i][0]]++;
            List<Integer> u = e.get(a[i][1]);
            u.add(a[i][0]);
        }

        Set<Integer> cand = new HashSet<>();
        for(int i=0;i<n;i++) {
            if(out[i] == 0) {
                cand.add(i);
            }
        }
        List<Integer> order = new ArrayList<>();
        while(order.size() < n) {
            Set<Integer> s = cand;
            if(s.size() != 1) {
                break;
            }
            int v = s.iterator().next();
            order.add(v);
            cand = new HashSet<>();
            for(Integer y: e.get(v)) {
                out[y]--;
                if(out[y] <= 0) {
                    cand.add(y);
                }
            }
        }
        int res;
        if(order.size() == n) {
            Set<Pair> ps = new HashSet<>();
            for(int i=1;i<order.size();i++) {
                ps.add(new Pair(order.get(i), order.get(i-1)));
            }
            for(res = 0; res < m; res++) {
                ps.remove(new Pair(a[res]));
                if(ps.isEmpty()) {
                    res++;
                    break;
                }
            }
        } else {
            res = -1;
        }
        out(res);
    }

    class Pair {
        final int[] v;

        Pair(int a, int b) {
            v = new int[] { a, b };
        }

        Pair(int[] x) {
            v = x;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o instanceof Pair) {
                return Arrays.equals(v, ((Pair) o).v);
            }
            return false;
        }

        public int hashCode() {
            return v != null ? Arrays.hashCode(v) : 0;
        }

        public String toString() {
            return Arrays.toString(v);
        }
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
