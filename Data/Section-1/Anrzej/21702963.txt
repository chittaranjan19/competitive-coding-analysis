#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 5e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

ld f(ld x){
	return (x + 1) / (x * 2 + x*x);
}

int n;

ll s[222], d[222];
pair<ll, ll > ans[222];

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++){
		cin >> s[i] >> d[i];
	}
	vector<pair<ll, ll> > processed;
	processed.push_back(mp(s[0], s[0] + d[0]-1));
	ans[0] = processed[0];
	processed.push_back(mp(0, 0));
	processed.push_back(mp(2e18, 2e18));
	for (int i = 1; i < n; i++){
		sort(processed.begin(), processed.end());
		ll start = s[i], end = s[i] + d[i] - 1;
		bool ok = 1;
		for (int j = 0; j < processed.size(); j++){
			if (processed[j].fs <= start && processed[j].sc >= start) ok = 0;
			if (processed[j].fs <= end && processed[j].sc >= end) ok = 0;
		}
		if (ok){
			processed.push_back(mp(start, end));
			ans[i] = mp(start, end);
		}
		else{
			for (int j = 0; j < processed.size()-1; j++){
				ll _start = processed[j].sc + 1, _end = processed[j + 1].fs - 1;
				if ((_end - _start) >= d[i]){
					processed.push_back(mp(_start, _start + d[i] - 1));
					ans[i] = mp(_start, _start + d[i] - 1);
					break;
				}
			}
		}
	}
	for (int i = 0; i < n; i++){
		cout << ans[i].fs << ' ' << ans[i].sc << endl;
	}
	return 0;
}