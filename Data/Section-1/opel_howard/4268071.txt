#include <cstdio>
#include <cstring>
#include <string>
#include <iostream>
#include <map>

using namespace std;

int toInt(char *we, int p) {
  int i, res = 0;

  for (i = 0; i < p; ++i) {
    res *= 10;
    res += (int)(we[i]-'0');
  }
  return res;
}

int baca(char *we, int size) {
  if (NULL == fgets(we, size, stdin)) return EOF;
  int p = strlen(we);
  if (we[p-1] == '\n') { we[p-1] = '\0'; --p; }
  return p;
}

bool stop;
char masukan[50005];
int pm;
map<pair<int,int>,string> tabel;

string dp(int id, int ib) {
  if (id+1 == ib) {
    char we[2];

    we[1] = '\0';
    we[0] = masukan[id];

    return (string)we;

  } else if (id < ib) {
    if (tabel.count(make_pair(id,ib))) return tabel[make_pair(id,ib)];

    string res, tem;
    int arr[26][2];
    size_t umak;
    memset(arr, -1, sizeof(arr));

    for (int i = id; i < ib; ++i) {
      if (arr[(int)(masukan[i]-'a')][0] == -1)
        arr[(int)(masukan[i]-'a')][0] = i;
      arr[(int)(masukan[i]-'a')][1] = i;
    }

    umak = 0;
    for (int i = 0; i < 26; ++i)
      if (arr[i][0] != -1) { // ada karakter itu

        if (arr[i][0] == arr[i][1]) { // karakter tunggal
          if (umak < (size_t)1) {
            umak = 1;
            res = (char)(i+(int)'a');
          }

        } else { // karakter tidak tunggal
          tem = dp(arr[i][0]+1, arr[i][1]);

          if (stop) { // sudah lebih dari 100
            tabel[make_pair(id,ib)] = tem;
            return tem;
          }
          if (umak < tem.size()+2) {
            umak = tem.size();
            res = (char)(i+(int)'a')+tem+(char)(i+(int)'a');
          }
        }
      }

    if (umak > (size_t)100) stop = true;

    tabel[make_pair(id,ib)] = res;
    return res;

  } else // kasus tidak valid
    return "";
}

int main(int argc, char *argv[]) {
  string ha;
  int p;

  pm = baca(masukan, 50005);
  stop = false;
  ha = dp(0, pm);

  p = (int)ha.size();

  if (p > 100) {
    if (p % 2 == 1) {
      ha[p/2] = '.';
      for (int i = (p-100)/2; i < 101+((p-100)/2); ++i)
        if (ha[i] != '.') printf("%c", ha[i]);
    } else
      for (int i = (p-100)/2; i < 100+((p-100)/2); ++i)
        printf("%c", ha[i]);
    printf("\n");
  } else
    cout << ha << endl;

  return 0;
}