import java.io.BufferedInputStream;
import java.util.Scanner;

/**
 * Created by leen on 8/12/16.
 */
public class _706C {

    static final long INF = Long.MAX_VALUE;

    public static void main(String[] args) {
        Scanner scan = new Scanner(new BufferedInputStream(System.in, 1024 * 64));
        int n = scan.nextInt();
        int[] c=new int[n];
        for(int i = 0; i < n; i++)
            c[i] = scan.nextInt();
        scan.nextLine();
        String[] s = new String[n];
        for(int i = 0; i < n; i++)
            s[i] = scan.nextLine();
        solve(n,s,c);
    }

    static void solve(int n, String[] s, int[] c) {
        String[] rs = new String[n];
        for(int i = 0; i < n; i++)
            rs[i] = reverse(s[i]);

        long[][] dpTab = new long[n][2];
        dpTab[0][0] = 0;
        dpTab[0][1] = c[0];

        for(int i = 1; i < n; i++) {
            dpTab[i][0] = INF;
            dpTab[i][1] = INF;
            if(s[i].compareTo(s[i-1])>=0 && dpTab[i-1][0]!= INF)
                dpTab[i][0] = dpTab[i-1][0];
            if(s[i].compareTo(rs[i-1])>=0 && dpTab[i-1][1]!= INF)
                dpTab[i][0] = Math.min(dpTab[i][0], dpTab[i-1][1]);
            if(rs[i].compareTo(s[i-1])>=0 && dpTab[i-1][0]!= INF)
                dpTab[i][1] = dpTab[i-1][0] + c[i];
            if(rs[i].compareTo(rs[i-1])>=0 && dpTab[i-1][1]!= INF)
                dpTab[i][1] = Math.min(dpTab[i][1], dpTab[i-1][1] + c[i]);
        }

        long ans = Math.min(dpTab[n-1][0], dpTab[n-1][1]);
        if(ans == INF)
            ans = -1;
        System.out.println(ans);
    }

    static String reverse(String str) {
        char[] c = new char[str.length()];
        for(int i = 0; i < str.length(); i++)
            c[i] = str.charAt(str.length() - 1 - i);
        return new String(c);
    }
}
