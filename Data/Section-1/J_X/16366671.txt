#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>

using namespace std;

typedef long long ll;

const int maxn = 1000 + 5;

//int dp[maxn][maxn], n;
//ll a[maxn];
//
//int dfs(int f, int s)
//{
//    if(~dp[f][s]) return dp[f][s];
//    int &res = dp[f][s];
//    res = 2;
//    ll ff = a[f] / b, ss = a[s] / b;
//    int k = lower_bound(a, a + n, a[s] / b + a[f] / b) - a;
//    if(k < n && a[k] == s + f) res = dfs()
//}

int a[maxn];
map<int, int> mp;

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        for(int i = 0; i < n; ++i) scanf("%d", &a[i]);
//        for(int i = 0; i < n; ++i) a[i] = 1;
        int ans = 2;
        for(int i = 0; i < n; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                if(i == j) continue;
                mp.clear();
                int tmp = 2;
                for(int k = 0; k < n; ++k) if(i != k && j != k) ++mp[a[k]];
                int f = a[i], s = a[j];
                while(mp[f + s])
                {
                    ++tmp;
                    s += f;
                    f = s - f;
                    --mp[s];
                }
                ans = max(ans, tmp);
            }
        }
        printf("%d\n", ans);
    }
    return 0;
}
