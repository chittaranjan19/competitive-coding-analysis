	import java.io.*;
	import java.util.*;
	
	public class E{
		public static void main(String[] args) {
			FastScannerE sc = new FastScannerE(System.in);
			
			int N = sc.nextInt();
			int M = sc.nextInt();
			
			ArrayList<Integer> comp = new ArrayList<>();
			HashMap<Integer, LinkedList<Integer>> power = new HashMap<>();
			ArrayList<Socket> socket = new ArrayList<>();
			 
			for(int i = 0 ; i < N ; i++){
				int tmp = sc.nextInt();
				LinkedList<Integer> list = new LinkedList<>();
				if(power.containsKey(tmp)){
					list = power.get(tmp);
					list.add(i);
				}
				else{
					list.add(i);
					power.put(tmp, list);
				}
				comp.add(tmp);
			}
			
			for(int i = 0 ; i < M ; i++){
				socket.add(new Socket(i, sc.nextInt()));
			}
			
			Collections.sort(socket);
			
			int pc = 0;
			int adapter = 0;
			
			int[] pcs = new int[N];
			int[] adapters = new int[M];
			
	//		System.out.println("size of power is " + power.size());
			
	//		for(Integer it : power.keySet()){
	//			System.out.println(it);
	//		}
			
			for(Socket sock : socket){
	//			System.out.println("Sock with idx " + sock.idx + " and power " + sock.power);
				int pom = sock.power;
				int ctr = 0;
				while(pom != 0){
	//				System.out.println("pom = " + pom);
					if(power.containsKey(pom)){
						LinkedList<Integer> list = power.get(pom);
						pcs[list.poll()] = sock.idx+1;
						if(list.isEmpty()) power.remove(pom);
						pc++;
						adapter+=ctr;
						adapters[sock.idx] = ctr;
						break;
					}
					
					ctr++;
					if(pom%2 == 0) pom/=2;
					else if(pom!=1)pom = pom/2 + 1;
					else pom = pom/2;
				}
	//			System.out.println("over");
			}
			
			System.out.println(pc + " " + adapter);
			for(int i = 0 ; i < M ; i++){
				System.out.print(adapters[i]);
				if(i != M-1) System.out.print(" ");
			}
			System.out.println();
			
			for(int i = 0 ; i < N ; i++){
				System.out.print(pcs[i]);
				if(i != N-1) System.out.print(" ");
			}
			System.out.println();
		}
	}
	
	class Computer{
		
	}
	
	class Socket implements Comparable<Socket>{
		int idx;
		int power;
		
		public Socket(int id, int pow){
			idx = id;
			power = pow;
		}
	
		@Override
		public int compareTo(Socket arg0) {
			return power - arg0.power;
		}
	}
	
	class FastScannerE{
	    private InputStream stream;
	    private byte[] buf = new byte[1024];
	    private int curChar;
	    private int numChars;
	    private SpaceCharFilter filter;
	
	    public FastScannerE(InputStream stream)
	    {
	        this.stream = stream;
	    }
	
	    public int read()
	    {
	        if (numChars == -1)
	            throw new InputMismatchException();
	        if (curChar >= numChars)
	        {
	            curChar = 0;
	            try
	            {
	                numChars = stream.read(buf);
	            } catch (IOException e)
	            {
	                throw new InputMismatchException();
	            }
	            if (numChars <= 0)
	                return -1;
	        }
	        return buf[curChar++];
	    }
	
	    public int nextInt()
	    {
	        int c = read();
	        while (isSpaceChar(c))
	            c = read();
	        int sgn = 1;
	        if (c == '-')
	        {
	            sgn = -1;
	            c = read();
	        }
	        int res = 0;
	        do
	        {
	            if (c < '0' || c > '9')
	                throw new InputMismatchException();
	            res *= 10;
	            res += c - '0';
	            c = read();
	        } while (!isSpaceChar(c));
	        return res * sgn;
	    }
	
	    public String next()
	    {
	        int c = read();
	        while (isSpaceChar(c))
	            c = read();
	        StringBuilder res = new StringBuilder();
	        do
	        {
	            res.appendCodePoint(c);
	            c = read();
	        } while (!isSpaceChar(c));
	        return res.toString();
	    }
	    
	    public String nextLine()
	    {
	        int c = read();
	        StringBuilder res = new StringBuilder();
	        do
	        {
	            res.appendCodePoint(c);
	            c = read();
	        } while (!isLineEndChar(c));
	        return res.toString();
	    }    
	    
	    public double nextDouble() {
	        int c = read();
	        while (isSpaceChar(c))
	            c = read();
	        int sgn = 1;
	        if (c == '-') {
	            sgn = -1;
	            c = read();
	        }
	        double res = 0;
	        while (!isSpaceChar(c) && c != '.') {
	            if (c == 'e' || c == 'E')
	                return res * Math.pow(10, nextInt());
	            if (c < '0' || c > '9')
	                throw new InputMismatchException();
	            res *= 10;
	            res += c - '0';
	            c = read();
	        }
	        if (c == '.') {
	            c = read();
	            double m = 1;
	            while (!isSpaceChar(c)) {
	                if (c == 'e' || c == 'E')
	                    return res * Math.pow(10, nextInt());
	                if (c < '0' || c > '9')
	                    throw new InputMismatchException();
	                m /= 10;
	                res += (c - '0') * m;
	                c = read();
	            }
	        }
	        return res * sgn;
	    }
	    
	    public long nextLong() {
	        int c = read();
	        while (isSpaceChar(c))
	            c = read();
	        int sgn = 1;
	        if (c == '-') {
	            sgn = -1;
	            c = read();
	        }
	        long res = 0;
	        do {
	            if (c < '0' || c > '9')
	                throw new InputMismatchException();
	            res *= 10;
	            res += c - '0';
	            c = read();
	        } while (!isSpaceChar(c));
	        return res * sgn;
	    }
	    
	    public boolean isSpaceChar(int c)
	    {
	        if (filter != null)
	            return filter.isSpaceChar(c);
	        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	    }
	    
	    public boolean isLineEndChar(int c)
	    {
	        if (filter != null)
	            return filter.isSpaceChar(c);
	        return c == '\n' || c == '\r' || c == -1;
	    }
	
	    public interface SpaceCharFilter
	    {
	        public boolean isSpaceChar(int ch);
	    }
	}