#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int maxn = 300 + 5;
const int INF = 1 << 29;

int n, m, p, bit1[maxn], bit2[maxn], dp[maxn][maxn];
vector<int> vec[maxn];

void init()
{
    for(int i = 1; i < maxn; ++i) bit1[i] = bit2[i] = INF;
}

void update(int *bit, int i, int v)
{
    while(i < maxn)
    {
        bit[i] = min(bit[i], v);
        i += i & -i;
    }
}

int query(int *bit, int i)
{
    int ret = INF;
    while(i)
    {
        ret = min(ret, bit[i]);
        i -= i & -i;
    }
    return ret;
}

int myhash(int x, int y)
{
    return x * m + y;
}

int main()
{
    scanf("%d%d%d", &n, &m, &p);
    for(int i = 0; i < n; ++i)
    {
        for(int j = 0; j < m; ++j)
        {
            int x;
            scanf("%d", &x);
            vec[x].push_back(myhash(i, j));
        }
    }
    vec[0].push_back(myhash(0, 0));
    for(int i = 1; i <= p; ++i)
    {
        sort(vec[i].begin(), vec[i].end());
        init();
        for(int j = 0, k = 0; j < vec[i].size(); ++j)
        {
            int x = vec[i][j] / m + 1, y = vec[i][j] % m + 1;
            while(k < vec[i - 1].size() && vec[i - 1][k] / m < x)
            {
                int xx = vec[i - 1][k] / m + 1, yy = vec[i - 1][k] % m + 1;
                update(bit1, yy, dp[xx][yy] - xx - yy);
                update(bit2, maxn - yy, dp[xx][yy] - xx + yy);
                ++k;
            }
            dp[x][y] = min(query(bit1, y) + x + y, query(bit2, maxn - y) + x - y);
        }
        init();
        for(int j = vec[i].size() - 1, k = vec[i - 1].size() - 1; j >= 0; --j)
        {
            int x = vec[i][j] / m + 1, y = vec[i][j] % m + 1;
            while(k >= 0 && vec[i - 1][k] / m + 1 >= x)
            {
                int xx = vec[i - 1][k] / m + 1, yy = vec[i - 1][k] % m + 1;
                update(bit1, yy, dp[xx][yy] + xx - yy);
                update(bit2, maxn - yy, dp[xx][yy] + xx + yy);
                --k;
            }
            dp[x][y] = min(dp[x][y], min(query(bit1, y) - x + y, query(bit2, maxn - y) - x - y));
            if(i == p) printf("%d\n", dp[x][y]);
        }
    }
    return 0;
}
