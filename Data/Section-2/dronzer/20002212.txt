
import java.util.*;
import java.io.*;

/**
 *
 * @author vineet
 */

public class B707 {
    
    public static int mod = 1000000007;
    public static void main(String[] args) {
 
        InputReader in = new InputReader(System.in);
        PrintWriter w = new PrintWriter(System.out);
        
        int n = in.nextInt();
        int m = in.nextInt();
        int k = in.nextInt();
        ArrayList<HashMap<Integer,Integer>> g = new ArrayList<>();
        
        for(int i=0;i<=n;i++) g.add(new HashMap<>());
        
        for(int i=0;i<m;i++){
            int u = in.nextInt();
            int v = in.nextInt();
            int l = in.nextInt();
            HashMap<Integer,Integer> map = new HashMap<>();
            map = g.get(u);
            if(map.containsKey(v)){
                l = Math.min(l, map.get(v));
            }
            map.put(v, l);
            map = g.get(v);
            map.put(u, l);            
        }
        HashSet<Integer> list = new HashSet<>();        
        for(int i=0;i<k;i++){
            int temp = in.nextInt();
            list.add(temp);
        }
        if(k==0 || k==n) w.println("-1");
        else{
            int ans = Integer.MAX_VALUE;
            for(int i=0;i<g.size();i++){
                if(!list.contains(i)){
                    HashMap<Integer,Integer> map = g.get(i);
                    for(int key: map.keySet()){
                        if(list.contains(key)) ans = Math.min(ans, map.get(key));
                    }   
                }
            }
            if(ans==Integer.MAX_VALUE) w.println("-1");
            else w.println(ans);
        }
        w.close();
    }
        
	static class InputReader {

		private final InputStream stream;
		private final byte[] buf = new byte[8192];
		private int curChar, snumChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long nextLong() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int[] nextIntArray(int n) {
			int a[] = new int[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}

		public String readString() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
}    
