#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define maxC 1000007
#define mn 3005
#define pb push_back
#define mp make_pair

using namespace std;
int n, m, s[mn][mn], ans = -maxC, top[mn][2], pot[mn][2], best = 0, one, two, three, four;
vector<int> g[mn], h[mn];
queue<int> q;

void setup()
{
    cin >> n >> m;
    int u, v;
    FOR(i, 1, m)
    {
        cin >> u >> v;
        if (u != v && s[u][v] == 0)
        {
            s[u][v] = 1;
            g[u].pb(v);
            h[v].pb(u);
        }
    }
    FOR(i, 1, n)
    FOR(j, 1, n)
        s[i][j] = -maxC;
}

void bfs(int st)
{
    q.push(st);
    s[st][st] = 0;
    while(!q.empty())
    {
        int u = q.front();
        q.pop();
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int v = g[u][i];
            if (s[st][v] != -maxC)
                continue;
            s[st][v] = s[st][u] + 1;
            q.push(v);
        }
    }
    s[st][st] = -maxC;
    FOR(i, 0, 2)
        top[st][i] = pot[st][i] = st;
}

void getBest()
{
    FOR(st, 1, n)
    {
        FOR(i, 1, n)
        {
            if (s[st][i] >= s[st][top[st][0]])
            {
                top[st][2] = top[st][1];
                top[st][1] = top[st][0];
                top[st][0] = i;
            }
            else
                if (s[st][i] >= s[st][top[st][1]])
                {
                    top[st][2] = top[st][1];
                    top[st][1] = i;
                }
                else
                    if (s[st][i] > s[st][top[st][2]])
                        top[st][2] = i;

        }
        FOR(i, 1, n)
        {
            if (s[i][st] >= s[pot[st][0]][st])
            {
                pot[st][2] = pot[st][1];
                pot[st][1] = pot[st][0];
                pot[st][0] = i;
            }
            else
                if (s[i][st] >= s[pot[st][1]][st])
                {
                    pot[st][2] = pot[st][1];
                    pot[st][1] = i;
                }
                else
                    if (s[i][st] > s[pot[st][2]][st])
                        pot[st][2] = i;

        }
    }
}

void xuly()
{
    FOR(i, 1, n)
        bfs(i);
    getBest();
    FOR(i, 1, n)
    FOR(j, 1, n)
    if (i != j)
    {
        FOR(k, 0, 2)
        FOR(l, 0, 2)
        if (pot[i][k] != top[j][l] && pot[i][k] != i && pot[i][k] != j && top[j][l] != j && top[j][l] != i)
        {
            int sum = s[pot[i][k]][i] + s[i][j] + s[j][top[j][l]];
            if (sum > best)
            {
                best = sum;
                one = pot[i][k];
                two = i;
                three = j;
                four = top[j][l];
            }
        }
    }
    cout << one << ' ' << two << ' ' << three << ' ' << four;
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
