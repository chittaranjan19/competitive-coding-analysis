#include <bits/stdc++.h>

using namespace std;
const int MAXN = 1e6 + 10;

struct union_find {
	int par[MAXN];
	
	int find (int x) {
		return x == par[x] ? x : par[x] = find(par[x]);
	}

	void merge (int x, int y) {
		par[find(x)] = find(y);
	}
} uf;

int N, M;
int A[MAXN];
vector<int> pos[MAXN], val[MAXN];
int ans[MAXN];

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 1; i <= N; i++) {
		scanf("%d", &A[i]);
		uf.par[i] = i;
	}

	for (int i = 1; i <= M; i++) {
		int x, y;
		scanf("%d %d", &x, &y);
		uf.merge(x, y);
	}

	for (int i = N; i >= 1; i--) {
		pos[uf.find(i)].push_back(i);
		val[uf.find(i)].push_back(A[i]);
	}

	for (int i = 1; i <= N; i++) {
		if (i == uf.find(i)) {
			sort(val[i].begin(), val[i].end());
			for (int j = 0; j < pos[i].size(); j++) {
				ans[pos[i][j]] = val[i][j];
			}
		}
	}

	for (int i = 1; i <= N; i++) {
		printf("%d ", ans[i]);
	}
	puts("");
}
