#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int p[300];
int a[300][300];

void dfsmin(int current, vector<bool>& used, vector<int>& indices, vector<int>& values)
{
	if(!used[current])
	{
		used[current] = true;
		indices.push_back(current);
		values.push_back(p[current]);
		for(int i = 0; i < used.size(); ++i)
		{
			if(a[current][i] == 1)
			{
				dfsmin(i, used, indices, values);
			}
		}
	}
}

int main()
{
	int n;
	cin >> n;
	for(int i = 0; i < n; ++i)
	{
		cin >> p[i];
	}
	cin.get();
	string str;
	for(int i = 0; i < n; ++i)
	{
		getline(cin, str);
		for(int j = 0; j < n; ++j)
		{
			if(str[j] == '0')
			{
				a[i][j] = 0;
			}
			if(str[j] == '1')
			{
				a[i][j] = 1;
			}
		}
	}
	vector<bool> used(n);
	for(int i = 0; i < n; ++i)
	{
		vector<int> indices;
		vector<int> values;
		dfsmin(i, used, indices, values);
		sort(indices.begin(), indices.end());
		sort(values.begin(), values.end());
		for(int j = 0; j < indices.size(); ++j)
		{
			p[indices[j]] = values[j];
		}
	}
	for(int i = 0; i < n; ++i)
	{
		cout << p[i] << " ";
	}
	cout << endl;
	return 0;
}