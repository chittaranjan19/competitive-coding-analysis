#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 150;
const int maxc = 26;

int n, len_t, cost[maxn][maxn], graph[maxn][maxn], adj[maxn][maxn];
int cnt[maxn][maxc], present[maxc], a[maxn];
int source, sink;
char t[maxn], s[maxn][maxn];
int dist[maxn], parent[maxn];

int dijkstra()
{
	int i, j;
	for(i=source; i<=sink; i++)
		dist[i] = inf;
	priority_queue<pii, vector<pii>, greater<pii> > pq;
	pq.push(mp(0, source));
	dist[source] = 0;
	while(!pq.empty()){
		int d = pq.top().f;
		int u = pq.top().s;
		pq.pop();
		if(d > dist[u])
			continue;
		for(i=source; i<=sink; i++){
			if(graph[u][i]>0 && (dist[i] > d + cost[u][i])){
				dist[i] = d + cost[u][i];
				parent[i] = u;
				pq.push(mp(dist[i], i));
			}
		}
	}
	return dist[sink];
}

pii solve()
{
	int i, j, flow = 0, min_cost = 0;
	for(i=source; i<=sink; i++){
		for(j=source; j<=sink; j++)
			graph[i][j] = adj[i][j];
	}
	while(1){
		int x = dijkstra();
		if(x == inf)
			break;
		int cur = sink;
		int minval = mod;
		while(cur){
			minval = min(minval, graph[parent[cur]][cur]);
			cur = parent[cur];
		}
		cur = sink;
		flow += minval;
		while(cur){
			graph[parent[cur]][cur] -= minval;
			graph[cur][parent[cur]] += minval;
			cur = parent[cur];
		}
		min_cost += (x*minval);
	}
	return mp(min_cost, flow);
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j;
	scanf("%s%d", t, &n);
	len_t = strlen(t);
	for(i=0; i<len_t; i++)
		present[t[i]-'a']++;
	source = 0, sink = n+27;
	for(i=1; i<=n; i++){
		scanf("%s%d", s[i], &a[i]);
		int len = strlen(s[i]);
		for(j=0; j<len; j++)
			cnt[i][s[i][j]-'a']++;
		cost[source][i] = i;
		adj[source][i] = a[i];
		for(j=0; j<maxc; j++){
			if(present[j])
				adj[i][n+j+1] = cnt[i][j];
		}
	}
	for(j=0; j<maxc; j++)
		adj[n+j+1][sink] = present[j];
	pii ans = solve();
	if(ans.s == len_t)
		printf("%d\n", ans.f);
	else
		printf("-1\n");
	return 0;
}
