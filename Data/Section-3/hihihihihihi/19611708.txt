#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
int dp[1005][1005],cost[1005][1005];

int main()
{
   int r,c,tmp,i,j,k,l,ans=0,maxn=0;
   scanf("%d%d",&r,&c);
   for(i=0;i<r;i++)
      for(j=0;j<c;j++)
      {
         scanf("%d",&dp[i][j]);
         cost[i][j]=dp[i][j];
      }
   for(i=1;i<r-1;i++)
   {
      for(j=1;j<c-1;j++)
      {
         tmp=cost[i][j];
         for(k=0;k<=i;k++)
         {
            for(l=0;l<=j;l++)
            {
               if(k==0 && l==0)continue;
               else if(k==0 && l!=0)dp[k][l]+=dp[k][l-1];
               else if(k!=0 && l==0)dp[k][l]+=dp[k-1][l];
               else dp[k][l]=cost[k][l]+max(dp[k][l-1],dp[k-1][l]);
            }
         }
         ans+=dp[i][j];
         for(k=0;k<=i;k++)dp[k][j]=cost[k][j];
         for(l=0;l<=j;l++)dp[i][l]=cost[i][l];

         for(k=0;k<=i;k++)
         {
            for(l=c-1;l>=j;l--)
            {
               if(k==0 && l==c-1)continue;
               else if(k==0 && l!=c-1)dp[k][l]+=dp[k][l+1];
               else if(k!=0 && l==c-1)dp[k][l]+=dp[k-1][l];
               else dp[k][l]+=max(dp[k][l+1],dp[k-1][l]);
            }
         }
         ans+=dp[i][j];
         for(k=0;k<=i;k++)dp[k][j]=cost[k][j];
         for(l=c-1;l>=j;l--)dp[i][l]=cost[i][l];

         for(k=r-1;k>=i;k--)
         {
            for(l=0;l<=j;l++)
            {
               if(k==r-1 && l==0)continue;
               else if(k==r-1 && l!=0)dp[k][l]+=dp[k][l-1];
               else if(k!=r-1 && l==0)dp[k][l]+=dp[k+1][l];
               else dp[k][l]+=max(dp[k][l-1],dp[k+1][l]);
            }
         }
         ans+=dp[i][j];
         for(k=i;k<r;k++)dp[k][j]=cost[k][j];
         for(l=0;l<=j;l++)dp[i][l]=cost[i][l];

         for(k=r-1;k>=i;k--)
         {
            for(l=c-1;l>=j;l--)
            {
               if(k==r-1 && l==c-1)continue;
               else if(k==r-1 && l!=c-1)dp[k][l]+=dp[k][l+1];
               else if(k!=r-1 && l==c-1)dp[k][l]+=dp[k+1][l];
               else dp[k][l]+=max(dp[k][l+1],dp[k+1][l]);
            }
         }
         ans+=dp[i][j];
         ans-=tmp*4;

      }
      if(maxn<ans)maxn=ans;
   }
   printf("%d\n",maxn);
   return 0;
}
