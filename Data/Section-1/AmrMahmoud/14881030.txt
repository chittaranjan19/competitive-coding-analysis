#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int dollar[200005], pound[200005];
int lastd[200005], lastp[200005];
int type[200005], cost[200005];

int main()
{
  int n, m, k, s;
  scanf("%d %d %d %d", &n, &m, &k, &s);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &dollar[i]);
    if(i)
    {
      if(dollar[i] < dollar[i - 1])
        lastd[i] = i;
      else
      {
        dollar[i] = dollar[i - 1];
        lastd[i] = lastd[i - 1];
      }
    }
    else lastd[i] = i;
  }
  for(int i=0;i<n;i++)
  {
    scanf("%d", &pound[i]);
    if(i)
    {
      if(pound[i] < pound[i - 1])
        lastp[i] = i;
      else
      {
        pound[i] = pound[i - 1];
        lastp[i] = lastp[i - 1];
      }
    }
    else lastp[i] = i;
  }
  for(int i=0;i<m;i++)
    scanf("%d %d", &type[i], &cost[i]);
  int L = 0, R = n - 1;
  while(R > L)
  {
    int mid = L + (R - L) / 2;
    LL sum = 0;
    vector<LL> v;
    for(int i=0;i<m;i++)
    {
      if(type[i] == 1) v.pb(cost[i] * 1LL * dollar[mid]);
      else v.pb(cost[i] * 1LL * pound[mid]);
    }
    sort(v.begin(), v.end());
    for(int i=0;i<k;i++)
      sum += v[i];
    if(sum <= s) R = mid;
    else L = mid + 1;
  }
  LL sum = 0;
  vector<pair<LL, int> > v;
  for(int i=0;i<m;i++)
  {
    if(type[i] == 1) v.pb(mp(cost[i] * 1LL * dollar[R], i));
    else v.pb(mp(cost[i] * 1LL * pound[R], i));
  }
  sort(v.begin(), v.end());
  for(int i=0;i<k;i++)
    sum += v[i].f;
  if(sum <= s)
  {
    cout << R + 1 << "\n";
    for(int i=0;i<k;i++)
    {
      printf("%d ", v[i].s + 1);
      if(type[v[i].s] == 1) printf("%d\n", lastd[R] + 1);
      else printf("%d\n", lastp[R] + 1);
    }
  }
  else cout << -1;
  return 0;
}
