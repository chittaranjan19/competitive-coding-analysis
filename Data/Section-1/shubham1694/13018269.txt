#include <bits/stdc++.h>

using namespace std;

const int maxn = 1000010;

int gcd(int a, int b)
{
    if(b==0)
        return a;
    return gcd(b, a%b);
}

struct node{
    int g, min_val, min_cnt, flag;
};

node segtree[maxn];
int arr[maxn], min_cnt[maxn];

void init(int s, int e, int node_num)
{
    if(s==e){
        segtree[node_num] = (node){arr[s], arr[s], 1, 1};
        return;
    }
    int mid, lc, rc, x, y, c;
    mid = (s+e)>>1;
    lc = 2*node_num+1;
    rc = lc+1;
    init(s, mid, lc);
    init(mid+1, e, rc);
    //if(segtree[lc].g==-1 || segtree[rc].g==-1)
    //  segtree[node_num] = (node){-1, -1, -1};
    //else{
        x = gcd(segtree[lc].g, segtree[rc].g);
        if(segtree[lc].min_val==segtree[rc].min_val){
            y = segtree[lc].min_val;
            c = segtree[lc].min_cnt+segtree[rc].min_cnt;
        }
        else if(segtree[lc].min_val<segtree[rc].min_val){
            y = segtree[lc].min_val;
            c = segtree[lc].min_cnt;
        }
        else{
            y = segtree[rc].min_val;
            c = segtree[rc].min_cnt;
        }
        if(!(x%y))
            segtree[node_num] = (node){x, y, c, 1};
        else
            segtree[node_num] = (node){x, y, c, 0};
    //}
}

node query(int s, int e, int qs, int qe, int node_num)
{
    if(s>=qs && qe>=e)
        return segtree[node_num];
    int mid, lc, rc, x, y, c;
    node p, q, ret;
    mid = (s+e)>>1;
    lc = 2*node_num+1;
    rc = lc+1;
    if(mid>=qs && qe>mid){
        p = query(s, mid, qs, qe, lc);
        q = query(mid+1, e, qs, qe, rc);
        //cout << s << " " << e << " " << p.g << " " << q.g << "\n";
        //if(p.g==-1 || q.g==-1)
        //  ret = (node){-1, -1, -1};
        //else{
            x = gcd(p.g, q.g);
            if(p.min_val==q.min_val){
                y = p.min_val;
                c = p.min_cnt+q.min_cnt;
            }
            else if(p.min_val<q.min_val){
                y = p.min_val;
                c = p.min_cnt;
            }
            else{
                y = q.min_val;
                c = q.min_cnt;
            }
            if(!(x%y))
                ret = (node){x, y, c, 1};
            else
                ret = (node){x, y, c, 0};
        //}
        return ret;
    }
    else if(mid>=qs)
        return query(s, mid, qs, qe, lc);
    else
        return query(mid+1, e, qs, qe, rc);
}

int main()
{
    int n, q, i, j, l, r, ans;
    node ret;
    scanf("%d", &n);
    for(i=0; i<n; i++)
        scanf("%d", &arr[i]);
    init(0, n-1, 0);
    //for(i=0; i<9; i++)
    //  cout << segtree[i].g << " " << segtree[i].min_val << " " << segtree[i].min_cnt << "\n"; 
    scanf("%d", &q);
    while(q--){
        scanf("%d%d", &l, &r);
        ret = query(0, n-1, l-1, r-1, 0);
        ans = r-l+1;
        //cout << ret.g << " " << ret.min_val << " " << ret.min_cnt << "\n";
        if(!ret.flag)
            printf("%d\n", ans);
        else
            printf("%d\n", (ans-ret.min_cnt));
    }
    return 0;
}