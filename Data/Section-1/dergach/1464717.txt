#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

#define eps 1e-8

struct Rectangle
{
    int x1, y1, x2, y2;
    int w, h;
    int povernut;
};

int used[105], i, j, k, z, N, w, h;
int best_res, res, best_used[105];
int deltaX, deltaY, bestX, bestY, best_i;
Rectangle a[105], b[105], c[105];

int gcd(int a, int b)
{
    if(b == 0) return a;
    return gcd(b, a % b);
}

int calc()
{
    int res = 0;
    for(int i = 0; i < N; i++)
        for(int j = i + 1; j < N; j++)
            if(used[i] == 1 && used[j] == 1 && i != j)
            {
                if(a[i].povernut != a[j].povernut)
                {
                    if((a[i].y2 == a[j].y1 || a[i].y1 == a[j].y2) && 
                        (a[i].x1 >= a[j].x1 && a[i].x1 <= a[j].x2 || a[i].x2 >= a[j].x1 && a[i].x2 <= a[j].x2
                    || a[j].x1 >= a[i].x1 && a[j].x1 <= a[i].x2 || a[j].x2 >= a[i].x1 && a[j].x2 <= a[i].x2))
                        res += min(a[i].x2, a[j].x2) - max(a[i].x1, a[j].x1);
                    if((a[i].x1 == a[j].x2 || a[i].x2 == a[j].x1) &&
                        (a[i].y1 >= a[j].y1 && a[i].y1 <= a[j].y2 || a[i].y2 >= a[j].y1 && a[i].y2 <= a[j].y2
                    || a[j].y1 >= a[i].y1 && a[j].y1 <= a[i].y2 || a[j].y2 >= a[i].y1 && a[j].y2 <= a[i].y2))
                        res += min(a[i].y2, a[j].y2) - max(a[i].y1, a[j].y1);
                }
                else
                {
                    if((a[i].y2 == a[j].y1 || a[i].y1 == a[j].y2) && 
                        (a[i].x1 >= a[j].x1 && a[i].x1 <= a[j].x2 || a[i].x2 >= a[j].x1 && a[i].x2 <= a[j].x2
                    || a[j].x1 >= a[i].x1 && a[j].x1 <= a[i].x2 || a[j].x2 >= a[i].x1 && a[j].x2 <= a[i].x2))
                        res -= min(a[i].x2, a[j].x2) - max(a[i].x1, a[j].x1);
                    if((a[i].x1 == a[j].x2 || a[i].x2 == a[j].x1) &&
                        (a[i].y1 >= a[j].y1 && a[i].y1 <= a[j].y2 || a[i].y2 >= a[j].y1 && a[i].y2 <= a[j].y2
                    || a[j].y1 >= a[i].y1 && a[j].y1 <= a[i].y2 || a[j].y2 >= a[i].y1 && a[j].y2 <= a[i].y2))
                        res -= min(a[i].y2, a[j].y2) - max(a[i].y1, a[j].y1);
                }
            }
    return res;
}

void build_right(int i)
{
    int minv = 123456789, best_i = -1, tmp;
    int deltaX, deltaY, best_tmp, bestX, bestY, j;
    if(a[i].povernut)
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].x2 + a[j].w <= w && a[i].y2 - a[i].y1 >= a[j].h)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].y2 - a[i].y1 - a[j].h) / deltaY;
                while(20 * a[j].h < a[j].h + tmp * deltaY || a[i].x2 + a[j].w + tmp * deltaX > w)
                    tmp--;
                if(a[i].y2 - a[i].y1 - a[j].h - tmp * deltaY < minv)
                {
                    minv = a[i].y2 - a[i].y1 - a[j].h - tmp * deltaY;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        a[best_i].x1 = a[i].x2;
        a[best_i].x2 = a[i].x2 + a[best_i].w + best_tmp * bestX;
        a[best_i].y2 = a[i].y2;
        a[best_i].y1 = a[i].y2 - a[best_i].h - best_tmp * bestY;
    }
    else
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].x2 + a[j].h <= w && a[i].y2 - a[i].y1 >= a[j].w)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].y2 - a[i].y1 - a[j].w) / deltaX;
                while(20 * a[j].w < a[j].w + tmp * deltaX || a[i].x2 + a[j].h + tmp * deltaY > w)
                    tmp--;
                if(a[i].y2 - a[i].y1 - a[j].w - tmp * deltaX < minv)
                {
                    minv = a[i].y2 - a[i].y1 - a[j].w - tmp * deltaX;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        swap(a[best_i].h, a[best_i].w);
        swap(bestX, bestY);
        a[best_i].povernut = 1;
        a[best_i].x1 = a[i].x2;
        a[best_i].x2 = a[i].x2 + a[best_i].w + best_tmp * bestX;
        a[best_i].y2 = a[i].y2;
        a[best_i].y1 = a[i].y2 - a[best_i].h - best_tmp * bestY;
    }
    build_right(best_i);
}

void build_left(int i)
{
    int minv = 123456789, best_i = -1, tmp;
    int deltaX, deltaY, best_tmp, bestX, bestY, j;
    if(a[i].povernut)
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].x1 - a[j].w >= 0 && a[i].y2 - a[i].y1 >= a[j].h)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].y2 - a[i].y1 - a[j].h) / deltaY;
                while(20 * a[j].h < a[j].h + tmp * deltaY || a[i].x1 - a[j].w - tmp * deltaX < 0)
                    tmp--;
                if(a[i].y2 - a[i].y1 - a[j].h - tmp * deltaY < minv)
                {
                    minv = a[i].y2 - a[i].y1 - a[j].h - tmp * deltaY;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        a[best_i].x2 = a[i].x1;
        a[best_i].x1 = a[i].x1 - a[best_i].w - best_tmp * bestX;
        a[best_i].y2 = a[i].y2;
        a[best_i].y1 = a[i].y2 - a[best_i].h - best_tmp * bestY;
    }
    else
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].x1 - a[j].h >= 0 && a[i].y2 - a[i].y1 >= a[j].w)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].y2 - a[i].y1 - a[j].w) / deltaX;
                while(20 * a[j].w < a[j].w + tmp * deltaX || a[i].x1 - a[j].h - tmp * deltaY < 0)
                    tmp--;
                if(a[i].y2 - a[i].y1 - a[j].w - tmp * deltaX < minv)
                {
                    minv = a[i].y2 - a[i].y1 - a[j].w - tmp * deltaX;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        swap(a[best_i].h, a[best_i].w);
        swap(bestX, bestY);
        a[best_i].povernut = 1;
        a[best_i].x2 = a[i].x1;
        a[best_i].x1 = a[i].x1 - a[best_i].w - best_tmp * bestX;
        a[best_i].y2 = a[i].y2;
        a[best_i].y1 = a[i].y2 - a[best_i].h - best_tmp * bestY;
    }
    build_left(best_i);
}

void build_up(int i)
{
    int minv = 123456789, best_i = -1, tmp;
    int deltaX, deltaY, best_tmp, bestX, bestY, j;
    if(a[i].povernut)
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].y2 + a[j].h <= h && a[i].x2 - a[i].x1 >= a[j].w)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].x2 - a[i].x1 - a[j].w) / deltaX;
                while(20 * a[j].w < a[j].w + deltaX * tmp || a[j].h + deltaY * tmp + a[i].y2 > h)
                    tmp--;
                if(a[i].x2 - a[i].x1 - a[j].w - deltaX * tmp < minv)
                {
                    minv = a[i].x2 - a[i].x1 - a[j].w - deltaX * tmp;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        a[best_i].x2 = a[i].x2;
        a[best_i].x1 = a[i].x2 - a[best_i].w - best_tmp * bestX;
        a[best_i].y1 = a[i].y2;
        a[best_i].y2 = a[i].y2 + a[best_i].h + best_tmp * bestY;
    }
    else
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].y2 + a[j].w <= h && a[i].x2 - a[i].x1 >= a[j].h)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].x2 - a[i].x1 - a[j].h) / deltaY;
                while(20 * a[j].h < a[j].h + deltaY * tmp || a[j].w + deltaX * tmp + a[i].y2 > h)
                    tmp--;
                if(a[i].x2 - a[i].x1 - a[j].h - deltaY * tmp < minv)
                {
                    minv = a[i].x2 - a[i].x1 - a[j].h - deltaY * tmp;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        swap(a[best_i].h, a[best_i].w);
        swap(bestX, bestY);
        a[best_i].povernut = 1;
        a[best_i].x2 = a[i].x2;
        a[best_i].x1 = a[i].x2 - a[best_i].w - best_tmp * bestX;
        a[best_i].y1 = a[i].y2;
        a[best_i].y2 = a[i].y2 + a[best_i].h + best_tmp * bestY;
    }
    build_right(best_i);
    build_left(best_i);
    build_up(best_i);
}

void build_down(int i)
{
    int minv = 123456789, best_i = -1, tmp;
    int deltaX, deltaY, best_tmp, bestX, bestY, j;
    if(a[i].povernut)
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].y1 - a[j].h >= 0 && a[i].x2 - a[i].x1 >= a[j].w)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].x2 - a[i].x1 - a[j].w) / deltaX;
                while(20 * a[j].w < a[j].w + deltaX * tmp || a[i].y1 - a[j].h - deltaY * tmp < 0)
                    tmp--;
                if(a[i].x2 - a[i].x1 - a[j].w - deltaX * tmp < minv)
                {
                    minv = a[i].x2 - a[i].x1 - a[j].w - deltaX * tmp;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        a[best_i].x2 = a[i].x2;
        a[best_i].x1 = a[i].x2 - a[best_i].w - best_tmp * bestX;
        a[best_i].y2 = a[i].y1;
        a[best_i].y1 = a[i].y1 - a[best_i].h - best_tmp * bestY;
    }
    else
    {
        for(j = 0; j < N; j++)
            if(used[j] == 0 && a[i].y1 - a[j].w >= 0 && a[i].x2 - a[i].x1 >= a[j].h)
            {
                deltaX = a[j].w / gcd(a[j].w, a[j].h);
                deltaY = a[j].h / gcd(a[j].w, a[j].h);
                tmp = (a[i].x2 - a[i].x1 - a[j].h) / deltaY;
                while(20 * a[j].h < a[j].h + deltaY * tmp || a[i].y1 - a[j].w - deltaX * tmp < 0)
                    tmp--;
                if(a[i].x2 - a[i].x1 - a[j].h - deltaY * tmp < minv)
                {
                    minv = a[i].x2 - a[i].x1 - a[j].h - deltaY * tmp;
                    best_tmp = tmp;
                    bestX = deltaX;
                    bestY = deltaY;
                    best_i = j;
                }
            }
        if(best_i == -1)
            return;
        used[best_i] = 1;
        swap(a[best_i].h, a[best_i].w);
        swap(bestX, bestY);
        a[best_i].povernut = 1;
        a[best_i].x2 = a[i].x2;
        a[best_i].x1 = a[i].x2 - a[best_i].w - best_tmp * bestX;
        a[best_i].y2 = a[i].y1;
        a[best_i].y1 = a[i].y1 - a[best_i].h - best_tmp * bestY;
    }
    build_right(best_i);
    build_left(best_i);
    build_down(best_i);
}



int main()
{
    scanf("%d %d %d", &w, &h, &N);
    w *= 10; h *= 10;

    bool swp = false;
    if(w < h) 
    {
        swap(w, h);
        swp = true;
    }

    for(i = 0; i < N; i++)
    {
        scanf("%d %d", &a[i].w, &a[i].h);
        if(swp)
            swap(a[i].w, a[i].h);
    }

    for(i = 0; i < N; i++)
        b[i] = a[i];

    for(i = 0; i < N; i++)
    {
        int flag, tmp;
        for(flag = 0; flag < 2; flag++)
        {
            for(k = 2; k <= 20; k++)
            {
                for(z = 0; z < 73; z++)
                {
                    for(j = 0; j < N; j++)
                    {
                        a[j] = b[j];
                        used[j] = 0;
                    }
                    if(flag)
                    {
                        a[i].povernut = 1;
                        swap(a[i].h, a[i].w);
                    }
                    tmp = 20;
                    while(a[i].w * tmp > w / k || a[i].h * tmp > h / k)
                        tmp--;
                    if(tmp <= 0)
                        continue;
                    //a[i].x1 = w / k;
                    //a[i].y1 = h / k;
                    //a[i].x2 = w / k + a[i].w * tmp;
                    //a[i].y2 = h / k + a[i].h * tmp;

                    //a[i].x1 = w / 2 - a[i].w * tmp / 2;
                    //a[i].x2 = a[i].x1 + a[i].w * tmp;
                    //a[i].y1 = h / 2 - a[i].h * tmp / 2;
                    //a[i].y2 = a[i].y1 + a[i].h * tmp;
                    //used[i] = 1;

                    a[i].x1 = rand() % (w - a[i].w * tmp);
                    a[i].y1 = rand() % (h - a[i].h * tmp);
                    a[i].x2 = a[i].x1 + a[i].w * tmp;
                    a[i].y2 = a[i].y1 + a[i].h * tmp;
                    used[i] = 1;

                    build_up(i);
                    build_right(i);
                    build_left(i);
                    build_down(i);

                    res = calc();
                    if(res > best_res)
                    {
                        best_res = res;
                        for(j = 0; j < N; j++)
                        {
                            c[j] = a[j];
                            best_used[j] = used[j];
                        }
                    }
                    if(clock() > 4500)
                        goto METKA;
                }
            }
        }
    }


METKA:
//а теперь подвигаем их

    for(i = 0; i < N; i++)
    {
        a[i] = c[i];
        
        if(swp)
        {
            a[i].x1 = c[i].y1;
            a[i].y1 = c[i].x1;
            a[i].x2 = c[i].y2;
            a[i].y2 = c[i].x2;
        }
        
        used[i] = best_used[i];
    }

    int minL, minR, Li, Ri;
    for(i = 0; i < N; i++)
    {
        if(used[i])
        {
            minL = minR = 123456789;
            Li = Ri = -1;
            for(j = 0; j < N; j++)
            {
                if(used[j] == 1 && i != j && 
                    (a[i].y1 >= a[j].y1 && a[i].y1 <= a[j].y2 || a[i].y2 >= a[j].y1 && a[i].y2 <= a[j].y2
                    || a[j].y1 >= a[i].y1 && a[j].y1 <= a[i].y2 || a[j].y2 >= a[i].y1 && a[j].y2 <= a[i].y2))
                {
                    if(a[j].x2 <= a[i].x1 && a[i].x1 - a[j].x2 < minL)
                    {
                        minL = a[i].x1 - a[j].x2;
                        Li = j;
                    }
                    if(a[j].x1 >= a[i].x2 && a[j].x1 - a[i].x2 < minR)
                    {
                        minR = a[j].x1 - a[i].x2;
                        Ri = j;
                    }
                }
            }
            Rectangle tmp1 = a[i], tmp2 = a[i];
            if(Li != -1 && minL != 0)
            {
                a[i].x2 -= 1;
                a[i].x1 -= 1;
                res = calc();
                if(res < best_res)
                    a[i] = tmp1;
                else
                {
                    best_res = res;
                    tmp1 = a[i];
                }
                a[i] = tmp2;
                a[i].x2 -= a[i].x1 - a[Li].x2;
                a[i].x1 = a[Li].x2;
                res = calc();
                if(res < best_res)
                    a[i] = tmp1;
                else
                    best_res = res;
            }
            if(Li == -1 && a[i].x1 > 0)
            {
                tmp1 = a[i];
                a[i].x1 -= 1;
                a[i].x2 -= 1;
                res = calc();
                if(res < best_res)
                    a[i] = tmp1;
                else
                    best_res = res;
            }
            tmp1 = a[i]; tmp2 = a[i];
            if(Ri != -1 && minR != 0)
            {
                a[i].x2 += 1;
                a[i].x1 += 1;
                res = calc();
                if(res < best_res)
                    a[i] = tmp1;
                else
                {
                    best_res = res;
                    tmp1 = a[i];
                }
                a[i] = tmp2;
                a[i].x1 += a[Ri].x1 - a[i].x2;
                a[i].x2 = a[Ri].x1;
                res = calc();
                if(res < best_res)
                    a[i] = tmp1;
                else
                    best_res = res;
            }
            if(Ri == -1 && a[i].x2 < w)
            {
                tmp1 = a[i];
                a[i].x1 += 1;
                a[i].x2 += 1;
                res = calc();
                if(res < best_res)
                    a[i] = tmp1;
                else
                    best_res = res;
            }
        }
    }


    for(i = 0; i < N; i++)
    {
        c[i] = a[i];
        best_used[i] = used[i];
    }

    for(i = 0; i < N; i++)
    {
        if(best_used[i])
        {
            //if(!swp)
                printf("%d.%d %d.%d %d.%d %d.%d\n", c[i].x1 / 10, c[i].x1 % 10, c[i].y1 / 10, c[i].y1 % 10, 
                                                    c[i].x2 / 10, c[i].x2 % 10, c[i].y2 / 10, c[i].y2 % 10);
           //else
           //     printf("%d.%d %d.%d %d.%d %d.%d\n", c[i].y1 / 10, c[i].y1 % 10, c[i].x1 / 10, c[i].x1 % 10, 
           //                                         c[i].y2 / 10, c[i].y2 % 10, c[i].x2 / 10, c[i].x2 % 10);
        }
        else
            printf("-1 -1 -1 -1\n");
    }   

    return 0;
}
