#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
int f[MAXN], a[MAXN], n;
int Rmin[MAXN][30];
int Rmax[MAXN][30];
int it[4 * MAXN];
int leaf[MAXN * 4];
void build(int x, int l, int r)
{
    if (l == r){
        leaf[l] = x;
        it[x] = INF;
        return;
    }
    int mid = (l + r) >> 1;
    build(2 * x, l, mid);
    build(2 * x + 1, mid + 1, r);
}

int update(int i, int value)
{
    int x = leaf[i];
    it[x] = value;
    while (x > 1){
        x >>= 1;
        it[x] = min(it[2 * x], it[2 * x + 1]);
    }
}

int get(int x, int l, int r, int u, int v)
{
    if (r < u || v < l)return INF;
    if (u <= l && r <= v) return it[x];
    int mid = (l + r) >> 1;
    return min(get(2 * x, l, mid, u, v), get(2 * x + 1, mid + 1, r, u, v));
}

int getmin(int l, int r)
{
    int k = log2(r - l + 1);
    return min(Rmin[l][k], Rmin[r - (1 << k) + 1][k]);
}

int getmax(int l, int r)
{
    int k = log2(r - l + 1);
    return max(Rmax[l][k], Rmax[r - (1 << k) + 1][k]);
}
int s, len;
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("B.inp", "r", stdin);
    freopen("B.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n >> s >> len;
    FORE(i, 1, n) cin >> a[i];
    FORE(i, 1, n) Rmin[i][0] = a[i], Rmax[i][0] = a[i];
    FORE(k, 1, log2(n))
    FORE(i, 1, n) Rmin[i][k] = min(Rmin[i][k - 1], Rmin[i + (1 << (k - 1))][k - 1]),
                  Rmax[i][k] = max(Rmax[i][k - 1], Rmax[i + (1 << (k - 1))][k - 1]);
    f[0] = 0;
    build(1, 0, n);
    update(0, f[0]);
    //cout<<getmin(1, n)<<" "<<getmax(1, n)<<"wtf"<<endl;
    FORE(i, 1, n){
        int d = 0, c = i - len, g, fin = -1;
        while (d <= c){
            g = (d + c) >> 1;
            if (-getmin(g + 1, i) + getmax(g + 1, i) <= s){
                fin = g;
                c = g - 1;
            }
            else d = g + 1;
        }

        int last = fin;
        //cout<<i<<" "<<last<<endl;
        if (last == -1){
            f[i] = INF;
            update(i, f[i]);
            continue;
        }
        f[i] = get(1, 0, n, last, i - len) + 1;
       // cout<<i<<" "<<f[i]<<"::"<<last<<" "<<i - len<<endl;
        update(i, f[i]);
    }
    cout << ((f[n] == 0 || f[n] >= INF) ? -1 : f[n]);
    return 0;
}

