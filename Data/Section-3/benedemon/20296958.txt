#include <iostream>
#include <vector>
#include <string.h>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <math.h>

#define ll long long
#define pb push_back
#define mp make_pair
#define traverse(container, it) \
for(typeof(container.begin()) it = container.begin(); it!= container.end(); it++)
using namespace std;

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

int gcd(int a, int b){ if(b==0) return a; return gcd(b,a%b); }
int lcm(int a, int b) {return a*(b/gcd(a,b));}
void setbool(bool a[], int n, bool x){for(int i=0;i<n;i++){a[i] = x;}}
void setint(int a[], int n, int x){for(int i=0;i<n;i++){a[i] = x;}}

vector<ll> graph[501];

int main(int argc, const char * argv[]) 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    ll n, m, u, v;
    
    cin>>n>>m;
    
    while(m--)
    {
        cin>>u>>v;
        
        graph[u].pb(v);
        graph[v].pb(u);
    }
    
    string ans;
    for(int i=1;i<=n;i++)
        ans += 'i';
    
    for(int i=1;i<=n;i++)
    {
        if(graph[i].size() == n-1)
        {
            ans[i-1] = 'b';
        }
    }
    
    for(int i=1;i<=n;i++)
    {
        if(ans[i-1] != 'b')
        {
            ans[i-1] = 'a';
            traverse(graph[i], it)
            {
                if(ans[*it - 1] != 'b')
                    ans[*it - 1] = 'a';
            }
            break;
        }
    }
    for(int i=1;i<=n;i++)
    {
        if(ans[i-1] != 'b' && ans[i-1] != 'a')
        {
            ans[i-1] = 'c';
            traverse(graph[i], it)
            {
                if(ans[*it - 1] == 'a')
                {
                    cout<<"No"<<endl;
                    return 0;
                }
                if(ans[*it - 1] != 'b')
                    ans[*it - 1] = 'c';
            }
            break;
        }
    }
    //cout<<ans<<endl;
    for(int i=1;i<=n;i++)
    {
        if(ans[i-1] == 'i')
        {
            cout<<"No"<<endl;
            return 0;
        }
    }
    
    int counta, countb, countc;
    counta = countb = countc = 0;
    for(int i=0;i<n;i++)
    {
        if(ans[i] == 'a')
        {
            counta++;
        }
        else if(ans[i] == 'b')
        {
            countb++;
        }
        else
        {
            countc++;
        }
    }
    
    for(int i=1;i<=n;i++)
    {
        if(ans[i-1] == 'a')
        {
            int tempa = counta-1;
            int tempb = countb;
            traverse(graph[i] , it)
            {
                if(ans[*it-1] == 'c')
                {
                    cout<<"No"<<endl;
                    return 0;
                }
                else if(ans[*it-1] == 'b')
                {
                    tempb--;
                }
                else
                {
                    tempa--;
                }
            }
            if(tempa > 0 || tempb > 0)
            {
                cout<<"No"<<endl;
                return 0;
            }
        }
        else if(ans[i-1] == 'c')
        {
            int tempb = countb;
            int tempc = countc-1;
            traverse(graph[i] , it)
            {
                if(ans[*it-1] == 'a')
                {
                    cout<<"No"<<endl;
                    return 0;
                }
                else if(ans[*it-1] == 'b')
                {
                    tempb--;
                }
                else
                {
                    tempc--;
                }
            }
            if(tempc > 0 || tempb > 0)
            {
                cout<<"No"<<endl;
                return 0;
            }
        }
    }
    
    cout<<"Yes"<<endl;
    cout<<ans<<endl;
    
    return 0;
}
