#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 1003
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int n, m, d[3][mn][mn];
int addX[] = {0, 0, -1, 1};
int addY[] = {-1, 1, 0, 0};
char c[mn][mn];
deque< pair<int, int> > q[3];

void setup()
{
    cin >> n >> m;
    FOR(i, 1, n)
    FOR(j, 1, m)
    {
        cin >> c[i][j];
        FOR(k, 0, 2)
        {
            if (q[k].empty() && c[i][j] == '1' + k)
                q[k].push_back(mp(i, j));
            else
                d[k][i][j] = maxC;
        }
    }
}

bool valid(int x, int y)
{
    if (x < 1 || x > n)
        return false;
    if (y < 1 || y > m)
        return false;
    return c[x][y] != '#';
}

void xuly()
{
    FOR(k, 0, 2)
    while(!q[k].empty())
    {
        int x = q[k].front().F;
        int y = q[k].front().S;
        q[k].pop_front();
        FOR(i, 0, 3)
        {
            int _x = x + addX[i];
            int _y = y + addY[i];
            if (valid(_x, _y))
            {
                int _d = d[k][x][y] + (c[_x][_y] == '.');
                if (d[k][_x][_y] <= _d)
                    continue;
                d[k][_x][_y] = _d;
                if (c[_x][_y] != '.')
                    q[k].push_front(mp(_x, _y));
                else
                    q[k].push_back(mp(_x, _y));
            }
        }
    }
    long long ans = 3ll * maxC;
    FOR(i, 1, n)
    FOR(j, 1, m)
    {
        bool ok = true;
        long long sum = 0;
        FOR(k, 0, 2)
            if (d[k][i][j] == maxC)
            {
                ok = false;
                break;
            }
            else
                sum += d[k][i][j];
        if (!ok)
            continue;
        ans = min(ans, sum);
    }
    if (ans == 3ll * maxC)
        cout << -1;
    else
        cout << ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
