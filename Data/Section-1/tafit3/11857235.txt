import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.NavigableMap;
import java.util.TreeMap;

public class ProblemB2 {
    BufferedReader rd;

    ProblemB2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        double w = intarr()[1];
        int[] a = intarr();
        NavigableMap<Integer, Integer> c = new TreeMap<>();
        for(int x: a) {
            Integer v = c.get(x);
            if(v == null) {
                v = 1;
            } else {
                v++;
            }
            c.put(x, v);
        }
        int pos = 0;
        for(Map.Entry<Integer, Integer> e: c.entrySet()) {
            int k = e.getKey();
            int v = e.getValue();
            for(int i=0;i<v;i++) {
                a[pos++] = k;
            }
        }
        int b = a[a.length/2];
        int g = a[0];
        double p;
        if(g*2 > b) {
            p = 3.0/2*b;
        } else {
            p = 3*g;
        }

        out(Math.min(w, p*a.length/2.0));
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB2();
    }
}
