#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef long double real;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define INRANGE0(x, n) ((x) > -1 && (x) < n)
#define INRANGE(x, a, b) ((x) >= a && (x) <= b)
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INCMOD(a,b,c) (((a)+b)%c)
#define DECMOD(a,b,c) ((a)+c-b)%c)
#define ROUNDINT(a) (int)((double)(a) + 0.5)
#define INF 2000000000
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
//scanf(" %d ", &t);

char s[2000];

int l[26];
int o, e;

bool ganhei(){
	if(o <= 1) return true;
	return false;
}

int main(){
	while(scanf(" %s", &s[0]) != EOF){
		int t = strlen(s);
		o = 0; e = 0;
		CLEAR0(l);
		REP(i, t) l[s[i]-'a']++;
		REP(i, 26){
			if(l[i] <= 0) continue;
			if(l[i]%2) o++;
			else e++;
		}
		bool first = true;
		while(!ganhei()){
			if(e){
				REP(i, 26){
					if(l[i] <= 0) continue;
					if(l[i]%2 == 0){
						l[i]--; e--; o++;
						break;
					}
				}
			}
			else{
				int k;
				for(k = 0; k<26; k++){
					if(l[k] <= 1) continue;
					if(l[k]%2){
						l[k]--; o--; e++;
						break;
					}
				}
				if(k == 26) 
				for(k = 0; k<26; k++){
					if(l[k]%2){
						o--;
						break;
					}
				}
			}
			first = !first;
		}
		if(first) printf("First\n");
		else printf("Second\n");
	}
}





