#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>
#include <unordered_map>
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
#define ll long long
#define fs first
#define sc second
#define mp make_pair

ll n, p[1000000], sz[1000000], ans[1000000], cur = 0;
bool u[1000000];
pair<ll, ll> a[1000000];

ll find(ll a)
{
    return (p[a] == a) ? a : find(p[a]);
}

void merge(ll a, ll b)
{
    a = find(a);
    b = find(b);
    if (a != b)
    {
        if (sz[a] < sz[b])
            swap(a, b);
        p[b] = a;
        sz[a] += sz[b];
    }
}


int main()
{
    //freopen("sumdist.in", "r", stdin);
    //freopen("sumdist.out", "w", stdout);
    cin >> n;
    for (int i = 0; i < n; i++){
        sz[i] = 1;
        p[i] = i;
        cin >> a[i].fs;
        a[i].sc = i;
    }
    sort(a, a + n);
    reverse(a, a + n);
    for (int i = 0; i < n; i++)
    {
        ll pos = a[i].sc, vl = a[i].fs, size;
        u[pos] = 1;
        if (pos > 0 && u[pos - 1])
            merge(pos, pos - 1);
        if (pos < n - 1 && u[pos + 1])
            merge(pos, pos + 1);
        size = sz[find(pos)];
        while (cur < size)
            ans[cur++] = vl;
    }
    for (int i = 0; i < n; i++)
        cout << ans[i] << ' ';
    return 0;
}
