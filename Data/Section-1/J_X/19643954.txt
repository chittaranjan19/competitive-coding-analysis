#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>

using namespace std;

const int maxn = 1e6 + 5;

int sum[maxn], bit[maxn], n, ans[maxn], a[maxn];
map<int, int> mp;
struct op
{
    int l, r, id;
} Q[maxn];

bool cmp(const op &a, const op &b)
{
    return a.l > b.l;
}

void add(int i, int v)
{
    while(i <= n)
    {
        bit[i] ^= v;
        i += i & -i;
    }
}

int query(int i)
{
    int ret = 0;
    while(i)
    {
        ret ^= bit[i];
        i -= i & -i;
    }
    return ret;
}

int main()
{
    scanf("%d", &n);
    for(int i = 1; i <= n; ++i)
    {
        scanf("%d", a + i);
        sum[i] = sum[i - 1] ^ a[i];
    }
    int q;
    scanf("%d", &q);
    for(int i = 0; i < q; ++i)
    {
        scanf("%d%d", &Q[i].l, &Q[i].r);
        Q[i].id = i;
    }
    sort(Q, Q + q, cmp);
    for(int i = 0, j = n; i < q; ++i)
    {
        while(j > 0 && j >= Q[i].l)
        {
            if(mp.find(a[j]) != mp.end()) add(mp[a[j]], a[j]);
            add(j, a[j]);
            mp[a[j]] = j;
            --j;
        }
        ans[Q[i].id] = sum[Q[i].l - 1] ^ sum[Q[i].r] ^ query(Q[i].r);
    }
    for(int i = 0; i < q; ++i) printf("%d%c", ans[i], " \n"[i == q - 1]);
    return 0;
}
