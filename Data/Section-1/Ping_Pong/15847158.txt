#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 200000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    scanf("%d", &n);
    int a[n];
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    int bin_pow[31];
    bin_pow[0] = 1;
    for (int i = 1; i <= 30; i++)
        bin_pow[i] = bin_pow[i - 1] * 2;
    int bin_log[n + 1];
    int curr = 1, curr_pow = 0;
    for (int i = 1; i <= n; i++)
    {
        if (curr * 2 <= i)
        {
            curr *= 2;
            curr_pow++;
        }
        bin_log[i] = curr_pow;
    }
    int s_t_min[31][n];
    for (int i = 0; i < n; i++)
        s_t_min[0][i] = a[i];
    for (int i = 1; i <= 30; i++)
        for (int j = 0; j < n; j++)
            if (j + bin_pow[i] <= n)
                s_t_min[i][j] = min(s_t_min[i - 1][j], s_t_min[i - 1][j + bin_pow[i - 1]]);
    int pref[n];
    for (int i = 0; i < n; i++)
        pref[i] = -inf;
    for (int i = 0; i < n; i++)
    {
        int l1 = -1, r1 = i, mid1;
        while (r1 - l1 > 1)
        {
            mid1 = (l1 + r1) / 2;
            if (min(s_t_min[bin_log[i - mid1 + 1]][mid1], s_t_min[bin_log[i - mid1 + 1]][i - bin_pow[bin_log[i - mid1 + 1]] + 1]) == a[i])
                r1 = mid1;
            else
                l1 = mid1;
        }
        int l2 = i, r2 = n, mid2;
        while (r2 - l2 > 1)
        {
            mid2 = (l2 + r2) / 2;
            if (min(s_t_min[bin_log[mid2 - i + 1]][mid2], s_t_min[bin_log[mid2 - i + 1]][i - bin_pow[bin_log[mid2 - i + 1]] + 1]) == a[i])
                l2 = mid2;
            else
                r2 = mid2;
        }
        pref[l2 - r1] = max(pref[l2 - r1], a[i]);
    }
    for (int i = n - 2; i >= 0; i--)
        pref[i] = max(pref[i], pref[i + 1]);
    for (int i = 0; i < n; i++)
        printf("%d ", pref[i]);
    return 0;
}
