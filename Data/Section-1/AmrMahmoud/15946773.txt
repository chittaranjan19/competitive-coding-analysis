#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int a[1000005], b[1000005];
int pos[1000005];
int tree[4000005];

void build(int i,int L,int R)
{
  if(L == R)
  {
    tree[i] = 0;
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  tree[i] = tree[i*2 + 1] + tree[i*2 + 2];
}

void update(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree[i] = val;
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree[i] = max(tree[i*2 + 1], tree[i*2 + 2]);
}

int query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return max(query(i*2 + 1, L, (L + R) / 2, x, y), query(i*2 + 2, (L + R) / 2 + 1, R, x, y));
}

int solve(int n)
{
  build(0, 0, n - 1);
  for(int i=0;i<n;i++)
    pos[b[i]] = i;
  int res = 0;
  for(int i=0;i<n;i++)
  {
    int tmp = query(0, 0, n - 1, 0, pos[a[i]]) + 1;
    res = max(res, tmp);
    update(0, 0, n - 1, pos[a[i]], tmp);
  }
  return res;
}

int main()
{
  int n;
  cin >> n;
  for(int i=0;i<n;i++)
    scanf("%d", &a[i]);
  for(int i=0;i<n;i++)
    scanf("%d", &b[i]);
  reverse(a, a + n);
  int res = solve(n);
  reverse(a, a + n);
  reverse(b, b + n);
  res = max(res, solve(n));
  cout << res;
  return 0;
}
