#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long MAX_N = 200000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<int> graph[MAX_N];
long long dist[MAX_N];

void dfs(long long x, long long par, long long d)
{
    dist[x] = d;
    for (long long i = 0; i < graph[x].size(); i++)
        if (graph[x][i] != par)
            dfs(graph[x][i], x, d + 1);
}

long long dfs1(long long x, long long par)
{
    long long ans = 1;
    for (long long i = 0; i < graph[x].size(); i++)
        if (graph[x][i] != par)
            ans += dfs1(graph[x][i], x);
    return ans;
}

int main()
{
	//ifstream ifs("a.in");
	//ofstream ofs("a.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	long long n, x, y;
	cin >> n >> x >> y;
	if (x >= y)
    {
        long long a[n];
        for (long long i = 0; i < n; i++)
            a[i] = 0;
        long long s, f;
        for (long long i = 0; i < n - 1; i++)
        {
            cin >> s >> f;
            a[s - 1]++;
            a[f - 1]++;
        }
        bool b = true;
        for (long long i = 0; i < n; i++)
            if (a[i] == n - 1)
                b = false;
        if (b)
            cout << (n - 1) * y;
        else
            cout << (n - 2) * y + x;
        return 0;
    }
    for (long long i = 0; i < n - 1; i++)
    {
        long long s, f;
        cin >> s >> f;
        graph[s - 1].push_back(f - 1);
        graph[f - 1].push_back(s - 1);
    }
    dfs(0, -1, 0);
    long long t = 0, cnt = 0;
    for (long long i = 0; i < n; i++)
        if (dist[i] > cnt)
        {
            cnt = dist[i];
            t = i;
        }
    dfs(t, -1, 0);
    long long w = t;
    cnt = 0;
    for (long long i = 0; i < n; i++)
        if (dist[i] > cnt)
        {
            cnt = dist[i];
            w = i;
        }
    vector<int> path;
    long long curr = dist[w];
    path.push_back(w);
    while (curr >= 1)
        for (long long j = 0; j < graph[w].size(); j++)
            if (dist[graph[w][j]] == curr - 1)
            {
                path.push_back(graph[w][j]);
                w = graph[w][j];
                curr--;
                break;
            }
    reverse(path.begin(), path.end());
    /*for (long long i = 0; i < path.size(); i++)
        cout << path[i] + 1 << " ";
    cout << endl;*/
    long long len = path.size(), ans = 0;
    for (long long i = 0; i < len - 1; i++)
    {
        bool b = false;
        long long max_len = 0;
        for (long long j = 0; j < graph[path[i]].size(); j++)
            if (graph[path[i]][j] != path[i + 1] && (i == 0 || i > 0 && graph[path[i]][j] != path[i - 1]))
            {
                long long tmp = dfs1(graph[path[i]][j], path[i]);
                if (!b)
                    ans += tmp * x;
                else
                    ans += (tmp - 1) * x;
                b = true;
                ans += min(y, (tmp + 1) * x);
            }
        if (!b)
            ans += x;
    }
    cout << ans;
	return 0;
}
