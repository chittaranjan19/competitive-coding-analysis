#include <bits/stdc++.h>

#define out_file freopen("olymp.in", "r", stdin); freopen("olymp.out", "w", stdout)
#define ls else
#define all(a) a.begin(),a.end()
#define rall(a) a.rbegin(),a.rend()
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define timer int timer=clock()
#define rtn return
#define maxint 2147483647
#define I "%d"
#define II "%d%d"
#define III "%d%d%d"
#define L "%lf"
#define sqr(x) (x)*(x)
#define mp make_pair
#define pb push_back
#define sd second
#define ft first
#define y0 sklfgnjkdnhfxfhn
#define y1 sklfgnjkdnhfxfh
#define y2 sklfgnjkdnhfxfhnv
#define y3 sklfgnjkdnhfxfhna
#define y5 sklfgnjkdnhfxfhns
#define y4 sklfgnjkdnhfxfhnd
#define y6 sklfgnjkdnhfxfhnf

using namespace std;

typedef pair <int,int> pii;
typedef vector < pii > vii;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef long double ld;
typedef long long ll;

vii way[5001];
vi how[5001];
int cost[5001];
int t, n, m;

void dfs(int now, int prd, int sum, int tim)
{
    if(tim > t)
        rtn;
    if(cost[now] < sum)
    {
        cost[now] = sum;
        how[now] = how[prd];
        how[now].pb(now);
    }
    cost[now] = max(cost[now], sum);
    for(int i = 0; i < way[now].size(); i++)
        if(tim + way[now][i].sd <= t)
            dfs(way[now][i].ft, now,  sum+1, tim + way[now][i].sd);
    if(now != 1)
        how[now].clear();
}

int main()
{
    fast;
    cin >> n >> m >> t;
    for(int i = 0; i < m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        way[b].pb(mp(a, c));
    }
    dfs(n, -1, 1, 0);
    cout << cost[1] << '\n';
    for(int i = cost[1] - 1; i >= 0; i--)
        if(how[1][i] != 0)cout << how[1][i] << ' ';
}
