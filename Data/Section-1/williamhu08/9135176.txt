//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10, MOD = 1e9 + 7;

int add (int x, int y) {
	return (x + y) % MOD;
}

void addeq (int &x, int y) {
	x = add(x, y);
}

int N, M;
char S[MAXN], T[MAXN];
bool match[MAXN];
int lookup[MAXN];
int dp[MAXN], psum[MAXN];

void readstr (char *str, int &len) {
	gets(str);
	len = strlen(str);
}

void compute_table() {
	lookup[0] = -1;
	lookup[1] = 0;
	int pref = 0;
	for (int i = 2; i <= M; i++) {
		while (pref != -1 && T[i - 1] != T[pref]) {
			pref = lookup[pref];
		}
		lookup[i] = ++pref;
	}
}

void kmp() {
	compute_table();
	int pref = 0;
	for (int i = 0; i < N; i++) {
		while (pref != -1 && S[i] != T[pref]) {
			pref = lookup[pref];
		}
		if (++pref == M) {
			pref = lookup[pref];
			match[i + 1] = true;
		}
	}
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	readstr(S, N);
	readstr(T, M);
	if (N < M) {
		puts("0");
		return 0;
	}
	kmp();
	dp[0] = 1;
	psum[0] = 1;
	int prv = -1;
	for (int i = 1; i <= N; i++) {
		dp[i] = dp[i - 1];
		if (match[i]) {
			prv = i - M;
		}
		if (prv != -1) {
			addeq(dp[i], psum[prv]);
		}
		psum[i] = add(psum[i - 1], dp[i]);
	}
	printf("%d\n", add(dp[N], MOD - 1));	//minus the empty guy
}