#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 500005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)

using namespace std;
int n, c, cur = 1, pre = 0, curSz = 0, preSz = 0;
int word[mn][2];

struct interval
{
    int l, r, val;
    interval* lc;
    interval* rc;

    interval(int l = 0, int r = 0): l(l), r(r)
    {
        val = r - l + 1;
        if (l == r)
            lc = rc = NULL;
        else
        {
            lc = new interval(l, mid);
            rc = new interval(mid + 1, r);
        }
    }

    void update(int x, int y)
    {
        if (l > y || r < x || !val)
            return;
        if (x <= l && r <= y)
        {
            val = 0;
            return;
        }
        lc -> update(x, y);
        rc -> update(x, y);
        val = lc -> val + rc -> val;
    }

    int get()
    {
        if (l == r)
            return l;
        if (rc -> val)
            return rc -> get();
        return lc -> get();
    }
} t;

void getWord()
{
    swap(cur, pre);
    swap(curSz, preSz);
    cin >> curSz;
    bool dif = false;
    FOR(i, 1, curSz)
    {
        cin >> word[i][cur];
        if (!dif)
        {
            if (preSz < i)
                dif = true;
            else if (word[i][pre] != word[i][cur])
            {
                dif = true;
                if (word[i][pre] > word[i][cur])
                {
                    t.update(0, c - word[i][pre]);
                    t.update(c - word[i][cur] + 1, c - 1);
                }
                else
                    t.update(c - word[i][cur] + 1, c - word[i][pre]);
            }
        }
    }
    if (!dif)
    {
        if (curSz < preSz)
        {
            cout << -1;
            exit(0);
        }
    }
}

void setup()
{
    cin >> n >> c;
    t = interval(0, c - 1);
    FOR(i, 1, n)
        getWord();
}

void xuly()
{
    if (t.val == 0)
        cout << -1;
    else
        cout << t.get();
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
