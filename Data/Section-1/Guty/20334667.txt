#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Glass
{
	tint cant;
	bool activo,up,left;
	
	Glass (bool aa,bool cc, bool uu, tint ll)
	{
		activo = aa;
		cant = cc;
		up = uu;
		left = ll;
		
	}
};

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,t;
	while (cin >> n >> t)
	{
		tint k = 1;
		forn(i,n)
			k *= 2;
		if (t == 0)
			cout << 0 << "\n";
		else
		{
			vector<vector<Glass> > glass(n+1,vector<Glass>(n+1,Glass(0,0,0,0)));
			glass[0][0] = Glass(true,k,0,0);
			forsn(s,1,t)
			{
				forn(i,n)
				{
					forn(j,i+1)
					{
						Glass x = glass[i][j];
						if (x.activo)
						{
							tint r = k;
							forn(p,i+1)
								r /= 2;
							if (x.up && x.left)
								r *= 2;
							glass[i+1][j].cant += r;
							glass[i+1][j+1].cant += r;
							if (glass[i+1][j].cant >= k && i < n-1)
							{
								glass[i+1][j].activo = true;
								glass[i+1][j].up = true;
							}
							if (glass[i+1][j+1].cant >= k && i < n-1)
							{
								glass[i+1][j+1].activo = true;
								glass[i+1][j+1].left = true;
							}
						}
					}
				}
			}
			tint ans = 0;
			forn(i,n)
			forn(j,i+1)
				ans += glass[i][j].activo;
			cout << ans << "\n";
		}		
	}
	return 0;
}



