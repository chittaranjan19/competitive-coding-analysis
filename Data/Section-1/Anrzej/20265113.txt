#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_ans(string ans){
	cout << ans;
	exit(0);
}

vector<int> cycles;

int dp[N];
vector<pair<int, int> > g[N];

void dfs(int v, int d = 0, int p = -1){
	if (dp[v] != -1){
		cycles.push_back(d - dp[v]);
		dp[p] = -2;
		return;
	}
	dp[v] = d;
	for (int i = 0; i < g[v].size(); i++){
		int to = g[v][i].fs, prv = g[v][i].sc;
		if (prv == p || dp[to] == -2) continue;
		dfs(to, d + 1, prv);
	}
	
}
int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++){
		int v;
		cin >> v;
		v--;
		g[v].push_back(mp(i, i));
		g[i].push_back(mp(v, i));
	}
	for (int i = 0; i < n; i++)
		dp[i] = -1;
	for (int i = 0; i < n; i++){
		if (dp[i] == -1){
			dfs(i);
		}
	}
	ll ans = 1;
	for (int i = 0; i < cycles.size(); i++){
		ans = (ans*((binpow(2, cycles[i]) - 2 + mod)%mod))%mod;
		n -= cycles[i];
	}
	ans = (ans*binpow(2, n)) % mod;
	cout << ans;
	return 0;
}