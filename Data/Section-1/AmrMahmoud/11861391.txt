#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<pair<int, int>, int> arr[200005];
int sum[200005];
int cnt[200005];
int tree[400005];
int tree2[400005];
int pos[200005];

void update2(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree2[i] = val;
    return ;
  }
  if(node <= (L + R) / 2)
    update2(i*2 + 1, L, (L + R) / 2, node, val);
  else update2(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree2[i] = tree2[i*2 + 1] + tree2[i*2 + 2];
}

int query2(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree2[i];
  if(L > y || R < x)
    return 0;
  return query2(i*2 + 1, L, (L + R) / 2, x, y) + query2(i*2 + 2, (L + R) / 2 + 1, R, x, y);
}

void update(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree[i] = val;
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree[i] = tree[i*2 + 1] + tree[i*2 + 2];
}

int query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return query(i*2 + 1, L, (L + R) / 2, x, y) + query(i*2 + 2, (L + R) / 2 + 1, R, x, y);
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("funny.in", "r", stdin);
  //freopen("funny.out", "w", stdout);
  int n;
  cin >> n;
  for(int i=0;i<n;i++)
  {
    cin >> arr[i].f.f;
    cnt[arr[i].f.f]++;
    arr[i].s = i;
  }
  vector<pair<int, int> > v;
  for(int i=0;i<n;i++)
  {
    cin >> arr[i].f.s;
    v.pb(mp(arr[i].f.s, i));
  }
  sort(v.begin(), v.end());
  sort(arr, arr + n);
  for(int i=0;i<n;i++)
  {
    pos[v[i].s] = i;
    update(0, 0, n - 1, i, v[i].f);
    update2(0, 0, n - 1, i, 1);
  }
  int res = 0, sol = INF, p = 0;
  for(int i=n-1;i>=0;i--)
  {
    if(i != n - 1 && arr[i].f.f == arr[i + 1].f.f)
      continue;
    for(int j=0;j<cnt[arr[i].f.f];j++)
    {
      update(0, 0, n - 1, pos[arr[i-j].s], 0);
      update2(0, 0, n - 1, pos[arr[i-j].s], 0);
    }
    if(cnt[arr[i].f.f] > (i + 1) / 2)
      sol = min(sol, res);
    else
    {
      int tmp = res, rem = min(i + 1 - cnt[arr[i].f.f], i + 1 - (cnt[arr[i].f.f] * 2 - 1)), ind = 0;
      while(tmp < sol && rem)
      {
        tmp+=query(0, 0, n - 1, ind, ind + rem - 1);
        int x = query2(0, 0, n - 1, ind, ind + rem - 1);
        ind+=rem;
        rem-=x;
      }
      sol = min(tmp, sol);
    }
    for(int j=0;j<cnt[arr[i].f.f];j++)
      res+=arr[i-j].f.s;
  }
  cout << sol;
  return 0;
}
