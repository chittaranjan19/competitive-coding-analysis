#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

int main() {
    // freopen("615B.in", "r", stdin);
    
    int n, m;
    scanf("%d %d", &n, &m);
    vector<vi> edges(n+1);
    while (m--) {
    	int a, b;
    	scanf("%d %d", &a, &b);
    	edges[a].pub(b);
    	edges[b].pub(a);
    }

    ll ans = 0;
    vi dp_inc(n+1, 1), dp_dec(n+1, 1);
    // for (int node_idx = n; node_idx > 0; node_idx--) {
    // 	int opt_neigh_dec = 0;
    // 	iterate(neighbor_p, edges[node_idx]) {
    // 		int neighbor = *neighbor_p;
    // 		if (neighbor > node_idx) {
    // 			opt_neigh_dec = max(opt_neigh_dec, dp_dec[neighbor]);
    // 		}
    // 	}
    // 	dp_dec[node_idx] += opt_neigh_dec;
    // 	// printf("%d: %d\n", node_idx, dp_dec[node_idx]);
    // 	ans = max(ans, (ll) edges[node_idx].size()*dp_dec[node_idx]);
    // }

    for (int node_idx = 1; node_idx <= n; ++node_idx) {
    	int opt_neigh_inc = 0;
    	iterate(neighbor_p, edges[node_idx]) {
    		int neighbor = *neighbor_p;
    		if (neighbor < node_idx) {
    			opt_neigh_inc = max(opt_neigh_inc, dp_inc[neighbor]);
    		}
    	}
    	dp_inc[node_idx] += opt_neigh_inc;
    	// printf("%d: %d\n", node_idx, dp_inc[node_idx]);
    	ans = max(ans, (ll) edges[node_idx].size()*dp_inc[node_idx]);
    }

    printf("%I64d\n", ans);

    return 0;
}