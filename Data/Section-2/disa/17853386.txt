#include <algorithm>
#include <cmath>
#include <set>
#include <vector>
#include <map>
#include <stack>
#include <iomanip>
#include <sstream>


using namespace std;


typedef long long ll;

#if _DEBUG
#include <fstream>
ifstream cin("input.txt");
ofstream cout("output.txt");
#else
#include <iostream>
#endif


struct Point {
	int x, y;
	Point() {}
	Point(int x, int y) : x(x), y(y) {}
};

double dis(Point p1, Point p2) {
	return sqrt((double)(p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

int main() {
	Point a, b, c;
	cin >> a.x >> a.y >> b.x >> b.y >> c.x >> c.y;
	int n;
	cin >> n;
	vector <Point> p(n);
	for (int i = 0; i < n; i++) {
		cin >> p[i].x >> p[i].y;
	}
	double ans = 0;
	for (int i = 0; i < n; i++) {
		ans += 2 * dis(c, p[i]);
	}
	double ans1 = -1e18, ans2 = -1e18;
	int id = 0;
	for (int i = 0; i < n; i++) {
		double now = 0;
		now += dis(c, p[i]);
		now -= dis(a, p[i]);
		if (ans1 < now) {
			ans1 = now;
			id = i;
		}
	}
	for (int i = 0; i < n; i++) {
		if (id == i) continue;
		double now = 0;
		now += dis(c, p[i]);
		now -= dis(b, p[i]);
		if (ans2 < now) {
			ans2 = now;
		}
	}
	double anss1 = ans - ans1 - ans2;
	ans2 = -1e18;
	ans1 = -1e18;
	for (int i = 0; i < n; i++) {
		double now = 0;
		now += dis(c, p[i]);
		now -= dis(b, p[i]);
		if (ans2 < now) {
			ans2 = now;
			id = i;
		}
	}
	for (int i = 0; i < n; i++) {
		if (i == id) continue;
		double now = 0;
		now += dis(c, p[i]);
		now -= dis(a, p[i]);
		if (ans1 < now) {
			ans1 = now;
		}
	}
	double anss2 = ans - ans1 - ans2;
	cout << fixed << setprecision(15) << min(anss1, anss2);
	return 0;
}