#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

int col[105];

int main()
{
    int n,m;
    cin >> n >> m;
    int arr[n],x,y;
    for(int i=0;i<n;i++)
        cin >> arr[i];
    memset(col,-1,sizeof(col));
    bool valid = true;
    for(int i=0;i<m;i++)
    {
        cin >> x >> y;
        int now = -1;
        for(int j=x;j<=(y + x)/2;j++)
        {
            if(col[j] != -1)
            {
                if(now == -1)
                    now = col[j];
                else if(now != col[j])
                    valid = false;
            }
        }
        int notnow=-1;
        for(int j = (y + x)/2+1;j<=y;j++)
        {
            if(col[j] != -1)
            {
                if(notnow == -1)
                    notnow = col[j];
                else if(notnow != col[j])
                    valid = false;
            }
        }
        if(now == notnow && now != -1 && notnow != -1)
        {
            valid = false;
        }
        if(!valid)
            break;
        if(now == -1 && notnow == -1)
            now = 0,notnow=1;
        if(now == -1)
            now = 1 - notnow;
        if(notnow == -1)
            notnow = 1-now;
        for(int j=x;j<=(y + x)/2;j++)
            col[j] = now;
        for(int j = (y + x)/2+1;j<=y;j++)
            col[j] = notnow;
    }
    if(!valid)
        cout << -1;
    for(int i=0;i<n && valid;i++)
        cout << col[arr[i]] << " ";
    return 0;
}
