#include <bits/stdc++.h>
#define LL long long
#define gc getchar
using namespace std;
template <typename T> void scanint(T &x) {
	T c = gc(); while(((c < 48) || (c > 57)) && (c!='-')) c = gc();
	bool neg = false; if(c == '-') neg = true; x = 0; for(;c < 48 || c > 57;c=gc());
	for(;c > 47 && c < 58;c=gc())	x = (x*10) + (c - 48); if(neg)	x = -x;
}

const int MAXN = 1e5 + 3;
const LL mod = 1e9 + 7;

LL arr[MAXN], n;

struct matrix {
    LL mat[2][2];
    matrix() {
        mat[0][0] = mat[0][1] = mat[1][0] = mat[1][1] = 0;
    }
    matrix(int a, int b, int c, int d) {
        mat[0][0] = a, mat[0][1] = b, mat[1][0] = c, mat[1][1] = d;
    }
    matrix operator*(const matrix &other) const {
        matrix c;
        for(int i = 0; i < 2; i++) {
            for(int j = 0; j < 2; j++) {
                for(int k = 0; k < 2; k++) {
                    c.mat[i][j] += (mat[i][k] * other.mat[k][j]) % mod;
                    c.mat[i][j] %= mod;
                }
            }
        }
        return c;
    }
    matrix operator%(LL m) {
        mat[0][0] %= m, mat[1][1] %= m, mat[0][1] %= m, mat[1][0] %= m;
        return *this;
    }
    matrix operator+(const matrix &other) const {
        matrix c = *this;
        for(int i = 0; i < 2; i++) for(int j = 0; j < 2; j++)
            c.mat[i][j] += other.mat[i][j],
            c.mat[i][j] %= mod;
        return c;
    }
    matrix& operator+=(const matrix &other) {
        for(int i = 0; i < 2; i++) for(int j = 0; j < 2; j++)
            mat[i][j] += other.mat[i][j],
            mat[i][j] %= mod;
        return *this;
    }
    friend ostream& operator<<(ostream &os, matrix &mat) {
        for(int i = 0; i < 2; i++) {
            for(int j = 0; j < 2; j++)
                os << mat.mat[i][j] << ' ';
            os << '\n';
        }
        return os;
    }
    LL get_answer() {
        return ((mat[0][1] % mod) + mod) % mod;
    }
    bool valid() {
        return max(mat[0][0], mat[0][1]) > 0 or max(mat[1][0], mat[1][1]) > 0;
    }
};
matrix mat_expo(matrix x, LL e) {
    matrix res;
    res.mat[0][0] = res.mat[1][1] = 1;
    while(e) {
        if(e % 2) { res = res * x; }
        x = x * x, e /= 2;
    }
    return res;
}
matrix id, trans, zero;
// End matrix expo

struct node {
    matrix val, lazy;
    void merge(node &l, node &r) {
        val = l.val + r.val;
    }
    void split(node &l, node &r) {
        if(lazy.valid()) {
            l.val = l.val * lazy;
            r.val = r.val * lazy;
            l.lazy = l.lazy + lazy, r.lazy = r.lazy + lazy;
            lazy = zero;
        }
    }
} tree[MAXN * 4];

void bt(int root = 1, int l = 1, int r = n) {
    tree[root].lazy = zero;
    if(l == r) {
        tree[root].val = mat_expo(trans, arr[l]);
        return ;
    }
    int mid = (l + r) / 2;
    bt(root*2, l, mid);
    bt(root*2+1, mid + 1, r);
    tree[root].merge(tree[root*2], tree[root*2+1]);
}
void update(int ql, int qr, matrix &x, int root = 1, int l = 1, int r = n) {
    if(ql <= l and qr >= r) {
        tree[root].val = tree[root].val * x;
        tree[root].lazy = tree[root].lazy * x;
        return ;
    }
    tree[root].split(tree[root*2], tree[root*2+1]);
    int mid = (l + r) / 2;
    if(ql <= mid)
        update(ql, qr, x, root*2, l, mid);
    if(qr > mid)
        update(ql, qr, x, root*2+1, mid + 1, r);
    tree[root].merge(tree[root*2], tree[root*2+1]);
}
LL query(int ql, int qr, int root = 1, int l = 1, int r = n) {
    if(ql <= l and qr >= r) {
        return tree[root].val.get_answer();
    }
    tree[root].split(tree[root*2], tree[root*2+1]);
    int mid = (l + r) / 2;
    LL res = 0;
    if(ql <= mid)
        res += query(ql, qr, root*2, l, mid);
    if(qr > mid)
        res = (res + query(ql, qr, root*2+1, mid + 1, r)) % mod;
    tree[root].merge(tree[root*2], tree[root*2+1]);
    return res;
}

int main() {
    trans = matrix(0, 1, 1, 1);
    id = matrix(1, 0, 0, 1);
    int q, opt;
    LL a, b, x;
    scanint(n), scanint(q);
    for(int i = 1; i <= n; i++) {
        scanint(arr[i]);
    }
    bt();
    while(q--) {
        scanint(opt);
        scanint(a), scanint(b);
        if(opt == 1) {
            scanint(x);
            matrix temp = mat_expo(trans, x);
            update(a, b, temp);
        } else {
            LL res = query(a, b);
            cout << res << '\n';
        }
    }
    return 0;
}
