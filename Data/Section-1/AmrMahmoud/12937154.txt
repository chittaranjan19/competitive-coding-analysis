#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

struct point_a
{
  int x, y, ind;

  point_a(int a,int b, int c): x(a), y(b), ind(c) {};

  bool operator < (const point_a &tmp) const
  {
    if(tmp.x == x) return y < tmp.y;
    return x < tmp.x;
  }
};

struct point_b
{
  int x, y, ind;

  point_b(int a,int b, int c): x(a), y(b), ind(c) {};

  bool operator < (const point_b &tmp) const
  {
    if(tmp.y == y) return x < tmp.x;
    return y < tmp.y;
  }
};

vector<int> sol;
int n;
pair<int, int> arr[1000005];
set<point_a> s1;
set<point_b> s2;

bool solve(int a, int b)
{
  for(int i=0;i<n;i++)
  {
    s1.insert(point_a(arr[i].f * a, arr[i].s * a, i));
    s2.insert(point_b(arr[i].f * a, arr[i].s * a, i));
  }
  set<point_a>::iterator it1;
  set<point_b>::iterator it2;
  LL res = 0;
  int ind = -1, x, y;
  if(rand() % 2)
  {
    it1 = s1.begin();
    x = (*it1).x;
    y = (*it1).y;
    ind = (*it1).ind;
    s1.erase(it1);
    s2.erase(point_b(x, y, ind));
  }
  else
  {
    it2 = s2.begin();
    x = (*it2).x;
    y = (*it2).y;
    ind = (*it2).ind;
    s2.erase(it2);
    s1.erase(point_a(x, y, ind));
  }
  sol.pb(ind);
  for(int i=1;i<n;i++)
  {
    it1 = s1.lower_bound(point_a(x, y, ind));
    if(it1 == s1.end())
      it1--;
    it2 = s2.lower_bound(point_b(x, y, ind));
    if(it2 == s2.end())
      it2--;
    int ch1 = 0, ch2 = 0;
    ch1 = abs((*it1).x - x) + abs((*it1).y - y);
    ch2 = abs((*it2).x - x) + abs((*it2).y - y);
    if(ch1 < ch2)
    {
      res += ch1;
      x = (*it1).x;
      y = (*it1).y;
      ind = (*it1).ind;
      s1.erase(it1);
      s2.erase(point_b(x, y, ind));
    }
    else
    {
      res += ch2;
      x = (*it2).x;
      y = (*it2).y;
      ind = (*it2).ind;
      s2.erase(it2);
      s1.erase(point_a(x, y, ind));
    }
    sol.pb(ind);
  }
  return (res <= 2500000000LL);
}

int main()
{
  scanf("%d", &n);
  for(int i=0;i<n;i++)
    scanf("%d %d", &arr[i].f, &arr[i].s);
  bool test = false;
  for(int i=-1;i<=1 && !test;i+=2)
    for(int j=-1;j<=1 && !test;j+=2)
      test = solve(i, j);
  assert(test);
  for(int i=0;i<n;i++)
    printf("%d ", sol[i] + 1);
  return 0;
}
