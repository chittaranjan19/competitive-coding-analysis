#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const int MAXN = 2e5 + 10;

int N, C;
int A[MAXN];
int has[MAXN];
int prv[MAXN];
bool good[MAXN];

int main() {
	scanf("%d %d", &C, &N);
	for (int i = 0; i < N; i++) {
		scanf("%d", &A[i]);
		has[A[i]]++;
	}
	sort(A, A + N);

	int val = 0;
	for (int i = 1; i < MAXN; i++) {
		if (has[i]) {
			val = i;
		}
		prv[i] = val;
	}

	vector<int> vc;
	//simulate
	int cur = C, ptr = prv[C];
	while (cur) {
		//check whether possible
		int p = prv[ptr];
		if (p == 0) {
			break;
		}

		ll nval = cur - has[p] * ll(p);
		if (nval < 0) {
			for (int i = 0; i < cur / p; i++) {
				vc.push_back(p);
			}
			cur %= p;
		} else {
			for (int i = 0; i < has[p]; i++) {
				vc.push_back(p);
			}
			cur = nval;
		}
		ptr = p - 1;
	}

	if (cur) {
		puts("0");
		return 0;
	}

	vector<int> sums;
	for (int x : vc) {
		if (sums.empty()) {
			sums.push_back(x);
		} else {
			sums.push_back(sums.back() + x);
		}
	}

	good[0] = 1;
	int ans = 1e6;
	int pcval = 0;
	for (int i = vc.size() - 1; i >= 0; i--) {
		int pval = (i ? vc[i - 1] : 1e6);
		int cval = vc[i];
		//printf("---------AT VALUE %d--------\n", cval);

		int crem = C - (i ? sums[i - 1] : 0);

		//pval >= take && take > val
		if (pval == cval) {
			continue;
		}

		//printf("taino %d %d\n", pcval, cval);
		for (int v = pcval + 1; v <= cval; v++) {
			//printf("cmon has[%d] = %d\n", v, has[v]);
			for (int it = 0; it < has[v]; it++) { 
				//printf("cuanto %d\n", v);
				for (int j = C; j >= v; j--) {
					good[j] |= good[j - v];
				}
			}
		}

		/*
		for (int j = 0; j <= C; j++) {
			printf("good[%d] = %s\n", j, (good[j] ? "true" : "false"));
		}
		*/

		for (int j = 0; j <= crem; j++) {
			if (good[j]) {
				continue;
			}

			int r = crem - j;
			if (pval >= r && r >= cval) {
				//should the right onebe >= or > ?
				//printf("found nongood %d\n", r);
				ans = min(ans, r);
			}
		}
		pcval = cval;
	}

	if (ans == 1e6) {
		puts("Greed is good");
	} else {
		printf("%d\n", ans);
	}
}
