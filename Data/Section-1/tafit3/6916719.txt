import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;

public class BoryaAndHanabi {
    private BoryaAndHanabi() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String h = rd.readLine();
        int n = Integer.parseInt(h);
        h = rd.readLine();
        String[] cards = h.split("\\s+");
        boolean[][] cardExists = new boolean[5][5];
        int[] colorToIndex = new int['Z'];
        colorToIndex['R'] = 0;
        colorToIndex['G'] = 1;
        colorToIndex['B'] = 2;
        colorToIndex['Y'] = 3;
        colorToIndex['W'] = 4;
        for(String c: cards) {
            cardExists[colorToIndex[c.charAt(0)]][c.charAt(1)-'0'] = true;
        }
        int minHints = 10;
        for(int i=0;i<(1<<10);i++) {
            boolean hintsOk = true;
            boolean singleUsed = false;
            for(int j=0;hintsOk && j<5;j++) {
                for(int k=0;hintsOk && k<5;k++) {
                    if(cardExists[j][k]) {
                        boolean colorHint = chint(i, j);
                        boolean digitHint = dhint(i, k);
                        if(!colorHint && !digitHint) {
                            if(singleUsed) {
                                hintsOk = false;
                                break;
                            } else {
                                singleUsed = true;
                            }
                        } else if(colorHint && !digitHint) {
                            for(int m=0;m<5;m++) {
                                if(m != k && cardExists[j][m]) {
                                    if(!dhint(i, m)) {
                                        hintsOk = false;
                                        break;
                                    }
                                }
                            }
                        } else if(!colorHint && digitHint) {
                            for(int m=0;m<5;m++) {
                                if(m != j && cardExists[m][k]) {
                                    if(!chint(i, m)) {
                                        hintsOk = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if(hintsOk) {
                int hints = new BigInteger(i+"").bitCount();
                minHints = Math.min(minHints, hints);
            }
        }
        out(minHints);
    }

    private boolean chint(int i, int x) {
        return (i & (1<<x)) > 0;
    }

    private boolean dhint(int i, int x) {
        return (i & (1<<(x+5))) > 0;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new BoryaAndHanabi();
    }
}
