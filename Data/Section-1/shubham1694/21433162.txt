#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

struct node {
	int prefOnes, suffOnes, maxOnes, len;
	node* L;
	node* R;
	node() {
		this->L = this->R = NULL;
		this->prefOnes = this->suffOnes = this->maxOnes = this->len = 0;
	}
};

int n;
pii height[maxn];
node* root[maxn];
node* temp;

void init(int s, int e, node* cur) {
	if (s == e) {
		cur->len = 1;
		return;
	}
	int mid = (s + e) >> 1;
	cur->L = new node();
	cur->R = new node();
	init(s, mid, cur->L);
	init(mid + 1, e, cur->R);
	cur->len = cur->L->len + cur->R->len;
}

void insert(node* cur, node* prev, int l, int r, int q) {
	if (l == r) {
		cur->prefOnes = cur->suffOnes = cur->maxOnes = cur->len = 1;
		return;
	}
	int mid = (l + r) >> 1;
	if (q <= mid) {
		if (cur->L == NULL)
			cur->L = new node();
		insert(cur->L, prev->L, l, mid, q);
		cur->R = prev->R;
	}
	else {
		if (cur->R == NULL)
			cur->R = new node();
		insert(cur->R, prev->R, mid + 1, r, q);
		cur->L = prev->L;
	}
	cur->maxOnes = max(cur->L->maxOnes, max(cur->R->maxOnes, cur->L->suffOnes + cur->R->prefOnes));
	if (cur->L->prefOnes == cur->L->len)
		cur->prefOnes = cur->L->prefOnes + cur->R->prefOnes;
	else
		cur->prefOnes = cur->L->prefOnes;
	if (cur->R->suffOnes == cur->R->len)
		cur->suffOnes = cur->L->suffOnes + cur->R->suffOnes;
	else
		cur->suffOnes = cur->R->suffOnes;
	cur->len = cur->L->len + cur->R->len;
}

void merge(node* cur) {
	node* ret = new node();
	ret->maxOnes = max(temp->maxOnes, max(cur->maxOnes, temp->suffOnes + cur->prefOnes));
	if (temp->prefOnes == temp->len)
			ret->prefOnes = temp->prefOnes + cur->prefOnes;
	else
		ret->prefOnes = temp->prefOnes;
	if (cur->suffOnes == cur->len)
		ret->suffOnes = temp->suffOnes + cur->suffOnes;
	else
		ret->suffOnes = cur->suffOnes; 
	ret->len = temp->len + cur->len;
	swap(ret, temp);
	delete(ret);
}

void query(node* cur, int s, int e, int qs, int qe) {
	if (s >= qs && qe >= e) {
		merge(cur);
		return;
	}
	int mid = (s + e) >> 1;
	if (qe <= mid) {
		query(cur->L, s, mid, qs, qe);
	}
	else if (qs > mid)
		query(cur->R, mid + 1, e, qs, qe);
	else {
		query(cur->L, s, mid, qs, qe);
		query(cur->R, mid + 1, e, qs, qe);
	}
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &height[i].f);
		height[i].s = i + 1;
	}
	sort(height, height + n);
	reverse(height, height + n);
	root[0] = new node();
	init(1, n, root[0]);
	for (int i = 1; i <= n; i++) {
		root[i] = new node();
		insert(root[i], root[i - 1], 1, n, height[i-1].s);
	}
	int q, l, r, w, L, R, ans;
	scanf("%d", &q);
	while (q--) {
		scanf("%d%d%d", &l, &r, &w);
		L = 1, R = n, ans = n;
		while (L < R) {
			int m = (L + R) >> 1;
			temp = new node();
			query(root[m], 1, n, l, r);
			if (temp->maxOnes >= w)
				ans = R = m;
			else
				L = m + 1;
		}
		printf("%d\n", height[ans-1].f);
	}
	return 0;
}
