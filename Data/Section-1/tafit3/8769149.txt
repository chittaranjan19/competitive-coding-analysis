import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemB {
    BufferedReader rd;

    private ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int m = a[1];
        int c = pint();
        int[] cminx = new int[2];
        int[] cmaxx = new int[2];
        int[] cminy = new int[2];
        int[] cmaxy = new int[2];
        int minx = n;
        int maxx = 0;
        int miny = m;
        int maxy = 0;
        for(int i=0;i<c;i++) {
            int[] h = intarr();
            int x = h[0];
            int y = h[1];
            if(x < minx) {
                minx = x;
                cminx = new int[] { y, y };
            } else if(x == minx) {
                if(y < cminx[0]) {
                    cminx[0] = y;
                }
                if(y > cminx[1]) {
                    cminx[1] = y;
                }
            }
            if(x > maxx) {
                maxx = x;
                cmaxx = new int[] { y, y };
            } else if(x == maxx) {
                if(y < cmaxx[0]) {
                    cmaxx[0] = y;
                }
                if(y > cmaxx[1]) {
                    cmaxx[1] = y;
                }
            }
            if(y < miny) {
                miny = y;
                cminy = new int[] { x, x };
            } else if(y == miny) {
                if(x < cminy[0]) {
                    cminy[0] = x;
                }
                if(x > cminy[1]) {
                    cminy[1] = x;
                }
            }
            if(y > maxy) {
                maxy = x;
                cmaxy = new int[] { x, x };
            } else if(y == maxy) {
                if(x < cmaxy[0]) {
                    cmaxy[0] = x;
                }
                if(x > cmaxy[1]) {
                    cmaxy[1] = x;
                }
            }
        }
        int[][] p = new int[8][2];
        p[0][0] = minx;
        p[0][1] = cminx[0];
        p[1][0] = minx;
        p[1][1] = cminx[1];
        p[2][0] = maxx;
        p[2][1] = cmaxx[0];
        p[3][0] = maxx;
        p[3][1] = cmaxx[1];
        p[4][0] = cminy[0];
        p[4][1] = miny;
        p[5][0] = cminy[1];
        p[5][1] = miny;
        p[6][0] = cmaxy[0];
        p[6][1] = maxy;
        p[7][0] = cmaxy[1];
        p[7][1] = maxy;
        int h = pint();
        int minDist = 2100000000;
        int idx = 0;
        for(int i=0;i<h;i++) {
            int[] r = intarr();
            int dist = 0;
            for(int j=0;j<8;j++) {
                dist = Math.max(dist, d(r,p[j]));
            }
            if(dist < minDist) {
                minDist = dist;
                idx = i+1;
            }
        }
        out(minDist);
        out(idx);
    }

    private int d(int[] a, int[] b) {
        return Math.abs(a[0]-b[0]) + Math.abs(a[1]-b[1]);
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = s.split(" ");
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
