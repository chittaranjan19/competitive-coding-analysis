#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

bool sePuede (tint a, vector<tint> &c) // Siempre ocurre que a <= c[0] + c[1]
{
	tint tr = c[2], tg = c[1], tb = c[0];
	tint pb = min(tb,a);
	tint pg = a-pb;
	tb -= pb;
	tg -= (a - pb);
	tr -= pg;
	return (tr+tg+tb >= 2*(pb)+pg);
	
}

int main()
{
	
	vector<tint> c (3);
	forn(i,3)
		cin >> c[i];
	sort(c.begin(),c.end());
	tint cinf = 0;
	tint csup = c[0] + c[1];
	tint a;
	while (csup - cinf > 1)
	{
		a = (csup + cinf)/2;
		if (sePuede(a,c))
			cinf = a;
		else
			csup = a;
	}
	
	cout << cinf << endl;
	return 0;
}
