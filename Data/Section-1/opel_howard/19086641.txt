#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <climits>
#ifdef DEBUG
	#include <ctime>
#endif
using namespace std;

// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define rep(it, n) for(int it = 0; it < n; ++it)
#define rep1(it, n) for(int it = 1; it <= n; ++it)
#define loop(it, from, to) for(int it = (from); it <= (to); ++it)
#define reverse_iterate(it, cont) for(__typeof((cont).rend()) it = (cont).rbegin(); it != (cont).rend(); ++it)
#define iterate(it, cont) for(__typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define all(cont) (cont).begin(), (cont).end()

typedef unsigned long long ull;
typedef long long ll;

const int INF = INT_MAX;
const int NINF = INT_MIN;
const ll INF_LL = LLONG_MAX;
const ll NINF_LL = LLONG_MIN;
const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, ##args)
	#define rep_rt() printf("[Run time: %.3fs]\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...)
#endif

// end of template

int is_u(string &str) {
	for (int it = str.length()-1; it >= 0; --it) {
		if (str[it] != '0')
			return it+1;
	}
	return 0;
}

int main() {
#ifdef DEBUG
	freopen("691C.in", "r", stdin);
#endif
    
    string str;
    getline(cin, str);
    int idx = 0;
    bool is_neg_e = false;
    for (; idx != (int) str.length(); ++idx) {
    	if ((str[idx] == '0') or (str[idx] == '.')) {
    		if (str[idx] == '.')
    			is_neg_e = true;
    		continue;
    	}
    	break;
    }
    if (idx == (int) str.length()) {
    	puts("0");
    	return 0;
    }
    printf("%c", str[idx]);
    string substr = "";
    int e = 0;
    string pos_substr = "";
    if (!is_neg_e) {
    	++idx;
    	for (; (idx != (int) str.length()) and (str[idx] != '.'); ++idx) {
    		pos_substr += str[idx];
    	}
    	e = pos_substr.length();
    	// substr += pos_substr.substr(0, is_u(pos_substr));
    	if (idx != (int) str.length())
    		++idx;
    } else {
    	for (int it = idx-1; str[it] != '.'; --it) {
    		--e;
    	}
    	--e;
    	++idx;
    }
	string neg_substr = "";
	while (idx != (int) str.length()) {
		neg_substr += str[idx++];
	}
	neg_substr = neg_substr.substr(0, is_u(neg_substr));
    if (!neg_substr.length()) {
        pos_substr = pos_substr.substr(0, is_u(pos_substr));
    }
    substr = pos_substr+neg_substr;
    if (substr.length()) {
    	printf(".%s", substr.c_str());
    }
    if (e) {
    	printf("E%d", e);
    }
    printf("\n");

#ifdef DEBUG
    rep_rt();
#endif
    return 0;
}