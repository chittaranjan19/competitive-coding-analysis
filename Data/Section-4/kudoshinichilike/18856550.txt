#include <stdio.h>
#include <vector>
#include <iostream>
#include <utility>
 
#define out(a) printf("%d ", a)
#define endl printf("\n")
 
typedef long long ll;
 
using namespace std;
 
const ll maxN = 400000, base = 1e9+7;
 
vector < vector <int> > ad(maxN);
pair <int, int> range[maxN];
int a[maxN], vt[maxN], cnt, n;
ll it1[maxN*4], it2[maxN*4], lazy1[maxN*4], lazy2[maxN*4], lv[maxN];
 
int dfs(int u, int level){
 
	int j;
	lv[u] = level;
	a[++cnt] = u;
	vt[u] = cnt;
	range[u].first = cnt;
	for(j=0; j<ad[u].size(); j++)
		dfs(ad[u][j], level+1);
	range[u].second = cnt;
	return 0;
}
 
int update(int k, int i, int j, int l, int r, ll *it, ll *lazy, ll x){
 
	int mid = (l+r)/2;
 
	if (lazy[k]){
		it[k] = (it[k] + lazy[k]) % base;
		if(l != r){
			lazy[k * 2] += lazy[k];
			lazy[k * 2 + 1] += lazy[k];
		}
		lazy[k] = 0;
	}
	if (r < i || l > j) return 0;
	if (l >= i && r <= j){
		lazy[k] += x;
		return 0;
	}
	update(k * 2, i, j, l, mid, it, lazy, x);
	update(k * 2 + 1, i, j, mid+1, r, it, lazy, x);
	return 0;
}
 
int query(int k, int i, int l, int r, ll *it, ll *lazy, ll &x){
 
	int mid = (l+r)/2;
 
	if (lazy[k]){
		it[k] = (it[k] + lazy[k]) % base;
		if(l != r){
			lazy[k * 2] += lazy[k];
			lazy[k * 2 + 1] += lazy[k];
		}
		lazy[k] = 0;
	}
	if (l==r){
		x = (x + it[k]) % base;
		return 0;
	}
	if (i <= mid) query(k * 2, i, l, mid, it, lazy, x);
	else query(k * 2 + 1, i, mid+1, r, it, lazy, x);
 
	return 0;
}
 
int process(){
 
	int i, tmp, q, mode;
	ll x = 0, y = 0, k;
	int v;
 
	scanf("%d", &n);
	for (i=2; i<=n; i++){
		scanf("%d", &tmp);
		ad[tmp].push_back(i);
	}
	dfs(1, 1);
	scanf("%d", &q);
	while(q){
		q--;
		scanf("%d", &mode);
		if(mode==1){
			cin >> v >> x >> k;
			update(1, range[v].first, range[v].second, 1, n, it1, lazy1, (x + lv[v] * k) % base);
			update(1, range[v].first, range[v].second, 1, n, it2, lazy2, k);
		}
		else{
			cin >> v;
			x = 0;
			y = 0;
			query(1, vt[v], 1, n, it1, lazy1, x);
			query(1, vt[v], 1, n, it2, lazy2, y);
			x = ((x - (y % base)*lv[v]) % base + base) % base;
			cout << x << "\n";
		}
	}
	return 0;
}
 
int main(){
	#ifndef ONLINE_JUDGE
		freopen("1.INP", "r", stdin);
		freopen("1.OUT", "w", stdout);
	#endif
	cin.tie();
	cout.tie();
	process();
	return 0;
}
 