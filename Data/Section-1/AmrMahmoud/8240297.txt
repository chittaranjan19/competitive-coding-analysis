#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

map<int, int> here;
int arr[100005],counter[100005];
bool visited[100005],color[100005];

int main()
{
    //freopen("9.in","r",stdin);
    //freopen("9.out","w",stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n,a,b;
    cin >> n >> a >> b;
    for(int i=1;i<=n;i++)
    {
        cin >> arr[i];
        here[arr[i]] = i;
    }
    queue<int> q;
    for(int i=1;i<=n;i++)
    {
        if(here[a - arr[i]])
            counter[i]++;
        if(here[b - arr[i]])
            counter[i]+=2;
        if(counter[i] == 0)
        {
            cout << "NO\n";
            return 0;
        }
        if(counter[i] == 1 || counter[i] == 2)
            q.push(i);
    }
    visited[0] = true;
    while(!q.empty())
    {
        int temp = q.front();
        q.pop();
        if(visited[temp]) continue;
        visited[temp] = true;
        if(counter[temp] == 1)
        {
            if(!visited[here[a - arr[temp]]] || a - arr[temp] == arr[temp])
            {
                visited[here[a - arr[temp]]] = true;
                color[temp] = color[here[a - arr[temp]]] = 1;
            }
            if(!visited[here[b - arr[temp]]])
            {
                counter[here[b - arr[temp]]]-=2;
                if(counter[here[b - arr[temp]]] == 1)
                    q.push(here[b - arr[temp]]);
            }
            int temp2 = a - arr[temp];
            if(!visited[here[b - temp2]])
            {
                counter[here[b - temp2]]-=2;
                if(counter[here[b - temp2]] == 1)
                    q.push(here[b - temp2]);
            }
        }
        else if(!visited[here[b - arr[temp]]] || b - arr[temp] == arr[temp])
        {
            visited[here[b - arr[temp]]] = true;
            if(!visited[here[a - arr[temp]]])
            {
                counter[here[a - arr[temp]]]--;
                if(counter[here[a - arr[temp]]] == 2)
                    q.push(here[a - arr[temp]]);
            }
            int temp2 = b - arr[temp];
            if(!visited[here[a - temp2]])
            {
                counter[here[a - temp2]]--;
                if(counter[here[a - temp2]] == 2)
                    q.push(here[a - temp2]);
            }
        }
        else
        {
            cout << "NO\n";
            return 0;
        }
    }
    cout << "YES\n";
    for(int i=1;i<=n;i++)
    {
        if(color[i]) cout << "0 ";
        else cout << "1 ";
    }
    return 0;
}