#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <unordered_map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const int inf = (int)1e9;
const int MOD = (int)1e9 + 7;
const int p = 239;
const int MAX_N = 10;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

int a[200000];
bool used[MAX_N];
vector<int> tree[MAX_N];

int main()
{
	//ifstream ifs("input.txt");
	//ofstream ofs("output.txt");
	//freopen("candies.in", "r", stdin);
	//freopen("candies.out", "w", stdout);
	//ios_base::sync_with_stdio(0);
	//cin.tie(0);
	int n;
	scanf_s("%d", &n);
	for (int i = 0; i < n; i++)
		scanf_s("%d", &a[i]);
	for (int i = 0; i < MAX_N; i++)
		used[i] = false;
	for (int i = 0; i < n; i++)
		if (!used[a[i] - 1])
		{
			used[a[i] - 1] = true;
			for (int j = a[i]; j <= MAX_N; j += a[i])
			{
				tree[j - 1].push_back(j);
				if (min(j + a[i] - 2, MAX_N) < MAX_N - 1)
					tree[min(j + a[i] - 2, MAX_N) + 1].push_back(-j);
			}
		}
	int ans = 0;
	map<int, int> m;
	for (int i = 1; i <= MAX_N; i++)
	{
		for (int j = 0; j < tree[i - 1].size(); j++)
			if (tree[i - 1][j] > 0)
			{
				if (m.find(tree[i - 1][j]) == m.end())
					m[tree[i - 1][j]] = 0;
				m[tree[i - 1][j]]++;
			}
			else
			{
				m[-tree[i - 1][j]]--;
				if (m[-tree[i - 1][j]] == 0)
					m.erase(-tree[i - 1][j]);
			}
		cout << endl;
		if (used[i - 1] && m.size() > 0)
		{
			cout << m.begin()->first << endl;
			ans = max(ans, i - m.begin()->first);
		}
	}
	printf("%d", ans);
	return 0;
}
