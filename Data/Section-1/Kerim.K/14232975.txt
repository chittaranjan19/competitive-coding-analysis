#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"You can do IT.I belive YOU!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ordered_set s;
*/
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
char arr[1009][1009];
int vis[1009][1009],cost[1009][1009];
PII rr[1000009];
int dx[]={+1,-1,0,0},dy[]={0,0,+1,-1};
int n,m,k;
int das(int x,int y){
	if(x<0 or y<0 or x>=n or y>=m or vis[x][y]==1 or arr[x][y]=='*')
		return 1;
	return 0;	
}
void bfs(int x,int y){
	queue<PII>q;
	int ans=0,c=0;
	q.push(mp(x,y));
	while(!q.empty()){
		int nx=q.front().ff,ny=q.front().ss;
		vis[nx][ny]=1;
		q.pop();
		for(int i=0;i<4;i++){
			int tox=nx+dx[i],toy=ny+dy[i];
			if(arr[tox][toy]=='*')
				ans++;
			if(!das(tox,toy))
				q.push(mp(tox,toy));
		}
		rr[c++]={nx,ny};
	}
	for(int i=0;i<c;i++)
		cost[rr[i].ff][rr[i].ss]=ans;
}
int main(){
	cin>>n>>m>>k;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			scanf(" %c",&arr[i][j]);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			if(!vis[i][j] and arr[i][j]=='.')
				bfs(i,j);
	while(k--){
		int l,r;
		cin>>l>>r;
		l--,r--;
		printf("%d\n",cost[l][r]);
	}
	return 0;
}
