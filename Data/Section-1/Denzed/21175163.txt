#include <bits/stdc++.h>

#define f       first
#define s       second
#define mp      make_pair
#define rank    something_which_is_supposed_to_be_rank
#define left    something_which_is_supposed_to_be_left
#define right   something_which_is_supposed_to_be_right

using namespace std;

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const int N = 200000;
const pair<int,int> EMPTY = {0, 0};

int n, m, s, t, ds, dt, cnt_double;
vector<int> parent, rank;
vector<pair<int,int>> edges, spanning_tree, comp[2];

int get(int u) {
    return (u == parent[u] ? u : parent[u] = get(parent[u]));
}

inline bool check(int u) {
    return (u == s && !ds) || (u == t && !dt);
}

inline void decrease(int u) {
    if (u == s) {
        --ds;
    } else if (u == t) {
        --dt;
    }
}

inline void join(int u, int v) {
    pair<int,int> edge = {u, v};
    u = get(u);
    v = get(v);
    if (u == v || check(edge.f) || check(edge.s)) {
        return;
    }
    // cerr << "(" << edge.f << ", " << edge.s << ")";
    decrease(edge.f);
    decrease(edge.s);
    spanning_tree.push_back(edge);
    if (rank[v] < rank[u]) {
        swap(u, v);
    }
    parent[u] = v;
    rank[v] += (rank[u] == rank[v]);
}

inline void status(bool final = false) {
    cerr << spanning_tree.size() << (final ? "\n" : " -> ");
}

int main() {
    srand(time(0));
    cin.sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 0, a, b; i < m; ++i) {
        cin >> a >> b;
        edges.push_back({a, b});
    }
    cin >> s >> t >> ds >> dt;
    parent.resize(n + 1);
    rank.resize(n + 1);
    for (int i = 0; i <= n; ++i) {
        parent[i] = i;
    }
    status();
    for (auto e: edges) {
        if (e.f != s && e.f != t && e.s != s && e.s != t) {
            join(e.f, e.s);
        }
    }
    status();
    for (int i = 0; i < 2; ++i) {
        comp[i].resize(n + 1);
    }
    for (auto e: edges) {
        if (e.f == s || e.s == s) {
            comp[0][get(e.f == s ? e.s : e.f)] = e;
        }
        if (e.f == t || e.s == t) {
            comp[1][get(e.f == t ? e.s : e.f)] = e;
        }
    }
    int biconnected = 0;
    for (int i = 1; i <= n; ++i) {
        biconnected += (comp[0][i] != EMPTY) && (comp[1][i] != EMPTY);
        if (i != s && i != t && ((comp[0][i] != EMPTY) ^ (comp[1][i] != EMPTY))) {
            int j = (comp[0][i] == EMPTY);
            // cerr << "(" << comp[j][i].f << "," << comp[j][i].s << ")";
            join(comp[j][i].f, comp[j][i].s);
        }
    }
    status();
    if (comp[0][t] != EMPTY && !biconnected) {
        join(s, t);
    }
    status();
    for (auto e: edges) {
        if (e != make_pair(s, t) && e != make_pair(t, s)) {
            join(e.f, e.s);
        }
    }
    status(true);
    if ((int) spanning_tree.size() < n - 1) {
        cout << "No\n";
    } else {
        cout << "Yes\n";
        for (auto e: spanning_tree) {
            cout << e.f << " " << e.s << "\n";
        }
    }
    cerr << "Time elapsed: " << (ld) clock() / CLOCKS_PER_SEC << "\n";
    return 0;
}