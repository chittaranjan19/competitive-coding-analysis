#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;

const int inf = (int)2 * 1e18;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const long double pi = 3.1415926535897932;
const long double eps = 1e-6;

long double dist(long double x1, long double y1, long double x2, long double y2, long double x, long double y)
{
    for (int i = 0; i < 100; i++)
    {
        long double l1x = x1 + (x2 - x1) / 3;
        long double l1y = y1 + (y2 - y1) / 3;
        long double l2x = x2 - (x2 - x1) / 3;
        long double l2y = y2 - (y2 - y1) / 3;
        if ((x - l1x) * (x - l1x) + (y - l1y) * (y - l1y) <= (x - l2x) * (x - l2x) + (y - l2y) * (y - l2y))
        {
            x2 = l2x;
            y2 = l2y;
        }
        else
        {
            x1 = l1x;
            y1 = l1y;
        }
    }
    return ((x - x1) * (x - x1) + (y - y1) * (y - y1));
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, x, y;
    cin >> n >> x >> y;
    long long a[n][2];
    for (int i = 0; i < n; i++)
        cin >> a[i][0] >> a[i][1];
    long double dma = 0, dmi = inf;
    for (int i = 0; i < n; i++)
    {
        dma = max(dma, (long double)(x - a[i][0]) * (x - a[i][0]) + (y - a[i][1]) * (y - a[i][1]));
        dmi = min(dmi, dist(a[i][0], a[i][1], a[(i + 1) % n][0], a[(i + 1) % n][1], x, y));
    }
    cout.precision(15);
    cout << pi * (dma - dmi);
    return 0;
}
