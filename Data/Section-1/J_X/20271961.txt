#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <bitset>

using namespace std;

const int maxn = 1e5 + 5;
const int maxm = 1e3 + 5;
const int maxh = 13;

int t[maxn], ls[maxn * maxh], rs[maxn * maxh], node[maxn * maxh], tot1, tot2;
bitset<maxm> bs[maxn], tmp;

void newnode(int rt1, int &rt2)
{
    rt2 = ++tot1;
    ls[rt2] = ls[rt1];
    rs[rt2] = rs[rt1];
    node[rt2] = node[rt1];
}

void pushup(int rt)
{
    node[rt] = node[ls[rt]] + node[rs[rt]];
}

void gao(int &r, int k, int op)
{
    ++tot2;
    bs[tot2] = bs[r];
    if(op == 1) bs[tot2][k] = 1;
    else if(op == 2) bs[tot2][k] = 0;
    else bs[tot2] ^= tmp;
    r = tot2;
}

void update(int rt1, int &rt2, int l, int r, int p, int k, int op)
{
    newnode(rt1, rt2);
    if(l == r)
    {
        gao(ls[rt2], k, op);
        node[rt2] = bs[ls[rt2]].count();
        return;
    }
    int m = (l + r) >> 1;
    if(p <= m) update(ls[rt1], ls[rt2], l, m, p, k, op);
    else update(rs[rt1], rs[rt2], m + 1, r, p, k, op);
    pushup(rt2);
}

int main()
{
    int n, m, q;
    scanf("%d%d%d", &n, &m, &q);
    tot1 = tot2 = 0;
    int now = 0;
    t[now] = 0;
    tmp.reset();
    for(int i = 1; i <= m; ++i) tmp[i] = 1;
    while(q--)
    {
        int op, p, k;
        scanf("%d%d", &op, &p);
        ++now;
        t[now] = t[now - 1];
        if(op <= 2)
        {
            scanf("%d", &k);
            update(t[now], t[now], 1, n, p, k, op);
        }
        else if(op == 3) update(t[now], t[now], 1, n, p, 0, op);
        else t[now] = t[p];
        printf("%d\n", node[t[now]]);
    }
    return 0;
}
