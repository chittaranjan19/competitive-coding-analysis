#include<stdio.h>
#include<math.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<set>
#include<queue>
#define FOR(i,n) for(i=0;i<(n);i++)
#define CLR(a) memset(a,0,sizeof(a))
#define CIN(a) scanf("%d",&a)
using namespace std;
char a[2005][2005];
int n,m;
typedef pair<int,int> point;
priority_queue<point > s;
int is(int i,int j)
{
    return i>=1&&i<=n&&j>=1&&j<=m&&a[i][j]=='.';
}
int num(int i,int j)
{
    if(a[i][j]=='.')
    {
        return is(i+1,j)+is(i-1,j)+is(i,j+1)+is(i,j-1);
    }
    return 0;
}
int in_side(int i,int j)
{
    int z[4][2]={1,0,-1,0,0,1,0,-1};
    for(int ii=0;ii<4;ii++)
    {
        if(num(i+z[ii][0],j+z[ii][1])==1)
        {
            //printf("in(%d,%d)\n",i+z[ii][0],j+z[ii][1]);
            s.push(point(i+z[ii][0],j+z[ii][1]));
        }
    }
}
int se(int i,int j)
{
    //printf("se(%d,%d)\n",i,j);
    s.pop();
    if(num(i,j)==1)
    {
        if(is(i+1,j))
        {
            a[i][j]='^';
            a[i+1][j]='v';
            in_side(i+1,j);
        }
        else if(is(i-1,j))
        {
            a[i][j]='v';
            a[i-1][j]='^';
            in_side(i-1,j);
        }
        else if(is(i,j+1))
        {
            a[i][j]='<';
            a[i][j+1]='>';
            in_side(i,j+1);
        }
        else if(is(i,j-1))
        {
            a[i][j]='>';
            a[i][j-1]='<';
            in_side(i,j-1);
        }
    }
}
int main()
{
	int i,j;
	scanf("%d%d",&n,&m);
	memset(a,0,sizeof(a));
	getchar();
	for(i=1;i<=n;i++)
	{
	    gets(a[i]+1);
	}
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
        {
            if(num(i,j)==1)
            {
                //printf("in(%d,%d)\n",i,j);
                s.push(point(i,j));
            }
        }
    }
    while(!s.empty())
    {
        point p;
        p=s.top();
        se(p.first,p.second);
    }
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
        {
            if(a[i][j]=='.')
            {
                printf("Not unique\n");
                return 0;
            }
        }
    }
    for(i=1;i<=n;i++)
    {
        puts(a[i]+1);
    }
	return 0;
}
