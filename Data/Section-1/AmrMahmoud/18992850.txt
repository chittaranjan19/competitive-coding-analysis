#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> rng[100005];
int idx, n, cnt[400005], ans[100005], tree[400005];
vector<int> g[100005], q[100005];

void update(int i,int L,int R,int x,int y,int val)
{
  if(L >= x && R <= y)
  {
    tree[i] += val;
    if(tree[i] > 0) cnt[i] = R - L + 1;
    else
    {
      if(L == R) cnt[i] = 0;
      else cnt[i] = cnt[i*2+1] + cnt[i*2+2];
    }
    return;
  }
  if(L > y || R < x)
    return;
  update(i*2 + 1, L, (L + R) / 2, x, y, val);
  update(i*2 + 2, (L + R) / 2 + 1, R, x, y, val);
  if(tree[i] == 0) cnt[i] = cnt[i*2+1] + cnt[i*2+2];
}

void dfs(int node, int parent = -1)
{
  rng[node].f = idx++;
  for(int x : g[node])
  {
    if(x == parent) continue;
    dfs(x, node);
  }
  rng[node].s = idx - 1;
}

void solve(int node, int parent = -1)
{
  for(int x : q[node])
    update(0, 0, n - 1, rng[x].f, rng[x].s, 1);
  if(!q[node].empty()) update(0, 0, n - 1, rng[node].f, rng[node].s, 1);
  ans[node] = cnt[0];
  if(ans[node]) ans[node]--;
  for(int x : g[node])
  {
    if(x == parent) continue;
    solve(x, node);
  }
  for(int x : q[node])
    update(0, 0, n - 1, rng[x].f, rng[x].s, -1);
  if(!q[node].empty()) update(0, 0, n - 1, rng[node].f, rng[node].s, -1);
}

int main()
{
  int m, x, y;
  cin >> n >> m;
  for(int i=0;i<n-1;i++)
  {
    scanf("%d %d", &x, &y);
    g[x].pb(y);
    g[y].pb(x);
  }
  for(int i=0;i<m;i++)
  {
    scanf("%d %d", &x, &y);
    q[x].pb(y);
    q[y].pb(x);
  }
  dfs(1);
  solve(1);
  for(int i=1;i<=n;i++)
    printf("%d ", ans[i]);
  return 0;
}
