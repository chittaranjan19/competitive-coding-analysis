#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <fstream>
#include <numeric>
#include <stdexcept>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int n, m;
string in[2005];
bool v[2005][2005];
bool d[2005][2005];
int minx, maxx, miny, maxy;
int mx[2005][2005];
int mxx[2005][2005];
int my[2005][2005];
int mxy[2005][2005];

bool check(int x, int y)
{
  if(x < 0 || y < 0 || x == n || y == m) return true;
  if(v[x][y] || in[x][y] == '*') return true;
  return false;
}

void dfs(int x, int y)
{
  if(check(x, y)) return;
  v[x][y] = true;
  minx = min(minx, x);
  miny = min(miny, y);
  maxx = max(maxx, x);
  maxy = max(maxy, y);
  dfs(x + 1, y);
  dfs(x - 1, y);
  dfs(x, y + 1);
  dfs(x, y - 1);
}

bool out(int x, int y)
{
  if(x < 0 || y < 0 || x == n || y == m) return true;
  return false;
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("mtf.in", "r", stdin);
  //freopen("mtf.out", "w", stdout);
  cin >> n >> m;
  for(int i=0;i<n;i++)
    cin >> in[i];
  for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
      if(!v[i][j] && in[i][j] == '.')
      {
        minx = 2010, maxx = -1;
        miny = 2010, maxy = -1;
        dfs(i, j);
        while(1)
        {
          bool change = 0;
          for(int jj=miny;jj<=maxy && !change;jj++)
          {
            if(!check(minx - 1, jj))
            {
              dfs(minx - 1, jj);
              change = 1;
              break;
            }
            else if((!out(minx - 1, jj) && (d[minx - 1][jj] || in[minx - 1][jj] == '.')))
            {
              minx = min(minx, mx[minx - 1][jj]);
              miny = min(miny, my[minx - 1][jj]);
              maxx = max(maxx, mxx[minx - 1][jj]);
              maxy = max(maxy, mxy[minx - 1][jj]);
              change = 1;
              break;
            }
            if(!check(maxx + 1, jj))
            {
              dfs(maxx + 1, jj);
              change = 1;
              break;
            }
            else if((!out(maxx + 1, jj) && (in[maxx + 1][jj] == '.' || d[maxx + 1][jj])))
            {
              minx = min(minx, mx[maxx + 1][jj]);
              miny = min(miny, my[maxx + 1][jj]);
              maxx = max(maxx, mxx[maxx + 1][jj]);
              maxy = max(maxy, mxy[maxx + 1][jj]);
              change = 1;
              break;
            }
          }
          for(int jj=minx;jj<=maxx && !change;jj++)
          {
            if(!check(jj, miny - 1))
            {
              dfs(jj, miny - 1);
              change = 1;
              break;
            }
            else if((!out(jj, miny - 1) && (d[jj][miny - 1] || in[jj][miny - 1] == '.')))
            {
              minx = min(minx, mx[jj][miny - 1]);
              miny = min(miny, my[jj][miny - 1]);
              maxx = max(maxx, mxx[jj][miny - 1]);
              maxy = max(maxy, mxy[jj][miny - 1]);
              change = 1;
              break;
            }
            if(!check(jj, maxy + 1))
            {
              dfs(jj, maxy + 1);
              change = 1;
              break;
            }
            else if((!out(jj, maxy + 1) && (d[jj][maxy + 1] || in[jj][maxy + 1] == '.')))
            {
              minx = min(minx, mx[jj][maxy + 1]);
              miny = min(miny, my[jj][maxy + 1]);
              maxx = max(maxx, mxx[jj][maxy + 1]);
              maxy = max(maxy, mxy[jj][maxy + 1]);
              change = 1;
              break;
            }
          }
          if(!change) break;
        }
        for(int ii=minx;ii<=maxx;ii++)
          for(int jj=miny;jj<=maxy;jj++)
          {
            mx[ii][jj] = minx;
            mxx[ii][jj] = maxx;
            my[ii][jj] = miny;
            mxy[ii][jj] = maxy;
            if(in[ii][jj] == '.') continue;
            d[ii][jj] = true;
          }
      }
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<m;j++)
    {
      if(in[i][j] == '*' && d[i][j])
        in[i][j] = '.';
    }
    cout << in[i] << "\n";
  }
  return 0;
}
