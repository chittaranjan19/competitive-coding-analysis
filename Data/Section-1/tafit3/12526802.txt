import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemD {
    BufferedReader rd;
    int[] depth;
    int[] from;
    int[] to;

    ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int m = a[1];
        int[] p = intarr();
        char[] c = rd.readLine().toCharArray();
        depth = new int[n];
        from = new int[n];
        to = new int[n];

        Fenwick[][] byLevel = construct(n,c,p);

        for(int i=0;i<m;i++) {
            int[] vh = intarr();
            int v = vh[0] - 1;
            int h = vh[1];
            if(depth[v] <= h) {
                int[] cnt = new int[26];
                for(int j=0;j<26;j++) {
                    cnt[j] = byLevel[h-1][j].sum(from[v], to[v]);
                }
                out(isPalin(cnt)?"Yes":"No");
            } else {
                out("Yes");
            }
        }
    }

    private Fenwick[][] construct(int n, char[] c, int[] p) {
        int deepest = 1;
        Node[] nodes = new Node[n];
        nodes[0] = new Node(c[0], null, 0);
        for(int i=0;i<n-1;i++) {
            nodes[i+1] = new Node(c[i+1], nodes[p[i]-1], i+1);
            depth[i+1] = depth[p[i]-1] + 1;
            deepest = Math.max(deepest, depth[i+1]);
        }
        for(int i=1;i<n;i++) {
            nodes[i].parent.children.add(nodes[i]);
        }

        int idx = 0;
        class State {
            Node node;
            int processed;

            State(Node node) {
                this.node = node;
            }
        }
        Deque<State> stateDeque = new LinkedList<>();
        stateDeque.add(new State(nodes[0]));
        while(!stateDeque.isEmpty()) {
            State top = stateDeque.peekFirst();
            if(top.processed == 0) {
                from[top.node.i] = idx;
            }
            if(top.node.children != null && top.node.children.size() > top.processed) {
                stateDeque.addFirst(new State(top.node.children.get(top.processed)));
                top.processed++;
                idx++;
            } else {
                to[top.node.i] = idx;
                stateDeque.removeFirst();
            }
        }
        Fenwick[][] byLevel = new Fenwick[deepest+1][26];
        for(int i=0;i<deepest+1;i++) {
            for(int j=0;j<26;j++) {
                byLevel[i][j] = new Fenwick();
                byLevel[i][j].init(idx+1);
            }
        }
        for(int i=0;i<n;i++) {
            Fenwick fenwick = byLevel[depth[i]][nodes[i].c];
            fenwick.add(from[i], 1);
        }
        return byLevel;
    }

    public class Fenwick {
        int[] s;

        public void init(int n) {
            s = new int[n];
        }

        public int sum(int r) {
            int ret = 0;
            for (; r >= 0; r = (r & (r+1)) - 1)
                ret += s[r];
            return ret;
        }

        public void add(int idx, int delta) {
            for (; idx < s.length; idx = idx | (idx+1))
                s[idx] += delta;
        }

        public int sum(int l, int r) {
            return sum(r) - sum(l-1);
        }

    }

    private boolean isPalin(int[] cnt) {
        int odd = 0;
        for(int i: cnt) {
            if(i%2==1) {
                odd++;
                if(odd > 1) {
                    return false;
                }
            }
        }
        return true;
    }

    private class Node {
        int c;
        Node parent;
        int i;
        List<Node> children = new ArrayList<>();

        private Node(char c, Node parent, int i) {
            this.c = c-'a';
            this.parent = parent;
            this.i = i;
        }
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
