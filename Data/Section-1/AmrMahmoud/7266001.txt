#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using  namespace  std;

vector<pair<int,int> > temp;


double getd(int x,int y)
{
    double xx = abs(temp[x].first-temp[y].first),yy= abs(temp[x].second-temp[y].second);
    double z = sqrt(pow(xx,2) + pow(yy,2));
    return z;
}

int main()
{
    int n,m;
    cin >> n >> m;
    temp.pb(mp(0,0));
    temp.pb(mp(n,m));
    if(n != 0 && m != 0)
        temp.pb(mp(0,m)),temp.pb(mp(n,0)),temp.pb(mp(n-1,m-1));
    if(n != 0)
    {
        temp.pb(mp(1,0));
        temp.pb(mp(n-1,0));
        temp.pb(mp(n-1,m));
    }
    if(m != 0)
    {
        temp.pb(mp(0,1));
        temp.pb(mp(0,m-1));
        temp.pb(mp(n,m-1));
    }
    double res = 0;
    pair<pair<int,int>,pair<int,int> > sol;
    for(int i=0;i<temp.size();i++)
    {
        for(int j=0;j<temp.size();j++)
        {
            if(i == j || temp[i] == temp[j])
                continue;
            for(int k=0;k<temp.size();k++)
            {
                if(k == i || k == j || temp[i] == temp[k] || temp[k] == temp[j])
                    continue;
                for(int kk=0;kk<temp.size();kk++)
                {
                    if(kk == k || kk == i || kk == j || temp[i] == temp[kk] || temp[kk] == temp[j] || temp[kk] == temp[k])
                        continue;
                    double temp = getd(i,j);
                    temp+=getd(j,k);
                    temp+=getd(k,kk);
                    if(temp > res)
                        res = temp,sol = mp(mp(i,j),mp(k,kk));
                }
            }
        }
    }
    printf("%d %d\n",temp[sol.first.first].first,temp[sol.first.first].second);
    printf("%d %d\n",temp[sol.first.second].first,temp[sol.first.second].second);
    printf("%d %d\n",temp[sol.second.first].first,temp[sol.second.first].second);
    printf("%d %d\n",temp[sol.second.second].first,temp[sol.second.second].second);
    return 0;
}