#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

#include <unordered_set>
#include <unordered_map>

using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); i++)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i,l,r) for (int i = int(l); i <= int(r); i++)
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back
#define ft first
#define sc second

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int BASE=31;
const int BASE1=131;
const int M=1000000011;
const int M1=982451653;
int power[3000000];
int prefix[3000000];
int power1[3000000];
int prefix1[3000000];
const double pi = acos(-1.0);
const int INF = 1000000000;
const int MAX = 100007;
const int MAX2 = 2000000;
const int inf = (int) 1e9 + 5;
const long long mod =  1e9 + 7;
//const int BASE = 10;
const int ST = 1000003;
const int CNT = 100;
const double eps=1e-9;
const long long base = 2204234849;
const long long l_inf = (long long) 4e18;
const int logn = 30;
string s;

void calc_power(int n)
{
    power[0] = 1;
    for (int i = 0; i < n; ++i)
    power[i+1] =  (long long) power[i] * BASE % M;
    power1[0] = 1;
    for (int i = 0; i < n; ++i)
    power1[i+1] =  (long long) power1[i] * BASE1 % M1;
}

void calc_prefix()
{
    int n = s.size();
    prefix[0] = 0;
    for (int i = 0; i < n; ++i)
        prefix[i+1] = ((long long)prefix[i] * BASE + s[i] - 'a' +1) % M;
    prefix1[0] = 0;
    for (int i = 0; i < n; ++i)
        prefix1[i+1] = ((long long)prefix1[i] * BASE1 + s[i] - 'a' +1) % M1;
}

int get_hash(int i, int j)
{
    //cout <<i << " " << j << " "<<prefix[j] << " " << prefix[i-1]  << " " << power[j-i+1] << endl;
    return (prefix[j] - (long long)prefix[i-1] * power[j-i+1] % M+M) % M;
}

int get_hash1(int i, int j)
{
    //cout <<i << " " << j << " "<<prefix[j] << " " << prefix[i-1]  << " " << power[j-i+1] << endl;
    return (prefix1[j] - (long long)prefix1[i-1] * power1[j-i+1] % M1+M1) % M1;
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //forn(i,n) scanf("%d", &name);
    //forn(i,m) scanf("%d", &name);
    //forn(i,n) forn(i,m) scanf("%d", &name);
    cin >> s;
    string t;
    vector <string > otv;
    set<pair<int, int> > kik;
    calc_power(s.size());
	calc_prefix();
    //cout << get_hash(1,2) << endl << get_hash(3,4) << endl <<get_hash(5,6) << endl;
    for (int i=5;i<s.size()-1;i++)
    {
        if ((int)s.size()-i==3 || (int)s.size()-i>=5 )
            if (!kik.count(make_pair(get_hash(i+1,i+3), get_hash1(i+1, i+3))))
        {
            kik.insert(make_pair(get_hash(i+1,i+3),get_hash1(i+1, i+3)));
            otv.pb(t+s[i]+s[i+1]+s[i+2]);
        }
        if ((int)s.size()-i>1  && (int)s.size()-i!=3) if (!kik.count(make_pair(get_hash(i+1,i+2), get_hash1(i+1, i+2))))
        {
            kik.insert(make_pair(get_hash(i+1,i+2),get_hash1(i+1, i+2)));
            otv.pb(t+s[i]+s[i+1]);
        }
    }
    cout << otv.size() << endl;
    sort(all(otv));
    for (int i=0;i<otv.size();i++){
        cout << otv[i];
    printf("\n");}
    return 0;
}