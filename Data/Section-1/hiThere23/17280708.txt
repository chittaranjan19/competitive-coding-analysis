#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 200005
#define maxC 1000000007

using namespace std;
struct interval
{
    int lim, tree[mn << 2];

    void update(int l, int r, int id, int x, int val)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            tree[id] = min(lim, tree[id] + val);
            return;
        }
        int g = ((l + r) >> 1);
        update(l, g, id << 1, x, val);
        update(g + 1, r, (id << 1) + 1, x, val);
        tree[id] = tree[id << 1] + tree[(id << 1) + 1];
    }

    int getSum(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return 0;
        if (x <= l && r <= y)
            return tree[id];
        int g = ((l + r) >> 1);
        int a = getSum(l, g, id << 1, x, y);
        int b = getSum(g + 1, r, (id << 1) + 1, x, y);
        return a + b;
    }
} t1, t2;
int n, k, a, b, q;

void setup()
{
    cin >> n >> k >> a >> b >> q;
    t1.lim = b;
    t2.lim = a;
}

void querry1()
{
    int x, val;
    cin >> x >> val;
    t1.update(1, n, 1, x, val);
    t2.update(1, n, 1, x, val);
}

void querry2()
{
    int x;
    cin >> x;
    int ans = t1.getSum(1, n, 1, 1, x - 1) + t2.getSum(1, n, 1, x + k, n);
    cout << ans << '\n';
}

void xuly ()
{
    int type;
    FOR(i, 1, q)
    {
        cin >> type;
        if (type == 1)
            querry1();
        else
            querry2();
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
