
/* Author:
    * Rohit Laddha */
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <stack>
#include <set>
#include <queue>
#include <limits.h>
#include <math.h>
#include <queue>
#include <list>
using namespace std;
#define PI 3.14159265
class c{
	public:
	int l,r,index;
};
bool myfunc(c a,c b){
	if(a.l!=b.l)
		return a.l<b.l;
	return a.r<b.r;
}
int findIndex(vector<c>a,int p){
	for(int i=0;i<a.size();i++){
		if(a[i].index==p)
			return i;
	}
	cout << endl;
	return -1;
}
int main(){
	int n;
	cin >> n;
	vector<c>input;
	vector<c>a;
	int count=0;
	while(n--){
		int p,q,r;
		cin >> p >> q >> r;
		if(p==1){
			c tmp;
			tmp.l=q;
			tmp.r=r;
			tmp.index=count;
			count++;
			input.push_back(tmp);
		}
		else{
			q--;
			r--;
			a=input;
			sort(a.begin(),a.end(),myfunc);
			int i = findIndex(a,q);
			int j = findIndex(a,r);
			bool flag=true;
			if(i<j){
				for(int k=i+1;k<=j;k++){
					if((a[k-1].l<=a[k].l && a[k-1].r<=a[k].l) ||  (a[k-1].l>=a[k].r && a[k-1].r>=a[k].r)){
						flag=false;
						break;
					}
				}
				if(flag==false)
					cout << "NO\n";
				else 
					cout << "YES\n";
			}
			else{
				cout << "2\n";
			
				for(int k=i;k>j;k--){
					if((a[k-1].l<=a[k].l && a[k-1].r<=a[k].l) ||  (a[k-1].l>=a[k].r && a[k-1].r>=a[k].r)){
						flag=false;
						break;
					}
				}
				if(flag==false)
					cout << "NO\n";
				else 
					cout << "YES\n";
			}
		}
	}
	return 0;
}
			

