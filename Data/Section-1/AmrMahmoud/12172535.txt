#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

#include <complex>

typedef complex<double> point;

#define X real()
#define Y imag()
#define polar(r, t) (r * exp(point(0, t)))
#define length(a) hypot(a.X, a.Y)
#define angle(a) atan2(a.Y, a.X)
#define vec(a, b) (b - a)
#define dot(a, b) ((conj(a) * b).X)
#define cross(a, b) ((conj(a) * b).Y)
#define lengthsqr(a) dot(a, a)
#define vec_rot(v, t) (v * exp(point(0, t)))
#define vec_rot_around(v, t, a) (vec_rot(vec(a, v), t) + a)
#define reflect(v, m) (conj(v / m) * m)

point arr[6];

double polygonArea( int points) {

  double  area=0;
  int i, j=points-1  ;

  for (i=0; i<points; i++) {
    area+=(arr[j].X+arr[i].X)*(arr[j].Y-arr[i].Y); j=i; }
  return area*0.5;
  }

int a[6];

int main()
{
  //freopen("immetric.in", "r", stdin);
  //freopen("immetric.out", "w", stdout);
  for(int i=0;i<6;i++)
    scanf("%d", &a[i]);
  arr[0] = point(0, 0);
  double x = 0;
  for(int i=1;i<6;i++)
  {
    arr[i].X = arr[i - 1].X + a[i - 1] * cos(x);
    arr[i].Y = arr[i - 1].Y + a[i - 1] * sin(x);
    x+=60.0 * PI / 180.0;
  }
  double area = fabs(polygonArea(6));
  double tmp = sqrt(3) / 4;
  area /= tmp;
  printf("%d", (int)(area + EPS));
  return 0;
}
