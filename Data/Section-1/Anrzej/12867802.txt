#include <iostream>
#include <vector>

#define ll long long

using namespace std;

long n;
const ll inf = 10e17;
pair<ll, long> d[5001];
ll f[5001][5001];
ll l[5001], r[5001];

ll findDist(ll x, ll left, ll right)
{
    if (x >= left && x <= right)
        return 0;
    else
        return min(abs(left - x), abs(right - x));
}

int main()
{
    long n, x;
    cin >> n >> x;
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= n; j++)
            f[i][j] = 0;
    }
    d[0] = make_pair(0, x);
    for (int i = 1; i <= n; i++)
        cin >> l[i] >> r[i];

    for (int i = 1; i <= n; i++)
    {
        d[i] = make_pair(inf, 0);
        ll optimal = inf;
        for (int j = 0; j < i; j++)
        {
            if (d[j].first + f[j][i - 1] + findDist(d[j].second, l[i], r[i]) < optimal)
            {
                ll tmp = findDist(d[j].second, l[i], r[i]);
                if (tmp == 0)
                    d[i].second = d[j].second;
                else
                {
                    if (abs(l[i] - d[j].second) < abs(r[i] - d[j].second))
                        d[i].second = l[i];
                    else
                        d[i].second = r[i];
                }
                optimal = d[j].first + f[j][i - 1] + findDist(d[j].second, l[i], r[i]);
            }
        }
        if (optimal < d[i].first)
        {
            d[i].first = optimal;
        }

        for (int j = 0; j < i; j++)
        {
            f[j][i] = f[j][i-1] + findDist(d[j].second, l[i], r[i]);
        }
        //cout << d[i].first << " " << d[i].second << endl;
    }

    cout << d[n].first;
}
