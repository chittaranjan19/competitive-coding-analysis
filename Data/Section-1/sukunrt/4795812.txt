#include <cstdio>
#include <numeric>
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <string>
#include <map>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <queue>
#include <sstream>
#include <deque>
#include <cstring>
#include <cstdlib>

using namespace std;
int c[26];
int v[1000006];
vector <long long int> cycle1;
vector <long long int> cycle2;
string s1, s2;
long long cnt;
long long l1, l2;
long long gcd(long long n, long long m){
        if (m == 0) return n;
        else return gcd(m, n%m);
}



long long calc(int i , int col){
        v[i] = col;
        cycle1.push_back(i);
        cycle2.push_back(i);
        long long cur = (i+l1) % l2;
        while (cur != i){
                cycle2.push_back(cur);
                if (cur < l1){
                        cycle1.push_back(cur);
                        v[cur] = col;
                }
                cur = (cur + l1) % l2;
        }
        // cout << "here" << endl;
        long long n = cycle2.size();
        for(int k = 0; k < cycle2.size(); k++){
                c[s2[cycle2[k]]-'a']++;
        }
        for(int k = 0; k < cycle1.size(); k++){
                cnt += n-(c[s1[cycle1[k]] - 'a']);
        }
        memset(c,0,sizeof(c));
        cycle1.clear();
        cycle2.clear();
}
                
int main(){
        long long n,m;
        cin >> n >> m;
        
        string x,y;
        cin >> x >> y;
        if (x.length() < y.length())
                s1 = x, s2 = y;
        else{
                long long temp = m;
                m = n;
                n = temp;
                s1= y, s2 = x;
        }
        l1 = s1.size();
        l2 = s2.size();
        long long g = gcd(l1,l2);
        long long col = 1;
        for(int i = 0 ; i < s1.length(); i++)
                if (!v[i]){
                        calc(i,col);
                        col++;
                }

        g = l1/g;
        g *= l2;
        long long t = (n*l1) / g;
        cnt *= t;
        cout << cnt << endl;
}
        
        
        
        
