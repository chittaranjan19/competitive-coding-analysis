#include <bits/stdc++.h>

#define ll long long

using namespace std;

const ll N = 1000000;
const ll inf = (ll)1e18;
const int MOD = (int)1e9 + 7;

int add(int x, int y)
{
    x += y;
    if (x >= MOD)
        x -= MOD;
    return x;
}

int main()
{
    //freopen("power.in", "r", stdin);
    //freopen("power.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    char a[n][m];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            cin >> a[i][j];
    int dp[2][m][m];
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < m; j++)
            for (int k = 0; k < m; k++)
                dp[i][j][k] = 0;
    if (a[0][0] == a[n - 1][m - 1])
        dp[0][0][m - 1] = 1;
    int ans = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            for (int k = m - 1; k >= 0; k--)
            {
                int l = n - 1 + m - 1 - k - i - j;
                if (!(l >= 0 && l < n))
                    continue;
                if ((n + m) % 2 == 0)
                {
                    if (i == l && j == k)
                        ans = add(ans, dp[0][j][k]);
                }
                else
                {
                    if (i == l && j + 1 == k)
                        ans = add(ans, dp[0][j][k]);
                    if (j == k && i + 1 == l)
                        ans = add(ans, dp[0][j][k]);
                }
                if (j < m - 1 && k > 0 && a[i][j + 1] == a[l][k - 1])
                    dp[0][j + 1][k - 1] = add(dp[0][j + 1][k - 1], dp[0][j][k]);
                if (j < m - 1 && l > 0 && a[i][j + 1] == a[l - 1][k])
                    dp[0][j + 1][k] = add(dp[0][j + 1][k], dp[0][j][k]);
                if (i < n - 1 && k > 0 && a[i + 1][j] == a[l][k - 1])
                    dp[1][j][k - 1] = add(dp[1][j][k - 1], dp[0][j][k]);
                if (i < n - 1 && l > 0 && a[i + 1][j] == a[l - 1][k])
                    dp[1][j][k] = add(dp[1][j][k], dp[0][j][k]);
            }
        for (int j = 0; j < m; j++)
            for (int k = 0; k < m; k++)
            {
                dp[0][j][k] = dp[1][j][k];
                dp[1][j][k] = 0;
            }
    }
    cout << ans;
    return 0;
}
