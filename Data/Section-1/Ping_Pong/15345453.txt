#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<pair<int, int> > graph[MAX_N];
int dist[MAX_N];
bool used[MAX_N];

void dfs(int x, int len)
{
    dist[x] = len;
    used[x] = true;
    for (int i = 0; i < graph[x].size(); i++)
        if (!used[graph[x][i].first])
            dfs(graph[x][i].first, len + graph[x][i].second);
}

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, s, f, t;
    long long l = 0;
    cin >> n;
    for (int i = 0; i < n - 1; i++)
    {
        cin >> s >> f >> t;
        graph[s - 1].push_back(make_pair(f - 1, t));
        graph[f - 1].push_back(make_pair(s - 1, t));
        l += t * 2;
    }
    for (int i = 0; i < n; i++)
        used[i] = false;
    dfs(0, 0);
    int d = 0;
    for (int i = 0; i < n; i++)
        d = max(d, dist[i]);
    cout << l - d;
    return 0;
}