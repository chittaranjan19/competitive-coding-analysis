#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int arr[100005];
int DP[100005], l;
bool visited[100005];

struct temp
{
    bool operator () (pair<int, int> &a, pair<int, int> &b)
    {
        if(a.first ==  b.first) return a.second < b.second;
        return a.first > b.first;
    }
};

struct temp2
{
    bool operator () (pair<int, int> &a, pair<int, int> &b)
    {
        if(a.first ==  b.first) return a.second < b.second;
        return a.first < b.first;
    }
};

int solve(int ind)
{
    if(ind == -1) return 0;
    if(visited[ind]) return -1;
    visited[ind] = true;
    if(DP[ind] == -1) return -1;
    for(int i = ind - DP[ind] + 1;i <= ind - l + 1; i++)
    {
        int temp = solve(i - 1);
        if(temp != -1) return temp + 1;
    }
    return -1;
}

int main()
{
    ios_base::sync_with_stdio(0);
    int n,s;
    cin >> n >> s >> l;
    for(int i=0;i<n;i++)
        cin >> arr[i];
    setdp(DP);
    priority_queue<pair<int, int>, vector<pair<int, int> >, temp2> q;
    priority_queue<pair<int, int>, vector<pair<int, int> >, temp> nq;
    int lastnode = 0;
    for(int i=0;i<n;i++)
    {
        q.push(mp(arr[i], i));
        nq.push(mp(arr[i], i));
        if(i - lastnode + 1 < l) continue;
        while(!q.empty() && q.top().second < lastnode)
            q.pop();
        while(!nq.empty() && nq.top().second < lastnode)
            nq.pop();
        while(!q.empty() && !nq.empty() && q.top().first - nq.top().first > s)
        {
            if(q.top().second < nq.top().second)
                lastnode = q.top().second + 1, q.pop();
            else lastnode = nq.top().second + 1, nq.pop();
            while(!q.empty() && q.top().second < lastnode)
                q.pop();
            while(!nq.empty() && nq.top().second < lastnode)
                nq.pop();
        }
        if(i - lastnode + 1 < l) continue;
        DP[i] = i - lastnode + 1;
    }
    cout << solve(n - 1);
    return 0;
}