#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<pair<int, bool> > tree[100005];
bool v[100005];

bool is_lucky(int x)
{
  while(x)
  {
    if(x % 10 != 4 && x % 10 != 7) return false;
    x/=10;
  }
  return true;
}

int dfs(int node, int parent)
{
  v[node] = true;
  int cnt = 1;
  for(int i=0;i<tree[node].size();i++)
  {
    int x = tree[node][i].first;
    if(x == parent || tree[node][i].second) continue;
    cnt+=dfs(x, node);
  }
  return cnt;
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("test.in", "r", stdin);
  //freopen("report.out", "w", stdout);
  int n, x, y, z;
  cin >> n;
  for(int i=0;i<n - 1;i++)
  {
    cin >> x >> y >> z;
    z = is_lucky(z);
    tree[x].pb(mp(y, z));
    tree[y].pb(mp(x, z));
  }
  LL res = 0;
  for(int i=1;i<=n;i++)
  {
    if(v[i]) continue;
    int cnt = dfs(i, i);
    res+=cnt * 1LL * (n - cnt) * (n - cnt - 1);
  }
  cout << res;
  return 0;
}
