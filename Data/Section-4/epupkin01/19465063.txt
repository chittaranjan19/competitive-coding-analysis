#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

const int S = 200000;
int n, x, y, i;
Pair X[S], Y[S];

int main()
{
    cin >> n;
    for (i = 0; i < n; ++i)
    {
        scanf("%d%d", &x, &y);
        X[i] = Pair(x, y);
        Y[i] = Pair(y, x);
    }
    sort(X, X + n);
    sort(Y, Y + n);
    
    ll ct = 0, k, rep;
    for (i = 0; i < n - 1; ++i)
    {
        k = 0;
        while (i < n - 1 && X[i].first == X[i + 1].first)
            ++k, ++i;
        
        ct += ld(k + 1) / 2 * k;
    }
    for (i = 0; i < n - 1; ++i)
    {
        k = 0, rep = 0;
        while (i < n - 1 && Y[i].first == Y[i + 1].first)
        {
            if (Y[i].second == Y[i + 1].second)
                ++rep;
            else
            {
                ct -= ld(rep + 1) / 2 * rep;
                rep = 0;
            }
            
            ++k, ++i;
        }
        
        ct += ld(k + 1) / 2 * k;
    }
    
    cout << ct << '\n';
    
    return 0;
}