#include <bits/stdc++.h>/*
#include <ext/pb_ds/assoc_container.hpp> //required
#include <ext/pb_ds/tree_policy.hpp> //required
using namespace __gnu_pbds; //required
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ordered_set <int> s;
or:
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ordered_set s;
cout << s.order_of_key(3) << endl;	// the number of elements in s less than 3 (in this case, 0-based index of element 3)
	cout << *s.find_by_order(1) << endl; // 1-st elemt in s (in sorted order, 0-based)
*/
using namespace std;

#define maxn 100007
#define INF 1 << 30
#define LLINF 10000000000000000009
#define pb push_back
#define mp make_pair
#define ss second
#define ff first
#define pii pair<int,int>


typedef long long ll;
typedef pair<ll,ll> PII;
//priority_queue< PII , vector<PII>, greater<PII> >q;
int arr[1000009];



int main()
{
	int n,x=INF,y=-INF,k,l,a,b;
	cin>>n;
	bool found=false;
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	x=min(x,arr[0]);
	y=max(y,arr[0]);
	for(int i=1;i<n;i++)
	{
		k=arr[i-1];
		l=arr[i];
		a=min(k,l);
		b=max(k,l);
		if(a>x && a<y)
			if(b>y)
			found=true;
		if(b>x && b<y)
			if(a<x)
			found=true;
		x=min(x,arr[i]);
		y=max(y,arr[i]);
	}
	if(found==true)
	cout<<"yes"<<endl;
	else
	cout<<"no"<<endl;



return 0;
}

