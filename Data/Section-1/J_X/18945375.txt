#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;

const int maxn = 2e5 + 5;
const int mod = 1e9 + 7;

int f[maxn], invf[maxn], a[maxn << 1];
pii p[maxn << 1];

int pow_mod(int x, int n)
{
    int ret = 1;
    while(n)
    {
        if(n & 1) ret = (ll)ret * x % mod;
        x = (ll)x * x % mod;
        n >>= 1;
    }
    return ret;
}

int C(int n, int m)
{
    if(n < m) return 0;
    return (ll)f[n] * invf[m] % mod * invf[n - m] % mod;
}

int main()
{
    f[0] = 1;
    for(int i = 1; i < maxn; ++i) f[i] = (ll)f[i - 1] * i % mod;
    invf[maxn - 1] = pow_mod(f[maxn - 1], mod - 2);
    for(int i = maxn - 1; i; --i) invf[i - 1] = (ll)invf[i] * i % mod;
    int n, k ,cnt = 0;
    scanf("%d%d", &n, &k);
    for(int i = 0; i < n; ++i)
    {
        int l, r;
        scanf("%d%d", &l, &r);
        ++r;
        a[cnt] = l;
        p[cnt++] = pii(l, 1);
        a[cnt] = r;
        p[cnt++] = pii(r, -1);
    }
    sort(a, a + cnt);
    sort(p, p + cnt);
    int m = unique(a, a + cnt) - a;
    int ans = 0;
    for(int i = 1, j = 0, num = 0; i < m; ++i)
    {
        while(j < cnt && p[j].first <= a[i - 1])
        {
            num += p[j].second;
            ++j;
        }
        ans += (ll)C(num, k) * (a[i] - a[i - 1]);
        if(ans >= mod) ans -= mod;
    }
    printf("%d\n", ans);
    return 0;
}
