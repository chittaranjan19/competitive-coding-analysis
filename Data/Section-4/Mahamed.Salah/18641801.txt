#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<deque>
#define ef else if
#define re return
#define F false
#define T true
#define lp(i,n) for(int i=0;i<n;i++)
using namespace std;
char a[500][500];
int r,c,save[500][500],f,k;
bool safe(int i,int j)
{
	if(i<0||j<0||i>=r||j>=c) // if the i or j is out of the grid return false
		re F;
	if(a[i][j]=='#') // if the postion i,j in the grid and contain 0 return false
		re F;
	re T; // return true if postion i,j in the grid and equal to 1
}
bool Maze(int i,int j)
{
   if(!safe(i,j))//safe is a function that check if the postion i,j is in the grid or not and the postion value equal 1
		re F;
	save[i][j]=1; // mark this postion 
	if(i==r-1&&j==c-1)
		re T;
	if(Maze(i,j+1)) // move right
		re T; 
	if(Maze(i+1,j)) // move down
		re T;
	if(Maze(i,j-1)) // move left
		re T;
	if(Maze(i-1,j)) // move up
		 re T;
	save[i][j]=0; // remove mark
	return F;
}
int main()
{    
	cin>>r>>c>>k;
	lp(i,r)
		lp(j,c)
		cin>>a[i][j];
	lp(i,r)
	{
		lp(j,c)
		if(a[i][j]=='.')
		{
			f=Maze(i,j);
			break;
		}
		if(f)
			break;
	}
	lp(i,r)
	{
		lp(j,c)
			if(save[i][j]==0&&a[i][j]=='.'&&k!=0)
				a[i][j]='X',k--;
	}
	lp(i,r)
	{
		lp(j,c)
			cout<<a[i][j];
		cout<<endl;
	}
    re 0;
}

