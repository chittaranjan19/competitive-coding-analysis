import java.io.*;
import java.util.*;
import java.math.*;

public class Task {
	static final String FileName = "test";  
 
    int n;
    int[] p;
    Vector<Integer>[] a;
    void dfs(int v) {    	
    	for (int x:a[v]) if (p[x]==0){
    		p[x] = v;
    		dfs(x);
    	}
    }
    void solve() throws IOException {   
    	int n = nextInt();
    	int r1 = nextInt();
    	int r2 = nextInt();
    	p = new int[n+1];
    	a = new Vector[n+1];
    	for (int i=1; i<=n; i++) a[i] = new Vector<Integer>();
    	for (int i=1; i<=n; i++) {
    		if (i==r1) continue;
    		int x = i;
    		int y = nextInt();
    		a[x].add(y);
    		a[y].add(x);
    	}
    	p[r2] = -1;
    	dfs(r2);
    	for (int i=1; i<=n; i++) if (p[i]>0) out.print(p[i]+" ");
    	
    }
   
    


    static final int inf = 1000000000;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    
    public void run() {
        try {
           // br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
            return Long.parseLong(next());
    }

    public static void main(String[] args) {        
            new Task().run();
    
    }
}