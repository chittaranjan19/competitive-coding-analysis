#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>

using namespace std;

const int maxn = 200000 + 5;
const int maxm = 50 + 5;
const double INF = 1e15;
const double eps = 1e-8;

double dp[maxm][maxn], s[maxn], s1[maxn], s2[maxn];
int a[maxn];
struct Point
{
    double x, y;

    Point(double x = 0, double y = 0) : x(x), y(y) {}
} que[maxn];

int dcmp(double x)
{
    if(fabs(x) <= eps) return 0;
    return x > 0 ? 1 : -1;
}

double getslope(const Point &a, const Point &b)
{
    return (b.y - a.y) / (b.x - a.x);
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; ++i)
    {
        scanf("%d", &a[i]);
        s1[i] = a[i] + s1[i - 1];
        s2[i] = 1.0 / a[i] + s2[i - 1];
        s[i] = s1[i] / a[i] + s[i - 1];
    }
    fill(dp[0] + 1, dp[0] + n + 1, INF);
    for(int i = 0; i < m; ++i)
    {
        int head = 0, tail = 0;
        for(int j = 1; j <= n; ++j)
        {
            Point p = Point(s1[j - 1], dp[i][j - 1] - s[j - 1] + s1[j - 1] * s2[j - 1]);
            while(tail - head > 1 && dcmp(getslope(que[tail - 2], que[tail - 1]) - getslope(que[tail - 1], p)) >= 0) --tail;
            que[tail++] = p;
            while(tail - head > 1 && dcmp(getslope(que[head], que[head + 1]) - s2[j]) <= 0) ++head;
            dp[i + 1][j] = que[head].y - s2[j] * que[head].x + s[j];
        }
    }
    printf("%.10f\n", dp[m][n]);
    return 0;
}
