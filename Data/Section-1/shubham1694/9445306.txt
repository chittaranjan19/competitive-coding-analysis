#include <bits/stdc++.h>

using namespace std;

int grid[1000][1000];
int dp[1000][1000];

vector<char> v[1000][1000];

int factorcnt(int n, int d)
{
    int x=0;
    while(n%d==0){
        x++;
        n/=d;
    }
    return x;
}

int main()
{
    int i, j, n, x, y;
    scanf("%d", &n);
    string s;
    for(i=0; i<n; i++){
        for(j=0; j<n; j++)
            scanf("%d", &grid[i][j]);
    }
    dp[0][0] = factorcnt(grid[0][0], 2);
    for(i=0; i<n; i++){
        for(j=0; j<n; j++){
            if(i==0 && j==0)
                continue;
            else if(i==0){
                dp[i][j] = dp[i][j-1]+factorcnt(grid[i][j],2);
                v[i][j] = v[i][j-1];
                v[i][j].push_back('R');
            }
            else if(j==0){
                dp[i][j] = dp[i-1][j]+factorcnt(grid[i][j], 2);
                v[i][j] = v[i-1][j];
                v[i][j].push_back('D');
            }
            else{
                x = dp[i-1][j]+factorcnt(grid[i][j], 2);
                y = dp[i][j-1]+factorcnt(grid[i][j], 2);
                if(x<y){
                    v[i][j] = v[i-1][j];
                    v[i][j].push_back('D');
                    dp[i][j] = x;
                }
                else{
                    v[i][j] = v[i][j-1];
                    v[i][j].push_back('R');
                    dp[i][j] = y;
                }
            }
        }
    }
    s = "";
    int f2 = dp[n-1][n-1];
    for(i=0; i<v[n-1][n-1].size(); i++)
        s+=v[n-1][n-1][i];
    for(i=0; i<n; i++){
        for(j=0; j<n; j++)
            v[i][j].clear();
    }
    dp[0][0] = factorcnt(grid[0][0], 5);
    for(i=0; i<n; i++){
        for(j=0; j<n; j++){
            if(i==0 && j==0)
                continue;
            else if(i==0){
                dp[i][j] = dp[i][j-1]+factorcnt(grid[i][j], 5);
                v[i][j] = v[i][j-1];
                v[i][j].push_back('R');
            }
            else if(j==0){
                dp[i][j] = dp[i-1][j]+factorcnt(grid[i][j], 5);
                v[i][j] = v[i-1][j];
                v[i][j].push_back('D');
            }
            else{
                x = dp[i-1][j]+factorcnt(grid[i][j], 5);
                y = dp[i][j-1]+factorcnt(grid[i][j], 5);
                if(x<y){
                    v[i][j] = v[i-1][j];
                    v[i][j].push_back('D');
                    dp[i][j] = x;
                }
                else{
                    v[i][j] = v[i][j-1];
                    v[i][j].push_back('R');
                    dp[i][j] = y;
                }
            }
        }
    }
    int ans = min(dp[n-1][n-1], f2);
    cout << ans << endl;
    if(dp[n-1][n-1]<f2){
        for(i=0; i<v[n-1][n-1].size(); i++)
            cout << v[n-1][n-1][i];
        cout << endl;
    }
    else
        cout << s << endl;
    return 0;
}
