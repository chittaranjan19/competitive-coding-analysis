#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

/*void print_tree()
{
	int j = 0, c = (cnt_ver * 2 - 1) / 2, c1 = 1;
	for (int i = 0; i < currx + 1; i++)
	{
		for (int k = 0; k < c; k++)
			cout << " ";
		for (int i = 0; i < c1; i++)
		{
			if (tree[j] >= 0)
				cout << " ";
			cout << (tree[j] >= 0 ? tree[j] : -1);
			j++;
			for (int r = 0; r < c * 2 + 1; r++)
				cout << " ";
		}
		cout << endl << endl;
		c1 *= 2;
		c /= 2;
	}
}*/

typedef struct
{
	int pos;
	int h;
	int num;

	void domino(int pos1, int h1, int num1)
	{
		pos = pos1;
		h = h1;
		num = num1;
	}
} domino;

bool comp(domino a, domino b)
{
	return a.pos < b.pos;
}

domino a[MAX_N];
pair<int, int> tree[MAX_N * 4];
int dp[MAX_N];
int cnt_ver = 1, currx = 0;

int bin_search(int p, int n)
{
	int l = 0, r = n, mid;
	p--;
	while (r - l > 1)
	{
		mid = (l + r) / 2;
		if (p >= a[mid].pos)
			l = mid;
		else
			r = mid;
	}
	return l;
}

void make_tree(int n)
{
	while (cnt_ver < n)
		cnt_ver <<= 1;
	for (int i = 0; i < n; i++)
		tree[cnt_ver - 1 + i] = make_pair(a[i].pos + a[i].h, i);
	for (int i = cnt_ver - 2; i >= 0; i--)
		if (tree[i * 2 + 1].first >= tree[i * 2 + 2].first)
			tree[i] = tree[i * 2 + 1];
		else
			tree[i] = tree[i * 2 + 2];
}

pair<int, int> ans(int x, int lx, int rx, int l, int r)
{
	if (r < lx || l > rx)
		return make_pair(-inf, -1);
	else if (lx >= l && rx <= r)
		return tree[x];
	else
	{
		pair<int, int> q1 = ans(x * 2 + 1, lx, (lx + rx) / 2, l, r), q2 = ans(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r);
		if (q1.first >= q2.first)
			return q1;
		else
			return q2;
	}
}

int main()
{
	//ifstream ifs("a.in");
	//ofstream ofs("a.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n;
	scanf_s("%d", &n);
	for (int i = 0; i < n; i++)
	{
		int pos, h;
		scanf_s("%d %d", &pos, &h);
		a[i].domino(pos, h, i);
	}
	sort(a, a + n, comp);
	make_tree(n);
	for (int i = n - 1; i >= 0; i--)
	{
		int x = bin_search(a[i].pos + a[i].h, n);
		if (x == i)
		{
			dp[i] = 1;
			continue;
		}
		pair<int, int> q = ans(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + i + 1, cnt_ver - 1 + x);
		dp[i] = dp[q.second] + q.second - i;
	}
	int ans1[MAX_N];
	for (int i = 0; i < n; i++)
		ans1[a[i].num] = dp[i];
	for (int i = 0; i < n; i++)
		printf("%d ", ans1[i]);
	return 0;
}