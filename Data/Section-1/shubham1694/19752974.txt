#include <bits/stdc++.h>

using namespace std;

const int maxbit = 11;
const int maxp = 1<<maxbit;
const int maxn = 303;
const int inf = 50000000;

int dp[maxn][maxp];
int arr[maxn], cost[maxn];
int n, primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};

int solve(int cur, int mask)
{
	if(cur>n){
		if(!mask)
			return 0;
		return inf;
	}
	if(dp[cur][mask]!=-1)
		return dp[cur][mask];
	int ret = min(cost[cur] + solve(cur+1, mask&arr[cur]), solve(cur+1, mask));
	return dp[cur][mask] = ret;
}

int main()
{
	memset(dp, -1, sizeof(dp));
	scanf("%d", &n);
	for(int i=1; i<=n; i++){	
		int p;
		scanf("%d", &p);
		for(int j=0; j<10; j++){
			if(!(p%primes[j]))
				arr[i] |= (1<<j);
		}
	}
	for(int i=1; i<=n; i++)
	      scanf("%d", &cost[i]);
	int ans = solve(1, 1023);
	if(ans >= inf)
	      ans = -1;
	printf("%d\n", ans);
	return 0;
}