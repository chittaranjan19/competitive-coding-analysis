#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, pair<int, int> > arr[2000005];
bool in[1000005];

bool sorter(pair<int, pair<int, int> > a, pair<int, pair<int, int> > b)
{
  if(a.f == b.f) return a.s.s < b.s.s;
  return a.f < b.f;
}

int main()
{
  int n, k, x;
  scanf("%d %d", &n, &k);
  for(int i=0;i<n;i++)
  {
    scanf("%d %d", &arr[i * 2].f, &arr[i * 2 + 1].f);
    arr[i * 2].s = mp(i, 0);
    arr[i * 2 + 1].s = mp(i, 1);
  }
  sort(arr, arr + 2*n, sorter);
  vector<pair<int, int> > res, v;
  int curr = 0, last = 0;
  for(int i=0;i<2*n;i++)
  {
    x = arr[i].s.f;
    if(curr < k)
    {
      last = arr[i].f;
      if(!in[x]) curr++;
      else curr--;
    }
    else
    {
      if(!in[x]) curr++;
      else
      {
        if(curr == k)
          v.pb(mp(last, arr[i].f));
        curr--;
      }
    }
    in[x] = !in[x];
  }
  for(int i=0;i<v.size();i++)
  {
    if(res.size() != 0 && v[i].f == res.back().s)
    {
      x = res.back().f;
      res.pop_back();
      res.push_back(mp(x, v[i].s));
    }
    else res.pb(v[i]);
  }
  printf("%d\n", res.size());
  for(int i=0;i<res.size();i++)
    printf("%d %d\n", res[i].f, res[i].s);
  return 0;
}
