#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <climits>
#ifdef DEBUG
	#include <ctime>
#endif
using namespace std;

// template

// abbreviations
#define vi vector<int>
#define vl vector<ll>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define vvi vector<vi>
#define vvl vector<vl>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define sz(var) ((int) var.size())
#define rep(it, n) for(int it = 0; it < n; ++it)
#define rep1(it, n) for(int it = 1; it <= n; ++it)
#define loop(it, from, to) for(int it = (from); it <= (to); ++it)
#define iter(it, cont) for(__typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define riter(it, cont) for(__typeof((cont).rbegin()) it = (cont).rbegin(); it != (cont).rend(); ++it)
#define all(cont) (cont).begin(), (cont).end()
#define memclr(var) memset(var, 0, sizeof(var))

typedef unsigned long long ull;
typedef long long ll;

const int INF = INT_MAX;
const int NINF = INT_MIN;
const ll INF_LL = LLONG_MAX;
const ll NINF_LL = LLONG_MIN;
const double PI = acos(-1.0);
const int MOD = 1e9+7;

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, ##args)
	#define rep_rt() printf("[Run time: %.3fs]\n", ((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...)
#endif

// end of template

class DisjointSet {
public:
	vector<int> id;

	int find(int i) {
		if (i != id[i]) {
			return id[i] = find(id[i]);
		}
		return i;
	}
	explicit DisjointSet(int n) {
		id.resize(n+1);
		for (int it = 0; it < n+1; ++it) {
			id[it] = it;
		}
	}

	void join(int i, int j) {
		int par_i = find(i), par_j = find(j);
		if (par_i != par_j) {
			if (par_i < par_j) {
				id[par_j] = par_i;
			} else {
				id[par_i] = par_j;
			}
		}
	}

	bool is_same(int i, int j) {
		return find(i) == find(j);
	}
};

int main() {
#ifdef DEBUG
	freopen("699D.in", "r", stdin);
#endif

	int n;
	scanf("%d", &n);
    DisjointSet dsu(n);

    int poss_root = 0;
    vb need_change(n+1, false);

    vi arr(n+1);
    rep1(idx, n) {
    	int p;
    	scanf("%d", &p);
    	arr[idx] = p;

    	if (idx == p) {
    		poss_root = idx;
    	}
    	if (dsu.find(idx) == dsu.find(p)) { // same set
    		need_change[idx] = true;
    	}
    	dsu.join(idx, p);
    }
    vi unq_set;
    rep1(idx, n) {
    	// debug("%d: %d\n", idx, dsu.find(idx));
    	unq_set.pub(dsu.find(idx));
    }
    sort(all(unq_set));
    unq_set.resize(unique(all(unq_set))-unq_set.begin());

    printf("%d\n", (int) unq_set.size()-(poss_root ? 1 : 0));

    if (!poss_root) { // doesn't have any root
    	rep1(idx, n) {
    		if ((dsu.find(idx) == unq_set[0]) and (need_change[idx])) {
    			poss_root = idx;
    			break;
    		}
    	}
    }

    rep1(idx, n) {
    	if (need_change[idx])
    		printf("%d", poss_root);
    	else
    		printf("%d", arr[idx]);
    	if (idx != n)
    		printf(" ");
    }
    printf("\n");

#ifdef DEBUG
    rep_rt();
#endif
    return 0;
}