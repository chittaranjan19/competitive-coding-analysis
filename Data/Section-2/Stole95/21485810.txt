import java.util.*;
import java.io.*;

public class C {
	public static void main(String[] args) {
		FastScannerC sc = new FastScannerC(System.in);
		
		int N = sc.nextInt();
		int M = sc.nextInt();
		int K = sc.nextInt();
		
		int[] arr = new int[N];
		Sock[] socks = new Sock[N];
		
		for(int i = 0 ; i < N ; i++){
			arr[i] = sc.nextInt();
			socks[i] = new Sock(arr[i]);
		}
		
		for(int i = 0 ; i < M ; i++){
			int a = sc.nextInt();
			int b = sc.nextInt();
			a--;
			b--;
			socks[a].adj.add(b);
			socks[b].adj.add(a);
		}
		
		boolean[] visited = new boolean[N];
		
		int changed = 0;
		
		for(int i = 0 ; i < N ; i++){
			if(visited[i]) continue;
			
			HashMap<Integer, Integer> times = new HashMap<>();
			
			LinkedList<Integer> queue = new LinkedList<>();
			queue.add(i);
			visited[i] = true;
			times.put(socks[i].color, 1);
			
			int ctr = 0;
			
			while(!queue.isEmpty()){
				int curr = queue.poll();
				ctr++;
				
//				HashSet<Integer> vis = new HashSet<>();
				
//				System.out.println("Curr sock " + curr);
				
				for(Integer it : socks[curr].adj){
					if(visited[it]){
//						vis.add(it);
						continue;
					}
					
					visited[it] = true;
					queue.addLast(it);
					Integer val = times.get(socks[it].color);
					if(val == null) val = 0;
					val++;
					times.put(socks[it].color, val);
//					System.out.println("With color " + socks[it].color + " there are now " + val + " socks");
				}
				
			}
			
			int max = 0;
			
			for(Integer it : times.values()){
				max = Math.max(max, it);
			}
			
//			System.out.println(max);
			
			changed += (ctr - max);
		}
		
		System.out.println(changed);
	}
}

class Sock{
	int color;
	int index;
	ArrayList<Integer> adj = new ArrayList<>();
	
	public Sock(int col){
		color = col;
		adj = new ArrayList<>();
	}
}

class FastScannerC{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScannerC(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}
