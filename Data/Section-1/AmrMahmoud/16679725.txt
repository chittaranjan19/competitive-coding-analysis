#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

vector<int> tree[100005];
int sz[100005];
bool done[100005];
char ans[100005];

int dfs(int node, int parent = -1)
{
  sz[node] = 1;
  for(int i=0;i<tree[node].size();i++)
  {
    if(tree[node][i] == parent || done[tree[node][i]]) continue;
    sz[node] += dfs(tree[node][i], node);
  }
  return sz[node];
}

int findcenter(int node, int parent, int total)
{
  int ans = -1, x;
  if(sz[node] > total) ans = node;
  for(int i=0;i<tree[node].size();i++)
  {
    if(tree[node][i] == parent || done[tree[node][i]]) continue;
    x = findcenter(tree[node][i], node, total);
    if(x != -1 && (ans == -1 || sz[ans] > sz[x]))
      ans = x;
  }
  return ans;
}

void solve(int node, char c)
{
  dfs(node);
  if(sz[node] == 1)
  {
    ans[node] = c;
    return;
  }
  int center = findcenter(node, -1, sz[node] / 2);
  done[center] = true;
  for(int i=0;i<tree[center].size();i++)
  {
    if(done[tree[center][i]]) continue;
    solve(tree[center][i], c + 1);
  }
  done[center] = false;
  ans[center] = c;
}

int main()
{
  int n, x, y;
  cin >> n;
  for(int i=0;i<n-1;i++)
  {
    scanf("%d %d", &x, &y);
    tree[x].pb(y);
    tree[y].pb(x);
  }
  solve(1, 'A');
  for(int i=1;i<=n;i++)
  {
    if(i != 1) printf(" ");
    printf("%c", ans[i]);
  }
  return 0;
}
