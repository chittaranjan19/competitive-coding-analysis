//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1010, MAXK = 50, MOD = 1e9 + 7;

void add (int &x, int y) {
	x = (x + y) % MOD;
}

int mult (int x, int y) {
	return (ll(x) * y) % MOD;
}

int fact[MAXN];
int dp[2][MAXN][MAXK];

void precomp() {
	fact[0] = 1;
	for (int i = 1; i < MAXN; i++) {
		fact[i] = mult(fact[i - 1], i);
	}
	dp[1][0][0] = 1;
	for (int k = 0; k < MAXK; k++) {
		//this is the maximum length...
		for (int i = 0; i < MAXN; i++) {
			for (int j = 0; j < MAXK; j++) {
				int &ref = dp[1][i][j];
				if (i) {
					add(ref, dp[1][i - 1][j]);
				}
				if (k) {
					add(ref, dp[0][i][j]);
				}
				if (i && k) {
					add(ref, MOD - dp[0][i - 1][j]);
				}
				if (i >= k && j && k) {
					add(ref, dp[0][i - k][j - 1]);
				}
			}
		}
		for (int i = 0; i < MAXN; i++) {
			for (int j = 0; j < MAXK; j++) {
				int &ref = dp[1][i][j];
				dp[0][i][j] = ref;
				ref = 0;
			}
		}
	}
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	//first step is solely precomputation. length is very limited, like <= 50
	precomp();
	int t, n, k;
	for (cin >> t; t--; ) {
		cin >> n >> k;
		cout << (k < MAXK ? mult(dp[0][n][k], fact[k]) : 0) << '\n';
	}
}