#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define EPS 1e-5
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int sum[1005][1005], arr[1005][1005];
int maxi[1002][1002][10][10], p[1005];

int main()
{
  int n, m;
  scanf("%d %d", &n, &m);
  for(int i=1;i<=n;i++)
    for(int j=1;j<=m;j++)
      scanf("%d", &arr[i][j]);
  for(int i=1;i<=n;i++)
    for(int j=1;j<=m;j++)
      sum[i][j] = arr[i][j] + sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1];
  for(int i=1;i<=n;i++)
  {
    for(int j=1;j<=m;j++)
    {
      if(arr[i][j] == 0) continue;
      int L = 1, R = min(n - i + 1, m - j + 1);
      while(R > L)
      {
        int mid = L + (R - L + 1) / 2;
        if(sum[i + mid - 1][j + mid - 1] - sum[i - 1][j + mid - 1] - sum[i + mid - 1][j - 1] + sum[i - 1][j - 1] == mid * mid)
          L = mid;
        else R = mid - 1;
      }
      maxi[i][j][0][0] = L;
    }
  }
  for(int j=1;(1 << j) <= m;j++)
    for(int ii=1;ii<=n;ii++)
      for(int jj=1;jj<=m;jj++)
        if(jj + (1 << j) - 1 <= m)
          maxi[ii][jj][0][j] = max(maxi[ii][jj][0][j - 1], maxi[ii][jj + (1 << (j - 1))][0][j - 1]);
  for(int i=1;(1 << i) <= n;i++)
    for(int j=0;(1 << j) <= m;j++)
      for(int ii=1;ii<=n;ii++)
        if(ii + (1 << i) - 1 <= n)
          for(int jj=1;jj<=m;jj++)
            if(jj + (1 << j) - 1 <= m)
              maxi[ii][jj][i][j] = max(maxi[ii][jj][i - 1][j], maxi[ii + (1 << (i - 1))][jj][i - 1][j]);
  for(int i=0;(1 << i) <= n;i++) p[1 << i] = i;
  for(int i=1;i<=max(n, m);i++)
    if(!p[i])
      p[i] = p[i - 1];
  int q;
  cin >> q;
  while(q--)
  {
    int a, b, c, d;
    scanf("%d %d %d %d", &a, &b, &c, &d);
    int L = 0, R = min(c - a + 1, d - b + 1);
    while(R > L)
    {
      int mid = L + (R - L + 1) / 2;
      int p1 = p[c - mid - a + 2], p2 = p[d - mid - b + 2];
      int tmp = max(maxi[a][b][p1][p2], maxi[c - mid + 1 - (1 << p1) + 1][b][p1][p2]);
      tmp = max(tmp, max(maxi[a][d - mid + 1 - (1 << p2) + 1][p1][p2], maxi[c - mid + 1 - (1 << p1) + 1][d - mid + 1 - (1 << p2) + 1][p1][p2]));
      if(tmp >= mid)
        L = mid;
      else R = mid - 1;
    }
    printf("%d\n", L);
  }
  return 0;
}
