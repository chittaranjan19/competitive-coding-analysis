import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
	
	void solve() throws IOException {
		int max = Integer.parseInt(br.readLine());
		char[] s = br.readLine().toCharArray();
		int p = 0;
		Vector<Integer> L = new Vector<Integer>();
		while (p<s.length) {
			int len = 0;
			while (p<s.length && !(s[p]=='.' || s[p]=='!' || s[p] == '?')) {
				p++; len++;
			}
			p+=2; L.add(len+1);
		}
		//for (int x:L) out.print(x+" ");
		int n = L.size();
		int[] d = new int[n+1];
		boolean ok = true;
		for (int i=1; i<=n; i++) {
			int cur = L.elementAt(i-1);
			ok &= cur<=max;
			d[i] = d[i-1]+1;
			int j = i-1;
			while (j>0 && cur<=max) {
				d[i] = Math.min(d[i], d[j]+1);
				cur += 1+L.elementAt(j-1);
				j--;
			}
		}
		if (ok) out.println(d[n]); else out.println("Impossible");
	}

	
	

	
	
	
	
	
    static final int inf = 1000000000+10;
    static final long linf = 1l<<62;
    static final double eps = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;    
    
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }
    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }
    long nextLong() throws IOException {
            return Long.parseLong(next());
    }
    public static void main(String[] args) {        
    	new Main().run();    
    }    
}
