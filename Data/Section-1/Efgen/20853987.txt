import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
import java.util.Vector;

public class Main implements Runnable {


    void solve() throws IOException {
        int len = nextInt();
        int t = nextInt();
        char[] s = (next() + "0").toCharArray();
        int pos = 0;
        while (s[pos] != '.') pos++;
        int commaPos = pos;
        pos++;
        while (pos < len && s[pos] < '5') {
            pos++;
        }

        if (s[pos] >= '5') {
            int lastRound = -1;
            if (pos > commaPos + 1) {
                while (t > 0 && pos > commaPos) {
                    pos--;
                    s[pos]++;
                    lastRound = pos;
                    t--;
                    if (s[pos] < '5') break;
                }
            }

            if (pos == commaPos) {
                pos = commaPos - 1;
                //  out.println(pos);
                while (pos >= 0) {
                    if (s[pos] == '9') {
                        s[pos] = '0';
                    } else {
                        s[pos]++;
                        break;
                    }
                }
                if (pos < 0) {
                    out.print(1);
                }
                pos = commaPos - 1;
            }
            //   out.println(lastRound);
            //  out.println(pos);
        }

        while (pos > commaPos && s[pos] == '0') pos--;

        for (int i = 0; i <= pos; i++) {
            out.print(s[i]);
        }


    }

    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    public void run() {
        try {
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);

            solve();
            br.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(123);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public static void main(String[] args) {
        new Thread(new Main()).start();
    }
}
///
