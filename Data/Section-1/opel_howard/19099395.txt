#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <climits>
#ifdef DEBUG
	#include <ctime>
#endif
using namespace std;

// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define rep(it, n) for(int it = 0; it < n; ++it)
#define rep1(it, n) for(int it = 1; it <= n; ++it)
#define loop(it, from, to) for(int it = (from); it <= (to); ++it)
#define reverse_iterate(it, cont) for(__typeof((cont).rend()) it = (cont).rbegin(); it != (cont).rend(); ++it)
#define iterate(it, cont) for(__typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define all(cont) (cont).begin(), (cont).end()

typedef unsigned long long ull;
typedef long long ll;

const int INF = INT_MAX;
const int NINF = INT_MIN;
const ll INF_LL = LLONG_MAX;
const ll NINF_LL = LLONG_MIN;
const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, ##args)
	#define rep_rt() printf("[Run time: %.3fs]\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...)
#endif

// end of template

int main() {
#ifdef DEBUG
	freopen("691B.in", "r", stdin);
#endif
	vb is_sym_up(26, false);
	is_sym_up['A'-'A'] = true;
	is_sym_up['H'-'A'] = true;
	is_sym_up['I'-'A'] = true;
	is_sym_up['M'-'A'] = true;
	is_sym_up['O'-'A'] = true;
	is_sym_up['T'-'A'] = true;
	is_sym_up['U'-'A'] = true;
	is_sym_up['V'-'A'] = true;
	is_sym_up['W'-'A'] = true;
	is_sym_up['X'-'A'] = true;
	is_sym_up['Y'-'A'] = true;

	vb is_sym_lo(26, false);
	is_sym_lo['o'-'a'] = true;
	is_sym_lo['v'-'a'] = true;
	is_sym_lo['w'-'a'] = true;
	is_sym_lo['x'-'a'] = true;

    string str;
    getline(cin, str);
    int i = 0, j = str.length()-1;
    bool is_sym = true;
    while (i <= j) {
    	if (isupper(str[i]) != isupper(str[j])) {
    		is_sym = false;
    		break;
    	}
    	if (str[i] != str[j]) {
    		if ((str[i] == 'p') and (str[j] == 'q')) {

    		} else if ((str[i] == 'b') and (str[j] == 'd')) {

    		} else if ((str[i] == 'q') and (str[j] == 'p')) {

            } else if ((str[i] == 'd') and (str[j] == 'b')) {

            } else {
    			is_sym = false;
    			break;
    		}
    	} else {
	    	bool is_up = isupper(str[i]);
	    	if (is_up) {
	    		if (!is_sym_up[str[i]-'A']) {
    				is_sym = false;
	    			break;	
	    		}
	    	} else if (!is_sym_lo[str[i]-'a']) {
    			is_sym = false;
	    		break;
	    	}
    	}
    	++i, --j;
    }
    // set<char> sym_ver;
    // sym_ver.insert('B');
    // sym_ver.insert('C');
    // sym_ver.insert('D');
    // sym_ver.insert('E');
    // sym_ver.insert('H');
    // sym_ver.insert('I');
    // sym_ver.insert('K');
    // sym_ver.insert('O');
    // sym_ver.insert('X');
    // bool pos_ver = true;
    // for (int it = 0; it < str.length(); ++it) {
    // 	if (!sym_ver.count(str[it]))
    // 		pos_ver = false;
    // }
    if ((is_sym))
    	puts("TAK");
    else
    	puts("NIE");

#ifdef DEBUG
    rep_rt();
#endif
    return 0;
}