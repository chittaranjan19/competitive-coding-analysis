import java.util.*;

public class _687C {

    static int[] c;
    static int n;
    static int k;
    static List<Node>[] nodesByK;

    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);

        n = scan.nextInt();
        k = scan.nextInt();

        nodesByK = new List[k + 1];

        c = new int[n + 1];

        for(int i = 1; i <= n; i++)
            c[i] = scan.nextInt();

        dp();
        Node root = last(nodesByK[k]);
        solve(root);

        List<Integer> values = new ArrayList<Integer>(root.values);
        Collections.sort(values);

        StringBuilder buf = new StringBuilder();
        boolean isFirst = true;
        for(Integer i : values) {
            if(isFirst)
                isFirst = false;
            else
                buf.append(' ');
            buf.append(i);
        }
        System.out.println(values.size());
        System.out.println(buf.toString());
    }

    static void dp() {

        for(int i = 0; i <=k; i++)
            nodesByK[i] = new LinkedList<Node>();

        nodesByK[0].add(new Node(0, 0));

        for(int i = 1; i <= k; i++) {
            for(int j = 1; j <= n; j++) {
                int lastK = i - c[j];
                boolean optional = lastK >= 0 && !nodesByK[lastK].isEmpty()
                        && first(nodesByK[lastK]).index < j;
                if(optional)
                    nodesByK[i].add(new Node(i, j));
            }
        }

    }

    static void solve(Node node) {

        node.visited = true;

        if(node.k == 0) {
            node.values.add(0);
            return;
        }

        Node upLeft = lower(nodesByK[node.k - node.value], node);

        if(!upLeft.visited)
            solve(upLeft);

        for(Integer v : upLeft.values) {
            node.values.add(v);
            node.values.add(v + node.value);
        }

        Node left = lower(nodesByK[node.k], node);

        if(left == null)
            return;

        if(!left.visited)
            solve(left);

        for(Integer v : left.values)
            node.values.add(v);

    }

    static class Node implements Comparable<Node> {
        int index;
        int k;
        boolean visited;
        int value;
        Set<Integer> values = new HashSet<Integer>();

        Node(int k, int index) {
            this.k = k;
            this.index = index;
            value = c[index];
        }

        @Override
        public int compareTo(Node o) {
            return index - o.index;
        }
    }

    static Node first(List<Node> nodes) {
        return nodes.get(0);
    }

    static Node last(List<Node> nodes) {
        return nodes.get(nodes.size() - 1);
    }

    static Node lower(List<Node> nodes, Node target) {
        int low = 0;
        int high = nodes.size();

        while(low < high) {
            int mid = (low + high) / 2;
            if(nodes.get(mid).index >= target.index)
                high = mid;
            else // mid < target
                low = mid + 1;
        }

        if(high - 1 < 0)
            return null;

        return nodes.get(high - 1);

    }


}
