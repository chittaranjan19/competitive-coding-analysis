#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAXN = 100;
const int MAXM = 200000 + 5;
const int INF = 1 << 30;

struct edge
{
    int to, cap, next;
    edge(int to = 0, int cap = 0, int next = 0) : to(to), cap(cap), next(next) {}
} G[MAXN * 4];
int head[MAXN], tot, cur[MAXN], d[MAXN], a[MAXN], b[MAXM], c[MAXN];
int num[MAXN], num1[MAXN], que[MAXN];

void init()
{
    memset(head, -1, sizeof(head));
    memset(num, 0, sizeof(num));
    memset(num1, 0, sizeof(num1));
    tot = 0;
}

void addedge(int u, int v, int cap)
{
//    if(u == 4199322 || v == 4199322)
//    {
//        cout << u    << ' ' << v << endl;
//    }
//    if(tot == 28)
//    {
//        cout << u << ' ' << v << endl;
//    }
    G[tot] = edge(v, cap, head[u]);
    head[u] = tot++;
    G[tot] = edge(u, 0, head[v]);
    head[v] = tot++;
}

bool bfs(int s, int t)
{
    memset(d, -1, sizeof(d));
    int front = 0, rear = 0;
    que[rear++] = s;
    d[s] = 0;
    while(front < rear)
    {
        int u = que[front++];
        for(int i = head[u]; ~i; i = G[i].next)
        {
//            cout << i << endl;
            edge e = G[i];
//            cout << e.to << endl;
            if(e.cap > 0 && d[e.to] == -1)
            {
                d[e.to] = d[u] + 1;
                que[rear++] = e.to;
            }
        }
    }
    return ~d[t];
}

int dfs(int u, int t, int f)
{
    if(u == t) return f;
    int ret = 0;
    for(int &i = cur[u]; ~i; i = G[i].next)
    {
        edge &e = G[i];
        if(e.cap > 0 && d[e.to] == d[u] + 1)
        {
            int tmp = dfs(e.to, t, min(f, e.cap));
            if(tmp > 0)
            {
                e.cap -= tmp;
                G[i ^ 1].cap += tmp;
                ret += tmp;
                f -= tmp;
                if(!f) break;
            }
        }
    }
    return ret;
}

int Dinic(int s, int t)
{
    int ret = 0;
    while(bfs(s, t))
    {
        memcpy(cur, head, sizeof(head));
//        cout <<  1 << endl;
        ret += dfs(s, t, INF);
    }
    return ret;
}

int cal(int x)
{
    for(int i = 1; i <= 7; ++i)
    {
        if(x <= c[i]) return (i + 2) / 3;
    }
    return 4;
}

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        for(int i = 0; i < 3; ++i)
        {
            scanf("%d", a + i);
        }
        sort(a, a + 3);
        c[1] = a[0], c[2] = a[1], c[3] = a[2];
        c[4] = a[0] + a[1], c[5] = a[0] + a[2], c[6] = a[1] + a[2];
        c[7] = a[0] + a[1] + a[2];
        int s = 0, t = MAXN - 2;
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", b + i);
        }
        int l = 1, r = n + 1;
        while(l < r)
        {
            int m = (l + r) >> 1;
//            cout << m << endl;
            init();
            addedge(11, 21, INF), addedge(12, 22, INF), addedge(13, 23, INF);
            addedge(14, 21, INF), addedge(14, 22, INF), addedge(15, 21, INF), addedge(15, 23, INF);
            addedge(16, 22, INF), addedge(16, 23, INF), addedge(17, 21, INF), addedge(17, 22, INF);
            addedge(17, 23, INF);
            for(int i = 1; i <= n; ++i)
            {
                int tmp = cal(b[i]);
                if(tmp == 4)
                {
                    l = n + 1;
                    goto output;
                }
                num[tmp] += tmp;
                int st;
                if(tmp == 1)
                {
                    st = 1;
                }
                else if(tmp == 2)
                {
                    st = 4;
                }
                else
                {
                    st = 7;
                }
                for(int j = 0; j < 3 && j + st <= 7; ++j)
                {
                    if(b[i] <= c[st + j])
                    {
                        num1[st + j] += tmp;
                    }
                }
            }
            int sum = 0;
            for(int i = 1; i <= 3; ++i)
            {
                addedge(s, i, num[i]);
                sum += num[i];
            }
            for(int i = 11; i <= 17; ++i)
            {
                addedge((i - 10 + 2) / 3, i, num1[i - 10]);
            }
            for(int i = 21; i <= 23; ++i)
            {
                addedge(i, t, m);
            }
            Dinic(s, t) >= sum ? r = m : l = m + 1;
        }
        output:
        if(l != n + 1)
        {
            printf("%d\n", l);
        }
        else
        {
            puts("-1");
        }
    }
    return 0;
}
