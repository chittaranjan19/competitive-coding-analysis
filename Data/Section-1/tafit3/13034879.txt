import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemA {
    private final double EPS = 1e-10;
    BufferedReader rd;

    ProblemA() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] q = intarr();
        int a = q[0];
        int b = q[1];
        double res;
        if(a<b) {
            res = -1;
        } else if(a == b) {
            res = a;
        } else {
            double p = f(a,b);
            if(Math.abs(p-b) < EPS) {
                res = b;
            } else {
                double min, max;
                if(p > 0) {
                    min = b+p;
                    max = 2*b+p;
                } else {
                    min = b;
                    max = 2*b+p;
                }
                int m = 0;
                while(Math.abs(max - min) > EPS && m < 100000) {
                    double mid = (min + max) / 2;
                    double v = g(b, f(a,mid));
                    if(v > 0) {
                        min = mid;
                    } else {
                        max = mid;
                    }
                    m++;
                }
                res = min;
            }
        }
        out(res);
    }

    private double g(double b, double p) {
        return b - Math.abs(p);
    }

    private double f(double a, double x) {
        double u = Math.floor(a / (x*2))*x*2;
        double v = a - u;
        if(Math.abs(v) < EPS) {
            return 0;
        } else if(v > x) {
            return v-2*x;
        } else {
            return v;
        }

    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA();
    }
}
