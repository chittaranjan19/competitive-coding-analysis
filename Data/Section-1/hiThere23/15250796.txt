#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define mn 2110
#define base 31
#define maxC 100000007
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;
int n, m, z, r = 0;
string s, t;
long long hashValF[mn], hashValR[mn], po[mn], hashValT[mn];
pair<int, int> Map[maxC];
pair<int, int> cut[mn];

long long getHash(int l, int r, long long* hashVal)
{
    long long re = (hashVal[r] - hashVal[l - 1] * po[r - l + 1]) % maxC;
    return (re + maxC) % maxC;
}

long long getRev(int l, int r)
{
    long long re = (hashValR[l] - hashValR[r + 1] * po[r - l + 1]) % maxC;
    return (re + maxC) % maxC;
}

void setup()
{
    cin >> s >> t;
    n = s.size();
    m = t.size();
    s = ' ' + s;
    t = ' ' + t;
    z = max(m, n);
    po[0] = 1;
    FOR(i, 1, z)
        po[i] = (po[i - 1] * base) % maxC;
    FOR(i, 1, n)
        hashValF[i] = (hashValF[i - 1] * base + s[i] - 'a' + 1) % maxC;
    FORD(i, n, 1)
        hashValR[i] = (hashValR[i + 1] * base + s[i] - 'a' + 1) % maxC;
    FOR(i, 1, m)
        hashValT[i] = (hashValT[i - 1] * base + t[i] - 'a' + 1) % maxC;
}

void xuly()
{
    FOR(i, 1, n)
    FOR(j, 1, n)
    {
        long long hashFro = getHash(i, j, hashValF);
        long long hashRev = getRev(i, j);
        Map[hashFro] = mp(i, j);
        Map[hashRev] = mp(j, i);
    }
    int now = 1;
    while(now <= m)
    {
        bool ok = false;
        FORD(i, m, now)
        {
            long long get = getHash(now, i, hashValT);
            if (Map[get] != mp(0, 0))
            {
                cut[++ r] = Map[get];
                now = i + 1;
                ok = true;
                break;
            }
        }
        if (!ok)
        {
            cout << -1;
            return;
        }
    }
    cout << r << '\n';
    FOR(i, 1, r)
        cout << cut[i].F << ' ' << cut[i].S << '\n';
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
