import java.io.*;
import java.util.*;
import java.math.*;

public class Task {
	// static final String FileName = "test";

	long sq(long x) {
		return x*x;
	}
	void solve() throws IOException {
		int n = nextInt();
		int m = nextInt();
		int query = nextInt();
		long[] x = new long[n];
		long[] y = new long[n];
		for (int i=0; i<n; i++) {
			x[i] = nextInt();
			y[i] = nextInt();
		}
		int[] p = new int[m+1];
		long[] xc = new long[m];
		long[] yc = new long[m];
		long[] r = new long[m];
		for (int i=0; i<m; i++) {
			r[i] = nextInt();
			xc[i] = nextInt();
			yc[i] = nextInt();
			
		}
		for (int i=0; i<m; i++) {
			long br = Long.MAX_VALUE;
			int best = m;
			for (int j=0; j<m; j++) 
				if (r[j]>r[i] && r[j]<br) 
					if (sq(xc[i]-xc[j])+sq(yc[i]-yc[j])<sq(r[j])) {
						br = r[j];
						best = j;
					}
			p[i] = best;				
		}
		int[] pos = new int[n];
		for (int i=0; i<n; i++) {
			long br = Long.MAX_VALUE;
			int best = m;
			for (int j=0; j<m; j++) {
				if (r[j]<br) 
					if (sq(x[i]-xc[j])+sq(y[i]-yc[j])<sq(r[j])) {
						br = r[j];
						best = j;
					}				
			}
			pos[i] = best;
		}
		p[m] = -1;
		int[] t = new int[m+1];
		while (query-->0) {
			int i = pos[nextInt()-1];
			int j = pos[nextInt()-1];
			int res = 0;
			Arrays.fill(t, 0);
			int cnt = 0;
			while (i>=0) {
				t[i] = ++cnt;
				i = p[i];
			}
			cnt = 0;
			while (j>=0) {			
				if (t[j]>0) {
					res = t[j]+cnt-1;
					break;
				}
				cnt++;
				j = p[j];
			}
			out.println(res);
		}
		
	}
	
	


	static final int inf = 1000000000;
	BufferedReader br;
	StringTokenizer st;
	PrintWriter out;
	
	public void run() {
		try {
			// br = new BufferedReader(new FileReader(FileName+".in"));
			// out = new PrintWriter(FileName+".out");
			br = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);
			//br = new BufferedReader(new FileReader("input.txt"));
			//out = new PrintWriter("output.txt");
			solve();
			br.close();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	String next() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			st = new StringTokenizer(s);
		}
		return st.nextToken();
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	public static void main(String[] args) {	
		new Task().run();
	
	}
}



