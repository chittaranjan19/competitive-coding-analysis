#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

string s;
struct temp
{
  int ind, len;
  int cnt1, cnt2;

  temp(){}
  temp(int j,int k,int l)
  {
    len = j, cnt1 = k, cnt2 = l;
  }
};

temp tree[4000005];

temp Merge(temp x, temp y)
{
  return temp(min(x.cnt1, y.cnt2) + x.len + y.len, x.cnt1 + y.cnt1 - min(x.cnt1, y.cnt2), x.cnt2 + y.cnt2 - min(x.cnt1, y.cnt2));
}

void build(int i,int L,int R)
{
  if(L == R)
  {
    tree[i] = (s[L] == ')' ? temp(0, 0, 1) : temp(0, 1, 0));
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  tree[i] = Merge(tree[i*2 + 1], tree[i*2 + 2]);
}

temp query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return temp(0, 0, 0);
  return Merge(query(i*2 + 1, L, (L + R) / 2, x, y), query(i*2 + 2, (L + R) / 2 + 1, R, x, y));
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("test.in", "r", stdin);
  //freopen("report.out", "w", stdout);
  cin >> s;
  int q, x, y;
  cin >> q;
  build(0, 0, s.size() - 1);
  while(q--)
  {
    cin >> x >> y;
    x--, y--;
    cout << query(0, 0, s.size() - 1, x, y).len * 2 << '\n';
  }
  return 0;
}
