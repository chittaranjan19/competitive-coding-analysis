#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 500010;

char str[maxn], q[maxn];
int st[maxn*5], lazy[maxn*5], other[maxn];
stack<int> stk;

void init(int s, int e, int node)
{
	if(s==e){
		st[node] = 1;
		return;
	}
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	init(s, mid, lc);
	init(mid+1, e, rc);
	st[node] = st[lc] + st[rc];
}

void propagate_down(int s, int e, int node)
{
	if(lazy[node]){
		st[node] = 0;
		if(s!=e){
			int lc = 2*node + 1;
			int rc = lc + 1;
			lazy[lc] = lazy[rc] = 1;
		}
		lazy[node] = 0;
	}
}

void update(int s, int e, int qs, int qe, int node)
{
	propagate_down(s, e, node);
	if(s>e || s>qe || qs>e)
		return;
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	if(s>=qs && qe>=e){
		st[node] = 0;
		if(s!=e)
			lazy[lc] = lazy[rc] = 1;
		return;
	}
	update(s, mid, qs, qe, lc);
	update(mid+1, e, qs, qe, rc);
	st[node] = st[lc] + st[rc];
}

int query(int s, int e, int qs, int qe, int node)
{
	propagate_down(s, e, node);
	if(s>e || s>qe || qs>e)
		return 0;
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	if(s>=qs && qe>=e)
		return st[node];
	return query(s, mid, qs, qe, lc) + query(mid+1, e, qs, qe, rc);
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int n, m, p, i, j, t, lo, mid, hi;
	scanf("%d%d%d%s%s", &n, &m, &p, str, q);
	for(i=0; i<n; i++){
		if(str[i]=='(')
			stk.push(i);
		else{
			j = stk.top();
			stk.pop();
			other[j] = i;
			other[i] = j;
		}
	}
	init(0, n-1, 0);
	p--;
	for(i=0; i<m; i++){
		if(q[i]=='L'){
			lo = 0, hi = p-1;
			while(lo<hi){
				mid = (lo+hi)>>1;
				if((lo+hi)%2)
					mid++;
				if(query(0, n-1, mid, hi, 0)>0)
					lo = mid;
				else
					hi = mid-1;
			}
			p = lo;
		}
		else if(q[i]=='R'){
			lo = p+1, hi = n-1;
			while(lo<hi){
				mid = (lo+hi)>>1;
				if(query(0, n-1, lo, mid, 0)>0)
					hi = mid;
				else
					lo = mid+1;
			}
			p = lo;
		}
		else{
			update(0, n-1, min(other[p], p), max(other[p], p), 0);
			lo = p+1, hi = n-1;
			while(lo<hi){
				mid = (lo+hi)>>1;
				if(query(0, n-1, lo, mid, 0)>0)
					hi = mid;
				else
					lo = mid+1;
			}
			if(query(0, n-1, p, lo, 0)==0){
				lo = 0, hi = p-1;
				while(lo<hi){
					mid = (lo+hi)>>1;
					if((lo+hi)%2)
						mid++;
					if(query(0, n-1, mid, hi, 0)>0)
						lo = mid;
					else
						hi = mid-1;
				}
			}
			p = lo;
		}
	}
	string ans = "";
	for(i=0; i<n; i++){
		if(query(0, n-1, i, i, 0)>0)
			ans+=str[i];
	}
	cout << ans << "\n";
	return 0;
}
