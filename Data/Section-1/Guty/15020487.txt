#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Par
{
	tint abre, cierra;
	Par(tint aa, tint cc)
	{
		abre = aa;
		cierra = cc;
	}
};



int main()
{
	ios_base::sync_with_stdio(0);
	string s;
	cin >> s;
	vector<Par> parejas;
	vector<tint> abiertos;
	map<char, char> v = { {'<','>'}, {'(',')'}, {'[',']'}, {'{','}'} };
	tint c = 0, n = s.size();
	forn(i,n)
	{
		if (s[i] == '<' or s[i] == '(' or s[i] == '[' or s[i] == '{')
		{
			abiertos.push_back(i);
			c++;
		}
		else
		{
			if (!abiertos.empty())
			{
				tint a = abiertos.back();
				abiertos.pop_back();
				parejas.push_back(Par(a,i));
			}
			c--;
		}
		if (c < 0)
		{
			cout << "Impossible" << endl;
			return 0;
		}	
	}
	
	tint ans = 0;
	for (auto x : parejas)
		if (v[s[x.abre]] != s[x.cierra])
			ans++;
	cout << ans << endl;
	
	return 0;
}



