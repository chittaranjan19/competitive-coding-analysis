#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define ex 0.000001

using namespace std;
int n, m, group[mn][2], get[mn][3];
int r[2], sz[3], mark[mn], co[mn];
vector< pair<int, char> > g[mn];
bool done;

void dfs(int u, char x, int gr)
{
    group[++ r[co[u]]][co[u]] = u;
    mark[u] = gr;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        int intent = (g[u][i].S == x? co[u] : co[u] ^ 1);
        if (mark[v] == gr)
        {
            if (co[v] != intent)
            {
                done = true;
                return;
            }
            continue;
        }
        co[v] = intent;
        dfs(v, x, gr);
        if (done)
            return;
    }
}

void solve(int u, char x)
{
    sz[u] = done = 0;
    FOR(i, 1, n)
    if (mark[i] != u)
    {
        r[0] = r[1] = 0;
        dfs(i, x, u);
        if (done)
        {
            sz[u] = maxC;
            return;
        }
        int f = (r[1] < r[0]);
        FOR(i, sz[u] + 1, sz[u] + r[f])
            get[i][u] = group[i - sz[u]][f];
        sz[u] += r[f];
    }
}

void setup()
{
    cin >> n >> m;
    int u, v;
    char c;
    FOR(i, 1, m)
    {
        cin >> u >> v >> c;
        g[u].pb(mp(v, c));
        g[v].pb(mp(u, c));
    }
}

void xuly()
{
    solve(1, 'B');
    solve(2, 'R');
    int f = (sz[1] < sz[2]? 1 : 2);
    if (sz[f] == maxC)
    {
        cout << -1;
        return;
    }
    cout << sz[f] << '\n';
    FOR(i, 1, sz[f])
        cout << get[i][f] << ' ';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
