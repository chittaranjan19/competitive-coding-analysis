#include <cstdio>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
// end of template

typedef unsigned long long ull;
template <typename U> class Comparator {
public:
	bool operator() (const U lhs, const U rhs) {
		// implement
		return true;
	}
};
// end of template

// Description : nCm, Number of combination that can be made with m objects from n objects
// Complexity : O(n*m)
ull getCombinatoric(ull n, ull m) {
	if (n < m)
		return 0;

	ull dp[m+1];
	for (ull it = 0; it <= m; ++it)
		dp[it] = 0;
	
	dp[0] = 1;
	for (ull i = 1; i <= n; ++i) {
		for (ull j = min(i, m); j >= 1; --j) {
			dp[j] += dp[j-1];
		}
	}
	return dp[m];
}
int main() {
	// freopen("478B.in", "r", stdin);
	
	ull n, m;
	scanf("%I64d %I64d", &n, &m);

	ull minimum = (m-((n%m)?1:0))*getCombinatoric(((n+n%m)/m), 2)+getCombinatoric(n%m, 2);

	printf("%I64d %I64d\n", minimum, getCombinatoric(n-(m-1), 2));
	return 0;
}