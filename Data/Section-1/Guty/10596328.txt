#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;


void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int camino(vector<int> &d, int nodo)
{
	int ac = 0;
	while (nodo > 1)
	{
		ac += d[nodo-2];
		nodo /= 2;
	}
	return ac;
}

vector <int> f (int section, int p, int n)
{
	int largo = pow(2,n-p);
	int comienzo = section * largo;
	vector <int> v (largo);
	forn(i,largo)
		v[i] = comienzo++;
	return v;
}

int main()
{
	int n;
	cin >> n;
	int p = 1;
	int q = 2;
	int section = 0;
	map<int, vector<int> > hijos;
	vector<int> d (pow(2,n+1)-2);
	forn(i,pow(2,n+1)-2)
	{
		cin >> d[i];
		if (i == q)
		{
			p++;
			q += pow(2,p);
			section = 0;
		}
		hijos[i] = f(section, p, n);		
		section++;	
	}	
	vector<int>	costo (pow(2,n));
	forn(j,pow(2,n))
		costo[j] = camino(d,pow(2,n)+j);
	int max = *max_element(costo.begin(), costo.end());
	vector<int> costoAux = costo;
	int res = 0;
	forn(i,pow(2,n+1)-2)
	{
		bool flag = true;
		costoAux = costo;
		int comienzo = hijos[i][0];
		int ending = hijos[i][int(hijos[i].size())-1]+1;
		while (flag)
		{
			costo = costoAux;
			forsn(j,comienzo,ending)
			{
				costoAux[j]++;
				if (costoAux[j] > max)
					flag = false;
			}
			if(flag)
				res++;
		}
	}
	cout << res << endl;
	return 0;
	
}
