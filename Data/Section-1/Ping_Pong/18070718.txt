#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>
#include <clocale>

#define ll long long
#define ld long double

using namespace std;

const ll inf = (ll)2 * 1e9;
const ll MOD = (ll)1e9 + 7;
const ll P = 239;
const ll MAX_N = 500;
const ld pi = 3.1415926535897932384626;
const ld eps = 1e-6;

int n;
vector<vector<int> > f;

int bin_search(vector<int> &a, int val)
{
    int l = -1, r = a.size(), mid;
    while (r - l > 1)
    {
        mid = (l + r) / 2;
        if (val < a[mid])
            r = mid;
        else
            l = mid;
    }
    return a.size() - r;
}

void update(int x, int val)
{
    for (; x < n; x = (x | (x + 1)))
        f[x].push_back(val);
}

int get_ans(int x, int val)
{
    int res = 0;
    for (; x >= 0; x = (x & (x + 1)) - 1)
        res += bin_search(f[x], val);
    return res;
}

void build()
{
    f.resize(n);
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //setlocale(LC_CTYPE, "rus");
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    scanf("%d", &n);
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    vector<pair<int, int> > b(n);
    map<int, int> m;
    for (int i = 0; i < n; i++)
    {
        m[a[i]]++;
        b[i] = make_pair(m[a[i]], i);
    }
    sort(b.begin(), b.end());
    build();
    for (int i = 0; i < n; i++)
        update(b[i].second, b[i].first);
    ll ans = 0;
    m.clear();
    for (int i = n - 1; i >= 0; i--)
    {
        m[a[i]]++;
        ans += get_ans(i - 1, m[a[i]]);
    }
    printf("%I64d", ans);
    return 0;
}
