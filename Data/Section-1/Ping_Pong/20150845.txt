#include <bits/stdc++.h>

#define ll long long

using namespace std;

const int N = 100000;
const int inf = (int)1e9;
const int MOD = (int)1e9 + 7;

int sz;
ll F[2000];

void build(int n)
{
    sz = n;
}

void init()
{
    fill(F, F + sz, 0);
}

void add(int x, int val)
{
    for (; x < sz; x = x | (x + 1))
        F[x] += val;
}

ll get(int x)
{
    ll res = 0;
    for (; x >= 0; x = (x & (x + 1)) - 1)
        res += F[x];
    return res;
}

ll get(int l, int r)
{
    return (get(r) - get(l - 1));
}

struct event
{
    int type; // 0 - start, 1 - point, 2 - end
    int x;
    int y1;
    int y2;
    int num;

    event() {};

    event(int a, int b, int c, int d)
    {
        type = a;
        x = b;
        y1 = c;
        y2 = d;
    }

    event(int a, int b, int c, int d, int e)
    {
        type = a;
        x = b;
        y1 = c;
        y2 = d;
        num = e;
    }
};

bool comp(event a, event b)
{
    return (a.x != b.x ? a.x < b.x : a.type < b.type);
}

int main()
{
    //freopen("m3.in", "r", stdin);
    //freopen("m3.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    int n, m, k;
    scanf("%d %d %d", &n, &m, &k);
    event g[n * m];
    int pp[k][2];
    int curr = 0;
    for (int i = 0; i < k; i++)
    {
        int s;
        scanf("%d", &s);
        pp[i][0] = curr; pp[i][1] = s;
        for (int j = 0; j < s; j++)
        {
            int x, y, val;
            scanf("%d %d %d", &x, &y, &val);
            x--; y--;
            g[curr++] = {1, y, x, val};
        }
    }
    int q;
    scanf("%d", &q);
    int r1 = 0, r2 = 0;
    int q1[q];
    int q2[q][4];
    int qs[q];
    for (int i = 0; i < q; i++)
    {
        string s;
        cin >> s;
        if (s[0] == 'S')
        {
            int x;
            scanf("%d", &x);
            x--;
            q1[r1++] = x;
            qs[i] = 1;
        }
        else
        {
            int x1, y1, x2, y2;
            scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
            x1--; y1--; x2--; y2--;
            q2[r2][0] = x1;
            q2[r2][1] = y1;
            q2[r2][2] = x2;
            q2[r2][3] = y2;
            r2++;
            qs[i] = 2;
        }
    }
    build(n);
    ll h[k][r2];
    for (int i = 0; i < k; i++)
        for (int j = 0; j < r2; j++)
            h[i][j] = 0;
    event e[4004000];
    for (int i = 0; i < k; i++)
    {
        int pos = 0;
        for (int j = 0; j < pp[i][1]; j++)
            e[pos++] = g[pp[i][0] + j];
        for (int j = 0; j < r2; j++)
        {
            e[pos++] = {0, q2[j][1], q2[j][0], q2[j][2], j};
            e[pos++] = {2, q2[j][3], q2[j][0], q2[j][2], j};
        }
        sort(e, e + pos, comp);
        for (int j = 0; j < pos; j++)
            if (e[j].type == 0)
                h[i][e[j].num] -= get(e[j].y1, e[j].y2);
            else if (e[j].type == 2)
                h[i][e[j].num] += get(e[j].y1, e[j].y2);
            else
                add(e[j].y1, e[j].y2);
    }
    bool sw[k];
    for (int i = 0; i < k; i++)
        sw[i] = true;
    int c1 = 0, c2 = 0;
    for (int i = 0; i < q; i++)
        if (qs[i] == 1)
        {
            sw[q1[c1]] = !sw[q1[c1]];
            c1++;
        }
        else
        {
            ll res = 0;
            for (int j = 0; j < k; j++)
                if (sw[j])
                    res += h[j][c2];
            c2++;
            printf("%I64d\n", res);
        }
    return 0;
}
