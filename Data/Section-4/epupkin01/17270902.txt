import java.io.*;
import java.math.BigInteger;
import java.util.*;

/**
 * Created by Leonti on 2016-04-10.
 */
public class D {
    public static void main(String[] args) {
        InputReader inputReader = new InputReader(System.in);
        PrintWriter printWriter = new PrintWriter(System.out, true);

        int n = inputReader.nextInt();
        int m = inputReader.nextInt();
        ArrayList<IslandPair> islandPairs = new ArrayList<>(n - 1);
        TreeMap<Long, Integer> bridges = new TreeMap<>();
        boolean[] isConnected = new boolean[n - 1];

        long lPrev = inputReader.nextLong();
        long rPrev = inputReader.nextLong();
        long l, r;
        for (int i = 1; i < n; i++) {
            l = inputReader.nextLong();
            r = inputReader.nextLong();
            islandPairs.add(new IslandPair(l - rPrev, r - lPrev, i - 1));
            lPrev = l;
            rPrev = r;
        }

        for (int i = 0; i < m; i++) {
            bridges.put(inputReader.nextLong(), i);
        }

        Collections.sort(islandPairs);

        IslandPair nextIslandPair = islandPairs.get(0);
        Map.Entry<Long, Integer> nextBridge;
        int[] res = new int[n - 1];
        for (int i = 0, j = 0; j < n - 1 && i < m; i++) {
            nextBridge = bridges.pollFirstEntry();
            if (nextBridge.getKey() >= nextIslandPair.minDist && nextBridge.getKey() <= nextIslandPair.maxDist) {
                isConnected[nextIslandPair.index] = true;
                res[nextIslandPair.index] = nextBridge.getValue();
                if (++j < n - 1) {
                    nextIslandPair = islandPairs.get(j);
                } else {
                    break;
                }
            }
        }

        boolean isPossible = true;
        for (int i = 0; i < n - 1; i++) {
            if (!isConnected[i]) {
                isPossible = false;
                break;
            }
        }

        if (isPossible) {
            printWriter.println("Yes");
            for (int i = 0; i < n - 1; i++) {
                printWriter.print((res[i] + 1) + " ");
            }
        } else {
            printWriter.print("No");
        }

        printWriter.close();
    }

    private static class IslandPair implements Comparable<IslandPair> {
        public long minDist;
        public long maxDist;
        public int index;

        public IslandPair(long minDist, long maxDist, int index) {
            this.minDist = minDist;
            this.maxDist = maxDist;
            this.index = index;
        }

        @Override
        public int compareTo(IslandPair o) {
            long res = this.minDist - o.minDist;
            if (res > 0) {
                return 1;
            } else if (res < 0) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream in) {
            reader = new BufferedReader(new InputStreamReader(in));
        }

        public int[] nextIntArray(int size) {
            int[] array = new int[size];
            for (int i = 0; i < size; ++i) {
                array[i] = nextInt();
            }
            return array;
        }

        public long[] nextLongArray(int size) {
            long[] array = new long[size];
            for (int i = 0; i < size; ++i) {
                array[i] = nextLong();
            }
            return array;
        }

        public double[] nextDoubleArray(int size) {
            double[] array = new double[size];
            for (int i = 0; i < size; ++i) {
                array[i] = nextDouble();
            }
            return array;
        }

        public String[] nextStringArray(int size) {
            String[] array = new String[size];
            for (int i = 0; i < size; ++i) {
                array[i] = next();
            }
            return array;
        }

        public boolean[][] nextBooleanTable(int rows, int columns, char trueCharacter) {
            boolean[][] table = new boolean[rows][columns];
            for (int i = 0; i < rows; ++i) {
                String row = next();
                assert row.length() == columns;
                for (int j = 0; j < columns; ++j) {
                    table[i][j] = (row.charAt(j) == trueCharacter);
                }
            }
            return table;
        }

        public char[][] nextCharTable(int rows, int columns) {
            char[][] table = new char[rows][];
            for (int i = 0; i < rows; ++i) {
                table[i] = next().toCharArray();
                assert table[i].length == columns;
            }
            return table;
        }

        public int[][] nextIntTable(int rows, int columns) {
            int[][] table = new int[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    table[i][j] = nextInt();
                }
            }
            return table;
        }

        public long[][] nextLongTable(int rows, int columns) {
            long[][] table = new long[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    table[i][j] = nextLong();
                }
            }
            return table;
        }

        public double[][] nextDoubleTable(int rows, int columns) {
            double[][] table = new double[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    table[i][j] = nextDouble();
                }
            }
            return table;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line = readLine();
                if (line == null) {
                    return false;
                }
                tokenizer = new StringTokenizer(line);
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                tokenizer = new StringTokenizer(readLine());
            }
            return tokenizer.nextToken();
        }

        public String readLine() {
            String line;
            try {
                line = reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return line;
        }
    }
}
