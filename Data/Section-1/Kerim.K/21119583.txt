#include "bits/stdc++.h"
#define MAXN 500009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<ll,ll> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
map<ll,ll>pm;
ll a[MAXN],t[MAXN],sz[MAXN],ID[MAXN];
vector<ll>adj[MAXN];
ll par[309][309];
ll dp[2][150009];
const ll B=1e15;
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	ll sum=0;
	ll n,m,speed;
	scanf("%lld%lld%lld",&n,&m,&speed);
	for(ll i=1;i<=m;i++){
		ll b;
		scanf("%lld%lld%lld",a+i,&b,t+i);
		pm[t[i]]=1;
		sum+=b;
	}ll c=0;
	tr(it,pm){
		it->ss=++c;
		ID[c]=it->ff;
	}
	for(ll i=1;i<=m;i++)
		adj[pm[t[i]]].pb(a[i]);
	for(ll i=1;i<=c;i++){
		adj[i].pb(-1);
		sort(all(adj[i]));
		sz[i]=adj[i].size();
		for(ll j=1;j<sz[i];j++)
			par[i][j]=par[i][j-1]+adj[i][j];
	}ID[0]=1;	
	for(ll i=1;i<=c;i++){
		ll time=ID[i]-ID[i-1];
		ll dis=time*speed;//distance is equal time multipliped by speed
		deque<PII>s;int pnt=dis+1;
		for(int j=1;j<=min(n,dis);j++){
			while(!s.empty() and s.back().ff>=dp[(i-1)&1][j])
				s.ppb();
			s.pb(mp(dp[(i-1)&1][j],j));	
		}
		for(ll j=1;j<=n;j++){
			if(pnt<=n){
				while(!s.empty() and s.back().ff>=dp[(i-1)&1][pnt])
					s.ppb();
				s.pb(mp(dp[(i-1)&1][pnt],pnt));	
				pnt++;
			}
			ll low=max(1LL,j-dis);
			while(!s.empty() and s.front().ss<low)
				s.pop_front();	
			assert(!s.empty());		
			ll pos=lower_bound(all(adj[i]),j)-adj[i].begin();
			if(pos>=sz[i])
				dp[i&1][j]=((sz[i]-1)*j-par[i][sz[i]-1])+s.front().ff;
			else if(pos==1)
				dp[i&1][j]=(par[i][sz[i]-1]-(sz[i]-1)*j)+s.front().ff;
			else{		
				ll kici=pos-1;
				ll kicisum=par[i][pos-1];
				ll uly=(sz[i]-1)-kici;
				ll ulysum=par[i][sz[i]-1]-kicisum;
				dp[i&1][j]=(kici*j-kicisum)+(ulysum-uly*j)+s.front().ff;
			}
		}
	}ll ans=B;
	for(ll i=1;i<=n;i++)
		umin(ans,dp[c&1][i]);
	printf("%lld\n",sum-ans);	
	return 0;
}
