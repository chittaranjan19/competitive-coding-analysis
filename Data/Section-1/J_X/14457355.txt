#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

const int maxn = 400 + 5;

typedef pair<int, int> P;

struct edge
{
    int to, next;
    edge(int to = 0, int next = 0) : to(to), next(next) {}
} G[4 * maxn * maxn];
int head[2][maxn], tot, d[maxn][maxn];
bool g[maxn][maxn];

void init()
{
    memset(head, -1, sizeof(head));
    memset(g, 0, sizeof(g));
    tot = 0;
}

void addedge(int num, int u, int v)
{
    G[tot] = edge(v, head[num][u]);
    head[num][u] = tot++;
    G[tot] = edge(u, head[num][v]);
    head[num][v] = tot++;
}

int Dijkstra(int n)
{
    memset(d, -1, sizeof(d));
    d[1][1] = 0;
    queue<P> que;
    que.push(P(1, 1));
    while(!que.empty())
    {
        P p = que.front();
        que.pop();
        int x = p.first, y = p.second;
        for(int i = head[0][x]; ~i; i = G[i].next)
        {
            int u = G[i].to;
            for(int j = head[1][y]; ~j; j = G[j].next)
            {
                int v = G[j].to;
                if(d[u][v] == -1)
                {
                    d[u][v] = d[x][y] + 1;
                    if(u == n && v == n) break;
                    if(u != v)
                    {
                        que.push(P(u, v));
                    }
                }
            }
        }
    }
    return d[n][n];
}

int main()
{
    int n, m;
    while(~scanf("%d%d", &n, &m))
    {
        init();
        for(int i = 0; i < m; ++i)
        {
            int u, v;
            scanf("%d%d", &u, &v);
            g[u][v] = g[v][u] = true;
            addedge(0, u, v);
        }
        for(int i = 1; i <= n; ++i)
        {
            for(int j = 1; j <= n; ++j)
            {
                if(!g[i][j] && i != j)
                {
                    addedge(1, i, j);
                    g[i][j] = g[j][i] = true;
                }
            }
        }
        printf("%d\n", Dijkstra(n));
    }
    return 0;
}
