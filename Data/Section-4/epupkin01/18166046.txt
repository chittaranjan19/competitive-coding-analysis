#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};

const int S = 500000;
char s[S], cmnds[S];

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef list<int> List;
typedef List::iterator lIter;

inline void D(Map &mp, mIter &pos)
{
    int pos2 = pos->second;
    if (pos->first < pos2)  // open (
    {
        while (pos->first != pos2)
            mp.erase(pos++);
    }
    else                    // close )
    {
        while (pos->first != pos2)
            mp.erase(pos--);
    }
    mp.erase(pos++);
    
    if (pos == mp.end())
        --pos;
}

int main()
{
    int n, m, p;
    cin >> n >> m >> p;
    while (cin.get() != '\n');
    
    for (int i = 0; i < n; ++i)
        s[i] = getchar();
    while (cin.get() != '\n');
    for (int i = 0; i < m; ++i)
        cmnds[i] = getchar();
    
    List l;
    Map mp;
    for (int i = 0; i < n; ++i)
    {
        if (s[i] == '(')
            l.push_back(i);
        else
        {
            mp.insert(Pair(l.back(), i));
            mp.insert(Pair(i, l.back()));
            l.pop_back();
        }
    }
    
    mIter pos = mp.find(--p);
    
    for (int i = 0; i < m; ++i)
    {
        switch (cmnds[i])
        {
            case 'R': ++pos; break;
            case 'L': --pos; break;
            case 'D': D(mp, pos); break;
        }
    }
    
    for (auto x : mp)
    {
        if (x.first < x.second)
            putchar('(');
        else
            putchar(')');
    }
    cout << '\n';
    
    return 0;
}