import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.NavigableMap;
import java.util.TreeMap;

public class ProblemD {
    BufferedReader rd;

    ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int t = intarr()[1];
        int[] a = intarr();
        int n = a.length;
        NavigableMap<Integer, Integer> s = new TreeMap<>();
        for(int x: a) {
            Integer cur = s.get(x);
            if(cur == null) {
                s.put(x, 1);
            } else {
                s.put(x, cur+1);
            }
        }
        int m = s.size();
        int[] d = new int[m];
        int p = 0;
        for(Integer x: s.keySet()) {
            d[p] = x;
            p++;
        }
        int[] dr = new int[301];
        for(int i=0;i<m;i++) {
            dr[d[i]] = i;
        }
        long[][] c = new long[m][m];
        for(int i=0;i<m;i++) {
            for(int j=i;j<m;j++) {
                int z = 0;
                for(int k=0;k<n;k++) {
                    if(a[k] >= d[i] && d[k] <= d[j]) {
                        z++;
                    }
                }
                if(z == 1) {
                    c[i][j] = 1;
                } else if(z > 1) {
                    int[] u = new int[z];
                    p = 0;
                    for(int k=0;k<n;k++) {
                        if(a[k] >= d[i] && a[k] <= d[j]) {
                            u[p] = a[k];
                            p++;
                        }
                    }
                    int q = u.length-1;
                    while(q>=0 && u[q] != d[j]) {
                        q--;
                    }
                    int[] zz = Arrays.copyOf(u,q+1);
                    c[i][j] = lcs(zz);
                }
            }
        }
        long max = 0;
        long[][] h = new long[2][n];
        int b = 0;
        for(int i=0;i<Math.min(400,t);i++) {
            for(int j=0;j<n;j++) {
                long best = 0;
                for(int k=0;k<=j;k++) {
                    best = Math.max(best, h[b][k] + c[k][j]);
                }
                h[1-b][j] = best;
            }
            b=1-b;
        }
        for(int i=0;i<n;i++) {
            max = Math.max(max, h[b][i]);
        }
        if(t > 400) {
            long res = t - 400;
            long y = 0;
            for(int i=0;i<n;i++) {
                y = Math.max(y, c[i][i]);
            }
            max += res * y;
        }

        out(max);
    }

    private int lcs(int[] x) {
        int n = x.length;
        int[] m = new int[n+1];
        int l = 0;
        for(int i=0;i<n;i++) {
            int lo = 1;
            int hi = l;
            while(lo <= hi) {
                int mid = (lo+hi+1)/2;
                if(x[m[mid]] < x[i]) {
                    lo = mid+1;
                } else {
                    hi = mid-1;
                }
            }
            int nl = lo;
            m[nl] = i;
            if(nl > l) {
                l = nl;
            }
        }
        return l;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
