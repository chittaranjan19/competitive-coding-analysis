#include<iostream>
#include<functional>
#include<algorithm>
#include<cstring>
#include<string>
#include<vector>
#include<cstdio>
#include<cmath>
#include<map>
using namespace std;
#define CRL(a) memset(a,0,sizeof(a))
#define QWQ ios::sync_with_stdio(0)
typedef unsigned __int64 LL;
typedef  __int64 ll;
const int T = 100000+50;
const int mod = 1000000007;

int main()
{
#ifdef zsc
	freopen("input.txt","r",stdin);
#endif

	int n,m,i,j,k,c;
	string s,ss;
	bool flag = true;
	k = 0,c=0;
	int num[2]={0};
	while(cin >> s)
	{ 
		if(s==" ")continue;
		if(s=="=")flag = false;
		else if(s!="?"&&flag){
			ss+=s;c++;
			if(s[0]=='+')num[0]++;
			else num[1]++;
		}
		else if(!flag){
			for(i=0;s[i];++i)k = k*10+s[i]-'0';
			break;
		}
	}
	if(num[0]==0&&num[1]==0){
		cout << "Possible" << endl;
		cout << k << " = " << k << endl;
		return 0;
	}
	if(k==1&&num[0]!=num[1]||num[0]==0&&num[1]>0||num[1]==0&&num[0]>0
	||(num[0]-num[1]*k)<-k||((num[0]+1)*k-num[1]<k)
	){
		cout << "Impossible" <<endl;
		return 0;
	}
	cout << "Possible" << endl;
	if(num[1]==0){
		cout << k - num[0];
		for(i=0;ss[i];++i){
			cout << " + " << 1;
		}
	}
	else {
		//+>=-
		if(num[0]>=num[1]){
			if(num[0]-num[1]<=k){
				cout << k - (num[0]-num[1]);
				for(i=0;ss[i];++i){
					if(ss[i]=='+')
					cout << " + " << 1;
					else
					cout << " - " << 1;
				}
			}
			else {
				cout << k;
			j = num[0]-num[1];
			for(i=0;ss[i];++i){
				if(ss[i]=='-'){
					if(j>=k){
						cout << " - " << k ;
						j = j - k + 1;
					}
					else if(j>0)
					cout << " - " << j+1,j=0;
					else
					cout << " - " << 1;
				}
				else
				cout << " + " << 1;
			}
			}
		}
		else {
			cout << k;
			j = num[1]-num[0];
			for(i=0;ss[i];++i){
				if(ss[i]=='+'){
					if(j>=k){
						cout << " + " << k ;
						j = j - k + 1;
					}
					else if(j>0)
					cout << " + " << j+1,j=0;
					else
					cout << " + " << 1;
				}
				else
				cout << " - " << 1;
			}
		}
	}
	cout << " = " << k << endl; 
	return 0;
}