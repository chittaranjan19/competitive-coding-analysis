#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

set<int> color[MAX_N];
bool used[MAX_N];
int ans[MAX_N];
int a[MAX_N];

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    for (int i = 0; i < MAX_N; i++)
        used[i] = false;
    int n, m, s, f;
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
        used[a[i] - 1] = true;
    }
    for (int i = 0; i < m; i++)
    {
        cin >> s >> f;
        if (a[s - 1] != a[f - 1])
        {
            color[a[s - 1] - 1].insert(a[f - 1]);
            color[a[f - 1] - 1].insert(a[s - 1]);
        }
    }
    int ans, cnt = -1;
    for (int i = 0; i < MAX_N; i++)
        if (used[i] && (int)color[i].size() > cnt)
        {
            cnt = (int)color[i].size();
            ans = i;
        }
    cout << ans + 1;
    return 0;
}