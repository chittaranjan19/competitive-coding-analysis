import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemB {
    private static final long B = (long)1e9+9;
    BufferedReader rd;
    Map<Pair, Integer> active = new HashMap<>();
    Set<Pair> removed = new HashSet<>();

    private ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        for(int i=0;i<n;i++) {
            int[] a = intarr();
            active.put(new Pair(a), i);
        }
        NavigableMap<Integer, Pair> free = new TreeMap<>();
        for(Map.Entry<Pair, Integer> e: active.entrySet()) {
            Pair p = e.getKey();
            if(isFree(p)) {
                free.put(active.get(p), p);
            }
        }
        List<Integer> digits = new ArrayList<>();
        boolean vasya = true;
        while(!free.isEmpty()) {
            Map.Entry<Integer, Pair> chosen;
            if(vasya) {
                chosen = free.lastEntry();
            } else {
                chosen = free.firstEntry();
            }
            digits.add(chosen.getKey());
            free.remove(chosen.getKey());
            removed.add(chosen.getValue());
            Pair p = chosen.getValue();
            if(p.v[1] > 0) {
                for(int i=-1;i<=1;i++) {
                    Pair below = new Pair(p.v[0]+i, p.v[1]-1);
                    if(active.containsKey(below) && !free.containsKey(active.get(below)) && isFree(below)) {
                        free.put(active.get(below), below);
                    }
                }
            }
            for(int k=0;k<3;k++) {
                for(int j=-1;j<=1;j++) {
                    for(int i=-5;i<=5;i++) {
                        Pair level = new Pair(p.v[0]-i, p.v[1]+j);
                        Integer u = active.get(level);
                        if((u != null) && free.containsKey(u) && !isFree(level)) {
                            free.remove(u);
                        }
                    }
                }
            }
            vasya = !vasya;
        }
        long res = 0;
        for(Integer digit: digits) {
            res *= n;
            res %= B;
            res += digit;
            res %= B;
        }
        out(res);


    }

    private boolean isFree(Pair p) {
        if(contains(p)) {
            boolean le = contains(new Pair(p.v[0] - 1, p.v[1]));
            if(!le) {
                boolean le2 = contains(new Pair(p.v[0] - 2, p.v[1]));
                boolean lu = contains(new Pair(p.v[0] - 1, p.v[1] + 1));
                if(lu && !le2) {
                    return false;
                }
            }
            boolean re = contains(new Pair(p.v[0] + 1, p.v[1]));
            if(!re) {
                boolean ru = contains(new Pair(p.v[0] + 1, p.v[1] + 1));
                boolean re2 = contains(new Pair(p.v[0] + 2, p.v[1]));
                if(ru && !re2) {
                    return false;
                }
            }
            boolean u = contains(new Pair(p.v[0], p.v[1] + 1));
            return le || re || !u;
        } else {
            return false;
        }
    }

    private boolean contains(Pair p) {
        return active.containsKey(p) && !removed.contains(p);
    }

    class Pair {
        final int[] v;

        Pair(int a, int b) {
            v = new int[] { a, b };
        }

        Pair(int[] v) {
            this.v = v;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o instanceof Pair) {
                return Arrays.equals(v, ((Pair) o).v);
            }
            return false;
        }

        public int hashCode() {
            return v[0] * 1442003 + v[1];
        }

        public String toString() {
            return Arrays.toString(v);
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        int n = s.length();
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
