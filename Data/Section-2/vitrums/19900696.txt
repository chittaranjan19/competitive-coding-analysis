
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class B_Barnikl {
	private final boolean isDebug;
	
	private int a, d, b;
	private String as, ds, bs;
	
	public B_Barnikl(boolean isDebug) {
		this.isDebug = isDebug;
	}
	
	public void readInput() {
		Scanner sc = null;
		if (isDebug) {
			try {
				sc = new Scanner(new FileInputStream("src\\x0004_codeforces_round_362_div_2\\B_input1.txt"));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			sc =  new Scanner(System.in);
		}
		
		String s = sc.next();
		String pattern = "(\\d+).(\\d+).(\\d+)";
		Pattern r = Pattern.compile(pattern);
		Matcher m = r.matcher(s);
		
		if (m.find()) {
			as = m.group(1);
			ds = m.group(2);
			bs = m.group(3);
			
			a = new Integer(m.group(1));
			b = new Integer(m.group(3));
		}
		
		if (isDebug)
			System.out.format("input=%s a=%d ds=%s b=%d%n", s, a, ds, b);
	}
	
	public void solve() {
		StringBuilder res = new StringBuilder();
		if (a == 0) {
			if (d == 0) {
				System.out.println("0");
			} else {
				System.out.println("0." + d);
			}
			
			return;
		}
		
		res.append(a);
		
		if (ds.length() == 1) {
			int d = new Integer(ds);
			if (d == 0) {
				for (int i = 0; i < b; ++i) {
					res.append("0");
				}
				System.out.println(res);
				
				return;
			}
		}
		
		if (ds.length() <= b) {
			res.append(ds);
			for (int i = 0; i < b - ds.length(); ++i) {
				res.append("0");
			}
			
			System.out.println(res);
		} else {
			for (int i = 0; i < b; ++i) {
				res.append(ds.charAt(i));
			}
			
			res.append(".");
			
			for (int i = b; i < ds.length(); ++i) {
				res.append(ds.charAt(i));
			}
			
			System.out.println(res);
		}
	}
	
	
	public static void main(String[] args) {
		B_Barnikl solver = new B_Barnikl(false);
		solver.readInput();
		solver.solve();
	}
}
