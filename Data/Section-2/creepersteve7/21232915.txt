#include <bits/stdc++.h>

using namespace std;

struct bridge{
    long long l;
    int pos;
};

long long n,m,x,y,z,t[200005];
bridge b[200005],a[200005],c[200005],d[200005];
bool psa=true,psc=true;

bool comp(bridge a, bridge b){
    if(a.l<b.l) return 1;
    return 0;
}

bool compi(bridge a, bridge b){
    if(a.l>b.l) return 1;
    return 0;
}

int nxt=1;

int ExistA(int i){
    while(nxt<=m){
        if(b[nxt].l<a[i].l) nxt++;
        else if(b[nxt].l>c[a[i].pos].l) return 0;
        else{
            nxt++;
            return b[nxt-1].pos;
        }
    }
    return 0;
}

int ExistC(int i){
    while(nxt>=1){
        if(b[nxt].l>c[i].l) nxt--;
        else if(b[nxt].l<d[c[i].pos].l) return 0;
        else{
            nxt--;
            return b[nxt-1].pos;
        }
    }
    return 0;
}

int main()
{
    cin >> n >> m;
    cin >> x >> y;
    z=x;
    for(int i=1;i<n;i++){
        cin >> x;
        a[i].l=x-y;
        cin >> y;
        c[i].l=y-z;
        z=x;
        a[i].pos=i;
        c[i].pos=i;
    }
    for(int i=1;i<=m;i++) cin >> b[i].l, b[i].pos=i;
    sort(b+1,b+m+1,comp);
    sort(a+1,a+n,comp);
    for(int i=1;i<n;i++){
        t[a[i].pos]=ExistA(i);
        if(t[a[i].pos]==0){ psa=false; break; }
    }
    if(!psa){
        for(int i=1;i<n;i++) d[a[i].pos].l=a[i].l, d[a[i].pos].pos=i;
        sort(c+1,c+n,compi);
        sort(b+1,b+m+1,compi);
        nxt=m;
        for(int i=1;i<n;i++){
            t[c[i].pos]=ExistC(i);
            if(t[c[i].pos]==0){ psc=false; break; }
        }
    }
    if(psa || psc) {
        cout << "Yes" << '\n';
        for(int i=1;i<n;i++) cout << t[i] << ' ';
    }
    else cout << "No";
}
