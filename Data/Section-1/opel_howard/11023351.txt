#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pb push_back
#define mp make_pair

typedef unsigned long long ull;
typedef long long ll;

class Fenwick {
private:
	vector<int> arr;
	const int size;
public:
	Fenwick(int n) : arr(n+1), size(n) {
		for (int it = 0; it < arr.size(); ++it)
			arr[it] = 0;
	}
	void add(int v, int k) {
		for (;k <= size; k += lsone(k)) {
			arr[k] += v;
		}
	}
	int get(int k) {
		int total = 0;
		for (;k > 0; k -= lsone(k))  {
			total += arr[k];
		}
		return total;
	}
};

template <typename U> class Comparator {
public:
    bool operator() (const U lhs, const U rhs) {
        // implement
        return true;
    }
};
// end of template

int main() {
    // freopen("302A.in", "r", stdin);
    int n;
    scanf("%d", &n);
    string str;
    cin >> str;

    vector<bool> exist(26, false);
    int cExist = 0;
    que<int> startPos;
    int it = 0;
    for (string::iterator c = str.begin(); c != str.end(); ++c) {
    	if (!exist[*c-'a']) {
    		exist[*c-'a'] = true;
    		cExist++;
    		startPos.push(it);
    	}
    	++it;
    }

    if (cExist < n) {
    	printf("NO\n");
    }
    else {
    	printf("YES");
    	it = 0;
    	for (string::iterator c = str.begin(); c != str.end(); ++c) {
    		if ((startPos.size()) and (n) and (startPos.front() == it)) {
    			printf("\n");
    			startPos.pop();
    			--n;
    		}
    		++it;
    		printf("%c", *c);
    	}
    	printf("\n");
    }

    return 0;
}