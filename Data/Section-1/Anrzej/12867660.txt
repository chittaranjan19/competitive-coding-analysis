#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

ll n, m;
pair<ll, pair<ll, ll> > v[200000];

pair<ll, ll> d[200000];
vector<pair<ll, ll> > g[200000];
int pr[200000];

ll poww[10000];

int main()
{
    //freopen("trans.in", "r", stdin);
    //freopen("trans.out", "w", stdout);
    cin >> n >> m;
    poww[0] = 1;
    for (int i = 1; i < 1000; i++)
        poww[i] = 10 * poww[i - 1];
    for (int i = 0; i < m; i++)
    {
        ll a, b, l;
        cin >> a >> b >> l;
        pair<ll, pair<ll, ll> > p;
        p.fs = l, p.sc.fs = a, p.sc.sc = b;
        v[i] = p;
        g[a].push_back(mp(b, l));
        g[b].push_back(mp(a, l));
    }
    for (int i = 0; i < m; i++)
        d[i] = mp(1e18, 1e18);
    d[0] = mp(0, 0);
    pr[0] = -1;
    priority_queue<pair<ll, pair<ll, ll>> > q;
    q.push(mp(0,mp(0, 0)));
    while (!q.empty())
    {
        pair<ll, pair<ll, ll> > p = q.top();
        q.pop();
        ll t = p.fs, cnt = p.sc.fs, twn = p.sc.sc;
        for (int i = 0; i < g[twn].size(); i++)
        {
            ll l = g[twn][i].sc, to = g[twn][i].fs;
            ll new_t = poww[cnt]*l + t;
            if (new_t < d[to].fs || (new_t == d[to].fs && (cnt+1) < d[to].sc))
            {
                d[to] = mp(new_t, cnt + 1);
                q.push(mp(new_t, mp(cnt + 1, to)));
                pr[to] = twn;
            }
        }
    }
    cout << d[n - 1].fs << endl;
    int t = n - 1;
    vector<int> ans;
    while (t != -1)
    {
        ans.push_back(t);
        t = pr[t];
    }
    cout << ans.size() << endl;
    for (int i = ans.size() - 1; i >= 0; i--)
        cout << ans[i] << ' ';
    return 0;
}