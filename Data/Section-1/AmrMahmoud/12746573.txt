#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

vector<int> primes;
map<pair<int, int> , int> m;

void get_primes(LL MAX)
{
  bool visited[MAX + 10];
  setzero(visited);
  for(LL x = 2; x <= MAX; x++)
    if(!visited[x])
    {
      primes.push_back(x);
      for(LL j = x*x; j <= MAX; j += x)
        visited[j] = true;
    }
}

int main()
{
  //freopen("approximation.in", "r", stdin);
  //freopen("approximation.out", "w", stdout);
  int n, x;
  scanf("%d", &n);
  get_primes(31625);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &x);
    for(int j=0;j<primes.size() && primes[j] * primes[j] <= x;j++)
    {
      int cnt = 0;
      while(x % primes[j] == 0)
        x/=primes[j], cnt++;
      if(cnt != 0 && primes[j] > 3)
        m[mp(primes[j], cnt)]++;
    }
    if(x != 1 && x > 3) m[mp(x, 1)]++;
  }
  for(map<pair<int, int>, int>::iterator it = m.begin();it!=m.end();it++)
  {
    if(it->s != n)
    {
      printf("No");
      return 0;
    }
  }
  printf("Yes");
  return 0;
}
