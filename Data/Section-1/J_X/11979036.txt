#include <iostream>
#include <bits/stdc++.h>

using namespace std;

const int INF = 1 << 30;

struct edge
{
    int to, cap, rev;
    edge(int to, int cap, int rev) : to(to), cap(cap), rev(rev) {}
};

vector<edge> E[205];
bool used[205];
int ans[205][205], a[205], b[105];

void add_edge(int u, int v, int cap)
{
    E[u].push_back(edge(v, cap, E[v].size()));
    E[v].push_back(edge(u, 0, E[u].size() - 1));
}

int dfs(int u, int t, int f)
{
    if(u == t)
    {
        return f;
    }
    used[u] = true;
    for(int i = 0; i < E[u].size(); ++i)
    {
        edge &e = E[u][i];
        if(!used[e.to] && e.cap > 0)
        {
            int d = dfs(e.to, t, min(f, e.cap));
            if(d > 0)
            {
                e.cap -= d;
                E[e.to][e.rev].cap += d;
                ans[u >> 1][e.to >> 1] += d;
                ans[e.to >> 1][u >> 1] -= d;
//                b[u] -= d;
//                b[e.to] += d;
                return d;
            }
        }
    }
    return 0;
}

int max_flow(int s, int t)
{
    int res = 0;
    while(true)
    {
        memset(used, 0, sizeof(used));
        int f = dfs(s, t, INF);
        if(f == 0)
        {
            return res;
        }
        res += f;
    }
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    int sum1 = 0, sum2 = 0;
    for(int i = 1; i <= n; ++i)
    {
        scanf("%d", a + i);
        sum1 += a[i];
//        b[i] = a[i];
        add_edge(0, i << 1, a[i]);
    }
    for(int i = 1; i <= n; ++i)
    {
        int x;
        scanf("%d", &x);
        sum2 += x;
        add_edge(i << 1 | 1, (n << 1) + 2, x);
        add_edge(i << 1, i << 1 | 1, a[i] + x);
    }
    for(int i = 0; i < m; ++i)
    {
        int u, v;
        scanf("%d%d", &u, &v);
//        add_edge(u, v, a[u]);
//        add_edge(v, u, a[v]);
        add_edge(u << 1 | 1, v << 1, a[u]);
        add_edge(v << 1 | 1, u << 1, a[v]);
    }
    if(sum1 != sum2)
    {
        puts("NO");
    }
    else
    {
        if(max_flow(0, (n << 1) + 2) != sum1)
        {
            puts("NO");
        }
        else
        {
            for(int i = 1; i <= n; ++i)
            {
                int sum = 0;
                for(int j = 1; j <= n; ++j)
                {
                    ans[i][j] = max(ans[i][j], 0);
                    sum += ans[i][j];
                }
                ans[i][i] = a[i] - sum;
            }
//            for(int i = 0; i < E[0].size(); ++i)
//            {
//                int u = E[0][i].to;
//                ans[u][u] = a[u] - E[0][i].cap;
//            }
            puts("YES");
            for(int i = 1; i <= n; ++i)
            {
                for(int j = 1; j <= n; ++j)
                {
                    printf("%d%c", ans[i][j], (j != n ? ' ' : '\n'));
                }
            }
        }
    }
    return 0;
}
