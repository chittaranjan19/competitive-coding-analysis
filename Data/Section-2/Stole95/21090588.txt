import java.io.*;
import java.util.*;


public class C{
	static ArrayList<Integer> lista;
	static HashSet<Integer> set;
	
	public static void main(String[] args) {
		FastScannerC sc = new FastScannerC(System.in);
		
		int N = sc.nextInt();
		
		lista = new ArrayList<>();
		set = new HashSet<>();
		
		for(int i = 0 ; i < N ; i++){
			int tmp = sc.nextInt();
			lista.add(tmp);
			set.add(tmp);
		}
		
		Collections.sort(lista);
		Collections.reverse(lista);

		HashSet<Integer> result = new HashSet<>();
		
		boolean change = true;
		
		while(change){
			result = new HashSet<>();
			
			int max = 0;
			
			for(int i = 0 ; i < N ; i++){
				int curr = lista.get(i);
				
				if(max > curr && !result.contains(curr)){
					result.add(curr);
					continue;
				}
				
				int num = curr/2;
				
				if(result.contains(num)){
//					if(!result.contains(curr)){
//						result.add(curr);
//						max = Math.max(max, curr);	
//					}
//					else{
//						while(result.contains(num)){
//							num/=2;
//						}
//						
//					}
					result.add(curr);
					max = Math.max(max, curr);	
					continue;
				}
				
				if(canRepresent(num)){
					result.add(num);
					max = Math.max(max, num);
				}
				else{
					result.add(curr);
					max = Math.max(max, curr);
				}
			}
			
			if(result.size() != N){
				result = new HashSet<>(lista);
				break;
			}
			
			ArrayList<Integer> list2 = new ArrayList<>(result);
			Collections.sort(list2);
			Collections.reverse(list2);
			
			change = false;
			
			
			
			for(int i = 0 ; i < N ; i++){
				if(lista.get(i) != list2.get(i)){
					change = true;
					break;
				}
			}
			
			if(change){
				lista = new ArrayList<>(list2);
				set = new HashSet<>(list2);
			}
			
		}

		StringBuilder sb = new StringBuilder();
		for(Integer it : result){
			sb.append(it).append(" ");
		}
		
		System.out.println(sb.toString().substring(0, sb.length()));
	}

	private static boolean canRepresent(int num) {
		if(num == 0) return false;
		if(!set.contains(num)) return true;
		else return canRepresent(num/2);

	}
	
	
}

class FastScannerC{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScannerC(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}