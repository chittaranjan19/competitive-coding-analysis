#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

#define ll long long
#define ld long double

using namespace std;

const ll inf = (ll)2 * 1e9;
const ll MOD = (ll)1e9 + 7;
const ll P = 239;
const ll MAX_N = 500000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    double a[n][n];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> a[i][j];
    double dp[1 << n][n];
    for (int mask = 0; mask < (1 << n); mask++)
        for (int i = 0; i < n; i++)
            dp[mask][i] = 0;
    for (int mask = 0; mask < (1 << n); mask++)
        for (int i = 0; i < n; i++)
            if ((mask >> i) & 1)
            {
                int cnt = __builtin_popcount(mask);
                if (cnt == 1)
                {
                    dp[mask][i] = 1;
                    continue;
                }
                double cnt1 = 0, cnt2 = 0;
                for (int j = 0; j < n; j++)
                    if (i != j && ((mask >> j) & 1))
                        cnt1 = max(cnt1, dp[mask - (1 << j)][i] * a[i][j]);
                for (int j = 0; j < n; j++)
                    if (i != j && ((mask >> j) & 1))
                        cnt2 += dp[mask - (1 << i)][j] * a[i][j];
                dp[mask][i] = max(cnt1, cnt2);
            }
    cout.precision(20);
    cout << dp[(1 << n) - 1][0];
    return 0;
}
