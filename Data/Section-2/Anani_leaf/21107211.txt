#include<bits/stdc++.h>
#define Max(a,b) (a>b?a:b)
#define Min(a,b) (a>b?b:a)
#define INF 0x3f3f3f3f
using namespace std;
int const Max_N = 1e5+50; 
typedef __int64 ll;
struct Node
{
	ll num;
	int i,j;
	bool operator < (Node const &a)const{return i>a.i;}
}arr[Max_N] = {0};
int f[Max_N] = {0};
int find(int x){return x == f[x]?x:x=find(f[x]);}
int N;
void init(){for(int i = 1; i < N+1; ++i)f[i] = i;}
ll sum[Max_N];
int main()
{
	
	scanf("%d",&N);
	for (int i = 1; i < N+1 ; ++i) scanf("%I64d",&arr[i].num);
	for (int i = 1; i < N+1 ; ++i)
	{
		int num;
		scanf("%d",&num);
		arr[i].j =i;
		arr[num].i = i;
	}
	init();
	sort(arr+1,arr+N+1);
	memset(sum,-1,sizeof(sum));
	ll ans[Max_N] = {0};
	ll mx = 0;
	for (int i = 1; i < N; ++i)
	{
		int j = arr[i].j;
		ll num = arr[i].num; 
		if(sum[find(j+1)]!=-1&&sum[find(j-1)]!=-1)
		{
			sum[f[j+1]] += num + sum[f[j-1]];
			f[j] = f[j-1] = f[j+1];
		}
		else if (sum[find(j+1)]!=-1)
		{
			sum[f[j+1]] +=num;
			f[j]  = f[j+1];
		}
		else if(sum[find(j-1)]!=-1)
		{
			sum[f[j-1]] += num;
			f[j] = f[j-1];
		} 
		else
		{
			sum[f[j]] = num;
		}
		mx = Max(mx,sum[f[j]]);
		ans[i] = mx;
	} 
	for(int i = N-1; i > -1; --i) printf("%I64d\n",ans[i]);
	return 0;
}
//std::ios::sync_with_stdio(false);

