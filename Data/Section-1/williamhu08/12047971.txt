#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10, MAXA = 1 << 22, INF = 1e9;

int N;
string B[MAXN];

int dist (string &s, string &t) {
	//given that it can be so
	int pref = 0;
	for (int i = 0; ; i++) {
		if (s[i] != t[i] || i >= s.size() || i >= t.size()) {
			pref = i;
			break;
		}
	}
	return (s.size() - pref) + (t.size() - pref);
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> N;
	//just do divisions first
	for (int i = 0, x; i < N; i++) {
		cin >> x;
		bool alr = false;
		for (int j = 19; j >= 0; j--) {
			if (x & (1 << j)) {
				alr = true;
				B[i] += "1";
			} else if (alr) {
				B[i] += "0";
			}
		}
	}
	string pref;
	for (int i = 0; i < B[0].size(); i++) {
		bool bad = false;
		for (int j = 1; j < N; j++) {
			if (B[j].size() <= i) {
				bad = true;
				break;
			}
			if (B[j][i] != B[0][i]) {
				bad = true;
				break;
			}
		}
		if (bad) {
			break;
		}
		pref += B[0][i];
	}
	//ok basically this is the one
	int ans = 1 << 29;
	while (pref.size() < 25) {
		int d = 0;
		for (int i = 0; i < N; i++) {
			d += dist(B[i], pref);
			// cerr << "dist(" << B[i] << ", " << pref << ") = " << dist(B[i], pref) << endl;
		}
		pref += "0";
		ans = min(ans, d);
	}
	cout << ans << endl;
}