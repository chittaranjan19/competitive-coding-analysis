#include <iostream>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <cstring>
#include <string>
#include <cmath>
#include <set>
#include <map>
#include <vector>
#include <climits>
using namespace std;
#define pb push_back
#define VINT vector<ll>
#define PII pair<ll,ll>
#define MP(x,y) make_pair((x),(y))
#define ull unsigned long long
#define ll long long
void showVector(vector<ll > s){
        cout<<"----------"<<endl;for(auto x:s)cout<<x<<" ";cout<<endl<<"----------"<<endl;
}
void println(ll n,ll s1=0,ll s2=0,ll s3=0){
        if(n==1) cout<<s1;
        else if(n==2)cout<<s1<<" "<<s2;
        else cout<<s1<<" "<<s2<<" "<<s3;cout<<endl;
}
/****************************************/

long long kmpNext[1111111];
void preKmp(VINT& x){
        long long m=x.size();
        long long i,j;
        i=0;
        j=kmpNext[0]=-1;
        while(i<m){
                while(j>-1 && x[i]!=x[j]) j=kmpNext[j];
                i++;j++;
                if(x[i] == x[j]) kmpNext[i]=kmpNext[j];
                else kmpNext[i]=j;
        }
}
long long kmp(VINT& y,VINT& x){
        long long n=y.size();
        long long m=x.size();
        long long i,j,tot=0;
        i=j=0;
        while(j<n){
                while(i>-1 && x[i] != y[j]){
                        i=kmpNext[i];
                }
                i++;j++;
                if(i>=m){
                        tot++;
                        i=kmpNext[i];
                }
        }
        return tot;
}

/********************************************************/
const ll MAX_V=11;//SET THE MAX NUM OF VERTEX
ll head[MAX_V];
struct EDGE{
        ll u,v,w;
        EDGE(ll tu=0,ll tv=0,ll tw=0){u=tu,v=tv,w=tw;}
};
struct Triple{ll f,s,t;};
ll gcd(ll a,ll b){return b==0?a:gcd(b,a%b);}
//////////////////////////////////////
ll f[1111111];
VINT s1,s2;
int main(){
        #ifndef ONLINE_JUDGE
                freopen("in.txt","r",stdin);
        #endif // ONLINE_JUDGE
        ll n,w;
        cin>>n>>w;

        for(ll i=1;i<=n;i++){
                cin>>f[i];
                if(i>=2)
                        s1.pb(f[i]-f[i-1]);
        }
        for(ll i=1;i<=w;i++){
                cin>>f[i];
                if(i>=2)
                        s2.pb(f[i]-f[i-1]);
        }
        preKmp(s2);
        cout<<kmp(s1,s2)<<endl;
        return 0;
}
