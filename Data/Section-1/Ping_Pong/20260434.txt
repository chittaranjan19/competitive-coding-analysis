#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e9;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;

int main()
{
    //freopen("point.in", "r", stdin);
    //freopen("point.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    ll n;
    cin >> n;
    if (n == 1)
    {
        cout << 1;
        return 0;
    }
    ll x = -1, y = -1;
    ll a[n][n];
    for (ll i = 0; i < n; i++)
        for (ll j = 0; j < n; j++)
        {
            cin >> a[i][j];
            if (a[i][j] == 0)
            {
                x = i;
                y = j;
            }
        }
    ll s = 0, pos;
    if (x == 0)
        pos = 1;
    else
        pos = 0;
    for (ll j = 0; j < n; j++)
        s += a[pos][j];
    ll s1 = 0;
    for (ll j = 0; j < n; j++)
        s1 += a[x][j];
    a[x][y] = s - s1;
    if (a[x][y] <= 0)
    {
        cout << -1;
        return 0;
    }
    set<ll> r;
    for (ll i = 0; i < n; i++)
    {
        ll u = 0;
        for (ll j = 0; j < n; j++)
            u += a[i][j];
        r.insert(u);
    }
    for (ll i = 0; i < n; i++)
    {
        ll u = 0;
        for (ll j = 0; j < n; j++)
            u += a[j][i];
        r.insert(u);
    }
    ll v = 0;
    for (ll i = 0; i < n; i++)
        v += a[i][i];
    r.insert(v);
    v = 0;
    for (ll i = 0; i < n; i++)
        v += a[i][n - i - 1];
    r.insert(v);
    if (r.size() > 1)
        cout << -1;
    else
        cout << a[x][y];
    return 0;
}