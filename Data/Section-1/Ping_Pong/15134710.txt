#include <iostream>
#include <bits/stdc++.h>

using namespace std;
const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 400;

int n;
int graph[MAX_N][MAX_N];
bool used[MAX_N];
int dist[MAX_N];
queue<int> q;

void bfs(int t)
{
    while (!q.empty())
    {
        int x = q.front();
        q.pop();
        for (int i = 0; i < n; i++)
            if (graph[x][i] == t && !used[i])
            {
                used[i] = true;
                dist[i] = dist[x] + 1;
                q.push(i);
            }
    }
}

int main()
{
    int m, s, f;
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            graph[i][j] = 2;
    for (int i = 0; i < m; i++)
    {
        scanf("%d %d", &s, &f);
        graph[s - 1][f - 1] = 1;
        graph[f - 1][s - 1] = 1;
    }
    int ans1, ans2;
    for (int i = 0; i < n; i++)
        used[i] = false;
    for (int i = 0; i < n; i++)
        dist[i] = inf;
    dist[0] = 0;
    used[0] = true;
    q.push(0);
    bfs(1);
    ans1 = dist[n - 1];
    for (int i = 0; i < n; i++)
        used[i] = false;
    for (int i = 0; i < n; i++)
        dist[i] = inf;
    dist[0] = 0;
    used[0] = true;
    q.push(0);
    bfs(2);
    ans2 = dist[n - 1];
    printf("%d", (max(ans1, ans2) != inf ? max(ans1, ans2) : -1));
    return 0;
}
