#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>
#include <unordered_map>
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
#define ll long long
#define fs first
#define sc second
#define mp make_pair

int n, d[3333][3333], m;
bool u[3333];
vector<int> g[3333];

void dfs(int s, int v, int h = 0)
{
    if (!u[v])
    {
        d[s][v] = h;
        u[v] = 1;
        for (int i = 0; i < g[v].size(); i++)
            dfs(s, g[v][i], h + 1);
    }
}

int main()
{
    ios::sync_with_stdio(true);
    //freopen("sumdist.in", "r", stdin);
    //freopen("sumdist.out", "w", stdout);
    cin >> n >> m;
    int s1, t1, l1, s2, t2, l2;
    for (int i = 0; i < m; i++)
    {
        int u, v;
        cin >> u >> v;
        u--; v--;
        g[v].push_back(u);
        g[u].push_back(v);
    }
    cin >> s1 >> t1 >> l1 >> s2 >> t2 >> l2;
    s1--; t1--; s2--; t2--;
    for (int i = 0; i < n; i++)
    {
        fill(u, u + n, false);
        dfs(i, i);
    }
    int ans = 0;
    if (d[s1][t1] > l1 || d[s2][t2] > l2){ cout << -1; return 0; }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            int ll1, ll2, cl;
            ll1 = min(d[s1][i] + d[t1][j], d[s1][j] + d[t1][i]);
            ll2 = min(d[s2][i] + d[t2][j], d[s2][j] + d[t2][i]);
            cl = d[i][j];
            if (ll1 + cl <= l1 && ll2 + cl <= l2)
                ans = max(ans, m - cl - ll2 - ll1);
        }
    }
    ans = max(ans, m - d[s1][t1] - d[s2][t2]);
    cout << ans;
    return 0;
}
