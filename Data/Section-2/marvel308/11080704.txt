#include<stdio.h>
#include<queue>
#include<vector>
using namespace std;
#define pp pair<int,int>
vector<pp> G[100005];
vector<int> time[100005];
#define INF 1000000007
class priortise
{
public:
    bool operator()(const pp &x,const pp &y)
    {
        return x.second>y.second;
    }
};
int getval(int u,int x)
{
    int ans=u,si=time[u].size();
    int low=0,high=si-1,idx=-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(time[u][mid]<x)
        {
            low=mid+1;
        }
        else if(time[u][mid]==x)
        {
            idx=mid;
            break;
        }
        else
        {
            high=mid-1;
        }
    }
    if(idx==-1)
        return 0;
    low=idx,high=si-1;
    ans=idx;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(time[u][mid]-x==mid-idx)
        {
            ans=mid;
            low=mid+1;
        }
        else
        {
            high=mid-1;
        }
    }
    return ans-idx+1;
}
int main()
{
    int n,m,i;
    scanf("%d%d",&n,&m);
    for(i=0;i<m;i++)
    {
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        G[u].push_back(pp(v,w));
        G[v].push_back(pp(u,w));
    }
    for(i=1;i<=n;i++)
    {
        int k;
        scanf("%d",&k);
        while(k--)
        {
            int t;
            scanf("%d",&t);
            time[i].push_back(t);
        }
    }
    int dist[100005]={0};
    for(i=1;i<=n;i++)
        dist[i]=INF;
    dist[1]=getval(1,0);
    priority_queue<pp,vector<pp>,priortise> q;
    q.push(pp(1,dist[1]));
    while(!q.empty())
    {
        int u=q.top().first;
        q.pop();
        int si=G[u].size();
        //printf("\n\nu=%d\n",u);
        for(i=0;i<si;i++)
        {
            int v=G[u][i].first,w=G[u][i].second;
            int ga=getval(v,dist[u]+w);
            if(dist[u]+w+ga<dist[v])
            {
                //printf("v=%d du=%d ga=%d\n",v,dist[u]+w,ga);
                if(v==n)
                    ga=0;
                dist[v]=dist[u]+w+ga;
                q.push(pp(v,dist[v]));
            }
        }
    }
    if(dist[n]!=INF)
        printf("%d\n",dist[n]);
    else
        printf("-1\n");
    return 0;
}
