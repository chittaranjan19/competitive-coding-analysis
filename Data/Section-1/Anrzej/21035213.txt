#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

vector<pair<int, int> > g[5555];
ll T;
int mx_visited = 0;
int n, m;

int prv[5555][5555];
int tmt[5555][5555];
int mn[5555], mx[5555];
int main()
{
	cin >> n >> m >> T;
	for(int i = 0; i < m; i++){
		int u, v, tt;
		cin >> u >> v >> tt;
		g[u].push_back(mp(v, tt));
	}
//dfs(1);
	for(int i = 0; i <= n; i++){
		for(int j = 0; j <= n; j++){
			prv[i][j] = -1;
			tmt[i][j] = 2e9;
		}
	}
	tmt[1][1] = 0;
	prv[1][1] = 0;
	mn[1] = 1;
	mx[1] = 1;
	queue<int> q;
	q.push(1);
	set<int> prcsd;
	prcsd.insert(1);
	while(!q.empty()){
		int cur = q.front();
		q.pop();
		prcsd.erase(cur);
		for(int i = 0; i < g[cur].size(); i++){
			pair<int, int> tmp = g[cur][i];
			int to = tmp.fs, dt = tmp.sc;
			for(int vstd = mn[cur]; vstd <= mx[cur]; vstd++){
				if(prv[cur][vstd] == -1) continue;
				if(tmt[cur][vstd] + dt > T) continue;
				prv[to][vstd+1] = cur;
				tmt[to][vstd+1] = dt+tmt[cur][vstd];
				mn[to] = min(mn[to], vstd+1);
				mx[to] = max(mx[to], vstd+1);
				if(!prcsd.count(to))
					prcsd.insert(to), q.push(to);
			}
			mn[cur] = mx[cur];
		}
	}
	for(int i = 0; i <= n; i++){
		if(prv[n][i] != -1)
			mx_visited = i;
	}
	vector<int> ans;
	int cur = n, crv = mx_visited;
	while(cur != 0){
		ans.push_back(cur);
		cur = prv[cur][crv];
		crv -= 1;
	}
	cout << mx_visited << endl;
	for(int i = 0; i < mx_visited; i++)
		cout << ans[mx_visited-i-1] << ' ';
	return 0;
}