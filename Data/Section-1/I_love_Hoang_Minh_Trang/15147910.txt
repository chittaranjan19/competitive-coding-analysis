#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
long long f[5002][5002];
long long BASE = 1e9 + 7;
string s;
int n;
void add(long long &a, long long b)
{
    a += b;
    if (a >= INF) a -= INF;
}
long long pw[MAXN], sa[MAXN];
long long get(int l, int r)
{
    return sa[r] - sa[l - 1] * pw[r - l + 1];
}

bool ok(int l, int r, int u, int v)
{
    if (u > n || v > n) return 0;
    if (r - l != v - u) return 0;
    int d = 1, c = r - l + 1, g, fin = 0;
    while (d <= c){
        int g = (d + c) / 2;
        if (get(l, l + g - 1) == get(u, u + g - 1)){
            fin = g;
            d = g + 1;
        }
        else c = g - 1;
    }
    if (fin == r - l + 1) return 0;
    return s[l + fin] < s[u + fin];
}



int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("611D.inp", "r", stdin);
    freopen("611D.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n;
    cin >> s;
    s ='=' + s;
    pw[0] = 1;
    FORE(i, 1, 5000) pw[i] = pw[i - 1] * BASE;
    FORE(i, 1, n) sa[i] = sa[i - 1] * BASE + s[i];
    long long ans = 0;
    f[1][1] = 1;
    FOR(i, 1, n) FOR(j, i, n) if (f[i][j] && s[i] != '0'){
        add(f[i][j + 1], f[i][j]);
        int len = j - i + 1;
        if (ok(i, j, j + 1, j + len)) add(f[j + 1][j + len], f[i][j]);
        else if (j + len + 1 <= n) add(f[j + 1][j + len + 1], f[i][j]);
    }
    FORE(i, 1, n) add(ans, f[i][n]);
    cout << ans;
    return 0;
}

