#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 1e5 + 10;
const int mod = 1e9 + 7;

int main(){
    int n, m;
    pair<int, int> s[MAX_N];
    pair<int, int> p[MAX_N];
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++){
        scanf("%d", &p[i].ft);
        p[i].sc = i + 1;

    }
    for (int i = 0; i < m; i++){
        scanf("%d", &s[i].ft);
        s[i].sc = i + 1;
    }
    sort(p, p + n);
    sort(s, s + m);
    int use[MAX_N] = {0, };
    int ans_kom[MAX_N] = {0, };
    int ans_roz[MAX_N] = {0, };
    int sum = 0, kol = 0;
    for (int i = 0; i < m; i++){
        int tim = 0;
        while(s[i].ft != 1){
            int left = 0, right = n - 1;
            while(right - left > 1){
                int middle = (left + right) / 2;
                if (p[middle].ft < s[i].ft) left = middle;
                else if (p[middle].ft == s[i].ft && use[middle]) left = middle; else right = middle;
            }
            if (p[0].ft == s[i].ft && !use[0]) right = 0;
            if (p[right].ft == s[i].ft){
                use[right] = 1;
                ans_kom[p[right].sc] = s[i].sc;
                ans_roz[s[i].sc] = tim;
                sum += tim;
                kol++;
                break;
            }
            tim++;
            s[i].ft = (s[i].ft + 1) / 2;
        }
        int left = 0, right = n - 1;
            while(right - left > 1){
                int middle = (left + right) / 2;
                if (p[middle].ft < s[i].ft) left = middle;
                else if (p[middle].ft == s[i].ft && use[middle]) left = middle; else right = middle;
            }
            if (p[0].ft == s[i].ft && !use[0]) right = 0;
            if (p[right].ft == s[i].ft){
                use[right] = 1;
                ans_kom[p[right].sc] = s[i].sc;
                ans_roz[s[i].sc] = tim;
                sum += tim;
                kol++;
                break;
            }
    }
    printf("%d %d\n", kol, sum);
    for (int i = 1; i <= m; i++)
        printf("%d ", ans_roz[i]);
    printf("\n");
    for (int i = 1; i <= n; i++)
        printf("%d ", ans_kom[i]);
    return 0;
}