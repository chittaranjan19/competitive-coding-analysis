
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cstring>
using namespace std;

#define REP(i,n) for(int (i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define fi first
#define se second
map <pair<int, int>, int> d;
vector < pair <int, int> > b;
vector < pair <int, int> > ab;
int cs[100005], n , m, s;
int as[100005];
int cnt[100005];
int fin[100005];
int assign(int k){
        int j = n-1;
        priority_queue <pair <int, int> > p;
        int cost = 0;
//        cout << "--" << endl;
        for(int i = m-1; i>= 0; i--){
//                cout << "--" << endl;
                while (j >= 0 && ab[j].fi >= b[i].fi){
                        p.push(make_pair(-1*cs[ab[j].se], ab[j].se));
                        j--;
                
                }
//                cout << "---" << endl;
                if (p.empty()) return -1;        
                pair <int, int> x = p.top();
                int cst = -(x.fi), id = x.se;
                //              cout << cst << " " << id << endl;
                cnt[id]++;
                p.pop();
                if (cnt[id] < k) p.push(make_pair(0, id));
                        
                as[b[i].se] = id;
                cost += cst;
        }
        
        return cost;
                
                                                  
        
}
                
                
                
int solve(){
        int mi = 1, mx = 100007;
        while (mi < mx){
                int mid = (mi+mx)/2;
//                cout << mid << "-------" << endl;
                int cost = assign(mid);
//                cout << cost << endl;
                if (cost != -1 && cost <= s ){
                        mx = mid;
                        for(int i = 1; i <= m; i++) fin[i] = as[i];
                }
                else mi = mid+1;
                memset(cnt, 0 ,sizeof(int)*100004);
//                cout << "--" << endl;
        }

        return mx;
}

        
int main(){
        ios::sync_with_stdio(false);
        cin >> n >> m >> s;
        for(int i = 1; i <= m; i++){
                int x;
                cin >> x;
                b.push_back(make_pair(x, i));
        }
        for(int i = 1; i <= n; i++){
                int x;
                cin >> x;
                ab.push_back(make_pair(x, i));
        }
        REP(i,n) cin >> cs[i+1];
        sort(ab.begin(), ab.end());
        sort(b.begin(), b.end());

        int res = solve();
        if (res >= 100001){
                cout << "NO" <<endl;
        }
        else {
                cout << "YES" << endl;
                for(int i = 1; i <= m; i++) cout << fin[i] << " ";
                cout << endl;
        }

        return 0;
}
                     
                
        
        
        
