#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
    int n, m;
    cin >> n >> m;
    char a[n][m];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            cin >> a[i][j];
    int dist_v[n], dist_h[m];
    for (int i = 0; i < n; i++)
        dist_v[i] = inf;
    for (int j = 0; j < m; j++)
        dist_h[j] = inf;
    dist_v[n - 1] = 0;
    queue<pair<int, int> > q;
    q.push(make_pair(n - 1, 0));
    while (!q.empty())
    {
        int x = q.front().first, t = q.front().second;
        q.pop();
        if (t == 0)
        {
            for (int j = 0; j < m; j++)
                if (a[x][j] == '#' && dist_h[j] == inf)
                {
                    dist_h[j] = dist_v[x] + 1;
                    q.push(make_pair(j, 1));
                }
        }
        else
        {
            for (int i = 0; i < n; i++)
                if (a[i][x] == '#' && dist_v[i] == inf)
                {
                    dist_v[i] = dist_h[x] + 1;
                    q.push(make_pair(i, 0));
                }
        }
    }
    cout << (dist_v[0] != inf ? dist_v[0] : -1);
	return 0;
}
