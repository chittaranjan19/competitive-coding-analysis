//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define debug(...) fprintf(stderr, __VA_ARGS__)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10, SQRT = 350;

template<class T>
void setmax (T &a, T b) {
	if (a < b) {
		a = b;
	}
}

struct line {
	ll m, b;
	int id;
	void read (int i) {
		cin >> b >> m;
		id = i;
	}
	ll val (ll x) const {
		return m * x + b;
	}
	bool operator < (const line &a) const {
		if (m != a.m) {
			return m < a.m;
		}
		return b < a.b;
	}
};

struct query {
	int l, r;
	ll t;
	int id;
	void read (int i) {
		cin >> l >> r >> t;
		l--;
		r--;
		id = i;
	}
	bool operator < (const query &a) const {
		return t < a.t;
	}
};

int N, Q;
line lines[MAXN];
vector<line> blocks[SQRT];
int bptr[SQRT];	//block pointer
query queries[MAXN];
int ans[MAXN];

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces91E.in", "r", stdin);
#endif
	cin >> N >> Q;
	for (int i = 0; i < N; i++) {
		lines[i].read(i);
		blocks[i / SQRT].push_back(lines[i]);
	}
	for (int i = 0; i < SQRT; i++) {
		sort(blocks[i].begin(), blocks[i].end());
		vector<line> v;
		for (int j = 0, siz = blocks[i].size(); j < siz; j++) {
			if (j && blocks[i][j].m == blocks[i][j - 1].m) {
				v.back() = blocks[i][j];
			} else {
				v.push_back(blocks[i][j]);
			}
		}
		blocks[i] = v;
	}
	for (int i = 0; i < Q; i++) {
		queries[i].read(i);
	}
	sort(queries, queries + Q);
	for (int i = 0; i < Q; i++) {
		//k now let's go ahead
		int a = queries[i].l, b = queries[i].r;
		ll t = queries[i].t;
		pair<ll, int> res(-1, -1);
		if (b / SQRT - a / SQRT <= 1) {
			//then brute force
			for (int j = a; j <= b; j++) {
				setmax(res, make_pair(lines[j].val(t), j));
			}
		} else {
			//do the sqrt thingy
			int ptr = a;
			for (; ptr % SQRT; ptr++) {
				setmax(res, make_pair(lines[ptr].val(t), ptr));
			}
			assert(!(ptr % SQRT));
			for (; ptr / SQRT < b / SQRT; ptr += SQRT) {
				//ok let's now advance the pointers
				int c = ptr / SQRT;
				while (bptr[c] + 1 < blocks[c].size()) {
					int b = bptr[c];
					setmax(res, make_pair(lines[b].val(t), b));
					if (blocks[c][b + 1].val(t) >= blocks[c][b].val(t)) {
						bptr[c]++;
					} else {
						break;
					}
				}
			}
			for (; ptr <= b; ptr++) {
				setmax(res, make_pair(lines[ptr].val(t), ptr));
			}
		}
		ans[queries[i].id] = res.second;
	}
	for (int i = 0; i < Q; i++) {
		cout << ans[i] + 1 << '\n';
	}
}