//package x0001_aim_tech_round_div_1;

import static java.lang.Math.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class B_GcdOfArray {
	private final boolean isDebug;
	
	private int n, a, b;
	private int[] arr;
	
	public B_GcdOfArray(boolean isDebug) {
		this.isDebug = isDebug;
	}
	
	public void readInput() {
		Scanner sc = null;
		if (isDebug) {
			try {
				sc = new Scanner(new FileInputStream("src\\x0001_aim_tech_round_div_1\\B_input5.txt"));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			sc =  new Scanner(System.in);
		}
		
		n = sc.nextInt();
		a = sc.nextInt();
		b = sc.nextInt();
		if (isDebug)
			System.out.format("n=%d a=%d b=%d%n", n, a, b);
		
		arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = sc.nextInt();
			if (isDebug) {
				System.out.format("%d ", arr[i]);
			}
		}
		
		if (isDebug) {
			System.out.println();
		}
	}
	
	public void solve() {
		Set<Integer> ps = new HashSet<>();
		for (int i = -1; i <= 1; ++i) {
			ps.addAll(factorize(arr[0] + i));
			ps.addAll(factorize(arr[n - 1] + i));
		}
		
		long INF = Long.MAX_VALUE / 2;
		if (n == 1) {
			System.out.println(0);
			return;
		}
		
		int[] arr1 = arr;
//		int[] arr2 = new int[n];
//		for (int i = 0; i < n; i++) {
//			arr2[n - i - 1] = arr1[i];
//		}
		
		long res = INF;
		// o: cutting not started; 1: started; 2: already finished
		long dp[][] = new long[n][3];
//		for (int j = 0; j <= 1; ++j) {
//			if (j == 0) {
//				arr = arr1;
//			} else {
//				arr = arr2;
//			}
		for (int p : ps) {
			if (arr[0] % p != 0) {
				if ((arr[0] - 1) % p == 0 || (arr[0] + 1) % p == 0) {
					dp[0][0] = b;
				} else {
					dp[0][0] = INF;
				}
				dp[0][1] = a;
				dp[0][2] = a;
			} else {
				dp[0][0] = 0;
				dp[0][1] = 0;
				dp[0][2] = 0;
			}
			
			for (int i = 1; i < n; ++i) {
				if (arr[i] % p != 0) {
					if ((arr[i] - 1) % p == 0 || (arr[i] + 1) % p == 0) {
						dp[i][0] = dp[i - 1][0] + b;
//						dp[i][2] = min(dp[i - 1][1] + a, dp[i - 1][2] + b);
						dp[i][2] = min(min(dp[i - 1][1] + a, dp[i - 1][2] + b),
								dp[i - 1][0] + a);
					} else {
						dp[i][0] = INF;
//						dp[i][2] = dp[i - 1][1] + a;
						dp[i][2] = min(dp[i - 1][1] + a, dp[i - 1][0] + a);
					}
				} else {
					dp[i][0] = dp[i - 1][0];
					dp[i][2] = min(dp[i - 1][1], dp[i - 1][2]);
				}
				
				dp[i][1] = min(dp[i - 1][0], dp[i - 1][1]) + a;
			}
			long best = min(min(dp[n - 1][0], dp[n - 1][2]), dp[n - 1][1]);
			res = min(res, best);
		}
//		}
		System.out.println(res);
	}
	
	private Set<Integer> factorize(int x) {
		Set<Integer> s = new HashSet<>();
		for (int i = 2; i * i <= x; ++i) {
			if (x % i == 0) {
				s.add(i);
				do {
					x /= i;
				} while (x % i == 0);
			}
		}
		
		if (x > 1) {
			s.add(x);
		}
		
		return s;
	}
	
	public static void main(String[] args) {
		B_GcdOfArray solver = new B_GcdOfArray(false);
		solver.readInput();
		solver.solve();
	}
}
