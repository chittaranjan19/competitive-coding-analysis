#include <iostream>
#include <iomanip>
#include <cstring>
#include <vector>

using namespace std;
typedef double ld;
typedef pair<int, int> pii;
const int N = 100005;

vector<pii> adj[N];
int e1[N], e2[N], e3[N];

int sz[N], par[N];
bool path[N];
void dfs(int u) {
    sz[u] = 1;
    path[u] = true;
    for (pii e : adj[u]) {
        int v = e.first; ld len = e.second;
        if (path[v]) continue;
        par[v] = u;
        dfs(v);
        sz[u] += sz[v];
    }
    path[u] = false;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int n; cin >> n;
    for (int i = 0; i < n-1; i++) {
        int a, b, len; cin >> a >> b >> len; a--; b--;
        e1[i] = a; e2[i] = b; e3[i] = len;
        adj[a].push_back(pii(b, len));
        adj[b].push_back(pii(a, len));
    }

    memset(par, -1, sizeof par);
    memset(path, 0, sizeof path);
    dfs(0);

    ld curr = 0;
    for (int i = 0; i < n-1; i++) {
        int a = e1[i], b = e2[i]; ld len = e3[i];
        if (par[b] != a) swap(a, b); // make sure a -> b
        curr += len * sz[b] * (n - sz[b]);
    }

    cout << setprecision(16) << fixed;
    int q; cin >> q;
    while (q--) {
        int r, w; cin >> r >> w; r--;
        int a = e1[r], b = e2[r]; ld len = e3[r], len2 = w;
        if (par[b] != a) swap(a, b); // make sure a -> b
        curr -= len * sz[b] * (n - sz[b]);
        curr += len2 * sz[b] * (n - sz[b]);
        e3[r] = w;

        cout << curr/n/(n-1)*2.0 * 3.0 << endl;
    }
}
