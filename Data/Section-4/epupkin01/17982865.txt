#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); a - массв, n - кол-во эл-тов
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> our_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<const int, int> mPair;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef list<int> List;
typedef List::iterator lIter;

const int S = 1000, inf = (int) 2e9;
int n, w[S], h[S], W;

inline int solve(int &H)
{
    W = 0;
    
    for (int i = 0; i < n; ++i)
    {
        if (w[i] > H && h[i] > H)
            return inf;
        
        if (h[i] > H)
            W += h[i];
        else if (w[i] > H)
            W += w[i];
        else
            W += w[i] < h[i] ? w[i] : h[i];
    }
    
    return H * W;
}

int main()
{
    cin >> n;
    for (int i = 0; i < n; ++i)
        scanf("%d%d", w + i, h + i);
    
    int ans = inf;
    
    for (int i = 0, temp; i < n; ++i)
    {
        ans = ans > (temp = solve(h[i])) ? temp : ans;
        ans = ans > (temp = solve(w[i])) ? temp : ans;
    }
    
    cout << ans << '\n';
    return 0;
}