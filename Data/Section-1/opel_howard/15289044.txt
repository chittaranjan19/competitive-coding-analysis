#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

// end of template
#define INF 2000000002
int main() {
    // freopen("545C.in", "r", stdin);
    
    int n;
    scanf("%d", &n);
    vii arr(n+2, ii(0, 0));
    arr[0].a = -INF;
    loop1(it, n) {
    	scanf("%d %d", &arr[it].a, &arr[it].b);
    }
    arr[n+1].a = INF;
    vi dp(n+2, 0);
    loop1(idx, n) {
    	int x_pos = arr[idx].a, h = arr[idx].b;
    	int prev_idx = idx-1, next_idx = idx+1;

    	dp[idx] = max(dp[idx], dp[idx-1]);
    	// goes to right
    	if (x_pos+h < arr[next_idx].a)
    		dp[next_idx] = max(dp[next_idx], dp[idx]+1);
    	// goes to left
    	if (arr[prev_idx].a < x_pos-h)
    		dp[idx] = max(dp[idx], dp[idx-1]+1);
    }
    // loop1(idx, n) {
    // 	printf("%d ", dp[idx]);
    // }
    // puts(" ");
    printf("%d\n", dp[n+1]);

    return 0;
}