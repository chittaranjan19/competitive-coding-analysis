#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int head=1,tail=0,q[MAXN],vis[MAXN],deg[MAXN],h[MAXN],f[MAXN];
vector<int>adj[MAXN];
void dfs(int nd){
	vis[nd]=1;q[++tail]=nd;
	for(int i=0;i<adj[nd].size();i++)
		if(!vis[adj[nd][i]])
			dfs(adj[nd][i]);
}
set<PII>s;
set<int>road[MAXN];
int sep(){
	for(int i=head;i<=tail;i++)
		s.insert(mp(deg[q[i]],q[i])),f[q[i]]=deg[q[i]];
	while(s.size()>0){
		int nd=(*(s.begin())).ss,mx=-1,id=-1;
		//cout<<nd<<endl;
		for(int i=0;i<adj[nd].size();i++){
			if(h[adj[nd][i]]){
				if(!road[nd].count(adj[nd][i])){
					h[nd]=1;
					road[nd].insert(adj[nd][i]);
					break;
				}
			}
			else{
				if(umax(mx,f[adj[nd][i]]))
					id=adj[nd][i];
			}
		}
		if(h[nd]==0 and id>0){
			road[id].insert(nd);
			s.erase(s.find(mp(f[id],id)));
			h[nd]=1;
			s.insert(mp(--f[id],id));
		}
		s.erase(s.find(mp(f[nd],nd)));	
	}
}
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=0;i<m;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		adj[u].pb(v);deg[u]++;
		adj[v].pb(u);deg[v]++;
	}
	int ans=0;
	for(int i=1;i<=n;i++)
		if(!vis[i]){
			dfs(i);sep();
			head=tail+1;
		}
	for(int i=1;i<=n;i++)
		if(!h[i])
			ans++;	
	printf("%d\n",ans);	
	return 0;
}

