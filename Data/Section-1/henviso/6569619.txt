#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define INRANGE0(x, n) ((x) > -1 && (x) < n)
#define INRANGE(x, a, b) ((x) >= a && (x) <= b)
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INCMOD(a,b,c) (((a)+b)%c)
#define DECMOD(a,b,c) (((a)+c-b)%c)
#define ROUNDINT(a) (int)((double)(a) + 0.5)
#define INF 0x3f3f3f3f
#define EPS 1e-9
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL  //J PRIMEIROS
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//scanf(" %d ", &t);

int a[5100][5100];
int pd[5100][5100];
int n, m;

int main(){
    scanf(" %d %d ", &n, &m);
    char c;
    REP(i, n)
    REP(j, m){
        scanf(" %c ", &c);
        a[m-1-j][i] = (c == '1');
    }
    
    swap(n, m);
    CLEAR0(pd);
    
    REP(j, m)
    for(int i = 0; i<n; i++){
        pd[i][j] = a[i][j];
        if(a[i][j] == 1 && i > 0) pd[i][j] += pd[i-1][j];
    }
    
    /*
    REP(i, n){
        REP(j, m) cout << pd[i][j] << " ";
        cout << endl;
    }*/
    
    int ans = 0;
    for(int i = 0; i<n; i++){
        int cnt[5001]; CLEAR0(cnt);
        for(int j = 0; j<m; j++) cnt[pd[i][j]]++;
        int base = 0, height;
        for(int j = n; j>=0; j--){
            if(cnt[j] > 0){
                height = j;
                base += cnt[j];
                int area = base * height;
                ans = max(area, ans);
            }
        }
    }
    cout << ans << endl;
    
}

