import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class ProblemC2 {
    public static final int BASE = 7;
    BufferedReader rd;

    ProblemC2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        long[] a = longarr();
        long n = a[0];
        long m = a[1];

        int nLen = len(n-1);
        int mLen = len(m-1);

        int displayLen = nLen + mLen;

        long res = 0;
        if(displayLen <= BASE) {
            long z = 1;
            long c = 0;
            for(int i=0;i<displayLen;i++) {
                if(i == mLen) {
                    c = z;
                }
                z *= BASE;
            }
            for(long u=0;u<z;u++) {
                boolean[] used = new boolean[BASE];
                long v = u;
                long hours = 0;
                long minutes = 0;
                boolean ok = true;
                for(long k=0;k<displayLen;k++) {
                    if(k == mLen) {
                        hours = v;
                        minutes = u - hours * c;
                    }
                    int d = (int)(v % BASE);
                    if(!used[d]) {
                        used[d] = true;
                    } else {
                        ok = false;
                        break;
                    }
                    v /= BASE;
                }
                if(ok && hours < n && minutes < m) {
                    res++;
                }
            }
        }
        out(res);
    }

    private int len(long x) {
        int len = 1;
        while(x >= BASE) {
            x /= BASE;
            len++;
        }
        return len;
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC2();
    }
}
