#include<bits/stdc++.h>

using namespace std;

struct node
{
	int count;
	node *zero, *one;
	node(node *a = NULL, node *b = NULL)
	{
		zero = a;
		one = b;
		count = 1;
	}
};

void add(node *root, int elem, int len)
{
	if ( len < 0 )
	{
		return ;
	}
	if ( elem & (1 << len) )
	{
		if ( !root -> one )
		{
			root -> one = new node();
		}
		else
		{
			((root -> one) -> count) ++;
		}
		add(root -> one, elem, len - 1);
	}
	else
	{
		if ( root -> zero )
		{
			((root -> zero) -> count) ++;
		}
		else
		{
			root -> zero = new node();
		}
		add(root -> zero, elem, len - 1);
	}
}

void query(node *root, int elem, int len, int &ans)
{
	if ( len < 0 )
		return;
	if ( elem & (1 << len) )
	{
		if ( root -> zero )
		{
			ans = ans | (1 << len);
			query(root -> zero, elem, len - 1, ans);
		}
		else
		{
			query(root -> one, elem, len - 1, ans);
		}
	}
	else
	{
		if ( root -> one )
		{
			ans = ans | (1 << len);
			query(root -> one, elem, len - 1, ans);
		}
		else
		{
			query(root -> zero, elem, len - 1, ans);
		}
	}
}

void rem(node *root, int elem, int len)
{
	if ( len < 0 )
		return;
	if ( elem & (1 << len) )
	{
		((root -> one) -> count) --;
		if ( (root -> one) -> count == 0 )
		{
			node *tmp = root -> one;
			free(tmp);
			root -> one = NULL;
		}
		rem(root -> one, elem, len - 1);
	}
	else
	{
		((root -> zero) -> count) --;
		if ( (root -> zero) -> count == 0 )
		{
			node *tmp = root -> zero;
			free(tmp);
			root -> zero = NULL;
		}
		rem(root -> zero, elem, len - 1);
	}
}
int main()
{
	int q;
	node *root;
	root = new node();
	add(root, 0, 30);
	scanf("%d", &q);
	while ( q-- )
	{
		char str[3];
		int x;
		scanf("%s%d", str, &x);
		if ( str[0] == '+' )
		{
			add(root, x, 30);
		}
		else if ( str[0] == '-' )
		{
			rem(root, x, 30);
		}
		else
		{
			int ans = 0;
			query(root, x, 30, ans);
			printf("%d\n", ans);
		}
	}
	return 0;
}
