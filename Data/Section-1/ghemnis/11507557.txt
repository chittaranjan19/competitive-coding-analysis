#include <bits/stdc++.h>

#define pb push_back
#define PB pop_back()
#define sqr(a) (((a) * (a)))

typedef long long ll;

using namespace std;

int n,i,j,k,l=0,T,ma=0;
set<int> a1;
int a[200010];
set<int>::iterator it;

int ceilSearch(int arr[], int low, int high, int x)
{
  int mid;

  /* If x is smaller than or equal to the first element,
    then return the first element */
  if(x <= arr[low])
    return low;

  /* If x is greater than the last element, then return -1 */
  if(x > arr[high])
    return -1;

  /* get the index of middle element of arr[low..high]*/
  mid = (low + high)/2;  /* low + (high - low)/2 */

  /* If x is same as middle element, then return mid */
  if(arr[mid] == x)
    return mid;

  /* If x is greater than arr[mid], then either arr[mid + 1]
    is ceiling of x or ceiling lies in arr[mid+1...high] */
  else if(arr[mid] < x)
  {
    if(mid + 1 <= high && x <= arr[mid+1])
      return mid + 1;
    else
      return ceilSearch(arr, mid+1, high, x);
  }

  /* If x is smaller than arr[mid], then either arr[mid]
     is ceiling of x or ceiling lies in arr[mid-1...high] */
  else
  {
    if(mid - 1 >= low && x > arr[mid-1])
      return mid;
    else
      return ceilSearch(arr, low, mid - 1, x);
  }
}


int main ()
{
    cin>>n;
    for(i=0;i<n;i++)
    {
        int u;
        cin>>u;
        a1.insert(u);
    }

    for(it=a1.begin();it!=a1.end();++it)
    {
        a[l]=*it;a[*it]=l;l++;
    }

    for(j=l-1;j>=0 and a[j]>ma;j--)
    {
        int u=j-1;
        for(i=2;i*i<a[j] and u>0;i++)
        {
            int v=ceilSearch(a, 0,  u, floor(a[j]/i)+1);
            if(v!=-1){ma=max(ma,a[j]%a[v]);}
            else{u=v-1;}
        }
    }
    cout<<ma;

}
