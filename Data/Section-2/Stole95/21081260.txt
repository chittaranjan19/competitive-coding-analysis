import java.io.*;
import java.util.*;

public class D{
	public static void main(String[] args) {
		FastScannerD sc = new FastScannerD(System.in);
		
		int N = sc.nextInt();
		
		int[] arr = new int[N];
		
		for(int i = 0 ; i < N ; i++){
			arr[i] = sc.nextInt();
		}
		
		SegmentTree_Max_Subarray st = new SegmentTree_Max_Subarray(arr);
		
		StringBuilder sb = new StringBuilder();
		
		for(int i = 0 ; i < N ; i++){
			int next = sc.nextInt();
			
			st.updateValue(next-1, Integer.MIN_VALUE);
			
			long rez = st.RangeMinimumQuery(0, N-1);
			if(rez < 0 || i ==N-1) sb.append(0).append("\n");
			else sb.append(rez).append("\n");
		}
		
		System.out.println(sb.toString());
	}
}

class SegmentTree_Max_Subarray { 
	int[] array;
	SegmentTreeNode[] nodes;
	
	class SegmentTreeNode{
		long prefixSum, suffixSum, maxSum, sum;
		
		SegmentTreeNode(){
			prefixSum = suffixSum = maxSum = sum = 0;
		}
		
		void merge(SegmentTreeNode left, SegmentTreeNode right){
			sum = left.sum + right.sum;
			prefixSum = Math.max(left.prefixSum, left.sum + right.prefixSum);
			suffixSum = Math.max(right.suffixSum, left.suffixSum + right.sum);
			maxSum = Math.max(prefixSum, Math.max(suffixSum, Math.max(left.maxSum, Math.max(right.maxSum, left.suffixSum + right.prefixSum))));
		}

		public void assignLeaf(int l) {
			prefixSum = suffixSum = maxSum = sum = array[l];
		}

	}
	
	public SegmentTree_Max_Subarray(int[] a) {
		array = a;
		int size = getSegmentTreeSize(a.length);
		nodes = new SegmentTreeNode[size];	
		buildSegmentTree(1, 0, a.length-1);
	}
	
	static int getSegmentTreeSize(int N) {
		  int size = 1;
		  for (; size < N; size <<= 1);
		  return size << 1;		// go zgolemuvame size ushte ednash bidejkji treba da e duplo pogolem
	}

	void buildSegmentTree(int index, int L, int R) {
		nodes[index] = new SegmentTreeNode();
		if(L == R){
			nodes[index].assignLeaf(L);
		}
		else{
			int left = index<<1, right = left + 1, mid = (L+R) / 2;
			
			buildSegmentTree(left, L, mid);
			buildSegmentTree(right, mid + 1, R);
			nodes[index].merge(nodes[left], nodes[right]);
		}
	}
	
	long RangeMinimumQuery(int lo, int hi){
		return findMin(1, 0, array.length - 1, lo, hi).maxSum;
	}

	SegmentTreeNode findMin(int index, int L, int R, int lo, int hi) {
		if(lo > R || hi < L) return new SegmentTreeNode();
		if(L >= lo && R <= hi) return nodes[index];
		
		int left = index<<1, right = left + 1, mid = (L+R) / 2;
		
		if(lo > mid)
			return findMin(right, mid + 1, R, lo, hi);
		if(hi <= mid)
			return findMin(left, L, mid, lo, hi);
		
		SegmentTreeNode first = findMin(left, L, mid, lo, hi);
		SegmentTreeNode sec = findMin(right, mid + 1, R, lo, hi);
		
		SegmentTreeNode result = new SegmentTreeNode();
		result.merge(first, sec);
		return result;
	}
	
	void updateValue(int index, int newValue){
		update(1, 0, array.length-1, index, newValue);
	}

	void update(int index, int L, int R, int idx, int newValue) {
		int i = idx, j = idx;
		
		if(j < L || i > R) return;
		
		if(L==i && R == j){
			array[idx] = newValue;
			nodes[index].assignLeaf(idx);
			return;
		}
		
		int left = 2 * index, right = left + 1, mid = (L + R) / 2;
		if (idx <= mid)
			update(left, L, mid, idx, newValue);
		else
			update(right, mid+1, R, idx, newValue);
		
		nodes[index].merge(nodes[left], nodes[right]);
	}

}

class FastScannerD{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScannerD(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}