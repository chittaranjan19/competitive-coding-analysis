#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

#define eps 1e-8

int a[100005], i, j, k, b[100005], n, len, start, last, K;
long long res = -1 * (1LL << 60), sum;
set <pair <int, int> > s;
set <pair <int, int> > :: iterator it;
pair <int, int> tmp;


int main()
{
    scanf("%d %d", &n, &len);
    for(i = 0; i < n; i++)
        scanf("%d", a + i);
    scanf("%d", &K);
    k = K;
    b[0] = -1;
    for(i = 0; i < len; i++)
    {
        if(a[i] >= 0)
            sum += a[i];
        else
        {
            if(k > 0)
            {
                k--;
                sum += -a[i];
                b[last++] = i;
                s.insert(make_pair(-a[i], i));
            }
            else
            {
                if(!s.empty())
                {
                    it = s.begin();
                    tmp = *it;
                    if(a[i] < -tmp.first)
                    {
                        sum += 2 * a[tmp.second];
                        s.erase(it);
                        sum += -a[i];
                        b[last++] = i;
                        s.insert(make_pair(-a[i], i));
                    }
                    else
                        sum += a[i];
                }
                else
                {
                    sum += a[i];
                }
            }
        }
    }

    if(sum > res)
        res = sum;
    if(-sum > res)
        res = -sum;

    for(i = len; i < n; i++)
    {
        if(i - len == b[start])
        {
            it = s.find(make_pair(-a[i-len], i - len));
            if(it != s.end() && (*it).second == i - len)
            {
                sum += a[i-len];
                k++;
                start++;
            }
        }
        else
            sum -= a[i-len];
        if(a[i] >= 0)
            sum += a[i];
        else
        {
            if(k > 0)
            {
                k--;
                sum += -a[i];
                b[last++] = i;
                s.insert(make_pair(-a[i], i));
            }
            else
            {
                if(!s.empty())
                {
                    it = s.begin();
                    tmp = *it;
                    if(a[i] < -tmp.first)
                    {
                        sum += 2 * a[tmp.second];
                        s.erase(it);
                        sum += -a[i];
                        b[last++] = i;
                        s.insert(make_pair(-a[i], i));
                    }
                }
                else
                {
                    sum += a[i];
                }
            }
        }
        if(sum > res)
            res = sum;
        if(-sum > res)
            res = -sum;
    }

    k = K;
    sum = 0;
    start = last = 0;
    b[0] = -1;
    s.clear();

    for(i = 0; i < len; i++)
    {
        if(a[i] <= 0)
            sum += a[i];
        else
        {
            if(k > 0)
            {
                k--;
                sum += -a[i];
                b[last++] = i;
                s.insert(make_pair(a[i], i));
            }
            else
            {
                if(!s.empty())
                {
                    it = s.begin();
                    tmp = *it;
                    if(a[i] < -tmp.first)
                    {
                        sum -= 2 * a[tmp.second];
                        s.erase(it);
                        sum += -a[i];
                        b[last++] = i;
                        s.insert(make_pair(a[i], i));
                    }
                    else
                        sum += a[i];
                }
                else
                {
                    sum += a[i];
                }
            }
        }
    }

    if(sum > res)
        res = sum;
    if(-sum > res)
        res = -sum;

    for(i = len; i < n; i++)
    {
        if(i - len == b[start])
        {
            it = s.find(make_pair(a[i-len], i - len));
            if(it != s.end() && (*it).second == i - len)
            {
                sum += a[i-len];
                k++;
                start++;
            }
        }
        else
            sum -= a[i-len];
        if(a[i] <= 0)
            sum += a[i];
        else
        {
            if(k > 0)
            {
                k--;
                sum += -a[i];
                b[last++] = i;
                s.insert(make_pair(a[i], i));
            }
            else
            {
                if(!s.empty())
                {
                    it = s.begin();
                    tmp = *it;
                    if(a[i] < -tmp.first)
                    {
                        sum -= 2 * a[tmp.second];
                        s.erase(it);
                        sum += -a[i];
                        b[last++] = i;
                        s.insert(make_pair(a[i], i));
                    }
                }
                else
                {
                    sum += a[i];
                }
            }
        }
        if(sum > res)
            res = sum;
        if(-sum > res)
            res = -sum;
    }

    cout << res << endl;
    return 0;
}
