import java.io.BufferedOutputStream;
import java.io.PrintWriter;
import java.util.*;

/**
 * Created by leen on 7/11/16.
 */
public class _687D {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        int n = scan.nextInt();
        int m = scan.nextInt();
        int q = scan.nextInt();

        City[] cities = new City[n + 1];

        for(int i = 1; i <= n; i++)
            cities[i] = new City(i);

        List<Edge> edges = new ArrayList<Edge>();

        for(int i = 1; i <= m; i++) {
            City a = cities[scan.nextInt()];
            City b = cities[scan.nextInt()];
            int len = scan.nextInt();
            edges.add(new Edge(i, a, b, len));
        }

        Collections.sort(edges, new Comparator<Edge>() {
            @Override
            public int compare(Edge o1, Edge o2) {
                return o2.length - o1.length;
            }
        });

        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out, 1024 * 64));

        for(int i = 1; i <= q; i++) {
            int l = scan.nextInt();
            int r = scan.nextInt();

            for(int j = 1; j <= n; j++)
                cities[j].opposites.clear();


            int ans = -1;
            for(Edge edge : edges) {
                if(edge.num < l || edge.num > r)
                    continue;

                if(isAlly(edge.start, edge.end, 0, new HashSet<City>()) == 1) {
                    ans = edge.length;
                    break;
                }
                edge.start.addOpposite(edge.end);
                edge.end.addOpposite(edge.start);
            }

            pw.println(ans);
        }

        pw.flush();

    }

    static int isAlly(City current, City target, int length, Set<City> visited) {
        if(visited.contains(current))
            return 0;

        visited.add(current);

        if(current == target) {
            if(length % 2 == 0)
                return 1;
            else
                return -1;
        }

        for(City opposite : current.opposites) {
            int rs = isAlly(opposite, target, length + 1, visited);
            if(rs != 0)
                return rs;
        }

        return 0;
    }

    static class City {

        final int num;
        final List<City> opposites = new ArrayList<City>();

        City(int num) {
            this.num = num;
        }

        void addOpposite(City opposite) {
            opposites.add(opposite);
        }
    }

    static class Edge {
        int num;
        City start;
        City end;
        int length;

        Edge(int num, City start, City end, int length) {
            this.num = num;
            this.start = start;
            this.end = end;
            this.length = length;
        }
    }
}
