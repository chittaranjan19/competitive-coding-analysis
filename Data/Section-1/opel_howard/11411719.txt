#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

int main() {
    // freopen("445B.in", "r", stdin);
    
    int n, m;
    scanf("%d %d", &n, &m);

    vi edges[n+1];
    loop(it, m) {
    	int c1, c2;
    	scanf("%d %d", &c1, &c2);
    	edges[c1].pub(c2);
    	edges[c2].pub(c1);
    }

    vector<bool> isVisited(n+1, false);

    int ans = 0;
    loop1(it, n) {
    	if (!isVisited[it]) {
    		int localAns = 0;
    		que<int> q;
    		q.pu(it);
    		isVisited[it] = true;
    		while (!q.empty()) {
    			int curr = q.front();
    			q.po();
    			++localAns;

    			iterate(neighbor, edges[curr]) {
    				if (!isVisited[*neighbor]) {
    					q.pu(*neighbor);
    					isVisited[*neighbor] = true;
    				}
    			}
    		}
    		ans = max(localAns, ans);
    	}
    }

    printf("%I64d\n", (1LL << (ans-1)));
    return 0;
}