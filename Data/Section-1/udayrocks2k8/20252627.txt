#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
using namespace std;

#define MOD 1000000007

#define pb push_back
#define loop_it(it, elements) for(auto it = elements.begin(); it != elements.end(); it++)
#define loop(i, l, r) for(auto i = l; i < r; i++)
#define loop_r(i, r, l) for(auto i = r; i >= l; i--)
#define loop_k(i, l, r, k) for(auto i = l; i < r; i+=k)
#define test_cases int test_cases;scanf("%d", &test_cases);for (int tc_0 = 1; tc_0 <= test_cases; tc_0++)

typedef long long i64;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<i64> vi64;
typedef vector<vi> vvi;
typedef vector<vi64> vvi64;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef map<pii, vi> mpiivi;
typedef map<int, int> mii;
typedef map<int, vi> mivi;

#define INF (1LL << 60)

i64 pow(int a, int b) {
    if (b == 0) return 1;
    i64 ans = pow(a, b / 2);
    ans *= ans;
    ans %= MOD;
    if (b & 1) {
        ans *= a;
        ans %= MOD;
    }
    return (int) ans;
}

int main() {
    int n;
    cin >> n;
    vi nodes(n);
    loop(x, 0, n) {
        cin >> nodes[x];
        nodes[x]--;
    }
    vi visited(n);
    
    i64 ans = 1;
    int cnt = 1, tot = 0;
    loop(x, 0, n) if (visited[x] == 0) {
        int x0 = x;
        int start = cnt;
        while (visited[x0] == 0) {
            visited[x0] = cnt++;
            x0 = nodes[x0];
        }
        if (visited[x0] < start) {
            continue;
        }
        tot += cnt - visited[x0];
        ans *= (pow(2, cnt - visited[x0]) - 2 + MOD) % MOD;
        ans %= MOD;
    }
    ans *= pow(2, n - tot);
    ans %= MOD;
    cout << ans << endl;
    return 0;
}