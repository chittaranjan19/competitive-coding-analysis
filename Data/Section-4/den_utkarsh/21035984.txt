#include<iostream>
#include<cmath>
#include<string>
#include<algorithm>
#include<list>
using namespace std;
int main(){
	int n, k;
	cin >> n; cin >> k;
	list<string> bestcase;
	int index = 0;
	for (int i = 0; i < n; i++){
		string number;
		cin >> number;
		if (!bestcase.empty()){
			string ka = bestcase.back();
			if (number.length() >= ka.length()){
				bestcase.push_back(number);
			}
			else{
				bestcase.push_front(number);
			}
			index++;
		}
		else{
			bestcase.push_back(number);
		}
	}

	string final_result = "";
	cin >> final_result;
	int tries = 0;
	int best_sec = 0;
	int number_of_occurence = 0;
	bool done = false;
	for (list<string>::const_iterator it = bestcase.begin(); it != bestcase.end(); ++it){
		string tmp = *it;
		if (!done){
			if (tmp.length() < final_result.length()){
				tries += 1;
				if (tries == k){
					best_sec += 5;
				}
				
					best_sec += 1;
				
			}
			else{
				if (tmp.length() == final_result.length()){
					best_sec += 1;
					done = true;
				}
			}

		}
		if (tmp == final_result){
			number_of_occurence++;
		}
	}
	int wors_sec = 0;
	tries = 0;
	for (int t = 0; t < (n - number_of_occurence+1); t++){
		tries += 1;
		if (tries == k){
			tries = 0;
			wors_sec += 5;
		
		}
	
			wors_sec += 1;
		
	}
	cout << best_sec << " " << wors_sec << endl;
	return 0;
}