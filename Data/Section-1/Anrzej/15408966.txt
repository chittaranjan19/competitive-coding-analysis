module Main where

calc :: (Integer, Integer, Integer, Integer) -> [Integer]
calc (a, b, k, cur)
         | cur > b = []
         | cur >= a = [cur]++calc(a, b, k, cur*k)
         | otherwise = calc(a, b, k, cur*k)

emptytoneg :: [Integer] -> [Integer]
emptytoneg [] = [-1]
emptytoneg xs = xs


main = do
        args <- getContents
        let 
            (l:r:k:xs) = words args
        putStrLn $ unwords $ map show $ emptytoneg $ calc(read l, read r, read k, 1)
    