#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mp make_pair
#define F first
#define S second
#define mn 100001
#define mod 1000000007
#define pb push_back
#define modi(x) (x & (-x))

using namespace std;
int n, f1[mn], f2[mn], h[mn], down[mn], up[mn], l = 0;
pair<int, int> p[mn];
struct inteval{
    int t[mn * 4];

    void reset()
    {
        memset(t, 0, sizeof(t));
    }

    int getMax(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return 0;
        if (x <= l && r <= y)
            return t[id];
        int g = ((l + r) >> 1);
        int a = getMax(l, g, id * 2, x, y);
        int b = getMax(g + 1, r, id * 2 + 1, x, y);
        return max(a, b);
    }

    void update(int l, int r, int id, int x, int w)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            t[id] = w;
            return;
        }
        int g = ((l + r) >> 1);
        update(l, g, id * 2, x, w);
        update(g + 1, r, id * 2 + 1, x, w);
        t[id] = max(t[id * 2], t[id * 2 + 1]);
    }
};
inteval tree;
map<long long, int> Map;

void setup ()
{
    int id1 = 0, id2 = 1;
    cin >> n;
    FOR(i, 1, n)
    {
        cin >> p[i].F;
        p[i].S = i;
    }
    sort(p + 1, p + n + 1);
    FOR(i, 1, n)
    {
        h[p[i].S] = i;
        while(p[id1 + 1].F < p[i].F && id1 <= n)
            id1 ++;
        down[p[i].S] = id1;
        while(p[id2].F <= p[i].F && id2 <= n)
            id2 ++;
        up[p[i].S] = id2;
    }
}

void chuanbi()
{
    tree.reset();
    FOR(i, 1, n)
    {
        int w = tree.getMax(1, n, 1, 1, down[i]);
        f1[i] = w + 1;
        l = max(l, f1[i]);
        tree.update(1, n, 1, h[i], f1[i]);
    }
    tree.reset();
    FORD(i, n, 1)
    {
        int w = tree.getMax(1, n, 1, up[i], n);
        f2[i] = w + 1;
        tree.update(1, n, 1, h[i], f2[i]);
    }
}

void xuly ()
{
    FOR(i, 1, n)
    {
        long long tem = f1[i] * (n + 1) + f2[i];
        if (Map.find(tem) == Map.end())
            Map[tem] = 1;
        else
            Map[tem] ++;
    }
    FOR(i, 1, n)
    {
        if (f1[i] + f2[i] - 1 < l)
        {
            cout << 1;
            continue;
        }
        long long tem = f1[i] * (n + 1) + f2[i];
        if (Map[tem] > 1)
            cout << 2;
        else
            cout << 3;
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    chuanbi();
    xuly ();
    return 0;
}
