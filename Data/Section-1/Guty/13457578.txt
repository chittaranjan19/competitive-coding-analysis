#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}


bool esPrimo (tint n, vector<tint> &primos)
{
	for(auto p : primos)
	{
		if (p * p > n)
			break;
		else if (n % p == 0)
			return false;
	}
	return true;
}

int main()
{
	tint n;
	cin >> n;
	tint maxN = 10050000; // 7 ceros
	vector<bool> criba (maxN,true);
	vector<tint> primos;
	criba[0] = false;
	criba[1] = false;
	forsn(i,2,maxN)
	{
		if (criba[i])
		{
			primos.push_back(i);
			if (i == n)
			{
				cout << 1 << endl << n << endl;
				return 0;
			}
			for(tint j = 2*i; j < maxN; j+= i)
				criba[j] = false;
		}

	}
	tint primoCerca = n;
	while (!esPrimo(primoCerca,primos))
		primoCerca--;
		
	for (auto p: primos)
	{
		if ( n - primoCerca >= p && criba[n-primoCerca-p])
		{
			cout << 3 << endl << primoCerca << " " << p << " " << n-primoCerca-p << endl;
			return 0;
		}	
	}
	if (primoCerca == n)
		cout << 1 << endl << primoCerca << endl;
	else if (esPrimo(n-primoCerca,primos))
		cout << 2 << endl << n-primoCerca << " " << primoCerca << endl;
	
	return 0;
}



