#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <fstream>
#include <numeric>
#include <stdexcept>
#include <cassert>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<int> v[200005];
set<pair<int, int> > s;

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("death.in", "r", stdin);
  //freopen("death.out", "w", stdout);
  int n, x;
  cin >> n;
  for(int i=0;i<n;i++)
  {
    cin >> x;
    v[x].pb(i + 1);
  }
  for(int i=0;i<n;i++)
    if(v[i].size())
      s.insert(mp(v[i].size(), i));
  set<pair<int, int> >::iterator it = s.end();
  it--;
  int ind = 0, dist = (*it).second;
  vector<int> res;
  bool test = true, can = true;;
  for(int i=0;i<n && test;i++)
  {
    if(can)
    {
      if(v[ind].size() == 0)
      {
        test = false;
        break;
      }
      res.pb(v[ind].back());
      v[ind].pop_back();
      it = s.lower_bound(mp(v[ind].size() + 1, ind));
      s.erase(it);
      if(v[ind].size() != 0) s.insert(mp(v[ind].size(), ind));
    }
    if(i == n - 1) break;
    if(dist > ind)
    {
      ind++;
      can = true;
    }
    else if(dist == ind)
    {
      if(!can)
      {
        it = s.end();
        it--;
        if(it == s.begin())
        {
          test = false;
          break;
        }
        it--;
        dist = (*it).second;
        i--;
      }
      else
      {
        it = s.end();
        it--;
        dist = (*it).second;
        can = false;
        i--;
      }
    }
    else
    {
      int tmp = dist;
      while(tmp >= 0 && tmp % 3 != (ind + 1) % 3) tmp--;
      if(tmp == -1) ind++;
      else
      {
        if(v[tmp].size() > v[ind + 1].size()) ind = tmp;
        else ind++;
      }
      can = true;
    }
  }
  if(test)
  {
    cout << "Possible\n";
    for(int i=0;i<res.size();i++)
      cout << res[i] << " ";
  }
  else cout << "Impossible";
  return 0;
}
