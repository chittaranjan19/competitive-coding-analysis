#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int tree[400005][5], arr[100005][5], res[5];
int n, m, k;

void build(int i,int L,int R)
{
  if(L == R)
  {
    for(int j=0;j<m;j++)
      tree[i][j] = arr[L][j];
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  for(int j=0;j<m;j++)
    tree[i][j] = max(tree[i*2 + 1][j], tree[i*2 + 2][j]);
}

int query(int i,int L,int R,int x,int y, int z)
{
  if(L >= x && R <= y)
    return tree[i][z];
  if(L > y || R < x)
    return 0;
  return max(query(i*2 + 1, L, (L + R) / 2, x, y, z), query(i*2 + 2, (L + R) / 2 + 1, R, x, y, z));
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("chipmunks.in", "r", stdin);
  //freopen("chipmunks.out", "w", stdout);
  cin >> n >> m >> k;
  for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
      cin >> arr[i][j];
  int sol = -1;
  build(0, 0, n - 1);
  int L = 0, R = 0;
  while(L < n)
  {
    while(R < n)
    {
      int temp = 0;
      for(int j=0;j<m;j++)
        temp+=query(0, 0, n - 1, L, R, j);
      if(temp <= k)
      {
        if(R - L + 1 > sol)
        {
          sol = R - L + 1;
          for(int j=0;j<m;j++)
           res[j] = query(0, 0, n - 1, L, R, j);
        }
        R++;
      }
      else break;
    }
    L++;
    R = min(max(R, L), n - 1);
  }
  for(int j=0;j<m;j++)
    cout << res[j] << " ";
  return 0;
}
