#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int arr[100005];
int h[100005];
int DP[100005][2], n;

int solve(int ind, bool last)
{
  if(ind == n) return 0;
  int &temp = DP[ind][last];
  if(temp != -1) return temp;
  if(last)
  {
    if(arr[ind - 1] + h[ind - 1] >= arr[ind]) return temp = -100005;
    if(arr[ind] - h[ind] > arr[ind - 1] + h[ind - 1]) temp = solve(ind + 1, 0) + 1;
    else temp = solve(ind + 1, 0);
    temp = max(temp, solve(ind + 1, 1) + 1);
  }
  else
  {
    if(ind == 0 || arr[ind] - h[ind] > arr[ind - 1]) temp = solve(ind + 1, 0) + 1;
    else temp = solve(ind + 1, 0);
    temp = max(temp, solve(ind + 1, 1) + 1);
  }
  return temp;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin >> n;
  for(int i=0;i<n;i++)
    cin >> arr[i] >> h[i];
  setdp(DP);
  cout << solve(0, 0);
  return 0;
}