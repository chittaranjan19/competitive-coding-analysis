import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Checkposts {
    int[] pre;

    public Checkposts() throws IOException {
        final long B = 1000000007;
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String h = rd.readLine();
        int n = Integer.parseInt(h);
        h = rd.readLine();
        String[] costs = h.split("\\s+");
        int[] c = new int[n];
        for(int i=0;i<n;i++) {
            c[i] = Integer.parseInt(costs[i]);
        }
        h = rd.readLine();
        List[] dest = new ArrayList[n];
        List[] vdest = new ArrayList[n];
        for(int i=0;i<n;i++) {
            dest[i] = new ArrayList();
            vdest[i] = new ArrayList();
        }
        int m = Integer.parseInt(h);
        for(int i=0;i<m;i++) {
            h = rd.readLine();
            String[] uv = h.split("\\s+");
            int u = Integer.parseInt(uv[0]) - 1;
            int v = Integer.parseInt(uv[1]) - 1;
            dest[u].add(v);
            vdest[v].add(u);
        }
        int[] order1 = new int[n];
        Integer[] order2 = new Integer[n];
        for(int i=0;i<n;i++) {
            order1[i] = i;
            order2[i] = i;
        }
        final int[] tf = dfs(n, dest, order1);
        Arrays.sort(order2, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return tf[o2] - tf[o1];
            }
        });
        int[] order3 = new int[n];
        for(int i=0;i<n;i++) {
            order3[i] = order2[i];
        }
        dfs(n, vdest, order3);

        Map<Integer, Set<Integer>> nodeMap = new HashMap<>();
        for(int i=0;i<n;i++) {
            if(!nodeMap.containsKey(i)) {
                Set<Integer> nodes = new HashSet<>();
                nodes.add(i);
                int v = i;
                while(!nodeMap.containsKey(v) && v != -1) {
                    nodes.add(v);
                    v = pre[v];
                }
                Set<Integer> existing;
                if(v == -1) {
                    existing = nodes;
                } else {
                    existing = nodeMap.get(v);
                    existing.addAll(nodes);
                }
                for(Integer x: nodes) {
                    nodeMap.put(x,existing);
                }
            }
        }
        Set<Set<Integer>> ss = new HashSet<>();
        for(Map.Entry<Integer, Set<Integer>> e: nodeMap.entrySet()) {
            ss.add(e.getValue());
        }

        long sumOfMins = 0;
        long ways = 1;
        for(Set<Integer> s1: ss) {
            int min = Integer.MAX_VALUE;
            int count = 0;
            for(Integer node: s1) {
                if(c[node] < min) {
                    min = c[node];
                    count = 1;
                } else if(c[node] == min) {
                    count++;
                }
            }
            sumOfMins += min;
            ways *= count;
            ways %= B;
        }
        out(sumOfMins+" "+ways);
    }

    private int[] dfs(int n, List[] dest, int[] order) {
        boolean[] visited = new boolean[n];
        int[] ts = new int[n];
        int[] tf = new int[n];
        pre = new int[n];
        Arrays.fill(pre, -1);
        int t1 = 0;
        for(int i: order) {
            if(!visited[i]) {
                visited[i] = true;
                t1++;
                ts[i] = t1;
                if(!dest[i].isEmpty()) {
                    List<Integer> stList = new ArrayList<>();
                    List<Integer> ixList = new ArrayList<>();
                    stList.add(i);
                    ixList.add(-1);
                    while(!stList.isEmpty()) {
                        t1++;
                        int j = stList.size()-1;
                        int st = stList.get(j);
                        int ix = ixList.get(j);
                        ts[st] = t1;
                        visited[st] = true;
                        boolean found = false;
                        if(ix+1 < dest[st].size()) {
                            while(ix+1 < dest[st].size()) {
                                ix++;
                                Integer vNode = (Integer)(dest[st].get(ix));
                                if(!visited[vNode]) {
                                    found = true;
                                    pre[vNode] = st;
                                    ixList.set(j, ix);
                                    stList.add(vNode);
                                    ixList.add(-1);
                                    break;
                                }
                            }
                        }
                        if(!found) {
                            stList.remove(j);
                            ixList.remove(j);
                            t1++;
                            tf[st] = t1;
                        }
                    }
                }
            }
        }
        return tf;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new Checkposts();
    }
}
