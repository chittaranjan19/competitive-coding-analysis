#include <cstdio>
#include <algorithm>
using namespace std;
const int md=1000000007;
int n,i,j,k,d,x[202],y[202],f[202][202];
bool g[202][202],was[202][202];
long long A,B,C,D,A2,B2,C2,s,s1,s2;
long double xp,xq,yp,yq,eps=1e-12;
bool eq(int i, int j) {
  return x[i]==x[j] && y[i]==y[j];
}
long long F(int i, int j) {
  if (i+2==j) return 1;
  if (was[i][j]) return f[i][j];
  was[i][j]=true;
  if (g[i+1][j]) f[i][j]=F(i+1,j);
  if (g[i][j-1]) f[i][j]=(f[i][j]+F(i,j-1))%md;
  for (int p=i+2; p<j-1; p++) if (g[i][p] && g[p][j]) f[i][j]=(f[i][j]+F(i,p)*F(p,j))%md;
  return f[i][j];
}
int main() {
  scanf("%d",&n);
  for (i=0; i<n; i++) scanf("%d%d",&x[i],&y[i]);
  x[n]=x[0];
  y[n]=y[0];
  for (i=0; i<n; i++) {
    A=x[i+1]-x[i];
    s+=A*(y[i+1]+y[i]);
  }
  for (i=0; i<n; i++) for (j=0; j<n; j++) if (!eq(i,j) && !eq(i+1,j) && !eq(i,j+1)){
    A=x[i]-x[j];
    s1=A*(y[j]+y[i]);
    s2=-A*(y[j]+y[i]);
    for (k=i; !eq(k,j); k++) {
      if (k==n) k=0;
      A=x[k+1]-x[k];
      s1+=A*(y[k+1]+y[k]);
    }
    for (k=j; !eq(k,i); k++) {
      if (k==n) k=0;
      A=x[k+1]-x[k];
      s2+=A*(y[k+1]+y[k]);
    }
    if (abs(s1)+abs(s2)!=abs(s)) continue;
    A=y[j]-y[i];
    B=x[i]-x[j];
    C=-A*x[i]-B*y[i];
    for (k=0; k<n; k++) if (!eq(k,i) && !eq(k,j)) {
      if (eq(k+1,i) || eq(k+1,j)) {
        D=A*x[k]+B*y[k]+C;
        if (D>0) d=1; else if (D<0) d=-1; else d=0;
        if (d==0) break;
        continue;
      }
      A2=y[k+1]-y[k];
      B2=x[k]-x[k+1];
      C2=-x[k]*A2-y[k]*B2;
      if (A*B2==B*A2) continue;
      if (A==0) {
        yp=1.*A*C2-1.*C*A2;
        yq=1.*B*A2-1.*A*B2;
        xp=-C2*yq-B2*yp;
        xq=A2*yq;
      } else {
        yp=1.*A2*C-1.*C2*A;
        yq=1.*B2*A-1.*A2*B;
        xp=-C*yq-B*yp;
        xq=A*yq;
      }
//      printf("%d-%d %d-%d %.5lf %.5lf\n",i,j,k,k+1,double(xp/xq),double(yp/yq));
      if (xp<xq*min(x[i],x[j])-eps || xp>xq*max(x[i],x[j])+eps) continue;
      if (yp<yq*min(y[i],y[j])-eps || yp>yq*max(y[i],y[j])+eps) continue;
      if (xp<xq*min(x[k],x[k+1])-eps || xp>xq*max(x[k],x[k+1])+eps) continue;
      if (yp<yq*min(y[k],y[k+1])-eps || yp>yq*max(y[k],y[k+1])+eps) continue;
//      puts("BAD");
      break;
    }
    g[i][j]=k>=n;
  }
//  for (i=0; i<n; i++,puts("")) for (j=0; j<n; j++) printf("%d",g[i][j]);
  printf("%d\n",F(0,n-1));
  return 0;
}
