#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"You can do IT.I belive YOU!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ordered_set s;
*/
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int arr[MAXN];
int palin(string k){
	for(int i=0;i<=k.size()/2;i++)
		if(k[i]!=k[k.size()-i-1])
			return 0;
	return 1;		
}
int main(){
	string s;
	cin>>s;
	for(int i=0;i<s.size();i++){
		string q;
		for(int j=i;j<s.size();j++){
			q+=s[j];
			if(palin(q))
				arr[i]++;
		}
	}
	
	ll ans=0;
	for(int i=s.size()-1;i>=0;i--)
		arr[i]+=arr[i+1];
	for(int i=0;i<s.size();i++){
		string q;
		for(int j=i;j<s.size();j++){
			q+=s[j];
			if(palin(q))
				ans+=arr[j+1];
		}
	}
	cout<<ans<<endl;
	return 0;
}
