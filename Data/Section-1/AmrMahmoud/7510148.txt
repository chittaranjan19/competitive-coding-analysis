#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

struct edge
{
    int from,to,cost;

    edge(int x,int y,int z)
    {
        from = x,to = y,cost = z;
    }

    bool operator < (const edge e) const
    {
        return cost < e.cost;
    }
};

struct disjointset
{
    vector<int> rank, parent;
    int subtrees;

    disjointset(int n)
    {
        subtrees = n;
        for(int i=0;i<n;i++)
            rank.pb(1),parent.pb(i);
    }

    int find_set(int x)
    {
        if(x == parent[x])
            return x;
        return parent[x] = find_set(parent[x]);
    }

    void link(int x,int y)
    {
        if(rank[x] > rank[y])
            swap(x, y);
        parent[x] = y;
        if(rank[x] == rank[y])
            rank[y]++;
    }

    bool union_sets(int x,int y)
    {
        x = find_set(x),y = find_set(y);
        if(x != y)
        {
            link(x,y);
            subtrees--;
        }
        return x != y;
    }

    bool same_set(int x,int y)
    {
        return find_set(x) == find_set(y);
    }
};

vector<edge> edges;
vector<edge> res;

bool visited[1005],taken[1005];

string input[1005][11];

int main()
{
    int n,m,k,w;
    scanf("%d %d %d %d",&n,&m,&k,&w);
    disjointset a(k + 1);
    for(int i=1;i<=k;i++)
        for(int j=0;j<n;j++)
            cin >> input[i][j];
    for(int i=1;i<=k;i++)
        edges.push_back(edge(i,0,n*m));
    for(int i=1;i<=k;i++)
    {
        for(int j=i+1;j<=k;j++)
        {
            int counter = 0;
            for(int ii=0;ii<n;ii++)
                for(int jj=0;jj<m;jj++)
                    if(input[i][ii][jj] != input[j][ii][jj])
                        counter++;
            edges.push_back(edge(i,j,counter * w));
        }
    }
    sort(edges.begin(),edges.end());
    int counter = 0,sol = 0;
    for(int i=0;i<edges.size() && counter != k;i++)
    {
        edge temp = edges[i];
        if(a.union_sets(temp.from,temp.to))
            counter++,res.push_back(temp),sol+=temp.cost;
    }
    printf("%d\n",sol);
    counter = 0;
    visited[0] = true;
    while(counter != res.size())
    {
        for(int i=0;i<res.size();i++)
        {
            edge temp = res[i];
            if(visited[res[i].to] && !taken[i])
            {
                taken[i] = true;
                printf("%d %d\n",res[i].from,res[i].to);
                visited[res[i].from] = true;
                counter++;
            }
            else if(visited[res[i].from] && !taken[i])
            {
                taken[i] = true;
                printf("%d %d\n",res[i].to,res[i].from);
                visited[res[i].to] = true;
                counter++;
            }
        }
    }
    return 0;
}