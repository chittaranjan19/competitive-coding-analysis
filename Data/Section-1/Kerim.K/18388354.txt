#include<bits/stdc++.h>
#define MAXN 2509
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define y1 UMYTRECORDS
#define left Resources
#define right Midea
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
char arr[MAXN][MAXN];
int par[MAXN][MAXN],L[MAXN],R[MAXN];
int n,m,k;ll ans=0;
int sum(int x,int y,int x1,int y1){
	return par[x1][y1]-par[x1][y-1]-par[x-1][y1]+par[x-1][y-1];
}
void solve(int x,int y,int x1,int y1){
	if(x>x1 or y>y1)
		return; 	
	if(1==1){
		int midy=(y+y1)>>1;
		for(int i=x;i<=x1;i++){
			for(int j=0;j<=k+1;j++)
				L[j]=y-1,R[j]=y1+1;
			for(int j=i;j<=x1;j++){
				for(int p=k+1;p>=0;p--){
					while(L[p]<midy-1 and sum(i,L[p]+1,j,midy-1)>=p)
						L[p]++;
					while(R[p]>midy+1 and sum(i,midy+1,j,R[p]-1)>=p)
						R[p]--;	
				}
				int money=k-sum(i,midy,j,midy);
				if(money<0)
					break;
				for(int p=0;p<=k;p++){
					int q=money-p;
					if(q<0)
						break;
					ll left=(L[p]-L[p+1]+(!p));
					ll right=(R[q+1]-R[q]+(!q));
					ans+=left*right;
				}
			}
		}
		solve(x,y,x1,midy-1);
		solve(x,midy+1,x1,y1);
	}
}
int main(){
	scanf("%d%d%d",&n,&m,&k);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++){
			scanf(" %c",&arr[i][j]);		
			par[i][j]=par[i][j-1]+(arr[i][j]=='1');
		}
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			par[i][j]+=par[i-1][j];		
	solve(1,1,n,m);	
	printf("%lld\n",ans);		
	return 0;
}
