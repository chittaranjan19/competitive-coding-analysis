#include <bits/stdc++.h>

#define SZ(x) ((int)x.size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 300 + 50;

vector<int> v;
vector<int> ans;
int a[N];
int dp[N][N];

int lnds(){
	int n = SZ(v);
	ans.clear();
	for(int i = 0; i < n; ++i){
		int pos = upper_bound(ans.begin(), ans.end(), v[i]) - ans.begin();
		if(pos == SZ(ans)) ans.PB(v[i]);
		else
			ans[pos] = v[i];
	}
	return SZ(ans);
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n, t;
	cin >> n >> t;
	for(int i = 0; i < n; ++i) cin >> a[i];
	if(t < 1e4){
		for(int i = 0; i < t; ++i)
			for(int j = 0; j < n; ++j)
				v.PB(a[j]);
		cout << lnds() << "\n";
		return 0;
	}
	for(int i = 1; i <= 300; ++i){
		for(int j = i; j <= 300; ++j){
			for(int k = 0; k < n; ++k)
				if(a[k] >= i && a[k] <= j)
					v.PB(a[k]);
			dp[i][j] = lnds();
			v.clear();
		}
	}
	int mx = -1;
	for(int i = 1; i <= 300; ++i){
		int cur = 1;
		int ans = (t - i + 1) * dp[i][i];
		if(i == 2){
			ans += dp[1][2];
		}
		for(int j = 2; j < i; ++j){
			if(dp[cur][j] + dp[j][j + 1] < dp[cur][j + 1] + dp[i][i] && dp[cur][j + 1] != 0 && dp[cur][j + 1] != 0) ans += dp[i][i];
			else ans += dp[cur][j + 1], cur = j + 1;
		}
		mx = max(ans, mx);
	//	cerr << ans << "\n";
	}
	cout << mx << "\n";
	return 0;
}
