#include <cstdio>
#include <numeric>
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <string>
#include <map>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <queue>
#include <sstream>
#include <deque>
#include <cstdlib>
#include <cstring>
using namespace std;

#define mp make_pair
#define pb push_back
#define rep(i,n) for(int i = 0; i < (n); i++)
#define re return
#define fi first
#define se second
#define sz(x) ((int) (x).size())
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x) * (x))
#define sqrt(x) sqrt(abs(x))
#define y0 y3487465
#define y1 y8687969
#define fill(x,y) memset(x,y,sizeof(x))
                         
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef double D;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;
typedef vector<vi> vvi;

template<class T> T abs(T x) { re x > 0 ? x : -x; }
int cmp[505][505];
int c[505][505], v[505][505];
int p[505][505];
int x[505][505];
string s[1000006];

int d,n,m,i,j,k,r;
char* itoa(int val, int base=10){
	
	static char buf[32] = {0};
	
	int i = 30;
	
	for(; val && i ; --i, val /= base)
	
		buf[i] = "0123456789abcdef"[val % base];
	
	return &buf[i+1];
	
}
void dfs_comp(int a, int b, int i){
        if (a <= 0 || a > n || b <= 0 || b > m || v[a][b] || c[a][b] == '#')
                return;
        else {
                x[a][b] = i;
                v[a][b] = 1;
                s[r++] = (string)"B " + (string(itoa(a)))+ ' ' + string(itoa(b));  
                dfs_comp(a-1, b,0);
                dfs_comp(a,b-1,0);
                dfs_comp(a+1, b, 0);
                dfs_comp(a, b+1, 0);
                if (x[a][b] != 1){
                        s[r++] = (string)"D " +string(itoa(a)) + ' ' + string(itoa(b));  
                        s[r++] = (string)"R " +string(itoa(a)) + ' ' + string(itoa(b));  
                }
        }
        return;             
                

}
void comp(){

        for(int i = 1; i <= n; i++)
                for(int j = 1; j <= m; j++){
                        //       cout << d << endl;
                        if (!v[i][j] && c[i][j] != '#'){
                                d++;
                                dfs_comp(i,j,1);
                                //      cout << "here" << endl;
                        }
                }
        cout << r << endl;
        for(int i = 0; i < r; i++)
                cout << s[i] << endl;
        
        return;
}
        
        

int main()
{

        cin >> n >> m;
        for(int i = 1; i <= n; i++){
                string s;
                cin >> s;
                for(int j = 1; j <= m; j++){
                        c[i][j] = s[j-1];

                }
        }
        comp();
}
        
                        
        
        
