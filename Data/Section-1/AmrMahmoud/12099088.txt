#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

bool sorter(pair<int, int> a, pair<int, int> b)
{
  if(a.f == b.f) return a.s < b.s;
  return a.f < b.f;
}

struct group
{
  pair<int, int> a[710];
  int n;
  int tba;

  group(){n = tba = 0;};

  void add(int x)
  {
    tba += x;
  }

  void add(int x, int L, int R)
  {
    for(int i=0;i<n;i++)
    {
      if(a[i].s >= L && a[i].s <= R)
        a[i].f += x;
      a[i].f += tba;
    }
    tba = 0;
    sort(a, a + n, sorter);
  }

  int get_smaller(int x)
  {
    int tmp = x - tba;
    int L = 0, R = n - 1;
    while(R > L)
    {
      int mid = L + (R - L) / 2;
      if(a[mid].f < tmp)
        L = mid + 1;
      else if(a[mid].f > tmp)
        R = mid - 1;
      else R = mid;
    }
    if(a[R].f != tmp) return INF;
    return a[R].s;
  }

  int get_larger(int x)
  {
    int tmp = x - tba;
    int L = 0, R = n - 1;
    while(R > L)
    {
      int mid = L + (R - L + 1) / 2;
      if(a[mid].f < tmp)
        L = mid + 1;
      else if(a[mid].f > tmp)
        R = mid - 1;
      else L = mid;
    }
    if(a[L].f != tmp) return -1;
    return a[L].s;
  }
} grps[710];

int main()
{
  //ios_base::sync_with_stdio(0);
  //freopen("test0.txt", "r", stdin);
  //freopen("lca.out", "w", stdout);
  int n, x, q, L, R;
  scanf("%d %d", &n, &q);
  int cnt = (int)(sqrt(n) + EPS);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &x);
    grps[i / cnt].a[i % cnt] = mp(x, i + 1);
    grps[i / cnt].n++;
  }
  cnt = (n - 1) / cnt + 1;
  for(int i=0;i<cnt;i++)
    grps[i].add(0, 0, 0);
  while(q--)
  {
    scanf("%d", &x);
    if(x == 1)
    {
      scanf("%d %d %d", &L, &R, &x);
      int l = 1;
      for(int i=0;i<cnt;i++)
      {
        int r = l + grps[i].n - 1;
        if(R < l) break;
        if(L > r)
        {
          l = r + 1;
          continue;
        }
        if(L <= l && R >= r)
          grps[i].add(x);
        else grps[i].add(x, L, R);
        l = r + 1;
      }
    }
    else
    {
      scanf("%d", &x);
      L = INF;
      R = -1;
      for(int i=0;i<cnt;i++)
      {
        L = min(L, grps[i].get_smaller(x));
        R = max(R, grps[i].get_larger(x));
      }
      if(R == -1) printf("-1\n");
      else printf("%d\n", R - L);
    }
  }
  return 0;
}
