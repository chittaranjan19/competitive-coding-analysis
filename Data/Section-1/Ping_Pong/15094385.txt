#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;
const long long inf = (long long)1e9;
const long long MAX_N = 50;
const long long MOD = (long long)1e9 + 7;

int main()
{
    //freopen("slalom.in", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, m;
    cin >> n >> m;
    long long a[n][m], dp1[n][m], dp2[n][m], dp12[n][m], dp22[n][m];
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < m; j++)
            cin >> a[i][j];
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < m; j++)
            dp1[i][j] = 0;
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < m; j++)
            dp2[i][j] = 0;
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < m; j++)
            dp12[i][j] = 0;
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < m; j++)
            dp22[i][j] = 0;
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < m; j++)
        {
            if (i > 0)
                dp1[i][j] = max(dp1[i][j], dp1[i - 1][j]);
            if (j > 0)
                dp1[i][j] = max(dp1[i][j], dp1[i][j - 1]);
            dp1[i][j] += a[i][j];
        }
    for (long long i = n - 1; i >= 0; i--)
        for (long long j = 0; j < m; j++)
        {
            if (i < n - 1)
                dp2[i][j] = max(dp2[i][j], dp2[i + 1][j]);
            if (j > 0)
                dp2[i][j] = max(dp2[i][j], dp2[i][j - 1]);
            dp2[i][j] += a[i][j];
        }
    for (long long i = n - 1; i >= 0; i--)
        for (long long j = m - 1; j >= 0; j--)
        {
            if (i < n - 1)
                dp12[i][j] = max(dp12[i][j], dp12[i + 1][j]);
            if (j < m - 1)
                dp12[i][j] = max(dp12[i][j], dp12[i][j + 1]);
            dp12[i][j] += a[i][j];
        }
    for (long long i = 0; i < n; i++)
        for (long long j = m - 1; j >= 0; j--)
        {
            if (i > 0)
                dp22[i][j] = max(dp22[i][j], dp22[i - 1][j]);
            if (j < m - 1)
                dp22[i][j] = max(dp22[i][j], dp22[i][j + 1]);
            dp22[i][j] += a[i][j];
        }
    long long ans = 0;
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < m; j++)
            ans = max(ans, dp1[i][j] + dp12[i][j] + dp2[i][j] + dp22[i][j] - a[i][j] * 4);
    cout << ans;
    return 0;
}
