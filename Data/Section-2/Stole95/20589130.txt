import java.io.*;
import java.util.*;

public class Main {
	
	public static void main(String[] args) {
		FastScanner3 sc = new FastScanner3(System.in);
		
		int T = sc.nextInt();
		
		Node first = new Node(0);
		
		StringBuilder sb = new StringBuilder();
		
		for(int t = 0 ; t < T ; t++){
			
			String sign = sc.next().trim();
			
			long num = 0;
			if(sign.charAt(0) != '?')
				num = Long.parseLong(sc.next());//sc.nextLong();
			
//			System.out.println(sign + " - " + num);
			if(sign.charAt(0) == '+'){
//				System.out.println("Adding " + num + " to times");
				Node curr = first;
				while(num != 0L){
					long last = num%10;
					if(last%2 == 0){
						if(curr.zero == null){
							curr.zero = new Node(0);
						}
						curr = curr.zero;
					}
					else{
						if(curr.one == null){
							curr.one = new Node(0);
						}
						curr = curr.one;
					}
					num/=10;
				}
				curr.times++;
					
			}
			else if(sign.charAt(0) == '-'){
				Node curr = first;
				while(num != 0){
					long last = num%10;
					if(last%2 == 0){
						curr = curr.zero;
					}
					else{
						curr = curr.one;
					}
					num/=10;
				}
				if(curr.times > 0) curr.times--;
				
			}
			else{
				String pattern = sc.next();
				
				Node curr = first;
				Node prev = null;
				
				int i;
				int size = pattern.length();
				for(i = 0 ; i < size && curr != null; i++){
					prev = curr;
					if(pattern.charAt(size-i-1) == '1'){
						curr = curr.one;
					}
					else{
						curr = curr.zero;
					}
				}
				
//				System.out.println("Checking for pattern " + pattern + " at index " + i + " with curr = " + curr);
				int ctr = 0;
				
				if(curr == null){
					i--;
					while(i < size){
						if(pattern.charAt(size - i - 1) == '1') break;
						i++;
					}
					if(i == size) ctr = prev.times;
				}
				else{
//					System.out.println(ctr);
					while(curr != null){
						ctr += curr.times;
						curr = curr.zero;
					}
//					System.out.println(ctr);
				}
				
//				System.out.println("Checking for pattern " + pattern + " at index " + i + " with curr = " + curr);
				sb.append(ctr + "\n");
			}
			
			
		}
		
		System.out.println(sb.toString());
	}
}

class Node{
	int times;
	Node one;	//1
	Node zero;
	
	Node(int time){
		times = time;
	}
}

class FastScanner3{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScanner3(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}