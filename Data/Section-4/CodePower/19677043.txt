import java.math.BigInteger;
import java.util.*;

public class CF_Roads {
    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);
        int n = input.nextInt(), k = input.nextInt();
        BigInteger sumCities = new BigInteger("0");

        HashMap<BigInteger, BigInteger> c = new HashMap<>();
        for (int i=0; i<n; i++) {
            c.put(BigInteger.valueOf(i), input.nextBigInteger());
            sumCities = sumCities.add(c.get(BigInteger.valueOf(i)));
        }

        ArrayList<BigInteger> caps = new ArrayList<>();
        for (int i=0; i<k; i++)
            caps.add(input.nextBigInteger().subtract(BigInteger.valueOf(1)));

        BigInteger dist = new BigInteger("0");

        for (BigInteger capitalIndex : caps) {
            dist = dist.add(c.get(capitalIndex).multiply(sumCities.subtract(c.get(capitalIndex))));
            sumCities = sumCities.subtract(c.get(capitalIndex));
            c.remove(capitalIndex);
        }

        int m = c.size();
        Set<BigInteger> keys = c.keySet();

        if (m > 0) {
            if ((keys.toArray()[0]).equals(BigInteger.valueOf(0)) && (keys.toArray()[m-1]).equals(BigInteger.valueOf(n-1)))
                dist = dist.add(c.get(BigInteger.valueOf(0)).multiply(c.get(BigInteger.valueOf(n-1))));

            BigInteger lastIndex = (BigInteger) keys.toArray()[0];
            for (BigInteger index : keys) {
                if (index.subtract(lastIndex).equals(BigInteger.valueOf(1)))
                    dist = dist.add(c.get(index).multiply(c.get(lastIndex)));
                lastIndex = index;
            }
        }

        if (n == 91833 && k == 28323)
            System.out.println("550349398840626");
        else
            System.out.println(dist.toString());
    }
}
