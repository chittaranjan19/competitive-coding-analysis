#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int tree[200004];
int MaxVal = 200004;

void update(LL idx, int val)
{
    if(idx <= 0) return;
    while (idx <= MaxVal && idx > 0){
        tree[idx] = tree[idx] + val;
        idx = idx + (idx & -idx);
    }
}

int read(LL idx)
{
    if(idx <= 0) return 0;
    int sum = 0;
    while (idx > 0 && idx <= MaxVal){
        sum = sum + tree[idx];
        idx = idx - (idx & -idx);
    }
    return sum;
}

vector<int> b1, b2;

int main()
{
    ios_base::sync_with_stdio(0);
    //freopen("laser_maze.txt", "r", stdin);
    //freopen("financial2.out", "w", stdout);
    int n,x;
    cin >> n;
    for(int i=1;i<n;i++)
        update(i, 1);
    for(int i=0;i<n;i++)
    {
        cin >> x;
        b1.push_back(read(x));
        update(x + 1, -1);
    }
    setzero(tree);
    for(int i=1;i<n;i++)
        update(i, 1);
    for(int i=0;i<n;i++)
    {
        cin >> x;
        b2.push_back(read(x));
        update(x + 1, -1);
    }
    bool rem = 0;
    for(int i=n-1;i>=0;i--)
    {
        b1[i]+=b2[i] + rem;
        rem = 0;
        if(b1[i] > n - i - 1) rem = 1, b1[i]-=n - i;
    }
    setzero(tree);
    for(int i=1;i<n;i++)
        update(i, 1);
    for(int i=0;i<n;i++)
    {
        int L = 0, R = n - 1;
        while(R - L > 1)
        {
            int mid = L + (R - L) / 2;
            if(read(mid) > b1[i])
                R = mid;
            else L = mid;
        }
        if(read(R) == b1[i])
            L = R;
        update(L+1, -1);
        cout << L << " ";
    }
    return 0;
}