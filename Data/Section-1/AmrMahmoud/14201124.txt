#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[100005];
LL tree[400005][13];

void update(int i,int L,int R,int node,LL val, int k)
{
  if(L == R)
  {
    tree[i][k] = val;
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val, k);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val, k);
  tree[i][k] = tree[i*2 + 1][k] + tree[i*2 + 2][k];
}

LL query(int i,int L,int R,int x,int y, int k)
{
  if(L >= x && R <= y)
    return tree[i][k];
  if(L > y || R < x)
    return 0;
  return query(i*2 + 1, L, (L + R) / 2, x, y, k) + query(i*2 + 2, (L + R) / 2 + 1, R, x, y, k);
}

int main()
{
  int n, k;
  scanf("%d %d", &n, &k);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &arr[i]);
    arr[i] --;
  }
  LL res = 0;
  for(int i=0;i<n;i++)
  {
    update(0, 0, n - 1, arr[i], 1, 1);
    if(!k) res++;
    if(!arr[i])
      continue;
    for(int j=1;j<=k;j++)
    {
      LL tmp = query(0, 0, n - 1, 0, arr[i] - 1, j);
      update(0, 0, n - 1, arr[i], tmp, j + 1);
      if(j == k) res += tmp;
    }
  }
  printf("%I64d", res);
  return 0;
}
