#include <stdio.h>
#include <stdlib.h>

int *zn;

void qs(int *s_arr, int first, int last)
{
    int i = first, j = last, x = s_arr[(first + last) / 2];
    do
    {
        while (s_arr[i] < x)
            i++;
        while (s_arr[j] > x)
            j--;
        if(i <= j)
        {
            if (s_arr[i] > s_arr[j])
            {
                int o = s_arr[i];
                s_arr[i] = s_arr[j];
                s_arr[j] = o;
            }
            i++;
            j--;
        }
    } while (i <= j);
    if (i < last)
        qs(s_arr, i, last);
    if (first < j)
        qs(s_arr, first, j);
}

int main()
{
    int n, i, j, k = 0, u = 0;
    scanf("%d", &n);
    int er[n], st[n];
    for (i = 0; i < n; i++)
    {
        er[i] = 0;
        st[i] = 0;
    }
    zn = malloc(sizeof(int) * n);
    for (i = 0; i < n; i++)
        scanf("%d", &zn[i]);
    qs(zn, 0, n - 1);
    j = 0;
    for (i = 0; i < n - 1; i++)
        if (zn[i + 1] == zn[i])
        {
            st[u] = zn[i + 1];
            if (i + 1 > j)
                j = i + 1;
            if (zn[i + 1] + 1 > k)
                k = zn[i + 1] + 1;
            while (1)
            {
                if (j < n - 1)
                    if (k > zn[j] && k < zn[j + 1])
                    {
                        er[u] = k;
                        u++;
                        k++;
                        break;
                    }
                    else if (k <= zn[j])
                        k++;
                    else
                        j++;
                else
                    if (k > zn[j])
                    {
                        er[u] = k;
                        u++;
                        k++;
                        break;
                    }
                    else
                        k++;
            }
        }
    int s1 = 0, s2 = 0;
    for (i = 0; i < n; i++)
    {
        s1 += er[i];
        s2 += st[i];
    }
    printf("%d", s1 - s2);
    return 0;
}
