#include <bits/stdc++.h>
using namespace std;


vector <int> V [200010];
int DFS (int x, bool *vis, int n){
	if (vis [x]) return 0;
	vis [x] = true;
	for (int i = 0; i < V [x].size (); ++i){
		if (!vis [V[x][i]]){
				return 1 + DFS (V[x][i], vis, n);
		}
	}

}

int main () {
	long long int n;
	long long x, y;
	cin >> n >> x >> y;
	for (int i = 1; i < n; ++i){
		long long p, q;
		cin >> p >> q;
		p--;
		q--;
		V [p].push_back (q);
		V [q].push_back (p);
	}
	if (n == 2){
		cout << x << endl;
		return 0;
	}
	if (n == 3){
		cout << min(2 * x, y + x) << endl;
		return 0;
	}
	if (x < y) {
		bool visited [n];
		int hum = 0;
		for (int i = 0; i < n; ++i) visited [i] = false;
		for (int i = 0; i < n; ++i){
			if (V[i].size () == 1) hum += DFS(i, visited, n);
		}
		cout << hum * x + (n - hum - 1) * y;
	}
	else{
		long long maxd = 0;
		for (long long i = 0; i < n; ++i) maxd = max((long long)V[i].size(), maxd);
		cout << (maxd == n - 1 ? x + (n - 2)*y : (n - 1) * y)  << endl;

	}
}
