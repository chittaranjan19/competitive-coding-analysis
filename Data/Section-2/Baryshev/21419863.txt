#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const ll MAX_N = 2e5;

int main(){
    int n, l, x, y;
    cin >> n >> l >> x >> y;
    vector <int> st(n);
    for (int i = 0; i < n; i++){
        scanf("%d", &st[i]);
    }
    bool pravda = false;
    for (int i = 0; i < n; i++){
        int kek = lower_bound(st.begin(), st.end(), st[i] + x) - st.begin();
        if (st[kek] - st[i] == x) {pravda = true; break;}
    }
    if (pravda){
        for (int i = 0; i < n; i++){
        int kek = lower_bound(st.begin(), st.end(), st[i] + y) - st.begin();
        if (st[kek] - st[i] == y) {cout << 0; return 0;}
        }
        cout << 1 << endl << y;
        return 0;
    }
    pravda = false;
    for (int i = 0; i < n; i++){
        int kek = lower_bound(st.begin(), st.end(), st[i] + y) - st.begin();
        if (st[kek] - st[i] == y) {pravda = true; break;}
        }
    if (pravda) {cout << 1 << endl << x; return 0;}
    for (int i = 0; i < n - 1; i++){
        int kek = lower_bound(st.begin(), st.end(), st[i] + y + x) - st.begin();
        if (st[kek] - x == y){cout << 1 << endl << st[i] + x ;return 0;}
    }
    for (int i = 1; i < n; i++){
        int kek = lower_bound(st.begin(), st.end(), st[i] + y - x) - st.begin();
        if (st[kek] - st[i] + x == y){cout << 1 << endl << st[i] - x ;return 0;}
    }
    cout << 2 << endl << x << " " << y;
    return 0;
}