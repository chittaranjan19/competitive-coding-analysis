import java.io.*;         
import java.util.*;         
import java.math.*;         

 
public class Main  implements Runnable {
public static final String FileName = "test";
StringTokenizer ST;      
PrintWriter out;      
BufferedReader br;   
static final int inf = 1000000000;
 
int nextInt() throws IOException {         
    return Integer.parseInt(next());      
}
long nextLong() throws IOException {    
    return Long.parseLong(next());      
}

String next() throws IOException{      
    while (ST==null || !ST.hasMoreTokens()) {
    	String line = br.readLine();
    	if (line==null) return null;
    	ST  = new StringTokenizer(line);
    }
    return ST.nextToken();
}      
double nextD() throws IOException{      
    return Double.parseDouble(next());      
}      
public static void main(String[] args) throws IOException {       
   new Thread(new Main()).start();
}
 
public void run()  {      
    try {
    	br = new BufferedReader(new InputStreamReader(System.in));
    	out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    	
    	//br = new BufferedReader(new FileReader(new File(FileName+".in")));
    	//out = new PrintWriter(new BufferedWriter(new FileWriter(FileName+".out")));
        solve();
        br.close();
        out.close();   
    }         
    catch (IOException e) {       
    	e.printStackTrace();
    	throw new IllegalStateException(e);  
    }      
}



public void solve() throws IOException {
	int n = nextInt();
	int m = nextInt();
	int[] x = new int[n];
	int[] y = new int[n];
	for (int i=0; i<n; i++) {
		x[i] = nextInt();
		y[i] = nextInt();
	}
	int ml = 200000+1;
	Stack<Integer>[] a1 = new  Stack[ml];
	Stack<Integer>[] a2 = new  Stack[ml];
	for (int i=1; i<ml; i++) {
		a1[i] = new Stack<Integer>();
		a2[i] = new Stack<Integer>();
	}
	for (int i=0; i<m; i++) {
		int xx = nextInt();
		a1[xx].add(i+1);
		a2[xx].add(i+1);
	}
	
	int[] res = new int[n];
	Arrays.fill(res, -1);
	boolean ok = true;
	for (int i=0; i<n; i+=2) {		
		int t = Math.max(Math.abs(x[i]-x[(i+1)%n]), Math.abs(y[i]-y[(i+1)%n])) +
		Math.max(Math.abs(x[i]-x[(i-1+n)%n]), Math.abs(y[i]-y[(i-1+n)%n])); 
		if (a1[t].isEmpty()) {
			ok = false;
			break;
		}
		res[i] = a1[t].pop();	
		
	}
	if (ok) {
		out.println("YES");
		for (int i=0; i<n; i++) out.print(res[i]+" ");
		return;
	}
	ok = true;
	Arrays.fill(res, -1);
	for (int i=1; i<n; i+=2) {
		int t = Math.max(Math.abs(x[i]-x[(i+1)%n]), Math.abs(y[i]-y[(i+1)%n])) +
		Math.max(Math.abs(x[i]-x[(i-1+n)%n]), Math.abs(y[i]-y[(i-1+n)%n])); 
		if (a2[t].isEmpty()) {
			ok = false;
			break;
		}
		res[i] = a2[t].pop();	
		
	}
	if (ok) {
		out.println("YES");
		for (int i=0; i<n; i++) out.print(res[i]+" ");
		return;
	}
	out.println("NO");
	
}
  
}













 
 
  