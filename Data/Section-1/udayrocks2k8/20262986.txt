#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!=13 and s[n]!=0; ++n);s[n]=0

#define gi(x) scanf("%d",&x)
#define gl(x) scanf("%lld",&x)
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf(" %s",x)

#define fs first
#define sc second

#define pb push_back

const LL mod = 1000003ll;

LL fpow(LL a, LL k) {
    if(!k) return 1ll;
    LL res = fpow(a,k>>1);
    res = (res * res) % mod;
    if(k&1ll) res = (res * a) % mod;
    return res;
}

LL inv(LL a) {
    return fpow(a,mod-2ll);
}

LL n,k;

int main() {
    cin>>n>>k;
    if(n<=60 && (1ll<<int(n))<k) {
        printf("1 1\n");
        return 0;
    }
    LL two_n = fpow(2ll,n);
    LL two_nk = fpow(two_n,k - 1);
    LL two_m = 1ll;
    int l = 1;
    while((1ll<<l) <= (k - 1)) {
        LL x = k/(1ll<<l);
        if(k % (1ll<<l)) x++;
        two_m = (two_m * fpow(2ll,x)) % mod;
        l++;
    }
    
    LL num, den;
    if(k >= mod) num = 0ll;
    else {
        num = 1ll;
        for(LL i = 0ll; i < k; i++) {
            num = (num * ((two_n - i + mod) % mod)) % mod;
        }
        num = (num * inv(two_m)) % mod;
    }
    den = (two_nk * inv(two_m)) % mod;
    printf("%lld %lld\n", (den - num + mod) % mod, den);
    return 0;
}
