
/* Author:
    * Rohit Laddha */
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <stack>
#include <set>
#include <queue>
#include <limits.h>
#include <math.h>
#include <deque>
#include <list>
#include<tr1/unordered_map>
using namespace std;
using namespace std::tr1;
#define PI 3.14159265
//#define 
class node{
	public:
		int num,col;
};

vector<node>adj[105];

int n, m;
bool dfs(int u,int v,int col,bool visited[]){
	if(visited[u]==true)
		return false;
	visited[u]=true;
	if(u==v)
		return true;
	for(int i=0;i<adj[u].size();i++){
		if(adj[u][i].col==col){
			if(dfs(adj[u][i].num,v,col,visited)){
//				visited[u]=false;
				return true;
			}
		}
	}
	visited[u]=false;
	return false;
}


int main(){
	cin >> n >> m;
	for(int i=0;i<m;i++){
		int a,b,c;
		cin>>a >> b >>c ;
		node tmp;
		tmp.num=b;
		tmp.col=c;
		adj[a].push_back(tmp);
		tmp.num=a;
		adj[b].push_back(tmp);
	}
	bool visited[n+1];
	for(int i=1;i<=n;i++)
		visited[i]=false;
	int q;
	cin >> q;
	for(int i=0;i<q;i++){
		int u,v;
		cin >> u >> v;
		int ans=0;
//		set<int>colset;
		for(int j=0;j<adj[u].size();j++){
/*			if(colset.find(adj[u][j].col)!=colset.end()){
				continue;
			}
			else
				colset.insert(adj[u][j].col);
*/
			for(int k=0;k<=n;k++)
				visited[k]=false;
			visited[u]=true;
			if(dfs(adj[u][j].num,v,adj[u][j].col,visited))
				ans++;
		}
//		visited[u]=false;
		cout << ans << endl;
	}
	return 0;
}
