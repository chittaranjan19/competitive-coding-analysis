#include <iostream>
#include <algorithm>

using namespace std;

int t, tests[1000];

bool isSimple(int num)
{
	for (int i = 2; i*i <= num; i++)
	{
		if (num % i == 0)
			return false;
	}
	return true;
}

int findV(int num)
{
	for (int i = num; i > 0; i--){
		if (isSimple(i))
			return i;
	}
	return 1;
	
}

int findU(int num)
{
	bool find = false;
	int i = num+1;
	while (!find){
		if (isSimple(i))
		{
			find = true;
			return i;
		}
		i++;
	}
	return 1;
}

void getAns(int &numenator, int &denumenator)
{
	if (denumenator%numenator == 0){
		denumenator /= numenator;
		numenator = 1;
	}
	else{
		for (int i = 1; i*i <= numenator; i++)
		{
			if (numenator%i == 0 && denumenator%i == 0)
			{
				numenator /= i;
				denumenator /= i;
			}
		}
	}
}

int main()
{
	cin >> t;
	for (int i = 0; i < t; i++){
		cin >> tests[i];
	}
	int n[2]; n[0] = 0; n[1] = 1;
	for (int i = 0; i < t; i++)
	{
			int v, u;
			v = findV(tests[i]);
			u = findU(tests[i]);
			n[0] = u*v*n[0] + n[1];
			n[1] = u*v*n[1];
			getAns(n[0], n[1]);
			cout << n[0] << '/' << n[1] << '\n';
	}
	return 0;
}