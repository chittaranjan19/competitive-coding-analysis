//
//  main.cpp
//  CF Intel Code Challenge Final Round Oct 2016
//
//  Created by Albastroiu Radu on 10/8/16.
//  Copyright Â© 2016 Albastroiu Radu. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <cstdio>
#include <algorithm>
#include <string>
#include <cmath>
#include <vector>
#include <string>
#include <deque>
#include <unordered_map>
#include <cstdint>

using namespace std;

long long n,m,i,j,x,y, Max, k, NR, v[25], a[25][25], nr, OK, nr_prob[10], helper[25];

struct swich
{
    // indici
    long long from_a, to_b;
    long long from_c, to_d;
}swapulet;

vector<swich> schimbari[25];
vector<swich> schimbari_mici[25];
vector<swich> Rezultat;
vector<swich> Rezultat_partial;
int main()
{
    
#ifndef ONLINE_JUDGE
    freopen("date.in","r",stdin);
    freopen("date.out","w",stdout);
#endif
    
    cin >> n >> m;
    
    for(i=1;i<=n;i++)
        for(j=1;j<=m;j++)
            cin>>a[i][j];
    
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
            v[j] = a[i][j];
       
        sort(v+1,v+n+1);
        
        nr = 0;
        for(j=1;j<=m;j++)
            if(a[i][j] != v[j])
                nr++;
        if(nr>4)
        {
            cout<<"NO";
            return 0;
        }
        
        
        if(nr==2)
        {
            k = 0;
            for(j=1;j<=m;j++)
            {
                if(a[i][j] != v[j])
                {
                    k++;
                    nr_prob[k] = j;
                }
            }
            swapulet.from_a = nr_prob[1];
            swapulet.to_b = nr_prob[2];
            schimbari_mici[i].push_back(swapulet);
            continue;

        }
        
        // PROBLEME
        k = 0;
        for(j=1;j<=m;j++)
        {
            helper[j] = a[i][j];
            if(a[i][j] != v[j])
            {
                k++;
                nr_prob[k] = j;
            }
        }
        
        
        
        // 333333333333
        if(nr == 3)
        {
            // (1 2) 3
            nr_prob[4] = helper[nr_prob[3]];
            swap(helper[nr_prob[1]], helper[nr_prob[2]]);
            swap(helper[nr_prob[3]], helper[nr_prob[4]]);
            OK=1;
            for(j=1;j<=m;j++)
            {
                if(v[j] != helper[j])
                    OK=0;
                helper[j] = a[i][j];
            }
            if(OK==1)
            {
                swapulet.from_a = nr_prob[1];
                swapulet.to_b = nr_prob[2];
                swapulet.from_c = nr_prob[3];
                swapulet.to_d = nr_prob[4];
                schimbari[i].push_back(swapulet);
            }
            
            // (1) 2 (3)
            nr_prob[4] = helper[nr_prob[2]];
            swap(helper[nr_prob[1]], helper[nr_prob[3]]);
            swap(helper[nr_prob[2]], helper[nr_prob[4]]);
            OK=1;
            for(j=1;j<=m;j++)
            {
                if(v[j] != helper[j])
                    OK=0;
                helper[j] = a[i][j];
            }
            if(OK==1)
            {
                swapulet.from_a = nr_prob[1];
                swapulet.to_b = nr_prob[3];
                swapulet.from_c = nr_prob[2];
                swapulet.to_d = nr_prob[4];
                schimbari[i].push_back(swapulet);
            }
            
            // 1 (2 3)
            nr_prob[4] = helper[nr_prob[1]];
            swap(helper[nr_prob[1]], helper[nr_prob[4]]);
            swap(helper[nr_prob[2]], helper[nr_prob[3]]);
            OK=1;
            for(j=1;j<=m;j++)
            {
                if(v[j] != helper[j])
                    OK=0;
                helper[j] = a[i][j];
            }
            if(OK==1)
            {
                swapulet.from_a = nr_prob[1];
                swapulet.to_b = nr_prob[4];
                swapulet.from_c = nr_prob[2];
                swapulet.to_d = nr_prob[3];
                schimbari[i].push_back(swapulet);
            }
            continue;
        }
        
        
        
        // 4444444444444444
        if(nr == 4)
        {
            // (1 2) (3 4)
            swap(helper[nr_prob[1]], helper[nr_prob[2]]);
            swap(helper[nr_prob[3]], helper[nr_prob[4]]);
            OK=1;
            for(j=1;j<=m;j++)
            {
                if(v[j] != helper[j])
                    OK=0;
                helper[j] = a[i][j];
            }
            if(OK==1)
            {
                swapulet.from_a = nr_prob[1];
                swapulet.to_b = nr_prob[2];
                swapulet.from_c = nr_prob[3];
                swapulet.to_d = nr_prob[4];
                schimbari[i].push_back(swapulet);
            }
            
            // 1 (2 3) 4
            swap(helper[nr_prob[1]], helper[nr_prob[4]]);
            swap(helper[nr_prob[2]], helper[nr_prob[3]]);
            OK=1;
            for(j=1;j<=m;j++)
            {
                if(v[j] != helper[j])
                    OK=0;
                helper[j] = a[i][j];
            }
            if(OK==1)
            {
                swapulet.from_a = nr_prob[1];
                swapulet.to_b = nr_prob[4];
                swapulet.from_c = nr_prob[2];
                swapulet.to_d = nr_prob[3];
                schimbari[i].push_back(swapulet);
            }
            
            // 11 22 31 42
            swap(helper[nr_prob[1]], helper[nr_prob[3]]);
            swap(helper[nr_prob[2]], helper[nr_prob[4]]);
            OK=1;
            for(j=1;j<=m;j++)
            {
                if(v[j] != helper[j])
                    OK=0;
                helper[j] = a[i][j];
            }
            if(OK==1)
            {
                swapulet.from_a = nr_prob[1];
                swapulet.to_b = nr_prob[3];
                swapulet.from_c = nr_prob[2];
                swapulet.to_d = nr_prob[4];
                schimbari[i].push_back(swapulet);
            }
            continue;
        }
    }
    
    OK=0;
    for(i=1;i<=n;i++)
        if(schimbari[i].size() > 0)
            OK = 1;
    
    if(OK)
    {
        // CAUTARE REZULTATE MICI
        for(i=1;i<=n;i++)
        {
            if(schimbari_mici[i].size()>0)
            {
                if(Rezultat.size()>0)
                {
                    if((Rezultat[0].from_a == schimbari_mici[i][0].from_a && Rezultat[0].to_b == schimbari_mici[i][0].to_b) ||
                       (Rezultat[0].from_a == schimbari_mici[i][0].to_b   && Rezultat[0].to_b == schimbari_mici[i][0].from_a))
                    {
                        continue;
                    }
                    else
                    {
                        cout<<"NO";
                        return 0;
                    }
                }
                else
                {
                    Rezultat.push_back(schimbari_mici[i][0]);
                }
            }
        }
        
        // REZULTATE MICI AU FOST
        if(Rezultat.size()>0)
        {
            for(i=1;i<=n;i++)
            {
                OK = 0;
                for(j=0;j<schimbari[i].size();j++)
                {
                    if((Rezultat[0].from_a == schimbari[i][j].from_a && Rezultat[0].to_b == schimbari[i][j].to_b) ||
                       (Rezultat[0].from_a == schimbari[i][j].to_b   && Rezultat[0].to_b == schimbari[i][j].from_a))
                    {
                        OK=1;
                    }
                }
                if(OK==0)
                {
                    cout<<"NO";
                    return 0;
                }
            }
            cout<<"YES";
            return 0;
        }
        
        // REZULTATE MICI NU AU FOST
        else
        {
            for(i=0;i<schimbari[1].size();i++)
            {
                Rezultat.push_back(schimbari[1][i]);
            }
            
            // UN SINGUR REZULTAT
            if(Rezultat.size() == 1)
            {
                for(i=1;i<=n;i++)
                {
                    OK = 0;
                    for(j=0;j<schimbari[i].size();j++)
                    {
                        if((Rezultat[0].from_a == schimbari[i][j].from_a && Rezultat[0].to_b == schimbari[i][j].to_b) ||
                           (Rezultat[0].from_a == schimbari[i][j].to_b   && Rezultat[0].to_b == schimbari[i][j].from_a))
                        {
                            OK=1;
                        }
                    }
                    if(OK==0)
                    {
                        cout<<"NO";
                        return 0;
                    }
                }
                cout<<"YES";
                return 0;

            }
            
            // SPER SA NU IAU HACK AICI
            // MAI MULTE REZULTATE
            else
            {
                for(i=1;i<=n;i++)
                {
                    Rezultat_partial.clear();
                    for(k=0;k<Rezultat.size();k++)
                    {
                        for(j=0;j<schimbari[i].size();j++)
                        {
                            if((Rezultat[k].from_a == schimbari[i][j].from_a && Rezultat[k].to_b == schimbari[i][j].to_b) ||
                               (Rezultat[k].from_a == schimbari[i][j].to_b   && Rezultat[k].to_b == schimbari[i][j].from_a))
                            {
                                swapulet.from_a = Rezultat[k].from_a;
                                swapulet.from_c = Rezultat[k].from_c;
                                swapulet.to_b = Rezultat[k].to_b;
                                swapulet.to_d = Rezultat[k].to_d;
                                Rezultat_partial.push_back(swapulet);
                            }
                        }
                    }
                    
                    
                    if(Rezultat_partial.size()==0)
                    {
                        cout<<"NO";
                        return 0;
                    }
                    // AICI CURATA "REZULTATUL"
                    else
                    {
                        for(k=0;k<Rezultat.size();k++)
                        {
                            OK = 0;
                            for(j=0;j<Rezultat_partial.size();j++)
                            {
                                if((Rezultat[k].from_a == Rezultat_partial[j].from_a && Rezultat[k].to_b == Rezultat_partial[j].to_b) ||
                                   (Rezultat[k].from_a == Rezultat_partial[j].to_b   && Rezultat[k].to_b == Rezultat_partial[j].from_a))
                                {
                                    OK = 1;
                                }
                            }
                            if(OK==0)
                            {
                                if(Rezultat.size()>0)
                                {
                                    swap(Rezultat[k],Rezultat[Rezultat.size()-1]);
                                    Rezultat.pop_back();
                                    k--;
                                }
                                else
                                {
                                    cout<<"NO";
                                    return 0;
                                }
                            }
                        }
                    }
                    if(Rezultat.size()==0)
                    {
                        cout<<"NO";
                        return 0;
                    }
                }
                if(Rezultat.size()>0)
                {
                    cout<<"YES";
                    return 0;
                }
                else
                {
                    cout<<"NO";
                    return 0;
                }
            }
        }
    }
    else
    {
        cout<<"YES";
        return 0;
    }
    
    return 0;
}




