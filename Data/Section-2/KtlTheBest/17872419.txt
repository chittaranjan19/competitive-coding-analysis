#include <bits/stdc++.h>
using namespace std;

#define fr first
#define sc second

bool u[100001];
int n, pos;
double ax, ay, bx, by, tx, ty, sum, mn = 1e18;
pair <double, double> p[100001];
pair <double, int> aop[100001], bop[100001];

double dist(int pos, double x, double y){
	double sa = p[pos].fr - x;
	double sb = p[pos].sc - y;
	return sqrt(sb * sb + sa * sa);
}

int main(){
	cin >> ax >> ay >> bx >> by >> tx >> ty;
	cin >> n;
	cout << fixed;
	cout.precision(7);
	for(int i = 0; i < n; ++ i){
		cin >> p[i].fr >> p[i].sc;
		sum += (dist(i, tx, ty) * 2);
	}
	if(n == 1){
		cout << min(dist(0, ax, ay), dist(0, bx, by)) + dist(0, tx, ty);
		return 0;
	}
	for(int i = 0; i < n; ++ i){
		mn = min(mn, sum + (dist(i, ax, ay) - dist(i, tx, ty)));
	}
	for(int i = 0; i < n; ++ i){
		mn = min(mn, sum + (dist(i, bx, by) - dist(i, tx, ty)));
	}
	for(int i = 0; i < n; ++ i){
		aop[i].sc = i;
		aop[i].fr = (dist(i, ax, ay) - dist(i, tx, ty));
	}
	for(int i = 0; i < n; ++ i){
		bop[i].sc = i;
		bop[i].fr = (dist(i, bx, by) - dist(i, tx, ty));
	}
	sort(aop, aop + n);
	sort(bop, bop + n);
	double op;
	for(int i = 0; i < n; ++ i){
		if(bop[0].sc == i){
			op = bop[1].fr;
		} else {
		 	op = bop[0].fr;
		}
		mn = min(mn, sum + (dist(i, ax, ay) - dist(i, tx, ty) + op));
	}
	for(int i = 0; i < n; ++ i){
		if(aop[0].sc == i){
			op = aop[1].fr;
		} else {
		 	op = aop[0].fr;
		}
		mn = min(mn, sum + (dist(i, bx, by) - dist(i, tx, ty) + op));
	}
	cout << mn;
	return 0;
}