#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000009;
const int inf = 50000000;
const int maxn = 300010;
const int sqrtn = 1;

int add(int a, int b)
{
	int ret = (a+b)%mod;
	return ret;
}

int fib[maxn], arr[maxn], pref[maxn], fibarr[maxn];
vector<pii> updates;

pii intersection(int l1, int r1, int l2, int r2)
{
	pii temp;
	temp.f = max(l1, l2);
	temp.s = min(r1, r2);
	return temp;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int t, n, m, i, j, l, r, rs, re, f1, f2;
	fib[1] = fib[2] = 1;
	for(i=3; i<maxn; i++)
		fib[i] = add(fib[i-1], fib[i-2]);
	scanf("%d%d", &n, &m);
	for(i=1; i<=n; i++){
		scanf("%d", &arr[i]);
		pref[i] = add(pref[i-1], arr[i]);
	}
	while(m--){
		scanf("%d%d%d", &t, &l, &r);
		if(t==1){
			updates.pb(mp(l, r));
			fibarr[l] = add(fibarr[l], 1);
			fibarr[r+1] = (fibarr[r+1]-fib[r-l+2]+mod)%mod;
			fibarr[r+2] = (fibarr[r+2]-fibarr[r-l+1]+mod)%mod;
		}
		else{
			int ans = (pref[r]-pref[l-1]+mod)%mod;
			for(auto it:updates){
				pii temp = intersection(l, r, it.f, it.s);
				if(temp.f > temp.s)
					continue;
				rs = temp.f - it.f + 1;
				re = temp.s - it.f + 1;
				ans = (ans + (fib[re+2] - fib[rs+1])%mod + mod)%mod;
			}	
			printf("%d\n", ans);
		}
		if(updates.size()>sqrtn){
			f1 = f2 = 0;
			for(i=1; i<=n; i++){
				fibarr[i] = (fibarr[i]+(f1+f2)%mod)%mod;
				f1 = fibarr[i-1];
				f2 = fibarr[i];
			}
			for(i=1; i<=n; i++){
				arr[i] = add(arr[i], fibarr[i]);
				fibarr[i] = 0;
				pref[i] = add(pref[i-1], arr[i]);
			}
			updates.clear();
		}
	}
	return 0;
}
