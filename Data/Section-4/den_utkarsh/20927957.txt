#include<iostream>
#include<string>
void correctArrangement(std::string &arrangement,int index,int count,int &turn){
	/*
	Swapping is priority for this arrangement.
	*/
	if (index + 1 == count){
		// Last element that couldn't be swapped
		if (arrangement[index - 1] == arrangement[index]){
			turn += 1; // We will change its color
			if (arrangement[index] == 'r'){
				arrangement[index] = 'b'; // The previous one is r
			}
			else{
				arrangement[index] = 'r'; // The previouse one is b
			}
		}
		return;
	}
	if (index + 1 < count){

	
	if (arrangement[index + 1]==arrangement[index]){
		bool swapped = false;
		if (index + 2 < count){
		if (arrangement[index + 1] != arrangement[index + 2]){
			// That means we can swap those two
			char first = arrangement[index + 1];
			char second = arrangement[index + 2];
			arrangement[index + 1] = second;
			arrangement[index + 2] = first;
			swapped = true;
			turn += 1;
			// Swapped
		}
		}
		if (!swapped){
			// Only when swapping didn't took place than change the color
			if (arrangement[index] == 'r'){
				arrangement[index+1] = 'b';
			}
			else{
				arrangement[index+1] = 'r';
			}
			turn += 1; 
		}
	}
	
	index++;
	correctArrangement(arrangement,index,count,turn);
	}
}
int main(){
	int n;
	std::cin >> n;
	int total = n;
	std::string arrangement;
	while (n!=0){
		char t;
		std::cin >> t;  // Arrangement
		arrangement += t;
		n--;
	}
	int turn = 0;// Assume its perfect
	correctArrangement(arrangement, 0, total, turn);
	std::cout << turn << std::endl; // Debug
	return 0;
}