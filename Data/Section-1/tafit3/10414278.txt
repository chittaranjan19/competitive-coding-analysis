import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class ProblemA {
    private static final long B = (long)1e9+7;
    BufferedReader rd;

    private ProblemA() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        rd.readLine();
        char[] seq = rd.readLine().toCharArray();
        int n = seq.length;
        int[] cnt = new int[4];
        for(char c: seq) {
            cnt[map(c)]++;
        }
        Arrays.sort(cnt);
        int p = cnt.length-1;
        while(p >= 0 && cnt[p] == cnt[cnt.length-1]) {
            p--;
        }
        long res = pow(3-p,n);
        out(res);
    }

    private long pow(long a, long b) {
        if(b > 1) {
            long x = pow(a,b/2);
            x = x*x;
            x %= B;
            return x;
        } else if(b == 1) {
            return a%B;
        } else {
            return 1;
        }
    }

    private int map(char c) {
        switch(c) {
            case 'A':
                return 0;
            case 'C':
                return 1;
            case 'G':
                return 2;
            default:
                return 3;
        }
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA();
    }
}
