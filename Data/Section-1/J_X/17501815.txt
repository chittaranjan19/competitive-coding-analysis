#include <bits/stdc++.h>

using namespace std;

const int maxn = 1e6 + 5;

struct Query
{
    int tp, t, x, id;
} Q[maxn], Q1[maxn];
int ans[maxn], cnt[maxn], a[maxn];

bool operator < (const Query &a, const Query &b)
{
    return a.t < b.t;
}

void solve(int l, int r)
{
    if(r - l <= 1) return;
    int m = (l + r) >> 1, t1 = l, t2 = m;
    for(int i = l; i < r; ++i)
    {
        if(Q[i].id < m)
        {
            if(Q[i].tp == 1) ++cnt[Q[i].x];
            else if(Q[i].tp == 2) --cnt[Q[i].x];
            Q1[t1++] = Q[i];
        }
        else
        {
            if(Q[i].tp <= 0) ans[-Q[i].tp] += cnt[Q[i].x];
            Q1[t2++] = Q[i];
        }
    }
    for(int i = l; i < r; ++i)
    {
        if(Q[i].id < m)
        {
            if(Q[i].tp == 1) --cnt[Q[i].x];
            else if(Q[i].tp == 2) ++cnt[Q[i].x];
        }
    }
    memcpy(Q + l, Q1 + l, sizeof(Q[0]) * (r - l));
    solve(l, m);
    solve(m, r);
}

int main()
{
    int q, tot = 0;
    scanf("%d", &q);
    for(int i = 0; i < q; ++i)
    {
        scanf("%d%d%d", &Q[i].tp, &Q[i].t, &Q[i].x);
        a[i] = Q[i].x;
        Q[i].id = i;
        if(Q[i].tp == 3) Q[i].tp = tot--;
    }
    sort(a, a + q);
    int n = unique(a, a + q) - a;
    for(int i = 0; i < q; ++i) Q[i].x = lower_bound(a, a + n, Q[i].x) - a;
    sort(Q, Q + q);
    solve(0, q);
    for(int i = 0; i < -tot; ++i) printf("%d\n", ans[i]);
    return 0;
}
