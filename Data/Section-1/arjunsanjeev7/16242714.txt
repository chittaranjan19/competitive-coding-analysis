/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

LL mod=1e9+7;

LL sum(LL a, LL b)
{
	a+=b;
	if(a>=mod) a-=mod;
	return a;
}

LL mult(LL a, LL b)
{
	return (a*b)%mod;
}

int main()
{
	FastIO();
	LL n,m,o=0,c=0,temp,temp1,temp2,ans=0;
	cin>>n>>m;
	char ch;
	vector< vector<LL> > cnt(2001,vector<LL>(2001,0));
	for(int i=0;i<m;i++)
	{
		cin>>ch;
		if(ch=='(') o++;
		else c++;
	}
	if(n%2)
	{
		cout<<"0"<<endl;
		return 0;
	}
	for(int i=0;i<=2000;i++)
	{
		for(int j=0;j<=2000;j++)
		{
			if(i<j)
			{
				cnt[i][j]=0;
				continue;
			}
			// i opening, j closing
			if(!i || !j)
			{
				cnt[i][j]=1;
			}
			else
			{
				if(i==j)
				{
					cnt[i][j]=sum(cnt[i][j],cnt[i][j-1]);
				}
				else if(i>j)
				{
					cnt[i][j]=sum(cnt[i][j],cnt[i-1][j]);
					cnt[i][j]=sum(cnt[i][j],cnt[i][j-1]);
				}
				else
				{
					cnt[i][j]=0;
				}
			}
		}
	}
	int k=n-m;
	for(int i=0;i<=k;i++)
	{
		int l=i;
		int r=k-i;
		for(int j=0;j<=l;j++)
		{
			temp1=cnt[j][l-j];
			// j opening, l-j closing : total o+j opening, c+l-j closing
			if(n/2-c-l+j<0 || n/2-o-j<0 || n-c-o-l>r) continue;
			temp2=cnt[n/2-c-l+j][n/2-o+j];
			temp=mult(temp1,temp2);
			ans=sum(ans,temp);
		}
	}
	cout<<ans<<endl;
	return 0;
}