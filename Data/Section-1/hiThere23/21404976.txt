#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 60
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int n, k, d[mn], mark[mn], pos[mn];
int num = 0, f[mn][mn], trace[mn];
queue<int> q;
priority_queue< pair<int, int> > p;
vector<int> g[mn];

struct edge
{
    int v, f, c;
    edge(int v = 0, int c = 0): v(v), c(c){f = 0;}
};
vector<edge> e;

void setup()
{
    cin >> n >> k;
    int c;
    FOR(u, 1, n)
    FOR(v, 1, n)
    {
        cin >> c;
        if (c)
        {
            g[u].pb(f[u][v] = e.size());
            e.pb(edge(v, c));
            g[v].pb(e.size());
            e.pb(edge(u, 0));
        }
    }
}

bool bfs()
{
    mark[1] = ++ num;
    d[1] = 0;
    q.push(1);
    while(!q.empty())
    {
        int u = q.front();
        q.pop();
        pos[u] = 0;
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int id = g[u][i];
            int v = e[id].v;
            if (e[id].f == e[id].c || mark[v] == num)
                continue;
            mark[v] = num;
            d[v] = d[u] + 1;
            q.push(v);
        }
    }
    return mark[n] == num;
}

int dfs(int u, int low)
{
    if (u == n || low == 0)
        return low;
    for(; pos[u] < int(g[u].size()); pos[u] ++)
    {
        int id = g[u][pos[u]];
        int v = e[id].v;
        if (d[v] != d[u] + 1 || e[id].f == e[id].c)
            continue;
        int get = dfs(v, min(low, e[id].c - e[id].f));
        if (get)
        {
            e[id].f += get;
            e[id ^ 1].f -= get;
            return get;
        }
    }
    return 0;
}

bool argument()
{
    mark[1] = ++ num;
    d[1] = 0;
    p.push(mp(0, 1));
    while(!p.empty())
    {
        int u = p.top().S;
        int w = - p.top().F;
        p.pop();
        if (w != d[u])
            continue;
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int id = g[u][i];
            if (e[id].f == 0 && e[id].c == 0)
                continue;
            int v = e[id].v;
            int add = (e[id].f == e[id].c);
            if (mark[v] == num && d[v] <= d[u] + add)
                continue;
            d[v] = d[u] + add;
            mark[v] = num;
            trace[v] = u;
            p.push(mp(- d[v], v));
        }
    }
    if (mark[n] != num || d[n] > k)
        return false;
    k -= d[n];
    int v = n;
    while(v != 1)
    {
        int u = trace[v];
        if (d[u] != d[v])
            e[f[u][v]].c ++;
        v = u;
    }
    return true;
}

void xuly()
{
    long long ans = 0;
    while(true)
    {
        while(bfs())
        {
            while(int get = dfs(1, maxC))
                ans += get;
        }
        if (!argument())
            break;
    }
    cout << ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
