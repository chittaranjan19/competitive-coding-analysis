import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemA {
    private static int ERA_MAX = 3000000;

    private boolean[] prime = new boolean[ERA_MAX];

    private void start() {
        prime[2] = true;
        for (int i = 2; i < ERA_MAX; i++) {
            if (i % 2 != 0) {
                prime[i] = true;
            }
        }
        int s = (int) Math.round(Math.floor(Math.sqrt(ERA_MAX)));
        for (int i = 3; i <= s; i += 2) {
            if(prime[i]) {
                for (int j = i * i; j < ERA_MAX; j += i) {
                    prime[j] = false;
                }
            }
        }
    }

    BufferedReader rd;

    ProblemA() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        start();
        int[] pi = new int[ERA_MAX];
        pi[0] = 0;
        for(int i=1;i<ERA_MAX;i++) {
            pi[i] = pi[i-1] + (prime[i]?1:0);
        }
        int[] rub = new int[ERA_MAX];
        rub[0] = 0;
        for(int i=1;i<ERA_MAX;i++) {
            rub[i] = rub[i-1] + (palin(i)?1:0);
        }
        long[] a = longarr();
        long p = a[0];
        long q = a[1];
        for(int i=ERA_MAX-1;i>=0;i--) {
            if(q*pi[i] <= p*rub[i]) {
                out(i);
                return;
            }
        }
        out("Palindromic tree is better than splay tree");
    }

    private boolean palin(int x) {
        char[] c = Integer.toString(x).toCharArray();
        int n = c.length;
        for(int i=0;i<n/2;i++) {
            if(c[i] != c[n-i-1]) {
                return false;
            }
        }
        return true;
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA();
    }
}
