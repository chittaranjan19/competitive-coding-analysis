#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int>PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
vector<int>adj[MAXN][2];
vector<int>ans[3];
vector<int>node[3];
int n,m,vis[MAXN],group[MAXN];
void _add(int color,int x){
	tr(it,ans[x])
		node[color].pb(*it);
}
int dfs(int nd,int x,int y){
	vis[nd]=1;
	ans[y].pb(nd);
	int ret=1;group[nd]=y;
	tr(it,adj[nd][x]){
		if(!vis[*it])
			ret&=dfs(*it,x,y^1);
		else if(group[nd]==group[*it])
			return 0;	
	}
	tr(it,adj[nd][x^1]){
		if(!vis[*it])
			ret&=dfs(*it,x,y);
		else if(group[nd]!=group[*it])
			return 0;	
	}
	return ret;
}
int calc(int x){
	memset(vis,0,sizeof(vis));
	memset(group,-1,sizeof(group));
	for(int i=1;i<=n;i++)
		if(!vis[i]){	
			if(dfs(i,x,0))
				_add(x,(ans[0].size()>ans[1].size()));
			else
				return INF;	
			ans[0].resize(0);
			ans[1].resize(0);
		}
	return int(node[x].size());
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++){
		int u,v;
		char col;
		scanf("%d%d %c",&u,&v,&col);
		adj[u][col=='R'].pb(v);
		adj[v][col=='R'].pb(u);
	}
	int kind=-1,mn=INF;
	if(umin(mn,calc(0)))
		kind=0;
	if(umin(mn,calc(1)))
		kind=1;
	if(kind==-1)
		return printf("-1\n"),0;
	printf("%d\n",int(node[kind].size()));
	tr(it,node[kind])
		printf("%d ",*it);
	printf("\n");		
	return 0;
}

