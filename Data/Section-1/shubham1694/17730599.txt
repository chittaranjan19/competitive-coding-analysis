#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 500010;

char str[maxn], q[maxn], ans[maxn];
int st[maxn*5], lazy[maxn*5], other[maxn];
stack<int> stk;

void init(int s, int e, int node)
{
	if(s==e){
		st[node] = 1;
		return;
	}
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	init(s, mid, lc);
	init(mid+1, e, rc);
	st[node] = st[lc] + st[rc];
}

void propagate_down(int s, int e, int node)
{
	if(lazy[node]){
		st[node] = 0;
		if(s!=e){
			int lc = 2*node + 1;
			int rc = lc + 1;
			lazy[lc] = lazy[rc] = 1;
		}
		lazy[node] = 0;
	}
}

void update(int s, int e, int qs, int qe, int node)
{
	propagate_down(s, e, node);
	if(s>e || s>qe || qs>e)
		return;
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	if(s>=qs && qe>=e){
		st[node] = 0;
		if(s!=e)
			lazy[lc] = lazy[rc] = 1;
		return;
	}
	update(s, mid, qs, qe, lc);
	update(mid+1, e, qs, qe, rc);
	st[node] = st[lc] + st[rc];
}

int query(int s, int e, int qs, int qe, int node)
{
	propagate_down(s, e, node);
	if(s>e || s>qe || qs>e)
		return 0;
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	if(s>=qs && qe>=e)
		return st[node];
	return query(s, mid, qs, qe, lc) + query(mid+1, e, qs, qe, rc);
}

int findR(int s, int e, int qs, int qe, int node)
{
	propagate_down(s, e, node);	
	if(s==e){
		if(st[node])
			return s;
		return -1;
	}
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	if(qs<=mid && qe>mid){
		int x = findR(s, mid, qs, qe, lc);
		if(x!=-1)
			return x;
		return findR(mid+1, e, qs, qe, rc);
	}
	else if(qs<=mid)
		return findR(s, mid, qs, qe, lc);
	else
		return findR(mid+1, e, qs, qe, rc);
}

int findL(int s, int e, int qs, int qe, int node)
{
	propagate_down(s, e, node);	
	if(s==e){
		if(st[node])
			return s;
		return -1;
	}
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	if(qs<=mid && qe>mid){
		int x = findL(mid+1, e, qs, qe, rc);
		if(x!=-1)
			return x;
		return findL(s, mid, qs, qe, lc);
	}
	else if(qs<=mid)
		return findL(s, mid, qs, qe, lc);
	else
		return findL(mid+1, e, qs, qe, rc);
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int n, m, p, i, j, temp;
	scanf("%d%d%d%s%s", &n, &m, &p, str, q);
	for(i=0; i<n; i++){
		if(str[i]=='(')
			stk.push(i);
		else{
			j = stk.top();
			stk.pop();
			other[j] = i;
			other[i] = j;
		}
	}
	init(0, n-1, 0);
	p--;
	for(i=0; i<m; i++){
		if(q[i]=='L'){
			p = findL(0, n-1, 0, p-1, 0);
		}
		else if(q[i]=='R'){
			p = findR(0, n-1, p+1, n-1, 0);
		}
		else{
			update(0, n-1, min(other[p], p), max(other[p], p), 0);
			temp = findR(0, n-1, p+1, n-1, 0);
			if(temp==-1)
				temp = findL(0, n-1, 0, p-1, 0);
			p = temp;
		}
	}
	j = 0;
	for(i=0; i<n; i++){
		if(query(0, n-1, i, i, 0)>0)
			ans[j++] = str[i];
	}
	ans[j] = '\0';
	printf("%s\n", ans);
	return 0;
}
