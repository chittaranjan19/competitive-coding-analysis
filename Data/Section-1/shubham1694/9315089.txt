#include <bits/stdc++.h>

using namespace std;

#define N 310
int grid[N][N];

bool bfs(int n, int src, int k)
{
    int i, j, x, y;
    queue<int> q;
    q.push(src);
    bool visited[n+10];
    memset(visited, false, sizeof(visited));
    visited[src]=true;
    while(!q.empty()){
        x=q.front();
        q.pop();
        for(i=0; i<n; i++){
            if(grid[x][i] && i==k)
                return true;
            else if(grid[x][i]&&!visited[i]){
                visited[i]=true;
                q.push(i);
            }
        }
    }
    return false;
}

int main()
{
    int n, i, j;
    scanf("%d", &n);
    int arr[n];
    map<int, int> m1;
    for(i=0; i<n; i++){
        scanf("%d", &arr[i]);
        m1[arr[i]]=i;
    }
    string s;
    for(i=0; i<n; i++){
        cin >> s;
        for(j=0; j<n; j++)
            grid[i][j]=s[j]-'0';
    }
    vector<int> vec;
    //cout << "1\n";
    bool taken[n+10];
    memset(taken, false, sizeof(taken));
    for(i=0; i<n; i++){
        for(j=1; j<=n; j++){
            if((arr[i]==j || bfs(n, i, m1[j]))&&!taken[j]){
                vec.push_back(j);
                taken[j]=true;
                break;
            }
        }
    }
    for(i=0; i<n; i++)
        cout << vec[i] << " ";
    cout << endl;
    return 0;
}
