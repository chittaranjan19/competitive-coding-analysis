#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
using namespace std;

#define INF (1 << 30)
#define INFL (1LL << 50)
#define pb push_back
#define loop_it(it, elements) for(auto it = elements.begin(); it != elements.end(); it++)
#define loop(i, l, r) for(auto i = l; i < r; i++)
#define loop_r(i, r, l) for(auto i = r; i >= l; i--)
#define loop_k(i, l, r, k) for(auto i = l; i < r; i+=k)
#define test_cases int test_cases;scanf("%d", &test_cases);for (int tc_0 = 1; tc_0 <= test_cases; tc_0++)

typedef long long i64;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<i64> vi64;
typedef vector<vi> vvi;
typedef vector<vi64> vvi64;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef map<pii, vi> mpiivi;
typedef map<int, int> mii;
typedef map<int, vi> mivi;

int main() {
    int n;
    cin >> n;
    int zero_i, zero_j;
    vvi64 m(n, vi64(n));
    loop(i, 0, n) {
        loop(j, 0, n) {
            cin >> m[i][j];
            if (m[i][j] == 0) {
                zero_i = i;
                zero_j = j;
            }
        }
    }
    if (n == 1) {
        cout << "1\n";
        return 0;
    }
    vi64 row(n), column(n);
    i64 d0 = 0, d1 = 0;
    i64 sum = 0;
    
    loop(i, 0, n) {
        loop(j, 0, n) {
            row[i] += m[i][j];
        }
        if (i != zero_i) {
            sum = row[i];
        }
    }
    i64 num = sum - row[zero_i];
	if (num < 1) {
        cout << "-1\n";
        return 0;		
	}
    m[zero_i][zero_j] = num;
    
    loop(i, 0, n) {
        row[i] = column[i] = 0;
    }
    d0 = 0; d1 = 0;
    loop(i, 0, n) {
        loop(j, 0, n) {
            row[i] += m[i][j];
            column[i] += m[j][i];
            if (i == j) {
                d0 += m[i][j];
            }
            if (i + j == n - 1) {
                d1 += m[i][j];
            }
        }
    }
	if (d0 != sum) {
        cout << "-1\n";
        return 0;
	}
	if (d1 != sum) {
        cout << "-1\n";
        return 0;
	}
    loop(i, 0, n) {
        if (row[i] != sum) {
            cout << "-1\n";
            return 0;
            
        }
        if (column[i] != sum) {
            cout << "-1\n";
            return 0;
            
        }
    }
    cout << num << endl;
    return 0;
}
