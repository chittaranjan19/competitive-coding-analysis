#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

struct Str
{
    string s;
    string r;
};

const int S = 100000;
int n, c[S];
ll dp[S][2];
Str s[S];

int main()
{
    cin >> n;
    int i;
    for (i = 0; i < n; ++i)
        scanf("%d", c + i);
    for (i = 0; i < n; ++i)
    {
        cin >> s[i].s;
        s[i].r = s[i].s;
        reverse(s[i].r.begin(), s[i].r.end());
    }
    
    dp[0][1] = c[0];
    for (i = 1; i < n; ++i)
    {
        dp[i][0] = dp[i][1] = LONG_LONG_MAX;
        
        if (s[i - 1].s <= s[i].s)
            dp[i][0] = dp[i-1][0];
        if (s[i - 1].s <= s[i].r)
            dp[i][1] = dp[i-1][0] == LONG_LONG_MAX ? dp[i-1][0] : dp[i-1][0] + c[i];
        if (s[i - 1].r <= s[i].s)
            dp[i][0] = min(dp[i-1][1], dp[i][0]);
        if (s[i - 1].r <= s[i].r)
            dp[i][1] = min(dp[i-1][1] == LONG_LONG_MAX ? dp[i-1][1] : dp[i-1][1] + c[i], dp[i][1]);
        
        if (dp[i][0] == LONG_LONG_MAX && dp[i][1] == LONG_LONG_MAX)
        {
            cout << -1 << '\n';
            return 0;
        }
    }
    
    cout << min(dp[n-1][0], dp[n-1][1]) << '\n';
    
    return 0;
}