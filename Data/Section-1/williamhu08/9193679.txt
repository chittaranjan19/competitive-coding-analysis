//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10, INF = 0x3f3f3f3f;

int N;
int numdiv[MAXN];
int pwin[2][MAXN];	//partial sums of wins
int firstp[2][2 * MAXN];

int getpsum (bool p, int x, int y) {
	return pwin[p][y] - pwin[p][x - 1];
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	// test();
	cin >> N;
	fillchar(firstp, 63);
	int lastwin;
	for (int i = 1, a; i <= N; i++) {
		cin >> a;
		lastwin = --a;
		firstp[a][pwin[a][i] = pwin[a][i - 1] + 1] = i;
		a ^= 1;
		pwin[a][i] = pwin[a][i - 1];
	}
	//check all the scoring
	//optimize for "t" points
	vector<pii> ans;
	for (int i = 1; i <= N; i++) {
		//go through the process
		//last index of win, current index
		int lind = -1, cur = 1;
		int win[2] = {0, 0};	//individual wins
		int serve[2] = {0, 0};	//whole entire serves
		for (;;) {
			//get the next indices
			pii p = min(pii(firstp[0][win[0] + i], 0), pii(firstp[1][win[1] + i], 1));
			if (p.first == INF) {
				//then check if it is good
				if (serve[lastwin] <= serve[lastwin ^ 1]) {
					//other player may already have won
					break;
				}
				if (cur == N + 1 && lind == lastwin) {
					//+1 careful about this
					ans.push_back(pii(serve[lastwin], i));
				}
				break;
			}
			serve[lind = p.second]++;
			for (int j = 0; j < 2; j++) {
				win[j] += getpsum(j, cur, p.first);
			}
			cur = p.first + 1;
		}
	}
	sort(ans.begin(), ans.end());
	printf("%lu\n", ans.size());
	rep(it, ans) {
		printf("%d %d\n", it->first, it->second);
	}
}