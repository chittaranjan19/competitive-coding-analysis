/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

vector< VI > V;
VI marked;

int bfs(int pos)
{
	marked[pos]=1;
	queue<int> q;
	q.push(pos);
	marked[pos]=1;
	int ans=0;
	while(!q.empty())
	{
		int t=q.front();
		q.pop();
		rep1(i,V[t].size())
		{
			int p=V[t][i];
			if(!marked[p]) q.push(p);
			marked[p]=max(marked[p],1+marked[t]);
			ans=max(ans,marked[p]);
		}
	}
	return ans;
}

int main()
{
	FastIO();
	int n,cnt=1;
	cin>>n;
	map<string,int> M;
	string a,b,c;
	V.assign(2*n+2,VI());
	marked.assign(2*n+2,0);
	rep1(i,n)
	{
		cin>>a>>b>>c;
		rep1(j,a.length())
		{
			a[j]=tolower(a[j]);
		}
		rep1(j,c.length())
		{
			c[j]=tolower(c[j]);
		}
		if(!M[a])
		{
			M[a]=cnt++;
		}
		if(!M[c])
		{
			M[c]=cnt++;
		}
		V[M[c]].pb(M[a]);
	}
	b="polycarp";
	cout<<bfs(M[b])<<endl;
	return 0;
}