#include <bits/stdc++.h>

using namespace std;

#define M 4000

map <int, int> g[M];
int outedge[M];
map <string, int> msi;
string mis[M];
string ans;

void dfs(int x){
	queue <int> q;
	int y;

	ans += mis[x].substr(1, 1);

	for (auto it = g[x].begin(); it != g[x].end(); it++){
		q.push(it->first);
	}

	while (!q.empty()){
		y = q.front();
		q.pop();

		if (g[x][y] > 0){
			g[x][y]--;
			outedge[x]--;
			dfs(y);
		}
	}
}

int main(){
	int n, i, x, y, left, right, maxevendegree, pos;
	string str;

	ios::sync_with_stdio(false);

	cin >> n;

	left = 1;
	right = 1;

	for (i = 0; i < n; i++){
		cin >> str;

		if (!msi.count(str.substr(0, 2))){
			mis[msi.size() + 1] = str.substr(0, 2);
			msi[str.substr(0, 2)] = msi.size();
		}

		if (!msi.count(str.substr(1, 2))){
			mis[msi.size() + 1] = str.substr(1, 2);
			msi[str.substr(1, 2)] = msi.size();
		}

		x = msi[str.substr(0, 2)];
		y = msi[str.substr(1, 2)];

		g[x][y]++;
		outedge[x]++;

		if (x > right){
			right = x;
		}

		if (y > right){
			right = y;
		}
	}

	maxevendegree = 0;
	pos = 1;

	for (i = left; i <= right; i++){
		if (outedge[i] > maxevendegree){
			maxevendegree = outedge[i];
			pos = i;
		}
	}

	ans = mis[pos].substr(0, 1);

	dfs(pos);

	if ((int)ans.size() == n + 2){
		cout << "YES" << endl;
		cout << ans << endl;
	}
	else{
		cout << "NO" << endl;
	}

	return 0;
}