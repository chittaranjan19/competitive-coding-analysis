#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>

using namespace std;

const int maxn = 1e5 + 5;

char s[maxn], t[maxn];

bool solve(int l, int r, int pre, int nxt)
{
    while(l < r)
    {
        if(abs(s[l] - s[r]) > 1 || (pre &&  s[l] > s[r])) return false;
        int x = nxt ? s[r] - '0' + 1 : s[r] - '0';
        if(pre) --x;
        if(x < 0 || x > 9) return false;
        int y = (s[r] - '0' - pre + 10 - x) % 10;
        t[r] = x + '0', t[l] = y + '0';
        pre = nxt;
        if((y + x) % 10 == s[l] - '0') nxt = 0;
        else if((y + x + 1) % 10 == s[l] - '0') nxt = 1;
        else return false;
        ++l, --r;
    }
    if(l == r)
    {
        int c = s[l] - '0' - pre;
        if(c & 1) return false;
        t[l] = (nxt ? c / 2 + 5 : c / 2) + '0';
    }
    else if(nxt != pre) return false;
    return true;
}

int main()
{
    while(cin >> s)
    {
        int n = strlen(s);
        bool flag = false;
        if(s[n - 1] != '0')
        {
            if(s[0] == s[n - 1] && n > 1)
            {
                t[n - 1] = '0', t[0] = s[0];
                flag = solve(1, n - 2, 0, 0);
            }
            else if(s[0] - s[n - 1] == 1 && n > 1)
            {
                t[n - 1] = '0', t[0] = s[n - 1];
                flag = solve(1, n - 2, 0, 1);
            }
            else if(n == 1) flag = solve(0, n - 1, 0, 0);
        }
        if(!flag && s[0] == '1' && n > 1)
        {
            t[0] = 0;
            flag = solve(1, n - 1, 0, 1);
        }
        t[n] = 0;
        if(flag) cout << (*t ? t : t + 1) << endl;
        else cout << 0 << endl;
    }
    return 0;
}
