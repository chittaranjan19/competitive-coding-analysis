#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)

typedef unsigned long long ull;
typedef long long ll;

class Fenwick {
private:
	vector<int> arr;
	const int size;
public:
	Fenwick(int n) : arr(n+1), size(n) {
		for (int it = 0; it < arr.size(); ++it)
			arr[it] = 0;
	}
	void add(int v, int k) {
		for (;k <= size; k += lsone(k)) {
			arr[k] += v;
		}
	}
	int get(int k) {
		int total = 0;
		for (;k > 0; k -= lsone(k))  {
			total += arr[k];
		}
		return total;
	}
};

template <typename U> class Comparator {
public:
    bool operator() (const U lhs, const U rhs) {
        // implement
        return true;
    }
};
// end of template

int main() {
    // freopen("535B.in", "r", stdin);
    vector<long long> possible;
    possible.push_back(4);
    possible.push_back(7);
    int ambil = 2;
    for (int k = 0; k < 9; ++k) {
    	int j = possible.size()-1, i = possible.size()-ambil;
    	for (int it = j; it >= i; --it) {
    		possible.push_back(possible[it]*10+4);
    		possible.push_back(possible[it]*10+7);
    	}
    	ambil *= 2;
    }
    sort(possible.begin(), possible.end());
    // for (int it = 0; it < possible.size(); ++it)
    // 	printf("%lld ", possible[it]);

    ll val;
    scanf("%I64d", &val);
    for (int it = 0; ; ++it) { 
    	if (val == possible[it]) {
    		printf("%d\n", it+1);
    		return 0;
    	}
    }

    return 0;
}