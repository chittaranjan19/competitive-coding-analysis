//
// Created by Santiago on 11/04/2016.
//

#include <bits/stdc++.h>

using namespace std;

typedef pair<int, long long> pill;
typedef long long ll;

class Data;

vector<vector<Data> > graph;
vector<ll> dist;
vector<bool> visited;
vector<int> trains;

class Compare {
public:
    bool operator()(pill a, pill b) {
        return a.second > b.second;
    }
};

class Data {
public:
    int n, w;
    bool train;
    Data(int n, int w, bool train) : n(n), w(w), train(train) {}
};

void init(int n) {
    graph = vector<vector<Data> >(n+1);
    dist = vector<ll>(n+1, 1ll<<62ll);
    visited = vector<bool>(n+1, false);
    trains = vector<int>(n+1, 0);
}


void dijkstra(int start) {
    priority_queue<pill , vector<pill>, Compare> pq;
    dist[start] = 0;
    pq.push(make_pair(start, 0));
    while(!pq.empty()) {
        pill pout = pq.top();
        pq.pop();
        int p = pout.first;
        ll cdist = pout.second;
        if(visited[p])
            continue;
        visited[p] = true;
        for (int i = 0; i < graph[p].size(); ++i) {
            int t = graph[p][i].n;
            int weight = graph[p][i].w;
            if(!visited[t]) {
                if(cdist + weight < dist[t]) {
                    dist[t] = cdist + weight;
                    pq.push(make_pair(t, dist[t]));
                }
            }
        }
    }
}

int main() {
    //freopen("jzzhu.in", "r", stdin);
    int n, m, k, ans = 0;
    //cin>>n>>m>>k;
    scanf("%d %d %d", &n, &m, &k);
    init(n);
    for (int i = 0; i < m; ++i) {
        int u, v, x;
        //cin>>u>>v>>x;
        scanf("%d %d %d", &u, &v, &x);
        graph[u].push_back(Data(v, x, false));
        graph[v].push_back(Data(u, x, false));
    }
    for (int i = 0; i < k; ++i) {
        int u, x;
        //cin>>u>>x;
        scanf("%d %d", &u, &x);
        graph[1].push_back(Data(u, x, true));
        graph[u].push_back(Data(1, x, true));
        trains[u]++;
    }
    dijkstra(1);
    for (int i = 2; i <= n; ++i) {
        int other = 0, good_trains = 0;
        for (int j = 0; j < graph[i].size() && trains[i] > 0; ++j) {
            Data t = graph[i][j];
            if (t.train) {
                if (t.w > dist[i]) {
                    ans++;
                }
                if(t.w == dist[i])
                    good_trains++;
            }
            else {
                if(dist[t.n] + t.w == dist[i])
                    other++;
            }
        }
        if(other >= 1)
            ans += good_trains;
        else if(good_trains > 1)
            ans += good_trains-1;
    }
    printf("%d", ans);
    return 0;
}