/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

int main()
{
	FastIO();
	LL h,w;
	cin>>h>>w;
	string grid[h+1];
	vector< vector<LL> > sum(h+2,vector<LL>(w+2,0)),row(h+2,vector<LL>(w+2,0)),col(h+2,vector<LL>(w+2,0));
	for(int i=1;i<=h;i++)
	{
		cin>>grid[i];
	}
	for(int i=1;i<=h;i++)
	{
		for(int j=1;j<=w;j++)
		{
			char ch=grid[i][j-1];
			int flag=0,add1=0,add2=0;
			if(j>1 && grid[i][j-2]=='.') flag=1;
			if(ch=='.' && flag) add1+=1;
			flag=0;
			if(i>1 && grid[i-1][j-1]=='.') flag=1;
			if(ch=='.' && flag) add2+=1;
			sum[i][j]=sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1]+add1+add2; 
			if(add1) col[i][j]++;
			if(add2) row[i][j]++;
			col[i][j]+=col[i-1][j];
			row[i][j]+=row[i][j-1];
		}
	}
	LL q,a,b,c,d;
	cin>>q;
	while(q--)
	{
		cin>>a>>b>>c>>d;
		LL ans=sum[c][d]-sum[a-1][d]-sum[c][b-1]+sum[a-1][b-1];
		ans-=(col[c][b]-col[a-1][b]);
		ans-=(row[a][d]-row[a][b-1]);
		cout<<ans<<endl;
	}
	return 0;
}