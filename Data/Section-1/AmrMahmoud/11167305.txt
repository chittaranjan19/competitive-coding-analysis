#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<pair<pair<int, int>, pair<int, int> > > edges;
vector<pair<int, int> > graph[300005];
LL dist[300005];
LL key[300005];
bool v[300005];
int e[300005];
vector<int> sol;

bool sorter(pair<pair<int, int>, pair<int, int> > a, pair<pair<int, int>, pair<int, int> > b)
{
  return a.s.f < b.s.f;
}

int main()
{
  ios_base::sync_with_stdio(0);
  int n, m, x, y;
  LL z;
  cin >> n >> m;
  for(int i=0;i<m;i++)
  {
    cin >> x >> y >> z;
    edges.pb(mp(mp(x, y), mp(z, 2*i)));
    edges.pb(mp(mp(y, x), mp(z, 2*i+1)));
    graph[x].pb(mp(y, z));
    graph[y].pb(mp(x, z));
  }
  cin >> x;
  int so = x;
  for(int i=1;i<=n;i++)
    dist[i] = 1LL << 55;
  dist[x] = 0;
  priority_queue<pair<LL, int> > q;
  q.push(mp(0, x));
  while(!q.empty())
  {
    int node = q.top().s;
    q.pop();
    if(v[node]) continue;
    v[node] = true;
    for(int i=0;i<graph[node].size();i++)
    {
      int nxt = graph[node][i].f;
      LL d = graph[node][i].s + dist[node];
      if(dist[nxt] > d)
      {
        dist[nxt] = d;
        q.push(mp(-d, nxt));
      }
    }
  }
  for(int i=1;i<=n;i++)
    graph[i].clear();
  for(int i=0;i<m*2;i++)
  {
    x = edges[i].f.f;
    y = edges[i].f.s;
    z = edges[i].s.f;
    if(dist[x] + z == dist[y])
      graph[x].pb(mp(y, i));
  }
  for(int i=1;i<=n;i++)
    key[i] = dist[i] = 1LL << 55;
  LL res = 0;
  key[so] = dist[so] = 0;
  setzero(v);
  q.push(mp(0, so));
  while(!q.empty())
  {
    int node = q.top().s;
    q.pop();
    if(v[node]) continue;
    v[node] = true;
    if(node != so)
    {
      res+=edges[e[node]].s.f;
      sol.push_back(e[node]);
    }
    for(int i=0;i<graph[node].size();i++)
    {
      int nxt = graph[node][i].f;
      int ind = graph[node][i].s;
      LL dd = edges[ind].s.f;
      LL d = dd + dist[node];
      if(key[nxt] > dd)
      {
        dist[nxt] = d;
        key[nxt] = dd;
        e[nxt] = ind;
        q.push(mp(-d, nxt));
      }
    }
  }
  cout << res << "\n";
  for(int i=0;i<sol.size();i++)
    cout << (sol[i]/2)+1 << " ";
  return 0;
}
