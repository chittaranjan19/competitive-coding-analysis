#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

int main()
{
    int n, k, p;
    scanf("%d", &n);
    vector<vector<int> > summ(n * (n - 1) / 2), ans(n);
    for (int i = 0; i < n * (n - 1) / 2; i++)
    {
        scanf("%d", &k);
        for (int j = 0; j < k; j++)
        {
            scanf("%d", &p);
            summ[i].push_back(p);
        }
    }
    if (n == 2)
    {
        printf("%d %d\n", 1, summ[0][0]);
        printf("%d ", summ[0].size() - 1);
        for (int i = 1; i < summ[0].size(); i++)
            printf("%d ", summ[0][i]);
        return 0;
    }
    int x = summ[0][0], curr;
    vector<set<int> > v(n * (n - 1) / 2);
    for (int i = 0; i < n * (n - 1) / 2; i++)
        for (int j = 0; j < summ[i].size(); j++)
            v[i].insert(summ[i][j]);
    for (int i = 1; i < n * (n - 1) / 2; i++)
        if (v[i].count(x) == 1)
        {
            curr = i;
            break;
        }
    for (int i = 0; i < summ[0].size(); i++)
        if (v[curr].count(summ[0][i]) == 1)
            ans[0].push_back(summ[0][i]);
    set<int> q;
    for (int i = 0; i < ans[0].size(); i++)
        q.insert(ans[0][i]);
    curr = 1;
    for (int i = 0; i < n * (n - 1) / 2 && curr < n; i++)
    {
        for (int j = 0; j < summ[i].size(); j++)
            if (q.count(summ[i][j]) != 1)
                ans[curr].push_back(summ[i][j]);
        if (ans[curr].size() == summ[i].size())
            ans[curr].clear();
        else
            curr++;
    }
    for (int i = 0; i < n; i++)
    {
        printf("%d ", ans[i].size());
        for (int j = 0; j < ans[i].size(); j++)
            printf("%d ", ans[i][j]);
        printf("\n");
    }
    return 0;
}