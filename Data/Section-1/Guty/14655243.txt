#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

vector<tint> bfs (vector<vector<tint> > &ladj, tint nodoInicial)
{
	tint n = ladj.size();
	
	vector<tint> distancia (n,-1);
	distancia[nodoInicial] = 0;
	vector<tint> vecinos = {nodoInicial};
	vector<tint> nuevosVecinos;
	while(!vecinos.empty())
	{
		tint nodoActual = vecinos.back();
		vecinos.pop_back();
		for (auto vecino: ladj[nodoActual])
		{
			if (distancia[vecino] == -1)
			{
					nuevosVecinos.push_back(vecino);
					distancia[vecino] = distancia[nodoActual] + 1;
			}
		}
		if (vecinos.empty())
		{
			vecinos = nuevosVecinos;
			nuevosVecinos.clear();
		}
	}
	return distancia;
	
	
	
}



int main()
{
	ios_base::sync_with_stdio(0);
	tint n,m;
	cin >> n >> m;
	vector<vector<bool> > railways (n,vector<bool> (n));
	forn(i,m)
	{
		tint x,y;
		cin >> x >> y;
		railways[x-1][y-1] = true;
		railways[y-1][x-1] = true;
		
	}
	vector<vector<tint> > ladjRailway (n);
	vector<vector<tint> > ladjRoad (n);
	forn(i,n)
	{
		forsn(j,i+1,n)
		{
			if (i != j && railways[i][j])
			{
				ladjRailway[i].push_back(j);
				ladjRailway[j].push_back(i);
			}
			else if (i != j)
			{
				ladjRoad[i].push_back(j);
				ladjRoad[j].push_back(i);
			}
		}
	}
	
	if (railways[0][n-1])
		ladjRoad.swap(ladjRailway);
	
	cout << bfs(ladjRailway,0)[n-1] << endl;
	
	
	return 0;
}



