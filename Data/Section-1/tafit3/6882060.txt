import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class FeedWithCandy {
    private FeedWithCandy() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String line = rd.readLine();
        String[] q = line.split("\\s+");
        int n = Integer.parseInt(q[0]);
        int x = Integer.parseInt(q[1]);
        List<SortedMap<Integer, SortedMap<Integer, Integer>>> p = new ArrayList<>();
        for(int i=0;i<2;i++) {
            p.add(new TreeMap<Integer, SortedMap<Integer, Integer>>());
        }
        for(int i=0;i<n;i++) {
            line = rd.readLine();
            q = line.split("\\s+");
            int t = Integer.parseInt(q[0]);
            int h = Integer.parseInt(q[1]);
            int m = Integer.parseInt(q[2]);
            SortedMap<Integer, SortedMap<Integer, Integer>> mm = p.get(t);
            SortedMap<Integer, Integer> s = mm.get(h);
            if(s == null) {
                s = new TreeMap<>();
                mm.put(h, s);
            }
            Integer cnt = s.get(m);
            if(cnt == null) {
                cnt = 1;
            } else {
                cnt++;
            }
            s.put(m, cnt);
        }

        long res = 0;
        for(int gg=0;gg<2;gg++) {
            boolean pos = true;
            int res1 = 0;
            int localX = x;
            int localG = gg;
            while(pos) {
                SortedMap<Integer, SortedMap<Integer, Integer>> mm = p.get(localG);
                SortedMap<Integer, SortedMap<Integer, Integer>> mmh = mm.headMap(localX+1);
                pos = false;
                if(!mmh.isEmpty()) {
                    Integer maxHeight = null;
                    int maxV = 0;
                    for(Map.Entry<Integer, SortedMap<Integer, Integer>> e: mmh.entrySet()) {
                        SortedMap<Integer, Integer> mx = e.getValue();
                        if(!mx.isEmpty()) {
                            int max = mx.lastKey();
                            if(max > maxV) {
                                maxV = max;
                                maxHeight = e.getKey();
                            }
                        }
                    }
                    if(maxHeight != null) {
                        SortedMap<Integer, Integer> s = mmh.get(maxHeight);
                        if(s.get(maxV) > 1) {
                            s.put(maxV, s.get(maxV) - 1);
                        } else {
                            s.remove(maxV);
                            if(s.isEmpty()) {
                                mmh.remove(maxHeight);
                            }
                        }
                        res1++;
                        pos = true;
                        localX += maxV;
                    }
                }
                localG = 1-localG;
            }
            res = Math.max(res, res1);
        }
        out(res);
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new FeedWithCandy();
    }
}
