#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const int mod = 1e9 + 7;
const int MAXN = 2e5 + 5;

ll dp[MAXN];
int a[MAXN], b[MAXN];

ll fast_pow(ll x, ll n)
{
    ll ret = 1;
    while(n)
    {
        if(n & 1)
        {
            ret = (ret * x) % mod;
        }
        x = x * x % mod;
        n >>= 1;
    }
    return ret;
}

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", a + i);
        }
        sort(a + 1, a + n + 1);
        int m = 0;
        for(int i = 1; i <= n; ++i)
        {
            if(a[i] != a[i - 1])
            {
                a[++m] = a[i];
                b[m] = 1;
            }
            else
            {
                ++b[m];
            }
        }
        ll sum = 1;
        dp[0] = 1;
        for(int i = 1; i <= m; ++i)
        {
            dp[i] = dp[i - 1];
            ll mul = 1;
            for(int j = 1; j <= b[i]; ++j)
            {
                mul = mul * a[i] % mod;
                dp[i] = dp[i] * dp[i - 1] % mod * fast_pow(mul, sum) % mod;
            }
//            cout << dp[i] << ' ' << sum << endl;
            sum = (sum * (b[i] + 1)) % (mod - 1);
        }
        printf("%I64d\n", dp[m]);
    }
    return 0;
}
