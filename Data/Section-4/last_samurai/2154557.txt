
/* Author:
    * Rohit Laddha */
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <cassert>
#include <ctime>
#include <queue>
#include <tr1/random>
#include <tr1/unordered_map>
using namespace std;
using namespace std::tr1;
#define VAR(a,b) __typeof(b) a=(b)
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define ALL(c) (c).begin(),(c).end()
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;
int cnt=0;
int n,x;
//int a[100050],b[100050];
int b[100050];
vector<int> a;
int b_search(int i,int j,int k){
	int mid = (i+j)/2;
	if(k==a[mid]){
		cnt++;
		a.erase(a.begin()+mid);
//		a[mid]=-1;
		return 1;
	}
	if(i==j){
		if(k>a[i])
			return -1;
		else{
			cnt++;
			a.erase(a.begin()+i);
	//		a[i]=-1;
			return 1;
		}
	}
	if(k>a[mid])
		return b_search(mid+1,j,k);
	else
		return b_search(i,mid,k);
}
int main()
{
	int i;
	while(cin >> n >> x){
		a.clear();
		cnt =0 ;
		for(i=0;i<n;i++){
			int tmp;
			cin >> tmp;
			a.push_back(tmp);
		}
		for(i=0;i<n;i++)
			cin >> b[i];
		sort(a.begin(),a.end());
		sort(b,b+n);
		for(i=n-1;i>=0;i--){
			int k = b_search(0,a.size()-1,x-b[i]);
			if(k==-1)
				break;
		}
		cout << "1 "<< cnt << endl;
	}
	return 0;
}
