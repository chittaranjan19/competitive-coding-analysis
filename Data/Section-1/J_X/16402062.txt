#include <iostream>
#include <cstdio>
#include <cstring>
#include <set>

using namespace std;

typedef long long ll;
typedef multiset<ll>::reverse_iterator rite;;

const int maxn = 100000 + 5;

struct edge
{
    int to, next;

    edge(int to = 0, int next = 0) : to(to), next(next) {}
} G[maxn << 1];
int head[maxn], tot, a[maxn];
ll dp[maxn][4];
multiset<ll> st;

void init()
{
    memset(head, -1, sizeof(head));
    tot = 0;
}

void addedge(int u, int v)
{
    G[tot] = edge(v, head[u]);
    head[u] = tot++;
    G[tot] = edge(u, head[v]);
    head[v] = tot++;
}

void dfs1(int u, int fa)
{
    memset(dp[u], 0, sizeof(dp[u]));
    dp[u][1] = 0;
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(v == fa) continue;
        dfs1(v, u);
        if(dp[u][1] <= dp[v][1] + a[v])
        {
            dp[u][0] = dp[u][1];
            dp[u][1] = dp[v][1] + a[v];
        }
        else if(dp[v][1] + a[v] > dp[u][0]) dp[u][0] = dp[v][1] + a[v];
    }
}

ll dfs2(int u, int fa)
{
    ll ret = dp[u][2] + a[u];
    dp[u][3] = dp[u][0] + dp[u][1] + a[u];
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(v == fa) continue;
        int k = dp[u][1] != dp[v][1] + a[v];
        dp[v][2] = max(dp[u][2], dp[u][k]) + a[u];
        ret = max(ret, dfs2(v, u));
        dp[u][3] = max(dp[u][3], dp[v][3]);
    }
    st.clear();
    st.insert(dp[u][2]);
    st.insert(0);
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(v == fa) continue;
        st.insert(dp[v][1] + a[v]);
    }
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(v == fa) continue;
        st.erase(dp[v][1] + a[v]);
        rite p = st.rbegin();
        ll tmp = *p;
        ++p;
        ret = max(ret, tmp + *p + a[u] + dp[v][3]);
        st.insert(dp[v][1] + a[v]);
    }
    return ret;
}

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        init();
        for(int i = 1; i <= n; ++i) scanf("%d", &a[i]);
        for(int i = 1; i < n; ++i)
        {
            int u, v;
            scanf("%d%d", &u, &v);
            addedge(u, v);
        }
        dfs1(1, 0);
        printf("%I64d\n", dfs2(1, 0));
    }
    return 0;
}
