#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define rwfile(f) freopen(f".in", "r", stdin); freopen(f".out", "w", stdout)
#define pb push_back
#define mpair make_pair
#define fi first
#define se second
#define dri(x) scanf("%d", &x)
#define drii(x, y) scanf("%d %d", &x, &y)
#define driii(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define driiii(x, y, z, w) scanf("%d %d %d %d", &x, &y, &z, &w)
#define drl(x) scanf("%lld", &x)
#define drll(x, y) scanf("%lld %lld", &x, &y)
#define drlll(x, y, z) scanf("%lld %lld %lld", &x, &y, &z)
#define drllll(x, y, z, w) scanf("%lld %lld %lld %lld", &x, &y, &z, &w)

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int MAXN = 100010;

struct union_find {
	int par[MAXN], sz[MAXN];  //don't forget to init

	int find (int x) {
		return x == par[x] ? x : par[x] = find(par[x]);
	}

	bool merge (int x, int y) {
		x = find(x);
		y = find(y);
		if (x == y) {
			return false;
		}
		if (sz[x] > sz[y]) {
			swap(x, y);
		}
		par[x] = y;
		sz[y] += sz[x];
		return true;
	}
} uf;

int N, M;
vector<pii> adj[MAXN];
int A[MAXN], B[MAXN], C[MAXN];
int col[MAXN];
vector<int> nodes[MAXN];
pair<int, vector<int> > pinf = mpair(MAXN, vector<int> ());

bool dfs (int x, int c) {
	if (col[x] != -1) {
		return c == col[x];
	}

	col[x] = c;
	for (pii p : adj[x]) {
		if (!dfs(p.fi, p.se ^ c)) {
			return false;
		}
	}
	return true;
}

pair<int, vector<int> > doit (int x, int c) {
	for (int v : nodes[x]) {
		col[v] = -1;
	}
	if (!dfs(x, c)) {
		return pinf;
	}

	int cnt = 0;
	vector<int> vf;

	for (int v : nodes[x]) {
		if (col[v]) {
			cnt++;
			vf.pb(v);
		}
	}
	return mpair(cnt, vf);
}

pair<int, vector<int> > solve() {
#warning reset
	for (int i = 0; i < N; i++) {
		adj[i].clear();
		uf.par[i] = i;
		uf.sz[i] = 1;
		nodes[i].clear();
	}

	for (int i = 0; i < M; i++) {
		adj[A[i]].pb(pii(B[i], C[i]));
		adj[B[i]].pb(pii(A[i], C[i]));
		uf.merge(A[i], B[i]);
	}

	for (int i = 0; i < N; i++) {
		nodes[uf.find(i)].pb(i);
	}

	pair<int, vector<int> > ans;

	for (int i = 0; i < N; i++) {
		if (i == uf.find(i)) {
			//process it!
			auto v = min(doit(i, 0), doit(i, 1));
			if (v.fi == MAXN) {
				//it's impossible!
				return pinf;
			}
			ans.fi += v.fi;
			ans.se.insert(ans.se.end(), all(v.se));
		}
	}

	return ans;
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}

	drii(N, M);
	for (int i = 0; i < M; i++) {
		char c;
		scanf("%d %d %c", &A[i], &B[i], &c);
		A[i]--;
		B[i]--;
		C[i] = (c == 'R');
	}

	auto ans = solve();

	for (int i = 0; i < M; i++) {
		C[i] ^= 1;
	}

	ans = min(ans, solve());

	if (ans.fi == MAXN) {
		puts("-1");
		return 0;
	}

	printf("%d\n", ans.fi);
	for (int x : ans.se) {
		printf("%d ", x + 1);
	}
}