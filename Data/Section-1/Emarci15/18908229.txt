#include <iostream>

#define mod 1000000009

using namespace std;

int n,m;

long long f[300001];

long long rr[300001][2];
long long rs[300001][2];

long long sz[600000];
long long lazy[600000][2];

long long a[300000];
void build(int t, int k, int v) {
    if(k==v) {
        sz[t] = a[k];
    } else {
        int f((k+v)/2);
        build(t<<1,k,f);
        build((t<<1)+1,f+1,v);

        sz[t] = (sz[t<<1] + sz[(t<<1)+1]) % mod;
    }
}

void upd(int t, int k, int v) {
    if(k<v) {
        lazy[t<<1][0] = (lazy[t<<1][0] + lazy[t][0]) % mod;
        lazy[t<<1][1] = (lazy[t<<1][1] + lazy[t][1]) % mod;

        int f((k+v)/2);

        lazy[(t<<1)+1][0] = (lazy[(t<<1)+1][0] + lazy[t][0]*rr[f+2-k][1] + lazy[t][1]*rr[f+2-k][0]) % mod;
        lazy[(t<<1)+1][1] = (lazy[(t<<1)+1][1] + lazy[t][0]*rr[f+1-k][1] + lazy[t][1]*rr[f+1-k][0]) % mod;
    }

    sz[t] = (sz[t] + lazy[t][1]*(rs[1+v-k][0]+mod-1) + lazy[t][0]*rs[1+v-k][1]) % mod;
    lazy[t][0] = lazy[t][1] = 0ll;
}

void update(int t, int k, int v, int l, int r) {
    if((l<=k) && (v<=r)) {
        lazy[t][0] = (lazy[t][0] + f[k+1-l]) % mod;
        lazy[t][1] = (lazy[t][1] + f[k-l]) % mod;
        upd(t,k,v);
        return;
    }

    upd(t,k,v);

    int f((k+v)/2);

    if(l<=f) {
        update(t<<1,k,f,l,r);
    } else upd(t<<1,k,f);
    if(r>f) {
        update((t<<1)+1,f+1,v,l,r);
    } else upd((t<<1)+1,f+1,v);

    sz[t] = (sz[t<<1] + sz[(t<<1)+1]) % mod;
}

long long query(int t, int k, int v, int l, int r) {
    upd(t,k,v);
    if((l<=k) && (v<=r)) return sz[t];

    int f((k+v)/2);

    long long ret(0ll);
    if(l<=f) ret += query(t<<1,k,f,l,r);
    if(r>f) ret += query((t<<1)+1,f+1,v,l,r);

    return ret%mod;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> n >> m;

    f[0] = 0ll;
    rr[0][0] = 1ll;
    rs[0][0] = 1ll;
    f[1] = 1ll;
    rr[1][1] = 1ll;
    rs[1][1] = rs[1][0] = 1ll;
    for(int i=2; i<=n; i++) {
        f[i] = (f[i-1] + f[i-2]) % mod;
        rr[i][0] = (rr[i-1][0]+rr[i-2][0]) % mod;
        rr[i][1] = (rr[i-1][1]+rr[i-2][1]) % mod;

        rs[i][0] = (rs[i-1][0]+rr[i][0]) % mod;
        rs[i][1] = (rs[i-1][1]+rr[i][1]) % mod;
    }

    for(int i=0; i<n; i++) cin >> a[i];
    build(1,0,n-1);

    for(int i=0; i<m; i++) {
        int t,l,r; cin >> t >> l >> r; l--; r--;
        if(t==1) {
            update(1,0,n-1,l,r);
        } else cout << query(1,0,n-1,l,r) << endl;
    }

    return 0;
}
