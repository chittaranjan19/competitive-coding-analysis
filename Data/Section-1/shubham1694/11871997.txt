#include <bits/stdc++.h>

using namespace std;

#define ll long long

const int maxn = 100010;
const ll mod = 1000000007;

int deg[maxn], d[maxn], n, cur;
vector<int> adj[maxn], comp[maxn];
bool seen[maxn];

bool dfs_cycle(int src, int parent, int dist)
{
    int i, k;
    seen[src] = true;
    d[src] = dist;
    for(i=0; i<adj[src].size(); i++){
        if(adj[src][i]==parent)
            continue;
        if(seen[adj[src][i]]){
            k = dist+1-d[adj[src][i]];
            if(k%2)
                return true;
        }
        else{
            if(dfs_cycle(adj[src][i], src, dist+1))
                return true;
        }
    }
    return false;
}

bool find_cycle()
{
    int i;
    for(i=1; i<=n; i++){
        if(!seen[i]){
            if(dfs_cycle(i, -1, 0))
                return true;
        }
    }
    return false;
}

void dfs_traverse(int src, int parent, int dist)
{
    int i;
    seen[src] = true;
    comp[cur].push_back(src);
    d[src] = dist;
    for(i=0; i<adj[src].size(); i++){
        if(!seen[adj[src][i]])
            dfs_traverse(adj[src][i], src, dist+1);
    }
}

void traverse()
{
    cur = 0;
    int i;
    for(i=1; i<=n; i++){
        if(!seen[i]){
            dfs_traverse(i, -1, 0);
            cur++;
        }
    }
}

int main()
{
    int i, j, m, u, v;
    ll ans, o, e, w;
    bool ng;
    scanf("%d%d", &n, &m);
    if(m==0){
        ans = n;
        ans = (ans*(ans-1)*(ans-2))/6;
        printf("3 %I64d\n", ans);
        return 0;
    }
    for(i=0; i<m; i++){
        scanf("%d%d", &u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
        deg[u]++, deg[v]++;
    }
    ng = true;
    for(i=1; i<=n; i++){
        if(deg[i]>1){
            ng = false;
            break;
        }
    }
    if(ng){
        ans = n;
        ans = (ans-2)*m;
        printf("2 %I64d\n", ans);
        return 0;
    }
    memset(seen, false, sizeof(seen));
    memset(d, -1, sizeof(d));
    if(find_cycle()){
        printf("0 1\n");
        return 0;
    }
    memset(seen, false, sizeof(seen));
    memset(d, -1, sizeof(d));
    traverse();
    ans = 0;
    for(i=0; i<cur; i++){
        o = e = w = 0;
        for(j=0; j<comp[i].size(); j++){
            if(d[comp[i][j]]%2)
                o++;
            else
                e++;
        }
        for(j=0; j<comp[i].size(); j++){
            if(d[comp[i][j]]%2)
                w = w+o-1;
            else
                w = w+e-1;
        }
        w/=2;
        ans+=w;
    }
    printf("1 %I64d\n", ans);
    return 0;
}