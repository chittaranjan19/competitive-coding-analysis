#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 300010;

int rnk[maxn], parent[maxn], diameter[maxn], seen[maxn], dist[maxn], n;
vector<int> adj[maxn], vis;

int find(int x)
{
	if(parent[x]==x)
		return x;
	return parent[x] = find(parent[x]);
}

void merge(int x, int y)
{
	int rx, ry, d1, d2, d;
	rx = find(x);
	ry = find(y);
	if(rx==ry)
		return;
	d1 = diameter[rx];
	d2 = diameter[ry];
	d = max(d1, max(d2, (d1+1)/2 + (d2+1)/2 + 1));
	if(rnk[rx] < rnk[ry]){
		parent[rx] = ry;
		diameter[ry] = d;
	}
	else if(rnk[ry] < rnk[rx]){
		parent[ry] = rx;
		diameter[rx] = d;
	}
	else{
		parent[ry] = rx;
		rnk[rx]++;
		diameter[rx] = d;
	}
}

void dfs(int cur, int p, int d)
{
	dist[cur] = d;
	seen[cur] = 1;
	vis.pb(cur);
	for(auto it:adj[cur]){
		if(it!=p)
			dfs(it, cur, d+1);
	}
}

int find_diameter(int src)
{
	int j, ind, mxd;
	vis.clear();
	dfs(src, 0, 0);
	mxd = 0;
	ind = src;
	for(auto i:vis){
		if(dist[i]>mxd){
			mxd = dist[i];
			ind = i;
		}
		dist[i] = inf;
	}
	dfs(ind, 0, 0);
	mxd = 0;
	for(auto i:vis){
		if(dist[i]>mxd)
			mxd = dist[i];
	}
	return mxd;
}
int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int t, m, q, i, u, v;
	scanf("%d%d%d", &n, &m, &q);
	for(i=1; i<=n; i++)
		parent[i] = i;
	for(i=0; i<m; i++){
		scanf("%d%d", &u, &v);
		merge(u, v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	for(i=1; i<=n; i++){
		if(!seen[i]){
			v = find(i);
			diameter[v] = find_diameter(i);
		}
	}
	while(q--){
		scanf("%d", &t);
		if(t==1){
			scanf("%d", &u);
			v = find(u);
			printf("%d\n", diameter[v]);
		}
		else{
			scanf("%d%d", &u, &v);
			merge(u, v);
		}
	}
	return 0;
}
