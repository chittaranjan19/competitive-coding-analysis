#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int dist[205][205], n;
vector<pair<pair<int, int>, int> > edges;

double get(int x,int y, double d, double all)
{
  double res = -1;
  for(int i=0;i<n;i++)
    res = max(res, min(dist[i][x] + d, dist[i][y] + all - d));
  return res;
}

int main()
{
  ios_base::sync_with_stdio(0);
  int m, x, y, z;
  cin >> n >> m;
  for(int i=0;i<n;i++)
    for(int j=0;j<n;j++)
      if(i != j)
        dist[i][j] = INF;
  for(int i=0;i<m;i++)
  {
    cin >> x >> y >> z;
    x--, y--;
    z*=2;
    edges.pb(mp(mp(x, y), z));
    dist[x][y] = dist[y][x] = z;
  }
  for(int k=0;k<n;k++)
    for(int i=0;i<n;i++)
      for(int j=0;j<n;j++)
        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
  int res = INF_MAX;
  for(int _=0;_<m;_++)
  {
    x = edges[_].f.f, y = edges[_].f.s, z = edges[_].s;
    vector<pair<int, int> > temp(n), t;
    for(int i=0;i<n;i++)
      temp[i] = mp(dist[i][x], dist[i][y]);
    sort(temp.begin(), temp.end());
    for(int i=0;i<n;i++)
    {
      while(t.size() && t.back().s <= temp[i].s)
        t.pop_back();
      t.pb(temp[i]);
    }
    if(t.size() == 1) res = min(res, max(t[0].f, t[0].s));
    else
    {
      for(int i=1;i<t.size();i++)
        res = min(res, (dist[x][y] + t[i-1].f + t[i].s) / 2);
    }
  }
  cout << res * 1.0 / 2;
  return 0;
}