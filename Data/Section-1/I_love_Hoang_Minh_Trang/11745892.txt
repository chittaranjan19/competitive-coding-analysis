const   inf     =trunc(1e9)+7;

var PW          :Array[0..trunc(1e6)] of int64;
        k,u,ans,sum,v:int64;
        i       :longint;

function mul(x, y:int64):int64;
begin
        mul:=((x mod inf)*(y mod inf)) mod inf;
end;

function Power(x,y:int64):int64;
var tmp :int64;
begin
        if (y=0) then exit(1);
        tmp:=Power(x, y div 2);
        tmp:=mul(tmp,tmp);
        Power:=tmp;
        if y mod 2=1 then Power:=mul(tmp,x);
end;

function C(k,n:int64):int64;
begin
        C:=mul(mul(Power(PW[k],inf-2),Power(PW[n-k],inf-2)),PW[n]);
end;

begin
        PW[0]:=1;
        for i:=1 to trunc(1e6) do
                Pw[i]:=mul(PW[i-1],int64(i));
        ans:=1;
        sum:=0;
        //writeln(c(3,5),'==');
        readln(k);
        while k>0 do
        begin
                readln(u);
                if (u>1) then
                begin
                        sum:=sum+u-1;
                        ans:=mul(ans, C(u-1,sum));
                end;
                inc(sum);
                dec(k);
        end;
        writeln(ans);
end.