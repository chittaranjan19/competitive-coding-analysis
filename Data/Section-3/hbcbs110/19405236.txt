#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
using namespace std;
const int INF=0x7fffffff;
int stk[50005],top=0;
struct Point
{
    long long x,y;
    Point(){}
    Point(long long _x,long long _y)
    {
        x=_x; y=_y;
    }
    Point operator - (const Point &b) const
    {
        return Point(x-b.x,y-b.y);
    }
    Point operator + (const Point &b) const
    {
        return Point(x+b.x,y+b.y);
    }
    long long operator ^ (const Point &b) const
    {
        return x*b.y-y*b.x;
    }
    long long operator * (const Point &b) const
    {
        return x*b.x+y*b.y;
    }
    bool operator == (const Point &b) const
    {
         return (x==b.x&&y==b.y);
    }
}p[50005],A,B,C,AA,AB,AC;
bool cmp(Point a,Point b)
{
    Point d_a=a-p[0],d_b=b-p[0];
    if((d_a^d_b)>0) return 1;
    else if((d_a^d_b)<0) return 0;
         else return abs(d_a.x)<abs(d_b.x);
}
void Graham(int n)
{
    int i;
    stk[top++]=0;
    for(i=1;p[i]==p[0];i++);
    stk[top++]=i++;
    for(;i<n;i++)
    {
        if(((p[top-1]-p[top-2])^(p[i]-p[top-1]))>0)
        {
            stk[top++]=i;
            continue;
        }else{
            stk[top-1]=i;
            continue;
        }
    }
}
long long sss(Point a,Point b,Point c)
{
    return ((b-a)^(c-a));
}
void TriangleS()
{
    A=p[stk[0]],B=p[stk[1]],C=p[stk[2]];
    bool flag=0;
    while(1)
    {
        flag=0;
        for(int i=0;i<top;i++)
        {
            if(sss(p[stk[i]],B,C)>sss(A,B,C))
            {
                A=p[stk[i]];
                flag=1;
            }
            if(sss(A,p[stk[i]],C)>sss(A,B,C))
            {
                B=p[stk[i]];
                flag=1;
            }
            if(sss(A,B,p[stk[i]])>sss(A,B,C))
            {
                C=p[stk[i]];
                flag=1;
            }
        }
        if(flag==0) break;
    }
}
int main()
{
    long long n,s;
    int xm,ym,nm,i;
    cin>>n>>s;
    xm=INF;
    ym=INF;
    for(i=0;i<n;i++)
    {
        scanf("%d%d",&p[i].x,&p[i].y);
        if(p[i].y<ym)
        {
            xm=p[i].x;
            ym=p[i].y;
            nm=i;
        }else if(p[i].y==ym&&p[i].x<xm)
              {
                  xm=p[i].x;
                  ym=p[i].y;
                  nm=i;
              }
    }
    swap(p[0],p[nm]);
    sort(p+1,p+n,cmp);
    Graham(n);
    TriangleS();
    AA=A+((B-A)+(C-A));
    AB=B+((A-B)+(C-B));
    AC=C+((A-C)+(B-C));
    printf("%I64d %I64d\n",AA.x,AA.y);
    printf("%I64d %I64d\n",AB.x,AB.y);
    printf("%I64d %I64d\n",AC.x,AC.y);
    return 0;
}

