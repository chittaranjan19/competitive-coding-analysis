#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

LL DP[(1 << 18) + 5][100];
bool v[(1 << 18) + 5][100];
int n, m;
char s[20];

LL solve(int mask, int rem)
{
  if(mask == ((1 << n) - 1)) return (rem == 0);
  if(v[mask][rem]) return DP[mask][rem];
  v[mask][rem] = true;
  LL res = 0;
  int m2 = ((mask == 0)?1:0);
  for(int i=0;i<n;i++)
  {
    if(mask & (1 << i)) continue;
    if(m2 & (1 << (s[i] - '0'))) continue;
    m2|=1 << (s[i] - '0');
    res+=solve(mask | (1 << i), (rem * 10 + s[i] - '0') % m);
  }
  DP[mask][rem] = res;
  return res;
}

int main()
{
  //freopen("immetric.in", "r", stdin);
  //freopen("immetric.out", "w", stdout);
  scanf("%s %d", s, &m);
  n = strlen(s);
  printf("%I64d", solve(0, 0));
  return 0;
}