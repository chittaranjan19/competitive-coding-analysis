uses    math;
const   fi      ='';
        fo      ='';
        oo      =trunc(1e5);

var     n       :longint;
        a       :array[0..oo] of longint;
        d, c    :array[0..oo] of longint;
        f       :text;
        res     :longint;
procedure nhap;
var     i :longint;
begin

        assign(f, fi);
        reset(f);
        read(f, n);
        for i:=1 to n do read(f, a[i]);
        close(f);
end;

procedure optimize;
var     i, j    :longint;
begin
        a[0]:=-10;
        a[n+1]:=high(longint);
        c[0]:=0;
        c[1]:=1;
        c[n+1]:=0;
        for i:=2 to n do
                if a[i-1]<a[i] then c[i]:=c[i-1]+1 else c[i]:=1;
        d[0]:=0;
        d[n]:=1;
        d[n+1]:=0;
        for i:=n-1 downto 1 do
                if a[i]<a[i+1] then d[i]:=d[i+1]+1 else d[i]:=1;

        if (d[1]=n) and (c[n]=n) then res:=n;
        if (a[2]>=2) then res:=max(d[2]+1,res)
                else res:=max(d[2],res);
        if (a[n-1]<=trunc(1e9)-1) then res:=max(c[n-1]+1, res)
                else res:=max(c[n-1], res);

        for i:=2 to n-1 do
                begin
                if (a[i-1]+1<a[i+1]) then
                        begin
                        if (c[i-1]+d[i+1]+1 > res) then res:=c[i-1]+d[i+1]+1;
                        end
                else
                        begin
                                if a[i-1]=trunc(1e9) then
                                        if a[i+1]=2 then
                                        res:=max(c[i-1], d[i+1])
                                        else
                                        res:=max(c[i-1], a[i+1]+1)
                                else
                                if a[i+1]=1 then
                                        if a[i-1]=trunc(1e9) then
                                        res:=max(c[i-1],d[i+1])
                                        else
                                        res:=max(c[i-1]+1,d[i+1])
                                else

                                res:=max(c[i-1], d[i+1]) + 1;
                        end;
                      //  writeln(i,' ',res);
                 end;
      {  for i:=1 to n do write(c[i],' ');
        writeln;
        for i:=1 to n do write(d[i],' ');
        writeln;    }
end;

procedure xuat;
begin
        assign(f, fo);
        rewrite(F);
        write(f, res);
        close(f);
end;

BEGIN
        nhap;
        optimize;
        xuat;
END.
