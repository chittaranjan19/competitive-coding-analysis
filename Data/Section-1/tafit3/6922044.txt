import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ArtemAndArray {
    private SortedMap<Integer, Set<Integer>> m = new TreeMap<Integer, Set<Integer>>();

    private ArtemAndArray() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String h = rd.readLine();
        h = rd.readLine();
        String[] q = h.split(" ");
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        long res = 0;
        if(n > 2) {
            int[] left = new int[n];
            int[] right = new int[n];
            for(int i=0;i<n;i++) {
                if(i > 0 && i<n-1) {
                    int pts = Math.min(a[i-1], a[i+1]);
                    put(pts, i);
                    left[i] = i-1;
                    right[i] = i+1;
                }
            }
            while(!m.isEmpty()) {
                Integer pts = m.lastKey();
                Set<Integer> nodeMap = m.get(pts);
                Integer index = nodeMap.iterator().next();
                if(nodeMap.size() == 1) {
                    m.remove(pts);
                } else {
                    nodeMap.remove(index);
                }
                res += pts;

                if(left[index] > 0) {
                    int oldMin = Math.min(a[left[left[index]]], a[index]);
                    int newMin = Math.min(a[left[left[index]]], a[right[index]]);
                    right[left[index]]=right[index];
                    rebind(oldMin, newMin, left[index]);
                }

                if(right[index] < n-1) {
                    int oldMin = Math.min(a[right[right[index]]], a[index]);
                    int newMin = Math.min(a[right[right[index]]], a[left[index]]);
                    left[right[index]]=left[index];
                    rebind(oldMin, newMin, right[index]);
                }
            }
        }
        out(res);
    }

    private void rebind(int oldMin, int newMin, int index) {
        Set<Integer> nodeMap = m.get(oldMin);
        if(nodeMap.size() == 1) {
            m.remove(oldMin);
        } else {
            nodeMap.remove(index);
        }

        put(newMin, index);
    }

    private void put(int pts, int index) {
        Set<Integer> nMap = m.get(pts);
        if(nMap == null) {
            nMap = new HashSet<Integer>();
            m.put(pts, nMap);
        }
        nMap.add(index);
    }


    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ArtemAndArray();
    }
}
