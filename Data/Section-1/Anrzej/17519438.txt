#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>
#include <unordered_map>

//#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e4 + 10, l = 20;
const int MAX = 300;

int free_invokers, p;
int times[N], tests[N];
bool used[N];
char buffer[MAX];

int cur_solution = 0;
unordered_map<int, set<int> > solutions;
unordered_map<int, set<int> >::iterator map_iter;

int main()
{
	memset(used, 0, sizeof(used));
	cin >> free_invokers >> p;
	for (int i = 0; i < p; i++)
		cin >> times[i] >> tests[i];
	 
	do{
		int new_solution = 0;
		/* читаем новые посылки */
		while (1){
			cin >> new_solution;
			if (new_solution == -1) break;
			set<int> solved;
			for (int i = 0; i < tests[new_solution]; i++)
				solved.insert(i);
			solutions[cur_solution++] = solved;
		}
		/* читаем блок вердиктов инвокеров */
		while (1){
			int index, test;
			string result;
			cin >> index;
			if (index == -1){
				cin >> index;
				break;
			}
			cin >> test >> result;
			if (result == "RJ" && solutions.count(index))
				solutions.erase(index);
			//solutions[index][test] = 1;
			free_invokers += 1;
		}
		/* отсылаем решения на инвокеры */
		while (1){
			if (free_invokers == 0)
				break;
			int cur = -1, for_testing;
			for (map_iter = solutions.begin(); map_iter != solutions.end(); map_iter++)
			{
				cur = map_iter->fs;
				for_testing = *map_iter->sc.begin();
				//map_iter->sc.erase(map_iter->sc.begin());
				break;
			}
			if (cur == -1)
				break;
			solutions[cur].erase(for_testing);
			if (solutions[cur].size() == 0)
				solutions.erase(cur);
			free_invokers -= 1;
			cout << cur << ' ' << for_testing << endl;
			fflush(stdout);
		}
		cout << "-1 -1" << endl;
		fflush(stdout);
	} while(!cin.eof());

	return 0;
}