//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 2e5 + 10;

int N;
vector<pii> inds[MAXN];
int ans[MAXN];

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces490B.in", "r", stdin);
#endif
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		inds[a].push_back(pii(b, 1));
		inds[b].push_back(pii(a, 0));
	}
	//find the one that has "0" as the beginning
	//what should i write?
	int s = 0;
	rep(it, inds[0]) {
		if (it->second) {
			s = it->first;
			break;
		}
	}
	// assert(s);
	ans[1] = s;
	int prv = 0;
	for (int i = 3; ; i += 2) {
		//ok let's now put the next one
		int nxt = 0;
		rep(it, inds[s]) {
			if (it->second) {
				nxt = it->first;
				break;
			}
		}
		if (nxt) {
			ans[i] = nxt;
			prv = s;
			s = nxt;
		} else {
			break;
		}
	}
	//now find the one that is only one
	for (int i = 0; i < 5 * MAXN; i++) {
		if (inds[i].size() == 1) {
			//if it appears exactly once
			if (inds[i][0].second) {
				s = i;
				break;
			}
		}
	}
	// assert(s);
	ans[0] = prv = s;
	s = inds[s][0].first;
	for (int i = 2; ; i += 2) {
		ans[i] = s;
		int nxt = 0;
		rep(it, inds[s]) {
			if (it->second) {
				nxt = it->first;
				break;
			}
		}
		if (nxt) {
			s = nxt;
		} else {
			break;
		}
	}
	for (int i = 0; i < N; i++) {
		printf("%d ", ans[i]);
	}
}