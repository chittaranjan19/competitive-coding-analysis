#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>


#define forn(i,n) for(int i=0;i<(int)(n); i++)

using namespace std;
vector<int> color;
vector<vector<int> > grafo;
vector<vector<int> > caminos;
int blanco = 0;
int gris = 1;
int negro = 2;
int q = 0;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

vector<int> permutar(vector<int> p,int i, int j)
{
	int h = p[i];
	p[i] = p[j];
	p[j] = h;
	return p;
	
}

void dfs(int i)
{
	color[i] = gris;
	forn(j,grafo[i].size())
		if (color[grafo[i][j]] == blanco)
			dfs(grafo[i][j]);
	color[i] = negro;
	caminos[q].push_back(i);
}


int main()
{
	int n;
	cin >> n;
	vector <int> p (n);
	forn(i,n)
		cin >> p[i];
	grafo = vector<vector<int> >(n);
	forn(i,n)
	{
		string y;
		cin >> y;
		for(int j = i; j < n; j++)
			if (y[j] == '1')
			{
				grafo[i].push_back(j);
				grafo[j].push_back(i);
			}
	}
	color = vector<int> (n,blanco);
	caminos = vector<vector<int> > (n);
	forn(i,n)
		if (color[i] == blanco)
		{
			dfs(i);
			q++;
		}
	while (caminos.back().empty())
		caminos.pop_back();
	int l = caminos.size();
	vector<vector <int> > values;
	values = caminos;
	forn(i,l)
		sort(caminos[i].begin(),caminos[i].end());
	forn(i,l)
	forn(j,caminos[i].size())
		values[i][j] = p[caminos[i][j]];
	forn(i,l)
		sort(values[i].begin(),values[i].end());
	forn(i,l)
	forn(j,caminos[i].size())
		p[caminos[i][j]] = values[i][j];
	forn(i,n)
		cout << p[i] << " ";
	cout << endl;
	return 0;
}
//
//	forn(i,n)
//

