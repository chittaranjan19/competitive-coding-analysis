#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

bool esValido(tint l,vector<tint> &a)
{
	tint n = a.size();
	map<tint,tint> app;
	forn(i,l)
		app[a[i]]++;
	if (app.size() <= 2)
		return true;
	else
	{
		forsn(i,l,n)
		{
			app[a[i-l]]--;
			app[a[i]]++;
			if (app[a[i-l]] == 0)
				app.erase(a[i-l]);
			if (app.size() == 2)
				return true;
		}
	}
	return false;
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<tint> a (n);
	forn(i,n)
		cin >> a[i];
	tint cinf = 2;
	tint csup = n+1;
	while (csup - cinf > 1)
	{
		tint c = (csup + cinf)/2;
		if (esValido(c,a))
			cinf = c;
		else
			csup = c;
	}
	cout << cinf << endl;
	 
	return 0;
}



