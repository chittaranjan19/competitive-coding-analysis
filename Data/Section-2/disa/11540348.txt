#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
#include <iomanip>
#include <map>
#include <cmath>
#include <queue>
#include <time.h>
using namespace std;

typedef long long ll;

#if _DEBUG
#include <fstream>
ifstream cin("input.txt");
ofstream cout("output.txt");
#else
#include <iostream> 
#endif

vector < vector <int> > vv;

int n, m, h, t;


vector < pair <int, int> > edges;

bool good(int v1, int v2) {
	vector <int> all;
	for (int i = 0; i < vv[v1].size(); i++) {
		all.push_back(vv[v1][i]);
	}
	for (int i = 0; i < vv[v2].size(); i++) {
		all.push_back(vv[v2][i]);
	}
	sort(all.begin(), all.end());
	for (int i = 1; i < all.size(); i++) {
		if (all[i] == all[i - 1])
			return false;
	}
	return true;
}

int main() {
	cin >> n >> m >> h >> t;
	vv.resize(n + 1);
	for (int i = 0; i < m; i++) {
		int from, to;
		cin >> from >> to;
		vv[from].push_back(to);
		vv[to].push_back(from);
		edges.push_back(make_pair(from, to));
		edges.push_back(make_pair(to, from));
	}
	for (int i = 0; i <= n; i++) {
		sort(vv[i].begin(), vv[i].end());
	}
	for(int i = 0; i < edges.size(); i++) {
		int u = edges[i].first;
		int v = edges[i].second;
		if (vv[u].size() - 1 == h && vv[v].size() - 1 == t && good(u, v)) {
			cout << "YES\n";
			cout << u << ' ' << v << '\n';
			for (int j = 0; j < vv[u].size(); j++) {
				if (vv[u][j] != v)
					cout << vv[u][j] << ' ';
			}
			cout << '\n';
			for (int j = 0; j < vv[v].size(); j++) {
				if (vv[v][j] != u)
					cout << vv[v][j] << ' ';
			}
			cout << '\n';
			return 0;
		}
	}
	cout << "NO\n";
	return 0;
}