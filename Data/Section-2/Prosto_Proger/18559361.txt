#include <iostream>
#include <vector>

using namespace std;

const int max_n = 1e5;
vector <int> a;
vector < pair <int, int> > g[max_n];
int ans;

void dfs(int v, int sum, int min_sum, int pred)
{
    --ans;
    min_sum = min(min_sum, sum);
    for (int i = 0; i < g[v].size(); ++i)
    {
        if (g[v][i].first != pred and sum - min_sum <= a[ g[v][i].first ] )
            dfs( g[v][i].first, sum + g[v][i].second, min_sum, v);
    }
}


int main()
{
    int n;
    cin >> n; ans = n;
    a.resize(n);
    for (int i = 0; i < n; ++i)
        cin >> a[i];

    for (int i = 0; i < n - 1; ++i) {
        int x, ves;
        cin >> x >> ves; --x;
        g[i].push_back(make_pair(x, ves));
        g[x].push_back(make_pair(i, ves));
    }
    dfs(0, 0, 0, -1);
    cout << n - ans << endl;
    return 0;
}
