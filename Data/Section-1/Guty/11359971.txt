#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint findPeak(tint h1, tint h2, tint d)
{
	if (h2-h1 > d)
		return -1;
	else
		return (d-h2+h1)/2;
}

int main()
{
	tint n,m,hAct,hPos,dAct,dPos,maxPeak = 0;
	cin >> n >> m;
	cin >> dAct >> hAct;
	dPos = dAct;
	hPos = hAct;
	maxPeak = max(maxPeak,(hAct +dAct-1));
	forsn(i,1,m)
	{
		hAct = hPos;
		dAct = dPos;
		cin >> dPos >> hPos;
		tint peak = findPeak(min(hAct,hPos),max(hAct,hPos),dPos-dAct);
		if (peak != -1)
			maxPeak = max(maxPeak,peak);
		else
		{
			cout << "IMPOSSIBLE" << endl;
			return 0;
		}
	}
	maxPeak = max(maxPeak,hPos+n-dPos);
	cout << maxPeak << endl;
	return 0;
}
