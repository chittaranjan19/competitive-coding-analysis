import java.io.*;
import java.util.*;

public class Main {
	static BitSet[] books;
	static long[] numBook;
	
	static String[] movesMade;
	static HashMap<Integer, BitSet[]> memo;
	static HashSet<Integer> remember;
	
	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		
		String line = bf.readLine();
		String[] tmp = line.split(" ");
		
		int N = Integer.parseInt(tmp[0]);
		int M = Integer.parseInt(tmp[1]);
		int Q = Integer.parseInt(tmp[2]);
		
		StringBuilder sb = new StringBuilder();
		books = new BitSet[N];
		numBook = new long[Q+1];
		movesMade = new String[Q];
		memo = new HashMap<>();
		remember = new HashSet<>();
		
		for(int i = 0 ; i < N ; i++){
			books[i] = new BitSet(M);
		}
		
		memo.put(0, books);
		
		long curr = 0;
		
		
		for(int i = 0 ; i < Q ; i++){
			movesMade[i] = bf.readLine();
			tmp = movesMade[i].split(" ");
			
			int operation = Integer.parseInt(tmp[0]);
			
			if(operation == 4){
				remember.add(Integer.parseInt(tmp[1]));
			}
		}
		
		for(int i = 0 ; i < Q ; i++){
			
			line = movesMade[i];
			tmp = line.split(" ");
			
			int operation = Integer.parseInt(tmp[0]);
			
			if(operation == 1){
				int a = Integer.parseInt(tmp[1]);
				int b = Integer.parseInt(tmp[2]);
				a--;
				b--;
				if(!books[a].get(b)){
					books[a].set(b);
					curr++;
				}
			}
			else if(operation == 2){
				int a = Integer.parseInt(tmp[1]);
				int b = Integer.parseInt(tmp[2]);
				a--;
				b--;
				if(books[a].get(b)){
					books[a].clear(b);
					curr--;
				}
			}
			else if(operation == 3){
				int a = Integer.parseInt(tmp[1]);
				a--;
				int numBooks =  books[a].cardinality();
				books[a].flip(0, M);
				curr -= numBooks;
				curr += (M - numBooks);
			}
			else{
				int a = Integer.parseInt(tmp[1]);
				books = memo.get(a);
				curr = numBook[a];
			}
			
			sb.append(curr + "\n");
			numBook[i+1] = curr;
			
			if(remember.contains(i+1)){
				memo.put(i+1, books);
			}
		}
		
		System.out.println(sb.toString());
	}
	
}
