#include<stdio.h>
#include<stack>
#include<queue>
#include<algorithm>
using namespace std;
struct A
{
    int a1;
    int b1;
};
class priortise
{
public:
    bool operator()(const struct A &a,const struct A &b)
    {
        return a.a1>b.a1;
    }
};
int main()
{
    int n,m,k;
    bool visited[101][101]={false};
    stack<struct A>q;
    scanf("%d%d%d",&n,&m,&k);
    for(int i=0;i<n;i++)
    {
        int a[m+1];
        for(int j=1;j<=m;j++)
            scanf("%d",&a[j]);
        if(k==0)
        {

        for(int j=m;j>0;j--)
        {
            int max=a[j],pos=-1;
            for(int k=j-1;k>0;k--)
            {
                if(a[k]>max)
                {
                    max=a[k];
                    pos=k;
                }
            }

            if(pos!=-1)
            {


            struct A temp;
            temp.a1=pos;
            temp.b1=j;

            if(!visited[j][pos])
                {

                q.push(temp);
                visited[j][pos]=true;
                visited[pos][j]=true;
                }
            int x=a[j];
            a[j]=a[pos];
            a[pos]=x;
            }
        }
        }
        else
        {
            for(int j=1;j<=m;j++)
            {
                int max=a[j],pos=-1;
                for(int k=i+1;k<=m;k++)
                {
                    if(a[k]>max)
                    {
                        max=a[k];
                        pos=k;
                    }
                }
                if(pos!=-1)
                {


                struct A temp;
                temp.a1=pos;
                temp.b1=j;
                if(!visited[j][pos])
                {

                q.push(temp);
                visited[j][pos]=true;
                visited[pos][j]=true;
                }
                int x=a[j];
                a[j]=a[pos];
                a[pos]=x;
                }
            }

        }


    }

    printf("%d\n",q.size());
    priority_queue<struct A,vector<struct A>,priortise>h;
    while(!q.empty())
    {
        h.push(q.top());
        q.pop();
    }
    while(!h.empty())
    {
        printf("%d %d\n",h.top().a1,h.top().b1);
        h.pop();
    }
    return 0;
}
