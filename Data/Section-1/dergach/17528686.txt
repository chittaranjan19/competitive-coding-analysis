#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define INF mod
#define pi acos(-1.0)
#define LINF 1000000000000000000LL
#define eps 1e-10

const int SIMULTANEOUS_SOLUTION_COUNT = 3;

int t, p;
char s[105];
int solutionCnt;
int curTime;

struct problem
{
	int TL;
	int testCnt;
}problems[10005];

struct solution
{
	int problemId;
	int solutionId;
	vector <int> checked; //0 - not checked, 1 - is checking now, 2 - checked
	int startTime;
	int remainedTestCnt; //not checked yet

	solution(int _problemId, int _solutionId, int _startTime) : problemId(_problemId), solutionId(_solutionId), startTime(_startTime)
	{
		if(problemId >= 0)
		{
			checked.resize(problems[problemId].testCnt);
			remainedTestCnt = problems[problemId].testCnt;
		}
	}

	double rating() const
	{
		if(remainedTestCnt == 0)
			return -1;
		return pow(curTime - startTime + 0.0, 3) / 
			(remainedTestCnt * problems[problemId].TL / 10.0 * 0.2); // dividing by 10 means (ms -> ticks)
		                                                             // most of tests are executed much faster than TL -> 0.2
	}

	const bool operator<(const solution& sol) const
	{
		return rating() > sol.rating();	
	}
};

bool sortByIndex(const solution& sol1, const solution& sol2)
{
	return sol1.solutionId < sol2.solutionId;
}

bool sortByRating(const solution& sol1, const solution& sol2)
{
	return sol1.rating() > sol2.rating();
}

vector <solution> solutions;
vector <pair <vector <int>*, int*> > solutionsById;
vector <int> finished;

int findIndexBySolutionId(int solutionId)
{
	int L = 0, R = solutions.size() - 1;
	while(L < R)
	{
		int C = (L + R) / 2;
		if(solutions[C].solutionId < solutionId)
			L = C + 1;
		else
			R = C;
	}
	if(solutions[R].solutionId == solutionId)
		return R;
	return -1;
}

int main()
{
	scanf("%d", &t);
	scanf("%d", &p);
	for(int i = 0; i < p; i++)
	{
		scanf("%d %d", &problems[i].TL, &problems[i].testCnt);
	}
	int problemId;
	while(scanf("%d", &problemId) != EOF)
	{	
		if(problemId >= 0)
		{
			solutions.push_back(solution(problemId, solutionCnt++, curTime));
			solutionsById.push_back(make_pair(&solutions.back().checked, &solutions.back().remainedTestCnt));
			finished.push_back(0);
			while(scanf("%d", &problemId) != EOF) //read list of new solutions
			{
				if(problemId == -1)
					break;
				solutions.push_back(solution(problemId, solutionCnt++, curTime));
				solutionsById.push_back(make_pair(&solutions.back().checked, &solutions.back().remainedTestCnt));
				finished.push_back(0);
			}
		}

		while(1) //read verdicts
		{
			int solutionId, testNumber;
			scanf("%d %d", &solutionId, &testNumber);
			if(solutionId == -1 && testNumber == -1)
				break;
			t++;
			scanf("%s", s);
			if(finished[solutionId] == 0)
			{
				if(s[0] == 'O') // OK
				{
					solutionsById[solutionId].first->at(testNumber) = 2;
				}
				else            // RJ
				{
					*solutionsById[solutionId].second = 0;
				}
			}
		}

		sort(solutions.begin(), solutions.end(), sortByRating);
		while(!solutions.empty() && solutions.back().rating() < 0)
		{
			finished[solutions.back().solutionId] = 1;
			solutions.pop_back();
		}

		//assign checking tasks
		{
			int simultaneousSolutionCnt = min(SIMULTANEOUS_SOLUTION_COUNT, (int)solutions.size());
			int testSum = 0;
			for(int i = 0; i < simultaneousSolutionCnt; i++)
				testSum += solutions[i].remainedTestCnt;
			while(simultaneousSolutionCnt < solutions.size() && t > testSum)
			{
				testSum += solutions[simultaneousSolutionCnt++].remainedTestCnt;
			}
			double ratingSum = 0;
			for(int i = 0; i < simultaneousSolutionCnt; i++)
				ratingSum += solutions[i].rating();
			int initialT = t;
			for(int i = 0; i < simultaneousSolutionCnt && t > 0; i++)
			{
				int curLimit = min(t, (int)ceil(solutions[i].rating() / ratingSum * initialT));
				for(int j = 0; curLimit > 0 && j < solutions[i].checked.size(); j++)
					if(solutions[i].checked[j] == 0)
					{
						t--;
						curLimit--;
						printf("%d %d\n", solutions[i].solutionId, j);
						solutions[i].checked[j] = 1;
						solutions[i].remainedTestCnt--;
					}
			}
			//maybe some curLimits were bigger than needed
			for(int i = 0; i < simultaneousSolutionCnt && t > 0; i++)
			{
				for(int j = 0; t > 0 && j < solutions[i].checked.size(); j++)
					if(solutions[i].checked[j] == 0)
					{
						t--;
						printf("%d %d\n", solutions[i].solutionId, j);
						solutions[i].checked[j] = 1;
						solutions[i].remainedTestCnt--;
					}
			}
		}
		puts("-1 -1");
		curTime++;
		fflush(stdout);
	}
	return 0;
}