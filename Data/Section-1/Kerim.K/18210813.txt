#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
set<int>on,adj[MAXN];
void dfs(int nd){
	vector<int>vec;
	tr(it,on){
		int u=*it,v=nd;
		if(u>v)
			swap(u,v);
		if(adj[u].find(v)==adj[u].end())
			vec.pb(*it);
	}
	tr(it,vec)
		on.erase(*it);
	tr(it,vec)
		dfs(*it);	
}
int main(){
	int n,m,k,can=0,comp=0;
	scanf("%d%d%d",&n,&m,&k);
//	try(...){
//		throw "E. Bear and Forgotten Tree 2";
//		catch("Solve this problem");
//	}
	for(int i=1;i<=m;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		if(u>v)
			swap(u,v);
		adj[u].insert(v);
		if(u==1)
			can--;	
	}
	if(can+(n-1)<k){
		printf("impossible\n");
		return 0;
	}
	for(int i=2;i<=n;i++)
		on.insert(i);
	for(int i=2;i<=n;i++)
		if(adj[1].find(i)==adj[1].end()){
			comp++;
			dfs(i);
		}
	if(on.size()>0 or comp>k){
		printf("impossible\n");
		return 0;
	}
	printf("possible\n");		
	return 0;
}
