#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 2010;

int d, n, arr[maxn];
vector<int> adj[maxn];
ll dp[maxn][maxn][2];

void solve(int cur, int st, int e, int parent)
{
    if(dp[cur][st][e]!=-1)
        return;
    ll ret, x;
    if(arr[cur]<st || arr[cur]>st+d){
        dp[cur][st][e] = e;
        for(auto it: adj[cur]){
            if(it==parent)
                continue;
            solve(it, st, 0, cur);
        }
        return;
    }
    ret = 1;
    for(auto it: adj[cur]){
        if(it==parent)
            continue;
        solve(it, st, 1, cur);
        ret = (ret*dp[it][st][1])%mod;
        solve(it, st, 0, cur);
    }
    dp[cur][st][e] = (ret+e)%mod;
}

int main()
{
    //freopen("i.txt", "r", stdin);
    //freopen("o.txt", "w", stdout);
    int i, j, u, v;
    memset(dp, -1, sizeof(dp));
    scanf("%d%d", &d, &n);
    for(i=1; i<=n; i++)
        scanf("%d", &arr[i]);
    for(i=0; i<n-1; i++){
        scanf("%d%d", &u, &v);
        adj[u].pb(v);
        adj[v].pb(u);
    }
    ll ans = 0;
    for(i=1; i<=2000-d; i++){
        solve(1, i, 0, 0);
        for(j=1; j<=n; j++)
            ans = (ans+dp[j][i][0])%mod;
    }
    /*for(i=1; i<=4; i++){
        for(j=1; j<=4; j++)
            cout << dp[i][j][0] << " " << dp[i][j][1] << "\n";
        cout  << "\n\n";
    }*/
    memset(dp, -1, sizeof(dp));
    d--;
    for(i=2; i<=2000-d; i++){
        solve(1, i, 0, 0);
        for(j=1; j<=n; j++)
            ans = (ans-dp[j][i][0]+mod)%mod;
    }
    /*for(i=1; i<=4; i++){
        for(j=1; j<=4; j++)
            cout << dp[i][j][0] << " " << dp[i][j][1] << "\n";
        cout  << "\n\n";
    }*/
    printf("%lld\n", ans);
    return 0;
}
