import javafx.scene.control.Tab;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.PrintWriter;
import java.util.*;

/**
 * Created by leen on 8/5/16.
 */
public class _703D {

    public static void main(String[] args) {
        Scanner scan = new Scanner(new BufferedInputStream(System.in, 1024*64));
        int n = scan.nextInt();
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = scan.nextInt();
        int m = scan.nextInt();
        List<Query>[] queriesByLeft = new List[n];
        Query[] queries = new Query[m];
        for(int i = 0; i < m; i++) {
            int qLeft = scan.nextInt()-1, qRight = scan.nextInt()-1;
            Query q = new Query(qLeft, qRight);
            queries[i] = q;
            List<Query> ls = queriesByLeft[qLeft];
            if(ls == null) {
                ls = new ArrayList<Query>();
                queriesByLeft[qLeft] = ls;
            }
            ls.add(q);
        }

        int l = 0, r = 0;
        int unanswered = m;
        Table table = new Table();
        table.add(a[0]);

        while(unanswered > 0 && l < n) {
            List<Query> queries1 = queriesByLeft[l];
            if(queries1 != null) {
                Collections.sort(queries1, new Comparator<Query>() {
                    @Override
                    public int compare(Query o1, Query o2) {
                        return o1.right - o2.right;
                    }
                });

                for(Query q : queries1) {
                    if(q.right >= r) {
                        while(r < q.right)
                            table.add(a[++r]);
                        q.ans = table.mask;
                        unanswered--;
                    }
                }
            }
            table.remove(a[l++]);
        }

        if(unanswered > 0) {
            table.reset();
            for(int i = 0; i < n; i++)
                table.add(a[i]);

            l = 0;
            r = n - 1;

            while(unanswered > 0 && l < n) {
                List<Query> queries1 = queriesByLeft[l];
                if(queries1 != null) {
                    Collections.sort(queries1, new Comparator<Query>() {
                        @Override
                        public int compare(Query o1, Query o2) {
                            if(o1.ans == null && o2.ans != null)
                                return -1;
                            if(o1.ans != null && o2.ans == null)
                                return 1;
                            return o2.right - o1.right;
                        }
                    });

                    for(Query q : queries1) {
                        if(q.ans != null)
                            break;
                        while(r > q.right)
                            table.remove(a[--r]);
                        q.ans = table.mask;
                        unanswered--;
                    }
                }
                table.remove(a[l++]);
            }
        }

        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out, 1024 * 64));
        for(Query q : queries)
            pw.println(q.ans);

        pw.flush();
    }

    static class Query {
        final int left;
        final int right;
        Integer ans = null;

        Query(int left, int right) {
            this.left = left;
            this.right = right;
        }
    }

    static class Table {
        final Map<Integer,Integer> num2time = new HashMap<Integer, Integer>();
        int mask;

        void add(int value) {
            Integer time = num2time.get(value);
            if(time == null)
                num2time.put(value, 1);
            else {
                num2time.put(value, time + 1);
                mask ^= value;
            }
        }

        void remove(int value) {
            int time = num2time.get(value);
            num2time.put(value, time - 1);
            if(time > 1)
                mask ^= value;
        }

        void reset() {
            mask = 0;
            num2time.clear();
        }
    }
}
