#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define INF mod
#define pi acos(-1.0)
#define LINF 1000000000000000000LL
#define eps 1e-10

struct Test
{
    Test(size_t _id):id(_id)
    {
        w = 0.;
    }
    double w;
    size_t id;
    const bool operator<(const Test& t) const
    {
        if(w == t.w)
            return id < t.id;
        return w > t.w;
    }
};

bool sortTest(const Test& t1, const Test& t2)
{
    return t1.w > t2.w;
}

struct problem
{
    int TL;
    int testCnt;
    vector<Test> tests;
    void UpdateTest(const size_t testId)
    {
        for(size_t i = 0; i < tests.size(); ++i)
        {
            if(tests[i].id == testId)
            {
                tests[i].w++;
                break;
            }
        }
        sort(tests.begin(), tests.end(), sortTest);
    }
    
    Test GetTest(const size_t testId)
    {
        for(size_t i = 0; i < tests.size(); ++i)
        {
            if(tests[i].id == testId)
                return tests[i];
        }
        return Test(-1);
    }
    
}problems[10005];

struct solution
{
    int problemId;
    int solutionId;
    vector<bool> checked;
    
    solution(int _problemId, int _solutionId) : problemId(_problemId), solutionId(_solutionId)
    {
        if(problemId >= 0)
        {
            checked.resize(problems[problemId].testCnt);
            fill(checked.begin(), checked.end(), false);
        }
    }
    
//    void sendTests(const vector<Test>& remTests)
//    {
//        for(size_t i = 0; i < tests.size(); ++i)
//        {
//            if(tests.find(remTests[i]) != tests.end())
//            {
//                tests.erase(tests.find(remTests[i]));
//            }
//        }
//    }
    void SendTest(const size_t testId)
    {
        checked[testId] = true;
    }
    
    Test GetNextTest()
    {
        for(size_t i = 0; i < checked.size(); ++i)
        {
            if(!checked[i])
                return problems[problemId].GetTest(i);
        }
        return Test(-1);
    }
    
    bool hasUncheckedTest()
    {
        for(size_t i = 0; i < checked.size(); ++i)
        {
            if(!checked[i])
                return true;
        }
        return false;
    }
    
    const bool operator<(const solution& sol) const
    {
        return solutionId < sol.solutionId;
    }
};

int t, p;
string s;
set <solution> solutions;
int solutionCnt;


void updateTestStatus(set<Test>& source,
                      const vector<Test>& remTests,
                      const size_t newStatus)
{
    
    vector<Test> newTests;
    for(size_t i = 0; i < remTests.size(); ++i)
    {
        Test tt = remTests[i];
        newTests.push_back(tt);
        source.erase(source.find(tt));
    }
}

int main()
{
    //freopen("letter.in", "rt", stdin);
    //freopen("letter.txt", "wt", stdout);
    scanf("%d", &t);
    scanf("%d", &p);
    for(int i = 0; i < p; i++)
    {
        scanf("%d %d", &problems[i].TL, &problems[i].testCnt);
        for(size_t j = 0; j < problems[i].testCnt; ++j)
        {
            problems[i].tests.push_back(Test(j));
        }
    }
    int problemId;
    while(cin >> problemId)
    {
        if(problemId >= 0)
        {
            solutions.insert(solution(problemId, solutionCnt++));
            while(cin >> problemId) //read list of new solutions
            {
                if(problemId == -1)
                    break;
                solutions.insert(solution(problemId, solutionCnt++));
            }
        }
        while(1) //read verdicts
        {
            int solutionId, testNumber;
            scanf("%d %d", &solutionId, &testNumber);
            if(solutionId == -1 && testNumber == -1)
                break;
            t++;
            cin >> s;
            if(solutions.find(solution(-1, solutionId)) != solutions.end())
            {
                solution sol = *(solutions.find(solution(-1, solutionId)));
                solutions.erase(solution(-1, solutionId));
                
                if(s == "OK" && sol.hasUncheckedTest())
                {
                    solutions.insert(sol);
                }
                else if(s != "OK")
                {
                    problems[sol.problemId].UpdateTest(testNumber);
                }
            }
        }
        //assign checking tasks
        {
            vector <solution> curSolutions;
            for(set<solution>::iterator it = solutions.begin(); t > 0 && it != solutions.end(); ++it)
            {
                solution sol = *it;
                Test tt = sol.GetNextTest();
                while(tt.id != -1 && t > 0) {
                    t--;
                    printf("%d %zu\n", sol.solutionId, tt.id);
                    sol.SendTest(tt.id);
                }
                curSolutions.push_back(sol);
            }
            for(int i = 0; i < curSolutions.size(); i++)
                solutions.erase(solution(-1, curSolutions[i].solutionId));
            for(int i = 0; i < curSolutions.size(); i++)
                solutions.insert(curSolutions[i]);
        }
        puts("-1 -1");
        fflush(stdout);
    }
    return 0;
}