#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


tint myPow (tint a, tint b)
{
	tint ans = 1;
	forn(i,b)
		ans *= a;
	return ans;
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint k;
	cin >> k;
	map<char, char> opuesto = {{'+','*'},{'*','+'}};
	tint n = myPow(2,k);
	vector<vector<char> > v (n, vector<char> (n,'+'));
	forsn(r,1,k+1)
	{
		tint p = myPow(2,r);
		forn(i, p/2)
			forsn(j,p/2,p)
				v[i][j] = v[i][j-p/2];
		forsn(i,p/2,p)
			forn(j,p/2)
				v[i][j] = v[i-p/2][j];
		forsn(i,p/2,p)
			forsn(j,p/2,p)
				v[i][j] = opuesto[v[i-p/2][j-p/2]];
	}
	
	forn(i,n)
	{
		forn(j,n)
			cout << v[i][j];
		cout << endl;
	}
 	return 0;
}



