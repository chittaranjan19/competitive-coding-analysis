#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
using namespace std;
vector<int>d;

void bfs(int v, vector<vector<int>>g) {
	queue<int>q;
	q.push(v);
	d[v] = 0;
	while (!q.empty()) {
		v = q.front();
		q.pop();
			for (int j = 0; j < g[v].size(); ++j) {
				int to = g[v][j];
				if (to && d[j] > d[v] + 1) {
					d[j] = d[v] + 1;
					q.push(j);
				}
			}
	}
}

int main() {
	int n,m;
	cin >> n >> m;
	vector<vector<int>>g1(n,vector<int>(n)), g2(n, vector<int>(n));
	d.resize(n,1e9);
	for (int i = 0; i < m; ++i) {
		int to, from;
		cin >> to >> from;
		to--; from--;
		g1[to][from] = 1;
		g1[from][to] = 1;
	}
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (!g1[i][j] && i!=j) {
				g2[i][j] = 1;
			}
		}
	}
	if (g1[0][n - 1]) {
		bfs(0, g2);
		if (d[n - 1] != 1e9)
			cout << d[n - 1];
		else
			cout << -1;
	}
	else {
		bfs(0, g1);
		if (d[n - 1] != 1e9)
			cout << d[n - 1];
		else
			cout << -1;
	}
}