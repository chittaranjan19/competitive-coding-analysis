#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define INF mod
#define pi acos(-1.0)
#define LINF 1000000000000000000LL
#define eps 1e-10

const int SIMULTANEOUS_SOLUTION_COUNT = 10;
const int SOLUTION_NUMBER_FOR_SORTING = 100;
const int TEST_SORT_FREQUENCY = 100000;

int t, p;
char s[105];
int solutionCnt;
ll curTime = 1;

struct test
{
	int testId;
	ll totalTime; //total time of this test execution
	ll executionCnt;

	test() {}
	test(int _testId, ll _totalTime, ll _executionCnt) : testId(_testId), totalTime(_totalTime), executionCnt(_executionCnt) {}

	const bool operator<(const test& tst) const
	{
		if((totalTime * tst.executionCnt) != (tst.totalTime * executionCnt))
			return (totalTime * tst.executionCnt) < (tst.totalTime * executionCnt);
		return testId < tst.testId;
	}
};

struct problem
{
	int TL;
	int testCnt;
	set<test> tests;

	problem() {}
	problem(int _TL, int _testCnt) : TL(_TL), testCnt(_testCnt)
	{
		for(int i = 0; i < testCnt; i++)
			tests.insert(test(i, TL, 1));
	}
}problems[10005];

struct solution
{
	int problemId;
	int solutionId;
	vector <int> checked; //0 - not checked, positive number means start time of the test execution
	int startTime;
	int remainedTestCnt; //not checked yet

	solution(int _problemId, int _solutionId, int _startTime) : problemId(_problemId), solutionId(_solutionId), startTime(_startTime)
	{
		if(problemId >= 0)
		{
			checked.resize(problems[problemId].testCnt);
			remainedTestCnt = problems[problemId].testCnt;
		}
	}

	double rating() const
	{
		if(remainedTestCnt == 0)
			return -1;
		//return pow((curTime - startTime) * 10.0 + 1.0, 1.25) / 
		//	(remainedTestCnt * problems[problemId].TL * 0.2); // dividing by 10 means (ms -> ticks)
		                                                             // most of tests are executed much faster than TL -> 0.2

		//return pow((curTime - startTime) * 10.0 + 1.0, 1) -          //not bad but is approximately the same as above
		//	pow(remainedTestCnt * problems[problemId].TL * 0.2, 2) + 
		//	pow(30000 * 1000 * 0.2, 2);

		//return ((curTime - startTime) * 10.0 + 1.0) /     //a little bit better
		//	(remainedTestCnt * problems[problemId].TL * 0.2) / (remainedTestCnt * problems[problemId].TL * 0.2);

		return pow((curTime - startTime) * 10.0 + 1.0, 2) / 
			(remainedTestCnt * problems[problemId].TL * 0.2);
	}

	const bool operator<(const solution& sol) const
	{
		return rating() > sol.rating();	
	}
};

vector <solution> solutions;
vector <int> solutionIds;
int lastTakenSolutionId;
test tests[10005][1005];
int lastTestSortTime[10005];

bool sortSolutionIds(const int i, const int j)
{
	return solutions[i].rating() > solutions[j].rating();
}

int main()
{
	scanf("%d", &t);
	scanf("%d", &p);
	for(int i = 0; i < p; i++)
	{
		scanf("%d %d", &problems[i].TL, &problems[i].testCnt);
		problems[i] = problem(problems[i].TL, problems[i].testCnt);
		for(int j = 0; j < problems[i].testCnt; j++)
			tests[i][j] = test(j, problems[i].TL, 1);
	}
	int problemId;
	while(scanf("%d", &problemId) != EOF)
	{	
		if(problemId >= 0)
		{
			solutions.push_back(solution(problemId, solutionCnt++, curTime));
			while(scanf("%d", &problemId) != EOF) //read list of new solutions
			{
				if(problemId == -1)
					break;
				solutions.push_back(solution(problemId, solutionCnt++, curTime));
			}
		}

		while(1) //read verdicts
		{
			int solutionId, testNumber;
			scanf("%d %d", &solutionId, &testNumber);
			if(solutionId == -1 && testNumber == -1)
				break;
			t++;
			scanf("%s", s);
			int problemId = solutions[solutionId].problemId;
			//test curTest = *(problems[problemId].tests.find(tests[problemId][testNumber]));
			//problems[problemId].tests.erase(curTest);
			//curTest.totalTime += (curTime - solutions[solutionId].checked[testNumber]) * 10;
			//curTest.executionCnt++;
			tests[problemId][testNumber].totalTime += (curTime - solutions[solutionId].checked[testNumber]) * 10;
			tests[problemId][testNumber].executionCnt++;
			//problems[problemId].tests.insert(curTest);
			if(s[0] == 'O')
			{
				//solutions[solutionId].checked[testNumber] = 2;
			}
			else
			{
				solutions[solutionId].remainedTestCnt = 0;
			}
		}

		for(int i = 0; i < solutionIds.size(); i++)
		{
			if(solutions[solutionIds[i]].rating() < 0)
				solutionIds.erase(solutionIds.begin() + i--);
		}
		while(solutionIds.size() < SOLUTION_NUMBER_FOR_SORTING && lastTakenSolutionId < solutions.size())
		{
			if(solutions[lastTakenSolutionId].rating() >= 0)
				solutionIds.push_back(lastTakenSolutionId);
			lastTakenSolutionId++;
		}
		sort(solutionIds.begin(), solutionIds.end(), sortSolutionIds);

		//assign checking tasks
		{
			int simultaneousSolutionCnt = min(SIMULTANEOUS_SOLUTION_COUNT, (int)solutionIds.size());
			int testSum = 0;
			for(int i = 0; i < simultaneousSolutionCnt; i++)
				testSum += solutions[solutionIds[i]].remainedTestCnt;
			while(simultaneousSolutionCnt < solutionIds.size() && t > testSum)
			{
				testSum += solutions[solutionIds[simultaneousSolutionCnt++]].remainedTestCnt;
			}
			double ratingSum = 0;
			for(int i = 0; i < simultaneousSolutionCnt; i++)
				ratingSum += solutions[solutionIds[i]].rating();
			int initialT = t;
			for(int i = 0; i < simultaneousSolutionCnt && t > 0; i++)
			{
				int curLimit = min(t, (int)ceil(solutions[solutionIds[i]].rating() / ratingSum * initialT));
				//for(int j = 0; curLimit > 0 && j < solutions[solutionIds[i]].checked.size(); j++)
				int problemId = solutions[solutionIds[i]].problemId;
				if(curTime - lastTestSortTime[problemId] > TEST_SORT_FREQUENCY)
				{
					problems[problemId].tests.clear();
					for(int j = 0; j < problems[problemId].testCnt; j++)
						problems[problemId].tests.insert(tests[problemId][j]);
					lastTestSortTime[problemId] = curTime;
				}
				for(set<test>::iterator it = problems[problemId].tests.begin();
					curLimit > 0 && it != problems[problemId].tests.end(); ++it)
				{
					int j = it->testId;
					if(solutions[solutionIds[i]].checked[j] == 0)
					{
						t--;
						curLimit--;
						printf("%d %d\n", solutions[solutionIds[i]].solutionId, j);
						solutions[solutionIds[i]].checked[j] = curTime;
						solutions[solutionIds[i]].remainedTestCnt--;
					}
				}
			}
			//maybe some curLimits were bigger than needed
			for(int i = 0; i < simultaneousSolutionCnt && t > 0; i++)
			{
				//for(int j = 0; t > 0 && j < solutions[solutionIds[i]].checked.size(); j++)
				int problemId = solutions[solutionIds[i]].problemId;
				for(set<test>::iterator it = problems[problemId].tests.begin();
					t > 0 && it != problems[problemId].tests.end(); ++it)
				{
					int j = it->testId;
					if(solutions[solutionIds[i]].checked[j] == 0)
					{
						t--;
						printf("%d %d\n", solutions[solutionIds[i]].solutionId, j);
						solutions[solutionIds[i]].checked[j] = curTime;
						solutions[solutionIds[i]].remainedTestCnt--;
					}
				}
			}
		}
		puts("-1 -1");
		curTime++;
		fflush(stdout);
	}
	return 0;
}