//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 250;

int g, r, b;
bool mark[N][N][N];
piii dp[N][N][N];

piii mor(piii a, piii b){
	piii c;
	c.X.X = a.X.X || b.X.X;
	c.X.Y = a.X.Y || b.X.Y;
	c.Y = a.Y || b.Y;
	return c;
}

piii f(int x, int y, int z){
	if(mark[x][y][z]) return dp[x][y][z];
	mark[x][y][z] = true;
	if(x + y + z == 1){
		if(x) return {{1, 0}, 0};
		if(y) return {{0, 1}, 0};
		if(z) return {{0, 0}, 1};
	}
	if(x && y) dp[x][y][z] = mor(dp[x][y][z], f(x - 1, y - 1, z + 1));
	if(x && z) dp[x][y][z] = mor(dp[x][y][z], f(x - 1, y + 1, z - 1));
	if(z && y) dp[x][y][z] = mor(dp[x][y][z], f(x + 1, y - 1, z - 1));
	if(x > 1) dp[x][y][z] = mor(dp[x][y][z], f(x - 1, y, z));
	if(y > 1) dp[x][y][z] = mor(dp[x][y][z], f(x, y - 1, z));
	if(z > 1) dp[x][y][z] = mor(dp[x][y][z], f(x, y, z - 1));
	return dp[x][y][z];
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n;
	string s;
	cin >> n;
	cin >> s;
	for(int i = 0; i < SZ(s); ++i){
		if(s[i] == 'B') b ++;
		if(s[i] == 'G') g ++;
		if(s[i] == 'R') r ++;
	}
	piii ans = f(b, g, r);
	if(ans.X.X) cout << "B";
	if(ans.X.Y) cout << "G";
	if(ans.Y) cout << "R";
	cout << "\n";
	return 0;
}
