//why are you stalking me?
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define dbg(x) cerr << #x << " = " << x << endl

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 100010, MOD = 1e9 + 7;

int add (int x, int y) {
	return (x + y) % MOD;
}

void addeq (int &x, int y) {
	x = add(x, y);
}

int subtr (int x, int y) {
	return (x -= y) < 0 ? x + MOD : x;
}

void subtreq (int &x, int y) {
	x = subtr(x, y);
}

int mult (int x, int y) {
	return ll(x) * y % MOD;
}

void multeq (int &x, int y) {
	x = mult(x, y);
}

int N;
vector<int> adj[MAXN];
int dp[MAXN][2];

void dfs (int x, int p) {
	if (adj[x].empty()) {
		dp[x][1] = 1;
		return;
	}
	//just add the children
	int *ways = dp[x];
	ways[1] = 1;
	for (int t : adj[x]) {
		dfs(t, x);
		//combine it
		int nfd[2] = {0, 0};
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 2; j++) {
				addeq(nfd[i ^ j], mult(ways[i], dp[t][j]));
			}
		}
		for (int i = 0; i < 2; i++) {
			addeq(ways[i], nfd[i]);	//you can exclude
		}
	}
	for (int i = 0; i < 2; i++) {
		multeq(ways[i], 2);
	}
	//...and subtract doublecounts.
	//all of them even, or an odd number of odds
	int dp2[2][2] = {{1, 0}, {1, 0}};
	for (int t : adj[x]) {
		int ndp[2][2] = {{0, 0}, {0, 0}};
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 2; j++) {
				ndp[i][j] = add(dp2[i][j], mult(dp[t][i], dp2[i][!j]));
			}
		}
		//update
		memcpy(dp2, ndp, sizeof(ndp));
	}
	subtreq(ways[0], dp2[1][1]);
	subtreq(ways[1], add(dp2[0][0], dp2[0][1]));
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> N;
	for (int i = 2, p; i <= N; i++) {
		cin >> p;
		adj[p].push_back(i);
	}
	for (int i = 1; i <= N; i++) {
		sort(all(adj[i]));
	}
	dfs(1, 0);
	cout << add(dp[1][0], dp[1][1]) << endl;
}