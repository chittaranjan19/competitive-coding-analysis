import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class ProblemD {
    BufferedReader rd;

    ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        rd.readLine();
        int[] a = intarr();
        int ones = 0;
        for(int x: a) {
            if(x == 1) {
                ones++;
            }
        }
        Maximizer<List<Integer>> res = new Maximizer<>((x, y) -> x.size() - y.size(), new ArrayList<>());
        res.max(Arrays.asList(a[0]));
        if(ones > 0) {
            List<Integer> result = new ArrayList<>();
            int found = -1;
            for(int x: a) {
                if(x != 1) {
                    if(isPrime(x+1)) {
                        found = x;
                        break;
                    }
                }
            }
            for(int i=0;i<ones;i++) {
                result.add(1);
            }
            if(found != -1) {
                result.add(found);
            }
            res.max(result);
        }
        int n = a.length;
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                if (isPrime(a[i]+a[j])) {
                    res.max(Arrays.asList(a[i], a[j]));
                    break;
                }
            }
        }
        out(res.max.size());
        out(toString(res.max));
    }

    private <T> String toString(List<T> list) {
        StringBuilder buf = new StringBuilder();
        for(T e: list) {
            if(buf.length() > 0) {
                buf.append(' ');
            }
            buf.append(e);
        }
        return buf.toString();
    }

    private class Maximizer<T> {
        private final Comparator<T> comparator;
        private T max;

        public Maximizer(Comparator<T> comparator, T lowest) {
            this.comparator = comparator;
            this.max = lowest;
        }

        public void max(T t) {
            if(comparator.compare(max, t) < 0) {
                max = t;
            }
        }
    }

    private static boolean isPrime(int x) {
        if(x < 4 || x%2 == 0) {
            return x == 2 || x == 3;
        }
        for(int i=3;i*i<=x;i+=2) {
            if(x%i==0) {
                return false;
            }
        }
        return true;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }


    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
