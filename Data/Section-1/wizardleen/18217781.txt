import java.io.BufferedInputStream;
import java.util.*;

/**
 * Created by leen on 6/2/16.
 */
public class Main {

    public static void main(String[] args) {
        Scanner scan = new Scanner(new BufferedInputStream(System.in));
        while(scan.hasNext()) {
            int numRows = scan.nextInt();
            int numCols = scan.nextInt();
            int numTypes = scan.nextInt();
            Point[] pointsByType = new Point[numTypes + 1];

            pointsByType[0] = new Point(0, 0, 0);

            for (int i = 0; i < numRows; i++) {
                for (int j = 0; j < numCols; j++) {
                    int type = scan.nextInt();
                    Point p = new Point(i, j, Integer.MAX_VALUE);
                    Point exsit = pointsByType[type];
                    p.next = exsit;
                    pointsByType[type] = p;
                }
            }

            for (int t = 1; t <= numTypes; t++) {
                Point p = pointsByType[t];
                while (p != null) {
                    Point lp = pointsByType[t - 1];
                    while (lp != null) {
                        int newDist = lp.calcDistance(p) + lp.minDistance;
                        if (newDist < p.minDistance)
                            p.minDistance = newDist;
                        lp = lp.next;
                    }

                    p = p.next;
                }
            }

            System.out.println(pointsByType[numTypes].minDistance);
        }
    }

    static class Point {
        final int x;
        final int y;
        Point next;
        int minDistance;

        Point(int x, int y, int minDistance) {
            this.x = x;
            this.y = y;
            this.minDistance = minDistance;
        }

        @Override
        public int hashCode() {
            return x ^ y;
        }

        @Override
        public boolean equals(Object obj) {
            if(obj instanceof Point) {
                Point that = (Point) obj;
                return minDistance == that.minDistance && x == that.x && y == that.y;
            }
            else
                return false;
        }

        int calcDistance(Point that) {
            return Math.abs(x - that.x) + Math.abs(y - that.y);
        }

    }
}