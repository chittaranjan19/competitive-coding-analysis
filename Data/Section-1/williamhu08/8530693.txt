//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define debug(...) fprintf(stderr, __VA_ARGSh__)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10;

int N, M;
int A[MAXN];
int good[MAXN], bad[MAXN];
int numposs;	//# of possible
bool can[MAXN];	//if can be suspect

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces156B.in", "r", stdin);
#endif
	scanf("%d %d", &N, &M);
	int defend = 0;
	for (int i = 1; i <= N; i++) {
		scanf("%d", &A[i]);
		int a = A[i];
		if (a < 0) {
			a *= -1;
			bad[a]++;
			defend++;
		} else {
			good[a]++;
		}
	}
	for (int i = 1; i <= N; i++) {
		//count # of truths
		//how many say he did it? how many say how he didn't do it
		int truths = good[i] + (defend - bad[i]);
		if (truths == M) {
			numposs++;
			can[i] = true;
		}
	}
	assert(numposs);	//what the problem said
	if (numposs == 1) {
		int s = find(can + 1, can + N + 1, true) - can;
		for (int i = 1; i <= N; i++) {
			puts((abs(A[i]) == s) == (A[i] > 0) ? "Truth" : "Lie");
		}
	} else {
		//the suspect is undefined
		for (int i = 1; i <= N; i++) {
			puts(can[abs(A[i])] ? "Not defined" : (A[i] > 0 ? "Lie" : "Truth"));
		}
	}
}