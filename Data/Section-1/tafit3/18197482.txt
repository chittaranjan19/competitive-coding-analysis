import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

import static java.util.Collections.singletonList;

public class ProblemD3 {
    BufferedReader rd;

    ProblemD3() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] q = intarr();
        int n = q[0];
        int m = q[1];
        int p = q[2];

        int[][] z = new int[n][];
        for(int i=0;i<n;i++) {
            z[i] = intarr();
        }
        int[][][] ed = new int[p+1][][];
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                int level = z[i][j];
                int[][] w;
                if(ed[level] == null) {
                    w = new int[][] { { i, j } };
                } else {
                    w = Arrays.copyOf(ed[level], ed[level].length+1);
                    w[ed[level].length] = new int[] { i, j };
                }
                ed[level] = w;
            }
        }

        NavigableMap<Long, List<Integer>> byLen = new TreeMap<>();
        byLen.put(0L, new ArrayList<>(singletonList(0)));
        long best = Long.MAX_VALUE;
        while(!byLen.isEmpty()) {
            Map.Entry<Long, List<Integer>> e = byLen.firstEntry();
            long curLen = e.getKey();
            Integer v = e.getValue().iterator().next();
            if(e.getValue().size() == 1) {
                byLen.remove(curLen);
            } else {
                e.getValue().remove(v);
            }
            int row = (int)(v & 0x3ffL);
            int col = (int)((v >> 10) & 0x3ffL);
            int level = v >> 20;
            if(level < p) {
                int nextLevelV = (level+1) << 20;
                for(int[] y: ed[level+1]) {
                    long len = curLen + dist(row, col, y[0], y[1]);
                    List<Integer> val = byLen.get(len);
                    if(val == null) {
                        val = new ArrayList<>(2);
                        byLen.put(len, val);
                    }
                    val.add(nextLevelV + y[0] + (y[1] << 10));
                }
            } else {
                best = Math.min(best, curLen);
                break;
            }
        }
        out(best);
    }

    private long dist(int r1, int c1, int r2, int c2) {
        return Math.abs(r1-r2) + Math.abs(c1 - c2);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD3();
    }
}