#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <cstring>
#include <iomanip>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 1600;
const int E = 1600;
const int oo = 1e9;

int from[E], to[E], cap[E], pre[E], head[N], nxt[N];
int ecnt;
int n, m;
bool mark[N];
int a[N];
vector <int> ans[N];

void add_edge(int u, int v, int uv, int vu = 0){
	from[ecnt] = u, to[ecnt] = v, cap[ecnt] = uv, pre[ecnt] = head[u], head[u] = ecnt ++;
	from[ecnt] = v, to[ecnt] = u, cap[ecnt] = vu, pre[ecnt] = head[v], head[v] = ecnt ++;
}

int dfs(int v, int sink, int f = oo){
	if(v == sink)
		return f;
	if(mark[v]) 
		return 0;
	mark[v] = true;
	for(int i = head[v]; i != -1; i = pre[i]){
		if(cap[i]){
			int x = dfs(to[i], sink, min(f, cap[i]));
			if(x){
				cap[i] -= x;
				cap[i ^ 1] += x;
				return x;
			}
		}
	}
	return 0;
}

int flow(int source, int sink){
	int f = 0, x;
	while((x = dfs(source, sink))){
		f += x;
		memset(mark, 0, sizeof mark);
	}
	return f;
}

bool isp(int x){
	if(x < 2) return 0;
	for(int i = 2; i * i <= x; ++i)
		if(x % i == 0) return 0;
	return 1;
}


int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	memset(head, -1, sizeof head);
	int source = N - 1;
	int sink = N - 2;
	cin >> n;
	for(int i = 0; i < n; ++i){
		cin >> a[i];
		if(a[i] & 1)
			add_edge(source, i, 2);
		else
			add_edge(i, sink, 2);
	}
	
	vector <int> k;
	for(int i = 0; i < n; ++i)
		if(a[i] & 1)
			for(int j = 0; j < n; ++j)
				if(isp(a[i] + a[j]))
					k.PB(ecnt), add_edge(i, j, 1);
			

	if(flow(source, sink) != n){
		cout << "Impossible\n";
		return 0;
	}
	for(int i = 0; i < SZ(k); ++i)
		if(cap[k[i]] == 0)
		{
			cerr << from[k[i]] << " " << to[k[i]] << "\n";
			if(from[k[i]] % 2 != to[k[i]] % 2)
				nxt[from[k[i]]] = to[k[i]];		
			else
				nxt[to[k[i]]] = from[k[i]];
		}

	memset(mark, 0, sizeof mark);
	int sz = 0;
	for(int i = 0; i < n; ++i){
		if(a[i] & 1 && !mark[i]){
			int t = i;
			ans[sz].PB(i);
			while(nxt[t] != i){
				mark[t] = true;
				t = nxt[t];
				ans[sz].PB(t);
			}
			sz ++;
		}
	}
	cout << sz << "\n";
	for(int i = 0; i < sz; ++i){
		cout << SZ(ans[i]) << " ";
		for(int j = 0; j < SZ(ans[i]); ++j)
			cout << ans[i][j] + 1 << " ";
		cout << "\n";
	}
	return 0;
}
