import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemA2 {
    BufferedReader rd;

    ProblemA2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        long m = plong();
        long[] q = longarr();
        long h1 = q[0];
        long a1 = q[1];
        q = longarr();
        long x1 = q[0];
        long y1 = q[1];
        q = longarr();
        long h2 = q[0];
        long a2 = q[1];
        q = longarr();
        long x2 = q[0];
        long y2 = q[1];

        long s1 = 0;
        long c = h1;
        long r1 = 0;
        boolean a1f = false;
        long last = -1;
        while((s1==0 || c!=h1) && (last != c)) {
            last = c;
            c = (x1*c+y1) % m;
            s1++;
            if(!a1f) {
                r1++;
                if(c == a1) {
                    a1f = true;
                }
            }
        }
        boolean pos = a1f && c == h1;
        long s2 = 0;
        long r2 = 0;
        if(pos) {
            c = h2;
            boolean a2f = false;
            last = -1;
            while((s2==0 || c!=h2) && (last != c)) {
                last = c;
                c = (x2*c+y2) % m;
                s2++;
                if(!a2f) {
                    r2++;
                    if(c == a2) {
                        a2f = true;
                    }
                }
            }
            pos = a2f && c == h2;
        }
        if(pos) {
            boolean ok = false;
            for(long p=0;p<10000000;p++) {
                long u = s1*p+r1;
                if((u-r2)%s2==0) {
                    out(u);
                    ok = true;
                    break;
                }
            }
            if(!ok) {
                out(-1);
            }
        } else {
            long u1 = h1;
            long u2 = h2;
            boolean ok = false;
            for(long p=0;p<10000000;p++) {
                if(u1==a1 && u2 == a2) {
                    out(p);
                    ok = true;
                    break;
                }
                u1 = (x1*u1+y1)%m;
                u2 = (x2*u2+y2)%m;
            }
            if(!ok) {
                out(-1);
            }
        }
    }

    private long plong() throws IOException {
        return plong(rd.readLine());
    }

    private long plong(String s) {
        return Long.parseLong(s);
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA2();
    }
}
