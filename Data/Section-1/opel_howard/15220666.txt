#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

#define MOD (1000000000LL+7)

int main() {
    // freopen("611D.in", "r", stdin);
    
    int n;
    scanf("%d%*c", &n);
    string str;
    getline(cin, str);
    str = "0"+str;

    #define INF 10000

    int next_diff[n+1][n+1];
    for (int b = n; b > 0; --b) {
    	for (int a = n; a > 0; --a) {
    		int &diff_pos = next_diff[a][b];
    		diff_pos = INF;
    		if (str[a] != str[b])
    			diff_pos = a;
    		else if (b != n)
    			diff_pos = next_diff[a+1][b+1];
    	}
    }
    ll dp[n+1][n+1];
    ll pref[n+1][n+1];
    loop(i, n+1) {
    	loop(j, n+1) {
    		dp[i][j] = pref[i][j] = 0;
    	}
    }
    dp[0][0] = pref[0][0] = 1;
    for (int c = 1; c <= n; ++c) {
    	for (int b = c; b >= 1; --b) {
    		int a = 0;
    		if (b > 1)
    			a = max((b-1)-(c-b), 1);
    		dp[b][c] = pref[a][b-1];

    		// check if {a .. b-1} is larger or equal to {b .. c} if b-1-a == c-b
    		if ((a > 0) and (b-1-a == c-b)) {
	    		int x = next_diff[a][b]-a;
	    		if (next_diff[a][b] < b) {
	    			if (str[a+x] > str[b+x])
	    				dp[b][c] -= dp[a][b-1];
	    		} else if (str[b-1] == str[c]) {
	    			dp[b][c] -= dp[a][b-1];
	    		}
	    	}

    		if (dp[b][c] < 0)
    			dp[b][c] += MOD;

    		if (str[b] == '0')
    			dp[b][c] = 0;
    		pref[b][c] += (((b != c) ? pref[b+1][c] : 0)+dp[b][c])%MOD;
    	}
    }

    printf("%I64d\n", pref[1][n]);


    return 0;
}