#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int tree[400005];
int arr[100005];

void update(int i,int L,int R,int node,int val)
{
    if(L == R)
    {
        tree[i] = val;
        return ;
    }
    if(node <= (L + R) / 2)
        update(i*2 + 1, L, (L + R) / 2, node, val);
    else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
    tree[i] = max(tree[i*2 + 1],tree[i*2 + 2]);
}

int query(int i,int L,int R,int x,int y)
{
    if(L >= x && R <= y)
        return tree[i];
    if(L > y || R < x)
        return 0;
    return max(query(i*2 + 1, L, (L + R) / 2, x, y), query(i*2 + 2, (L + R) / 2 + 1, R, x, y));
}

int main()
{
    ios_base::sync_with_stdio(0);
    //freopen("laser_maze.txt", "r", stdin);
    //freopen("financial2.out", "w", stdout);
    int n;
    cin >> n;
    for(int i=0;i<n;i++)
        cin >> arr[i];
    int res = 1;
    for(int i=n-1;i>=0;i--)
    {
        int temp = query(0, 1, n, arr[i], n) + 1;
        res = max(temp, res);
        update(0, 1, n, arr[i], temp);
    }
    cout << res;
    return 0;
}