#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

char g[30][30];
int n, m;
bool used[30][30];

pair<int, int> next_dr(pair<int, int> a){
    if (a.fs == 0 && a.sc == 1){
        a.fs = 1, a.sc = 0;
        return a;
    }
    if (a.fs == 1 && a.sc == 0){
        a.fs = 0, a.sc = -1;
        return a;
    }
    if (a.fs == 0 && a.sc == -1){
        a.fs = -1, a.sc = 0;
        return a;
    }
    if (a.fs == -1, a.sc == 0){
        a.fs = 0, a.sc = 1;
        return a;
    }
}

pair<int, int> get_dr(char dr){
    pair<int, int> a;
    if (dr == 'U'){
        a.fs = -1, a.sc = 0;
        return a;
    }
    if (dr == 'R'){
        a.fs = 0, a.sc = 1;
        return a;
    }
    if (dr == 'D'){
        a.fs = 1, a.sc = 0;
        return a;
    }
    if (dr == 'L'){
        a.fs = 0, a.sc = -1;
        return a;
    }
}

int main()
{
    for (int i = 0; i < 30; i++){
        for (int j = 0; j < 30; j++){
            g[i][j] = '*';
        }
    }
    memset(used, 0, sizeof(used));
    cin >> n >> m;
    int x0, y0;
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= m; j++){
            cin >> g[i][j];
            if (g[i][j] != '.' && g[i][j] != '*')
                x0 = j, y0 = i;
        }
    }
    int k = 1e5;
    pair<int, int> dr = get_dr(g[y0][x0]);
    while (k--){
        used[y0][x0] = 1;
        int x1, y1;
        x1 = x0 + dr.sc, y1 = y0 + dr.fs;
        if (g[y1][x1] == '*')
            dr = next_dr(dr);
        else{
            x0 = x1, y0 = y1;
        }
    }
    int ans = 0;
    for (int i = 0; i < 30; i++){
        for (int j = 0; j < 30; j++){
            ans += used[i][j];
        }
    }
    cout << ans;
    return 0;
}