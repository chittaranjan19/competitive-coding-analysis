#include<bits/stdc++.h>

using namespace std;
typedef struct point point;

struct point
{
	int x, y;
};
int turn(point p, point q, point r)
{
	int res = (r.y - q.y) * (q.x - p.x) - (r.x - q.x) * (q.y - p.y);
	if( res > 0 )//left turn
		return 1;
	else if( res < 0 )//right turn
		return -1;
	return 0;
}
point street[1010];
int main()
{
	int n, i;
	scanf("%d", &n);
	for ( i = 0 ; i < n + 1 ; i++ )
	{
		int x, y;
		scanf("%d%d", &x, &y);
		if ( i != n )
		{
			street[i].x = x;
			street[i].y = y;
		}
	}
	int left = 0, right = 0, straight = 0;
	for ( i = 0 ; i < n ; i++ )
	{
		point r = street[i];
		point q = street[( (i - 1) + n ) % (n)];
		point p = street[( (i - 2) + n ) % (n)];
		if ( turn(p, q, r) > 0 )
			left++;
		else if( turn(p, q, r) < 0 )
			right++;
		else
			straight++;
		//printf("p = (%d,%d) q = (%d,%d) r = (%d,%d) turn = %d\n", p.x, p. y, q.x, q.y, r.x, r.y, turn(p, q, r));
	}
	i = 2;
	while( turn(street[i - 2], street[i - 1], street[i]) == 0 )
	{
		i++;
	}
	bool lef = 0;
	if ( turn(street[i - 2], street[i - 1], street[i]) > 0 )
	{
		lef = 1;
	}
	int ans;
	if ( lef )
	{
		ans = right + straight;
	}
	else
	{
		ans = left + straight;
	}
	//printf(" left = %d staright = %d right = %d %d\n",left, straight, right, ans);
	printf("%d\n", ans);
	return 0;
}