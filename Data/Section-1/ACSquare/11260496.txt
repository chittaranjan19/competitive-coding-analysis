#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
struct edge
{
    int to,cap,rev;
    edge(){};
    edge(int _to,int _cap,int _rev):to(_to),cap(_cap),rev(_rev){}
};

const int MAX_V = 202,INF=0x3f3f3f3f;
vector <edge> G[MAX_V];
int level[MAX_V],itr[MAX_V];
void add_edge(int from,int to,int cap)
{
    G[from].push_back( edge( to,cap,G[to].size() ) );
    G[to].push_back( edge( from, 0, G[from].size()-1 ) );
}
void bfs(int s )
{
    memset(level,-1,sizeof(level));     level[s]=0;
    queue<int> que;                     que.push(s);
    while(!que.empty())
    {
        int v=que.front();  que.pop();
        for(int i=0;i<G[v].size();++i)
        {
            edge &e =G[v][i];
            if(e.cap>0&&level[e.to]<0)
            {
                level[e.to]=level[v]+1;
                que.push(e.to);
            }
        }
    }
}
int dfs(int v,int t,int f)
{
    if(v==t)    return f;
    for(int &i=itr[v];i<G[v].size();++i)
    {
        edge &e = G[v][i];
        if(e.cap>0&&level[v]<level[e.to])
        {
            int d = dfs(e.to,t,min(e.cap,f) );
            if(d>0)
            {
                e.cap-=d;
                G[e.to][e.rev].cap+=d;
                return d;
            }
        }
    }
    return 0;
}
int max_flow(int s,int t)
{
    int flow=0;
    while(1)
    {
        bfs(s);
        if(level[t]<0)  return flow;
        memset(itr,0,sizeof(itr));
        int f;
        while( (f=dfs(s,t,INF)) >0)
            flow+=f;
    }
}
const int MAX_n = 100;
int a[MAX_n],b[MAX_n];
int soldier[MAX_n][MAX_n];
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;++i)    scanf("%d",a+i);
    for(int i=0;i<n;++i)    scanf("%d",b+i);
    
    int Suma=0,Sumb=0;
    for(int i=0;i<n;++i)    Suma+=a[i],Sumb+=b[i];
    
    if(Suma!=Sumb)
        puts("NO");
    else
    {
        for(int i=0;i<m;++i)
        {
            int p,q;
            scanf("%d%d",&p,&q);
            add_edge(p-1,q-1+n,INF);
            add_edge(q-1,p-1+n,INF);
        }
        for(int i=0;i<n;++i)
        {
            add_edge(i,i+n,INF);
            add_edge(2*n,i,a[i]);
            add_edge(i+n,2*n+1,b[i]);
        }
        int ans=max_flow(2*n,2*n+1);
        if(ans==Suma)
        {
            puts("YES");
            
            for(int i=0;i<n;++i)
                for(int j=0;j<G[i].size();++j)
                {
                    edge &e =G[i][j];
                    if(e.to<2*n)
                        soldier[i][e.to-n]+=INF-e.cap;
                }
            
            for(int i=0;i<n;++i)
                for(int j=0;j<n;++j)
                    printf("%d%c",soldier[i][j],"\n "[j!=n-1]);
        }
        else
        {
            puts("NO");
        }
    }
}