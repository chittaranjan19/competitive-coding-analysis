//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define debug(...) fprintf(stderr, __VA_ARGS__)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e6 + 10;

int N, K;
int A[MAXN], B[MAXN];
int pos[MAXN];
bool has[MAXN];
int bit[MAXN];

void update (int x) {
	for (; x < MAXN; x += (x & -x)) {
		bit[x]++;
	}
}

int query (int x) {
	int s = 0;
	for (; x; x &= x - 1) {
		s += bit[x];
	}
	return s;
}

int query (int x, int y) {
	return query(y) - query(x - 1);
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces387E.in", "r", stdin);
#endif
	scanf("%d %d", &N, &K);
	for (int i = 1; i <= N; i++) {
		scanf("%d", &A[i]);
		pos[A[i]] = i;
	}
	for (int i = 1; i <= K; i++) {
		scanf("%d", &B[i]);
		has[B[i]] = true;
	}
	set<int> st;
	//careful boundary cases:
	st.insert(0);
	st.insert(N + 1);
	ll ans = 0;
	for (int i = 1; i <= N; i++) {
		int p = pos[i];
		if (has[i]) {
			st.insert(p);
		} else {
			set<int>::iterator it = st.upper_bound(p);
			int right = *(it--);
			int left = *it + 1;
			ans += right - left - query(left, right - 1);
			update(p);
		}
	}
	cout << ans << endl;
}