#include<bits/stdc++.h>
#define MAXN 200009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"xyzer"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define y1 eatlessmore
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> line;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
template<class T> bool umx(T& a, T b) { if(a.ss < b.ss){ 
a = b;return 1;}
if(a.ss==b.ss and a.ff<b.ff){
	a=b;return 1;}
return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
char s[3][MAXN];
int vis[3][MAXN],con[3][MAXN];
int dx[]={0,+1,-1,0},n,q;
int dy[]={+1,0,0,-1},S=1;
int dis[5][3][MAXN],ans[MAXN];
void dfs(int x,int y){
	con[x][y]=S;vis[x][y]=1;
	for(int i=0;i<4;i++){
		int tox=x+dx[i];int toy=y+dy[i];
		if(tox>=1 and tox<=2 and toy>=1 and toy<=n and vis[tox][toy]==0)
			dfs(tox,toy);
	}
}
int tap(int x,int y,int type){
	if(s[x][y]=='X')
		return INF;
	int res=INF;	
	for(int i=0;i<4;i++){
		int tox=x+dx[i];int toy=y+dy[i];
		if(tox>=1 and tox<=2 and toy>=1 and toy<=n)
			umin(res,dis[type][tox][toy]+1);
	}
	return res;
}
//NEWS
line east(line x,line y){
	if(y.ss>x.ss)
		return y;
	if(y.ss==x.ss and y.ff>x.ff)
		return y;
	return x;	
}
line west(line x,line y){
	if(y.ss<x.ss)
		return y;
	if(y.ss==x.ss and y.ff<x.ff)
		return y;
	return x;	
}
line op(int x){
	if(x<=n)
		return mp(1,x);
	return mp(2,x-n);	
}
void get(line x){
	cerr<<x.ff<<" "<<x.ss<<endl;
	return;
}
struct maze{
	int bir,iki,uc,dort,ind;
	void yasa(int x1,int y1,int x2,int y2,int x3){
		bir=x1;iki=y1;uc=x2;dort=y2;ind=x3;
	}
};
void solve(int x,int y,vector<maze>v){
	if(x>y or v.size()==0)
		return;	
//	cout<<x<<" "<<y<<endl;	
	int mid=(x+y)>>1;
	for(int i=1;i<=2;i++){
		for(int j=x;j<=mid;j++)
			dis[1][i][j]=dis[2][i][j]=INF;
		for(int j=mid;j<=y;j++)
			dis[3][i][j]=dis[4][i][j]=INF;	
	}
	dis[1][1][mid]=INF*(s[1][mid]=='X');
	dis[2][2][mid]=INF*(s[2][mid]=='X');
	dis[3][1][mid]=INF*(s[1][mid]=='X');
	dis[4][2][mid]=INF*(s[2][mid]=='X');
	for(int j=mid;j>=x;j--){
		for(int i=1;i<=2;i++){
			umin(dis[1][i][j],tap(i,j,1));			
			umin(dis[2][i][j],tap(i,j,2));				
		}
		for(int i=2;i>=1;i--){
			umin(dis[1][i][j],tap(i,j,1));			
			umin(dis[2][i][j],tap(i,j,2));				
		}
	}
	for(int j=mid;j<=y;j++){
		for(int i=1;i<=2;i++){
			umin(dis[3][i][j],tap(i,j,3));			
			umin(dis[4][i][j],tap(i,j,4));				
		}
		for(int i=2;i>=1;i--){
			umin(dis[3][i][j],tap(i,j,3));			
			umin(dis[4][i][j],tap(i,j,4));				
		}
	}	
	vector<maze>left,right;
	for(int i=0;i<v.size();i++){
		if(v[i].iki<=mid and mid<=v[i].dort){
			ans[v[i].ind]=dis[1][v[i].bir][v[i].iki]+dis[3][v[i].uc][v[i].dort];
			umin(ans[v[i].ind],dis[2][v[i].bir][v[i].iki]+dis[4][v[i].uc][v[i].dort]);
		}
		if(v[i].dort<mid)
			left.pb(v[i]);
		if(v[i].iki>mid)
			right.pb(v[i]);		
	}
	solve(x,mid-1,left);
	solve(mid+1,y,right);
}
int main(){
	scanf("%d%d",&n,&q);
	for(int i=1;i<=2;i++){
		scanf("%s",s[i]+1);
		for(int j=1;j<=n;j++)
			if(s[i][j]=='X')
				vis[i][j]=1;
	}
	for(int i=1;i<=2;i++)
		for(int j=1;j<=n;j++)
			if(!vis[i][j])
				dfs(i,j),S++;S--;		
//	for(int j=n;j>=1;j--){
//		for(int i=1;i<=2;i++)
//			umin(dis[i][j],tap(i,j));
///		for(int i=2;i>=1;i--)
//			umin(dis[i][j],tap(i,j));					
//	}
//	for(int i=1;i<=2;i++){
//		for(int j=1;j<=n;j++)
//			cout<<con[i][j]<<" ";
//		cout<<endl;
//	}
//	cout<<last[1].ff<<" "<<last[1].ss<<endl;
	vector<maze>vec;
	for(int i=1;i<=q;i++){
		int x,y;
		scanf("%d%d",&x,&y);
		line a1=op(x);//get(a1);
		line a2=op(y);//get(a2);
		line a3=west(a1,a2);//(a3);
		line a4=east(a1,a2);//get(a4);
		if(con[a3.ff][a3.ss]!=con[a4.ff][a4.ss]){
			//printf("-1\n");
			ans[i]=-1;
			continue;
		}
		maze mask;mask.yasa(a3.ff,a3.ss,a4.ff,a4.ss,i);
		vec.pb(mask);
	}
	solve(1,n,vec);
	for(int i=1;i<=q;i++)
		printf("%d\n",ans[i]);
	return 0;
}
