/*

┏┛┻━━━┛┻┓
┃｜｜｜｜｜｜｜┃
┃　　　━　　　┃
┃　┳┛　┗┳　┃
┃　　　　　　　┃
┃　　　┻　　　┃
┃　　　　　　　┃
┗━┓　　　┏━┛
　　┃　　　┃　　
　　┃　　　┃　　
　　┃　　　┃　 　
　　┃　　　┃
　　┃　　　┗━━━┓
　　┃world_finals! ┃
　　┃感觉自己萌萌哒┃
　　┗┓┓┏━┳┓┏┛
　　　┃┫┫　┃┫┫
　　　┗┻┛　┗┻┛
*/

#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <algorithm>
#include <cctype>
#include <stack>
#include <map>
#include <queue>
#include <ctime>
#include <set>
#include <cmath>
using namespace std;
typedef long long ll;
const int maxn=100000+5;
int a[maxn],c[maxn],mem[maxn];
void dfs(int&now,int temp)
{
    if(temp-c[temp]-1>0)
    {
        if(mem[temp-c[temp-1]]) {now+=mem[temp-c[temp]-1];return ;}
        now+=c[temp];
        dfs(now,temp-c[temp]-1);
        mem[temp]=c[temp]+mem[temp-c[temp]-1];
    }
}
int main()
{
    int n;
    while(cin>>n)
    {
        memset(mem,0,sizeof(mem));
        for(int i=0;i<n;i++)
        {
            int b;
            cin>>a[i]>>b;
            int l=lower_bound(a,a+i+1,a[i]-b)-a;
            c[i]=i-l;
        }
        int ans=n;
        for(int i=n-1;i>=0;i--)
        {
            int temp=i,now=n-1-i;
            dfs(now,temp);
            ans=min(ans,now);
        }
        cout<<ans<<endl;
    }
    return 0;
}