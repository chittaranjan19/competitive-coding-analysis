#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long P = 239;
const long long MAX_N = 200000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<long long> tree;
long long cnt_ver = 1;

void make_tree(long long n)
{
    while (cnt_ver < n)
        cnt_ver <<= 1;
    tree.resize(cnt_ver * 2 - 1);
    for (long long i = 0; i < cnt_ver * 2 - 1; i++)
        tree[i] = 0;
}

long long ans(long long x, long long lx, long long rx, long long l, long long r)
{
    if (r < lx || l > rx)
        return 0;
    else if (lx >= l && rx <= r)
        return tree[x];
    else
        return max(ans(x * 2 + 1, lx, (lx + rx) / 2, l, r), ans(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r));
}
void update(long long x, long long v)
{
    tree[x] = v;
    while (x > 0)
    {
        tree[(x - 1) / 2] = max(tree[(x - 1) / 2 * 2 + 1], tree[(x - 1) / 2 * 2 + 2]);
        x = (x - 1) / 2;
    }
}

int main()
{
    //ifstream ifs("input.txt");
    //ofstream ofs("output.txt");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    long long n, d;
    cin >> n >> d;
    vector<long long> a(n), sorted(n), dp(n);
    for (long long i = 0; i < n; i++)
    {
        cin >> a[i];
        sorted[i] = a[i];
    }
    map<long long, long long> m;
    sort(sorted.begin(), sorted.begin() + n);
    make_tree(n);
    for (long long i = 0; i < n; i++)
    {
        if (m.find(a[i]) == m.end())
            m[a[i]] = 0;
        long long x, l, r, mid, cnt1, cnt2;
        x = a[i] - d;
        l = -1; r = n;
        while (r - l > 1)
        {
            mid = (l + r) / 2;
            if (x >= sorted[mid])
                l = mid;
            else
                r = mid;
        }
        cnt1 = ans(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1, cnt_ver - 1 + l) + 1;
        x = a[i] + d;
        l = -1; r = n;
        while (r - l > 1)
        {
            mid = (l + r) / 2;
            if (x > sorted[mid])
                l = mid;
            else
                r = mid;
        }
        cnt2 = ans(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + r, cnt_ver * 2 - 2) + 1;
        dp[i] = max(cnt1, cnt2);
        l = -1; r = n - 1;
        while (r - l > 1)
        {
            mid = (l + r) / 2;
            if (a[i] > sorted[mid])
                l = mid;
            else
                r = mid;
        }
        update(cnt_ver - 1 + r + m[a[i]], dp[i]);
        m[a[i]]++;
    }
    long long ans1 = 0, k, curr = 1000000000000000000;
    for (long long i = 0; i < n; i++)
        ans1 = max(ans1, dp[i]);
    k = ans1;
    vector<long long> pr;
    for (long long i = n - 1; i >= 0; i--)
        if (dp[i] == ans1 && abs(a[i] - curr) >= d)
        {
            pr.push_back(i);
            ans1--;
            curr = a[i];
        }
    cout << k << endl;
    for (long long i = k - 1; i >= 0; i--)
        cout << pr[i] + 1 << " ";
    return 0;
}
