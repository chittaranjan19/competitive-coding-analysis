#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>

#define ll long long
#define ull unsigned long long
#define mp make_pair

using namespace std;
int n, k;

string ss[100010], t;
bool win[100010], lose[100010];

struct ch
{
    int next[30];
};

ch m[200010];
int cnt = 1;

ch add_vrtx()
{
    ch temp;
    memset(temp.next, -1, sizeof(temp.next));
    return temp;
}

void add_str(string str)
{
    int num = 0;
    for (int i = 0; i < str.length(); i++)
    {
        if (m[num].next[str[i] - 'a'] != -1)
        {
            num = m[num].next[str[i] - 'a'];
        }
        else
        {
            m[num].next[str[i] - 'a'] = cnt;
            m[cnt] = add_vrtx();
            num = cnt;
            cnt += 1;
        }
    }
}

bool list(int num)
{
    bool is = true;
    for (int i = 0; i < 30; i++)
    if (m[num].next[i] != -1)
        is = false;
    return is;
}

void dfs(int num)
{
    win[num] = false;
    lose[num] = false;
    if (list(num))
    {
        lose[num] = true;
        return;
    }
    else
    {
        for (int i = 0; i < 30; i++)
        {
            if (m[num].next[i] != -1)
            {
                dfs(m[num].next[i]);
                win[num] = win[num] | !win[m[num].next[i]];
                lose[num] = lose[num] | !lose[m[num].next[i]];
            }
        }
    }

}

int poww(int a, int b)
{
    if (b == 0)
        return 1;
    int ans = a;
    for (int i = 1; i < b; i++)
        ans *= a;
    return ans;
}

int main()
{
    int n, l;
    int a[1001];
    cin >> n >> l;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    sort(a, a + n);
    long double le = 0, r = 1e10;
    while (abs(le - r) > 1e-9)
    {
        long double m = (le + r) / 2;
        bool good = true;
        for (int i = 0; i < n; i++)
        {
            if (a[0] - m > 0)
                good = false;
            if (a[n-1] + m < l)
                good = false;
            if (a[i] + m < a[i + 1] - m)
                good = false;
        }
        if (good)
            r = m;
        else le = m;
    }
    printf("%.10f", le);
    return 0;

}