#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <limits.h>
#include <math.h>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;
typedef long long ll;

struct Node{
	int l,r,d;
	int word;
	char c;
}node[2320005];
int cnt=1;

inline int newnode(){
	return ++cnt;
}

int oriWord;
string wordList[100005];
char rev[1005];

void insert(int p,char* str){
	if((*str)==0){
		node[p].word=oriWord;
		return;
	}
	if(node[p].c==*str){
		if(!node[p].d){
			node[p].d=newnode();
			node[node[p].d].c='n';
		}
		insert(node[p].d,str+1);
	}else if(*str<node[p].c){
		if(!node[p].l){
			node[p].l=newnode();
			node[node[p].l].c=(*str);
		}
		insert(node[p].l,str);
	}else{
		if(!node[p].r){
			node[p].r=newnode();
			node[node[p].r].c=(*str);
		}
		insert(node[p].r,str);
	}
}

char sen[10005];
int pre[10005];
int ans[10005];

int coming;
void search(int p,int idx){
	if(p==0)return;
	if(node[p].word){
		pre[idx-1]=coming;
		ans[idx-1]=node[p].word;
	}
	if(node[p].c==sen[idx]){
		search(node[p].d,idx+1);
	}else if(sen[idx]<node[p].c){
		search(node[p].l,idx);
	}else{
		search(node[p].r,idx);
	}
}

int n,m;
char tmp[1005];
int main(){
	node[1].c='n';
	scanf("%d%s",&n,sen+1);
	reverse(sen+1,sen+1+n);
	for(scanf("%d",&m);m--;){
		scanf("%s",tmp);
		wordList[m+1]=tmp;
		int len=strlen(tmp);
		for(int i=0;i<len;i++){
			rev[i]=tolower(tmp[i]);
		}
		rev[len]=0;
		oriWord=m+1;
		insert(1,rev);
	}
	memset(pre,-1,sizeof(pre));
	coming=0;
	search(1,1);
	
	for(int i=2;i<=n;i++){
		if(pre[i-1]>=0){
			coming=i-1;
			search(1,i);
		}
	}
	/*printf("%d\n",n);
	for(int i=0;i<=n;i++){
		printf("%d ",pre[i]);
	}*/
	for(int p=n;p>0;p=pre[p]){
		printf("%s ",wordList[ans[p]].c_str());
	}
    return 0;
}
