#include <bits/stdc++.h>
#include <stdlib.h>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <map>
#include <algorithm>

using namespace std;
int n, m, k;
vector<vector<char> > graph;
vector<vector<bool> > used;

void dfs(int x, int y)
{
    used[x][y] = true;
    if ((x > 0) && !used[x - 1][y] && graph[x - 1][y] == '.')
        dfs(x - 1, y);
    if ((x < n - 1) && !used[x + 1][y] && graph[x + 1][y] == '.')
        dfs(x + 1, y);
    if ((y > 0) && !used[x][y - 1] && graph[x][y - 1] == '.')
        dfs(x, y - 1);
    if ((y < m - 1) && !used[x][y + 1] && graph[x][y + 1] == '.')
        dfs(x, y + 1);
    if (k > 0)
    {
        graph[x][y] = 'X';
        k--;
    }
}

int main()
{
    scanf("%d %d %d", &n, &m, &k);
    vector<char> vc(m);
    vector<bool> usedc;
    for (int i = 0; i < n; i++)
    {
        used.push_back(usedc);
        for (int j = 0; j < m; j++)
            used[i].push_back(false);
    }
    for (int i = 0; i < n; i++)
    {
        graph.push_back(vc);
        scanf("%c", &graph[i][0]);
        for (int j = 0; j < m; j++)
            scanf("%c", &graph[i][j]);
    }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (graph[i][j] == '.')
            {
                dfs(i, j);
                break;
            }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            printf("%c", graph[i][j]);
        printf("\n");
    }
    return 0;
}