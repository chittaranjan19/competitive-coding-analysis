#include<cstdio>
#include<vector>
#include<algorithm>
#include<cstring>
#include<assert.h>
using namespace std;
#define FOR(i,a,b) for(int i = a; i <= b; ++i)
#define FORD(i,a,b) for(int i = a; i >= b; --i)
#define RI(i,n) FOR(i,1,n)
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
bool debug;
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const ll INF = (ll) inf * inf;
const int nax = 1e6 + 5;

ll K(ll a) { return a * (a - 1) / 2; }

char sl[21];

int main(int argc, char *argv[])
{
	debug = argc > 1;
	
	scanf("%s", sl);
	int n = strlen(sl);
	int cel = 0;
	REP(i,n) if(sl[i] == '+') ++cel;
	scanf("%s", sl);
	REP(i, n) if(sl[i] == '+') --cel;
	int ile = 0;
	REP(i, n) if(sl[i] == '?') ++ile;
	// rzucamy 'ile' razy, chcemy osiagnac 'cel'
	ld fac[21];
	fac[0] = 1;
	RI(i, 20) fac[i] = fac[i-1] * i;
	ld r = 0;
	if(cel >= 0 && cel <= ile) {
		r = fac[ile] / fac[cel] / fac[ile-cel];
		REP(_, ile) r /= 2;
	}
	printf("%.10lf\n", (double) r);
	return 0;
}
