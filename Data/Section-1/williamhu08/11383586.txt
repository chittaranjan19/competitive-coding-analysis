#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define dbg(x) cerr << #x << " = " << x << endl

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e6 + 10;

int N;
int H[2], A[2], X[2], Y[2];
vector<int> pref[2], cyc[2];	//prefix then real cycle
int last[2][MAXN];

int next (int b, int h) {
	return (ll(X[b] * h) + Y[b]) % N;
}

void compute (int b) {
	cin >> H[b] >> A[b] >> X[b] >> Y[b];
	//compute the scycle and the beginning special
	int h = H[b];
	int *lst = last[b];
	fill_n(lst, MAXN, -1);
	lst[h] = 0;
	vector<int> comp(1, h);
	for (int i = 1; ; i++) {
		h = next(b, h);
		if (lst[h] != -1) {
			//then find the cycle
			if (lst[A[b]] == -1) {
				cout << "-1\n";
				exit(0);
			}
			int s = lst[h];
			pref[b].assign(comp.begin(), comp.begin() + s);
			cyc[b].assign(comp.begin() + s, comp.end());
			break;
		}
		lst[h] = i;
		comp.push_back(h);
	}
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> N;
	compute(0);
	compute(1);
	//aite now calculate the first ish 2 million ones?
	int h0 = H[0], h1 = H[1];
	for (int i = 0; i < 2e6; i++) {
		if (h0 == A[0] && h1 == A[1]) {
			cout << i << endl;
			return 0;
		}
		h0 = next(0, h0);
		h1 = next(1, h1);
	}
	//ok if still not then do the cycles
	int M[2] = {int(cyc[0].size()), int(cyc[1].size())};
	int R[2] = {last[0][A[0]], last[1][A[1]]};
	//x % M[0] = R[0], x % M[1] = R[1]. find the least x
	//remember to use ll
	ll x = R[0];
	for (int i = 0; i < 1e7; i++, x += M[0]) {
		if (x % M[1] == R[1]) {
			if (x < 2e6) {
				continue;
			}
			cout << x << endl;
			return 0;
		}
	}
	cout << "-1\n";
}