#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
int n;
long long a[MAXN], b[MAXN], c[MAXN], val[MAXN];
struct line{
    long long a, b;
} it[MAXN * 4];

long long Get(line d, int Pos)
{
    if (d.a == 123456789123456LL && d.b == 123456789123456LL) return 123456789123456LL;
    return d.a * Pos + d.b;
}

long long Query(long long x, long long low, long long high, long long pos)
{
    //cout<<it[x].a<<" "<<it[x].b<<endl;
    if(low > val[pos] || high < val[pos])
    {
        return 123456789123456LL;
    }
    long long res = Get(it[x], a[pos]);
    //cout << it[x].a <<" "<<it[x].b << " " << res << endl;
    if(low == high)
    {
        return res;
    }
    long long mid = (low + high) / 2;
    res = min(res, Query(x * 2, low, mid, pos));
    res = min(res, Query(x * 2 + 1, mid + 1, high, pos));
    return res;
}

void Update(long long x, long long low, long long high, line val)
{
    //cout << low<<" "<<high<<" "<<val.a<<" "<<val.b<<endl;
    long long mid = (low + high) / 2;
    if(Get(val,a[low])<= Get(it[x], a[low]) && Get(val, a[high]) <= Get(it[x], a[high]))
    {
        it[x] = val;
        return;
    }
    if(Get(val,a[low])>= Get(it[x], a[low]) && Get(val, a[high]) >= Get(it[x], a[high]))
    {
        return;
    }
    if(Get(val,a[low])<= Get(it[x], a[low]) && Get(val, a[mid]) <= Get(it[x], a[mid]))
    {
        Update(x * 2 + 1, mid + 1, high, it[x]);
        it[x] = val;
        return;
    }
    if(Get(val,a[low])>= Get(it[x], a[low]) && Get(val, a[mid]) >= Get(it[x], a[mid]))
    {
        Update(x * 2 + 1, mid + 1, high, val);
        return;
    }
    if(Get(val, a[mid + 1]) <= Get(it[x], a[mid + 1]) && Get(val, a[high]) <= Get(it[x], a[high]))
    {
        Update(x * 2, low, mid, it[x]);
        it[x] = val;
        return;
    }
    if(Get(val, a[mid + 1]) >= Get(it[x], a[mid + 1]) && Get(val, a[high]) >= Get(it[x], a[high]))
    {
        Update(x * 2, low, mid, val);
        return;
    }
}
long long f[MAXN];
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("319C.inp", "r", stdin);
    freopen("319C.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n;
    FORE(i, 1, n) cin >> a[i];
    FORE(i, 1, n) cin >> b[i];
    FORE(i, 1, n) c[i] = a[i];
    sort(c + 1, c + n + 1);
    FORE(i, 1, n) val[i] = lower_bound(c + 1, c + n + 1, a[i]) - c;
    int top = *max_element(val + 1, val + n + 1);
    FORE(x, 0, MAXN * 4 - 1) it[x].a = 123456789123456LL, it[x].b=123456789123456LL;
    f[1] = 0;
    Update(1, 1, top, (line){b[1], f[1]});
    //cout << query(1, 1, 5, 2)<<"wtf"<<endl;
    //FORE(i, 1, n) cout << val[i]<<" ";cout<<endl;
    //cout << top << endl;
    FORE(i, 2, n){
        f[i] = Query(1, 1, top, i);
        Update(1, 1, top, (line){b[i], f[i]});
    }
    //FORE(i, 1, n) cout<<f[i]<<" ";cout<<endl;
    cout << f[n];
    return 0;
}

