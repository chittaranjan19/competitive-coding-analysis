#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <stdexcept>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

pair<int, int> arr[200005];
int s[400005];
int tree[1600005];

void update(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree[i] = max(val, tree[i]);
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree[i] = max(tree[i*2 + 1], tree[i*2 + 2]);
}

int query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return max(query(i*2 + 1, L, (L + R) / 2, x, y), query(i*2 + 2, (L + R) / 2 + 1, R, x, y));
}

map<int, int> id;
int ind;

int main()
{
  ios_base::sync_with_stdio(0);
  int n, x, y;
  cin >> n;
  for(int i=0;i<n;i++)
  {
    cin >> x >> y;
    arr[i] = mp(x + y, x - y);
    s[i*2] = x + y;
    s[i*2 + 1] = x - y;
  }
  sort(s, s + n * 2);
  for(int i=0;i<2*n;i++)
    if(id.find(s[i]) == id.end())
      id[s[i]] = ind++;
  sort(arr, arr + n);
  int res = 1;
  for(int i=0;i<n;i++)
  {
    int idx = id[arr[i].s];
    int tmp = query(0, 0, ind - 1, 0, idx) + 1;
    idx = id[arr[i].f];
    update(0, 0, ind - 1, idx, tmp);
    res = max(res, tmp);
  }
  cout << res;
  return 0;
}