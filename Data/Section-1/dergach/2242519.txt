#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

#define eps 1e-8

long long m, L, R, k;

long long qpowmod(long long n)
{
    long long a[2][2], b[2][2], tmp[2][2];
    int i, j, k;
    a[0][0] = a[0][1] = a[1][0] = 1; a[1][1] = 0;
    b[0][0] = b[1][1] = 1; b[0][1] = b[1][0] = 0;
    while(n)
    {
        if(n & 1)
        {
            for(i = 0; i < 2; i++)
                for(j = 0; j < 2; j++)
                    tmp[i][j] = 0;
            for(i = 0; i < 2; i++)
                for(j = 0; j < 2; j++)
                    for(k = 0; k < 2; k++)
                        tmp[i][j] = (tmp[i][j] + b[i][k] * a[k][j]) % m;
            for(i = 0; i < 2; i++)
                for(j = 0; j < 2; j++)
                    b[i][j] = tmp[i][j];
        }

        for(i = 0; i < 2; i++)
            for(j = 0; j < 2; j++)
                tmp[i][j] = 0;
        for(i = 0; i < 2; i++)
            for(j = 0; j < 2; j++)
                for(k = 0; k < 2; k++)
                    tmp[i][j] = (tmp[i][j] + a[i][k] * a[k][j]) % m;
        for(i = 0; i < 2; i++)
            for(j = 0; j < 2; j++)
                a[i][j] = tmp[i][j];

        n >>= 1;
    }
    return b[0][0];
}

int main()
{
    cin >> m >> L >> R >> k;
    
    long long l = 1, r = R, c;
    while(l < r)
    {
        c = (l + r + 1) / 2;
        if((R - R % c - L) / (k - 1) >= c)
            l = c;
        else
            r = c - 1;
    }

    cout << qpowmod(l - 1) << endl;
    return 0;
}
