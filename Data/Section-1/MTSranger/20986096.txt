#include <iostream>
#include <cstring>
#include <vector>

using namespace std;
typedef long long ll;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    string s; cin >> s;
    int n = s.length();

    vector<int> lol;
    for (int i = 0; i < n; i++) {
        if (s[i] == 'B' && s[(i+1)%n] == 'A') {
            int mode = 0; // 0 = opt, 1 = L neighbor 2 = R neighbor, 3 = both neighbor, 4 = req
            if (s[(i-1+n)%n] == 'A') {
                if (s[(i-2+n)%n] == 'B') {
                    mode |= 1;
                } else {
                    mode = 4;
                }
            } else {
                mode = 0;
            }
            if (mode != 4) {
                if (s[(i+2)%n] == 'B') {
                    if (s[(i+3)%n] == 'A') {
                        mode |= 2;
                    } else {
                        mode = 4;
                    }
                } else {
                }
            }
            lol.push_back(mode);
        } else if (s[i] == 'A' && s[(i+1)%n] == 'B' && s[(i-1+n)%n] == 'A' && s[(i+2)%n] == 'B') {
            cout << 0 << endl;
            return 0;
        }
    }

    if (lol.size() == 0) {
        cout << 1 << endl;
        return 0;
    }

    n = lol.size();
    ll dp[n][2];
    ll ans = 0;
    if (lol[0] != 4) {
        dp[0][0] = 1;
        dp[0][1] = 0;
        for (int i = 1; i < n; i++) {
            int s0 = lol[i-1];
            int s1 = lol[i];
            ll d0 = dp[i-1][0];
            ll d1 = dp[i-1][1];
            if (i == n-1 && lol[0] & 1) {
                dp[i][0] = 0;
            } else {
                if (s1 == 0 || s1 == 2) {
                    dp[i][0] = ((s0 & 2) ? 0 : d0) + d1;
                } else if (s1 & 1) {
                    dp[i][0] = d1;
                } else {
                    dp[i][0] = 0;
                }
            }
            dp[i][1] = d0 + d1;
        }
        ans += dp[n-1][0] + dp[n-1][1];
    }
    dp[0][0] = 0;
    dp[0][1] = 1;
    for (int i = 1; i < n; i++) {
        int s0 = lol[i-1];
        int s1 = lol[i];
        ll d0 = dp[i-1][0];
        ll d1 = dp[i-1][1];
        if (s1 == 0 || s1 == 2) {
            dp[i][0] = ((s0 & 2) ? 0 : d0) + d1;
        } else if (s1 & 1) {
            dp[i][0] = d1;
        } else {
            dp[i][0] = 0;
        }
        dp[i][1] = d0 + d1;
    }
    ans += dp[n-1][0] + dp[n-1][1];

    cout << ans << endl;
}
