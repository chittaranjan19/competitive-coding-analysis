#include<iostream>
#include<cstdio>
#include<map>
#include<string>
#include<cstring>
#include<vector>
#include<algorithm>
#include<queue>
#include<set>
#include<stack>

#define fill(a,val) memset(a, (val), sizeof a)
#define pb push_back
#define scantype int
#define min(a,b) a<b?a:b
#define max(a,b) a>b?a:b
#define lli long long int

lli powermod(lli _a,lli _b,lli _m){lli _r=1;while(_b){if(_b%2==1)_r=(_r*_a)%_m;_b/=2;_a=(_a*_a)%_m;}return _r;}

using namespace std;

void scan(scantype &x);

bool mycmp(int a,int b)
{
   return b<a?true:false;
}
int main(void)
{
  /*
  vector<int> vp;

  vp.pb(1);
  vp.pb(10);
  vp.pb(3);

  make_heap(vp.begin(),vp.end(),mycmp);

  cout<<vp[0]<<" ";

  vp.pb(0);

  push_heap(vp.begin(),vp.end(),mycmp);

  cout<<vp[0]; */

  int n,num;
  cin>>n;
  string cmd;

  vector<int> vp;
  vector<string> a1;
  vector<int> a2;

  while(n--)
  {
       cin>>cmd;

       if(cmd[0]=='i')      //Insert
       {
            scan(num);
            vp.pb(num);
            push_heap(vp.begin(),vp.end(),mycmp);
            a1.pb(cmd);
            a2.pb(num);
       }
       else if(cmd[0]=='g') //Get min
       {
            scan(num);
            if(!vp.size())
            {
                vp.pb(num);
                a1.pb("insert");
                a2.pb(num);
            }
            if(num!=vp[0])
            {
                while(vp[0]<num && vp.size())
                {
                    a1.pb("removeMin");
                    pop_heap(vp.begin(),vp.end(),mycmp);
                    vp.pop_back();
                }
                a1.pb("insert");
                a2.pb(num);
                vp.pb(num);
                push_heap(vp.begin(),vp.end(),mycmp);
            }
            a1.pb("getMin");
            a2.pb(num);

       }
       else                 //Remove
       {
            if(!vp.size())
            {
                a1.pb("insert");
                a2.pb(1000000000);
                a1.pb("removeMin");
            }
            else
            {
                a1.pb("removeMin");
                pop_heap(vp.begin(),vp.end(),mycmp);
                vp.pop_back();
            }
       }

  }

  cout<<a1.size()<<endl;

  int k=0;
  for(int i=0;i<a1.size();i++)
  {
     cout<< a1[i] << " ";

     if(a1[i][0]!='r') cout<< a2[k++];
     cout<<endl;
  }
  return 0;
}









void scan(scantype &x)
{
    /*register int c = getchar(); //for positive
    x = 0;
    for(;(c<48 || c>57);c = getchar());
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}*/

    register int c = getchar(); //for negative/positive
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = getchar());
    if(c=='-') {neg=1;c=getchar();}
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}
