#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }

const int N = 2222;

ld pi = 3.1415926535897932384626433832795;

struct nd
{
	map<int, nd*> nxt;
	int end = -1;
	nd() {
		end = -1;
	}
};

nd* root = new nd();

void add(string s, int id)
{
	nd *v = root;
	for (int i = 0; i < s.size(); i++)
	{
		int ch = (int)(s[i] - 'a');
		if (v->nxt.count(ch) == 0)
			v->nxt[ch] = new nd(), v->nxt[ch]->end = -1;
		v = v->nxt[ch];
	}
	v->end = id;
}

vector<string> ww, w;
string txt;
int n, m;
int prv[11111];
vector<int> st[110000], endd[110000];
set<int> sst[11111], send[11111];
vector<int>::iterator it, ti;

int main()
{
	cin >> n;
	cin >> txt;
	cin >> m;
	for (int i = 0; i < m; i++){
		string t, tmp;
		cin >> t;
		ww.push_back(t);
		tmp = t;
		for (int j = 0; j < t.size(); j++){
			if (t[j] >= 'A' && t[j] <= 'Z')
				tmp[j] = char(t[j] + 32);
			else tmp[j] = t[j];
		}
		reverse(tmp.begin(), tmp.end());
		add(tmp, i);
	}
	for (int i = 0; i < n; i++){
		nd* cur = root;
		char next;
		for (int j = 0; j < 1000; j++)
		{
			next = txt[i + j] - 'a';
			if (cur->nxt.count(next) == 0 || i + j >= n)
				break;
			cur = cur->nxt[next];
			if (cur->end != -1 && (send[i + j].count(cur->end) == 0))
				st[i].push_back(cur->end), endd[i + j].push_back(cur->end), send[i + j].insert(cur->end);
		}
	}
	for (int i = 0; i < 11111; i++)
		prv[i] = -1;
	for (int i = 0; i < n; i++){
		for (it = st[i].begin(); it != st[i].end(); it++)
		if (prv[i] != -1 || i == 0)
			prv[i + ww[*it].size()] = *it;
	}
	int cur = 0;
	for (int i = 0; i <= n; i++)
	if (prv[i] != -1)
		cout << ww[prv[i]] << ' ';
	return 0;
}