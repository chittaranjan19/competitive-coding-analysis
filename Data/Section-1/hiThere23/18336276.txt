#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define maxC 1500000000000005ll
#define mn 100005
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define top mp(maxC, maxC)

using namespace std;
int n, q, a[mn];
long long pow42[] = {1, 42, 1764, 74088, 3111696, 130691232, 5489031744, 230539333248, 9682651996416, 406671383849472, 17080198121677824};

struct interval
{
    long long tree[mn << 2];
    pair<long long, int> dif[mn << 2];
    int mark[mn << 2], f[mn << 2];

    void build(int l, int r, int id)
    {
        f[id] = -1;
        if (l == r)
        {
            tree[id] = a[l];
            mark[id] = 1;
            FOR(i, 0, 10)
            if (pow42[i] > a[l])
            {
                dif[id] = mp(pow42[i] - a[l], l);
                return;
            }
        }
        int g = ((l + r) >> 1);
        build(l, g, id << 1);
        build(g + 1, r, (id << 1) + 1);
        mark[id] = mark[id << 1] + mark[(id << 1) + 1];
        dif[id] = min(dif[id << 1], dif[(id << 1) + 1]);
    }

    void push(int id)
    {
        if (tree[id] >= maxC)
        {
            tree[id << 1] = tree[(id << 1) + 1] = maxC;
            dif[id << 1] = dif[(id << 1) + 1] = top;
        }
        else
        {
            tree[id << 1] += tree[id];
            tree[(id << 1) + 1] += tree[id];
            dif[id << 1].F -= tree[id];
            dif[(id << 1) + 1].F -= tree[id];
        }
        tree[id] = 0;
    }

    void push2(int l, int r, int id)
    {
        if (f[id] == -1)
            return;
        int g = ((l + r) >> 1);
        mark[id << 1] = (g - l + 1) * f[id];
        f[id << 1] = f[id];
        mark[(id << 1) + 1] = (r - g) * f[id];
        f[(id << 1) + 1] = f[id];
        f[id] = -1;
    }

    void add(int l, int r, int id, int x, int y, long long v)
    {
        if (l > y || r < x)
            return;
        if (x <= l && r <= y)
        {
            tree[id] += v;
            if ((tree[id] = min(tree[id], maxC)) == maxC)
                dif[id] = top;
            else
                dif[id].F -= v;
            return;
        }
        push(id);
        int g = ((l + r) >> 1);
        add(l, g, id << 1, x, y, v);
        add(g + 1, r, (id << 1) + 1, x, y, v);
        dif[id] = min(dif[id << 1], dif[(id << 1) + 1]);
    }

    void setVal(int l, int r, int id, int x, long long v)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            if (v != -1)
                tree[id] = v;
            FOR(i, 0, 10)
            if (pow42[i] > tree[id])
            {
                dif[id] = mp(pow42[i] - tree[id], l);
                return;
            }
            return;
        }
        push(id);
        int g = ((l + r) >> 1);
        setVal(l, g, id << 1, x, v);
        setVal(g + 1, r, (id << 1) + 1, x, v);
        dif[id] = min(dif[id << 1], dif[(id << 1) + 1]);
    }

    void paint(int l, int r, int id, int x, int y, int inf)
    {
        if (l > y || r < x)
            return;
        if (x <= l && r <= y)
        {
            mark[id] = (r - l + 1) * inf;
            f[id] = inf;
            return;
        }
        push2(l, r, id);
        int g = ((l + r) >> 1);
        paint(l, g, id << 1, x, y, inf);
        paint(g + 1, r, (id << 1) + 1, x, y, inf);
        mark[id] = mark[id << 1] + mark[(id << 1) + 1];
    }

    int getMark(int l, int r, int id, int x)
    {
        if (l > x)
            return 0;
        if (r <= x)
            return mark[id];
        push2(l, r, id);
        int g = ((l + r) >> 1);
        return getMark(l, g, id << 1, x) + getMark(g + 1, r, (id << 1) + 1, x);
    }

    long long findVal(int l, int r, int id, int num)
    {
        if (l == r)
            return tree[id];
        push(id);
        push2(l, r, id);
        int g = ((l + r) >> 1);
        if (mark[id << 1] >= num)
            return findVal(l, g, id << 1, num);
        return findVal(g + 1, r, (id << 1) + 1, num - mark[id << 1]);
    }
} t;

void setup()
{
    cin >> n >> q;
    FOR(i, 1, n)
        cin >> a[i];
    t.build(1, n, 1);
}

void querry1()
{
    int x;
    cin >> x;
    int k = t.getMark(1, n, 1, x - 1);
    cout << t.findVal(1, n, 1, k + 1) << '\n';
}

void querry2()
{
    int x, y;
    long long v;
    cin >> x >> y >> v;
    t.setVal(1, n, 1, y, v);
    if (x == y)
        return;
    t.paint(1, n, 1, x, y - 1, 0);
    t.add(1, n, 1, x, y - 1, maxC);
}

void querry3()
{
    int x, y;
    long long v;
    cin >> x >> y >> v;
    int a = t.getMark(1, n, 1, x - 2);
    int b = t.getMark(1, n, 1, y - 1);
    long long a1 = t.findVal(1, n, 1, a + 1);
    long long b1 = t.findVal(1, n, 1, b + 1);
    t.setVal(1, n, 1, x - 1, a1);
    t.setVal(1, n, 1, y, b1);
    t.paint(1, n, 1, x - 1, x - 1, 1);
    t.paint(1, n, 1, y, y, 1);
    t.add(1, n, 1, x, y, v);
    while(t.dif[1].F <= 0)
    {
        int id = t.dif[1].S;
        if (t.dif[1].F == 0)
            t.add(1, n, 1, x, y, v);
        t.setVal(1, n, 1, id, -1);
    }
}

void xuly()
{
    int type;
    FOR(i, 1, q)
    {
        cin >> type;
        if (type == 1)
            querry1();
        if (type == 2)
            querry2();
        if (type == 3)
            querry3();
    }
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
