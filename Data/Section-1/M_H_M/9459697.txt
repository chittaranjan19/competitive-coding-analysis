#include <iostream>
#include <vector>

using namespace std;

const int maxn = 100 + 10;

vector < vector <pair <int , int > > > vec;
int n,m,t1,t2,c,q,u,v,t;
pair <int , int> tmp;
bool mark[maxn];
bool color[maxn];

void dfs(int x , int l){
    mark[x] = true;
    for(int i = 0; i < vec[x].size(); ++i){
        if(vec[x][i].second == l && !mark[vec[x][i].first]){
            dfs(vec[x][i].first , l);
        }
    }
}

int main(){
    cin >> n >> m;
    vec.resize(n);
    for(int i = 0; i < m; ++i){
        cin >> t1 >> t2 >> c;
        t1--;t2--;
        tmp.first = t1;
        tmp.second = c;
        vec[t2].push_back(tmp);
        tmp.first = t2;
        vec[t1].push_back(tmp);     
        color[c] = true;
    }
    cin >> q;
    for(int i = 0; i < q; ++i){
        cin >> u >> v;
        t = 0;
        u--;v--;
        for(int  j = 0; j < maxn; ++j){
            if(!color[j])
                continue;
            for(int k = 0; k < maxn; ++k)
                mark[k] = false;
            dfs(u , j);
            if(mark[v])
                t++;
        }
        cout << t << endl;
    }
    return 0;
}
