#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>
#include <clocale>

#define ll long long
#define ld long double

using namespace std;

const int inf = (int)2 * 1e9;
const ll MOD = (ll)1e9 + 7;
const ll P = 239;
const ll MAX_N = 500;
const ld pi = 3.1415926535897932384626;
const ld eps = 1e-6;

int n, m;
int dist[4][1000][1000];
char graph[1000][1000];
queue<pair<int, pair<int, int> > > q;

bool ok(char c, char p, int t)
{
    if (p == 'U')
    {
        if (c == '+')
            return true;
        if (c == '-')
            return t % 2 == 1;
        if (c == '|')
            return t % 2 == 0;
        if (c == '^')
            return t == 0;
        if (c == '>')
            return t == 3;
        if (c == 'v')
            return t == 2;
        if (c == '<')
            return t == 1;
        if (c == 'U')
            return t != 0;
        if (c == 'R')
            return t != 3;
        if (c == 'D')
            return t != 2;
        if (c == 'L')
            return t != 1;
        return false;
    }
    else if (p == 'R')
    {
        if (c == '+')
            return true;
        if (c == '-')
            return t % 2 == 0;
        if (c == '|')
            return t % 2 == 1;
        if (c == '^')
            return t == 1;
        if (c == '>')
            return t == 0;
        if (c == 'v')
            return t == 3;
        if (c == '<')
            return t == 2;
        if (c == 'U')
            return t != 1;
        if (c == 'R')
            return t != 0;
        if (c == 'D')
            return t != 3;
        if (c == 'L')
            return t != 2;
        return false;
    }
    else if (p == 'D')
    {
        if (c == '+')
            return true;
        if (c == '-')
            return t % 2 == 1;
        if (c == '|')
            return t % 2 == 0;
        if (c == '^')
            return t == 2;
        if (c == '>')
            return t == 1;
        if (c == 'v')
            return t == 0;
        if (c == '<')
            return t == 3;
        if (c == 'U')
            return t != 2;
        if (c == 'R')
            return t != 1;
        if (c == 'D')
            return t != 0;
        if (c == 'L')
            return t != 3;
        return false;
    }
    else
    {
        if (c == '+')
            return true;
        if (c == '-')
            return t % 2 == 0;
        if (c == '|')
            return t % 2 == 1;
        if (c == '^')
            return t == 3;
        if (c == '>')
            return t == 2;
        if (c == 'v')
            return t == 1;
        if (c == '<')
            return t == 0;
        if (c == 'U')
            return t != 3;
        if (c == 'R')
            return t != 2;
        if (c == 'D')
            return t != 1;
        if (c == 'L')
            return t != 0;
        return false;
    }
}

void bfs()
{
    while (!q.empty())
    {
        pair<int, pair<int, int> > p = q.front();
        q.pop();
        int t = p.first, x = p.second.first, y = p.second.second;
        if (dist[(t + 1) % 4][x][y] == inf)
        {
            dist[(t + 1) % 4][x][y] = dist[t][x][y] + 1;
            q.push({(t + 1) % 4, {x, y}});
        }
        char c = graph[x][y];
        if (y > 0)
        {
            if (ok(c, 'L', t) && ok(graph[x][y - 1], 'R', t))
            {
                if (dist[t][x][y - 1] == inf)
                {
                    dist[t][x][y - 1] = dist[t][x][y] + 1;
                    q.push({t, {x, y - 1}});
                }
            }
        }
        if (x > 0)
        {
            if (ok(c, 'U', t) && ok(graph[x - 1][y], 'D', t))
            {
                if (dist[t][x - 1][y] == inf)
                {
                    dist[t][x - 1][y] = dist[t][x][y] + 1;
                    q.push({t, {x - 1, y}});
                }
            }
        }
        if (y < m - 1)
        {
            if (ok(c, 'R', t) && ok(graph[x][y + 1], 'L', t))
            {
                if (dist[t][x][y + 1] == inf)
                {
                    dist[t][x][y + 1] = dist[t][x][y] + 1;
                    q.push({t, {x, y + 1}});
                }
            }
        }
        if (x < n - 1)
        {
            if (ok(c, 'D', t) && ok(graph[x + 1][y], 'U', t))
            {
                if (dist[t][x + 1][y] == inf)
                {
                    dist[t][x + 1][y] = dist[t][x][y] + 1;
                    q.push({t, {x + 1, y}});
                }
            }
        }
    }
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //setlocale(LC_CTYPE, "rus");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < m; k++)
                dist[i][j][k] = inf;
    for (int j = 0; j < n; j++)
        for (int k = 0; k < m; k++)
            cin >> graph[j][k];
    int sx, sy, fx, fy;
    cin >> sx >> sy >> fx >> fy;
    sx--; sy--; fx--; fy--;
    dist[0][sx][sy] = 0;
    q.push({0, {sx, sy}});
    bfs();
    int ans = inf;
    for (int i = 0; i < 4; i++)
        ans = min(ans, dist[i][fx][fy]);
    cout << (ans < inf ? ans : -1);
    return 0;
}