#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

int col[105];

int main()
{
    int n,k,x;
    cin >> n >> k >> x;
    vector<int> arr;
    int y;
    for(int i=0;i<n;i++)
    {
        cin >> y;
        arr.pb(y);
    }
    int maxi=0;
    for(int i=0;i<n-1;i++)
    {
        if(arr[i] == x && arr[i+1] == x)
        {
            vector<int> temp = arr;
            bool valid = true;
            int counter=0,res=0;
            int k = i;
            while(k<temp.size()-1 && temp[k] == temp[k+1])
                counter++,k++;
            if(counter == temp.size()-1)
                valid = false,res=arr.size();
            else temp.erase(temp.begin()+i,(i+counter+1 == temp.size() ? temp.end() : temp.begin()+i+counter+1)),res=counter+1;
            while(valid)
            {
                valid = false;
                for(int j=0;j<temp.size()-1;j++)
                {
                    counter=0;
                    int k=j;
                    while(k < temp.size()-1 && temp[k] == temp[k+1])
                        counter++,k++;
                    if(counter == temp.size()-1)
                    {
                        res = arr.size(),valid = false;
                        break;
                    }
                    else if(counter >= 2)
                        temp.erase(temp.begin()+j,(j+counter+1 == temp.size() ? temp.end() : temp.begin()+j+counter+1)),j--,valid = true,res+=counter+1;
                }
            }
            maxi=max(maxi,res);
        }
    }
    cout << maxi;
    return 0;
}