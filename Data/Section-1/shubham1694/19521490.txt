#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

int n, m, d;
ll h[maxn];
map<ll, int> compress;
map<ll, int> :: iterator iter;
map<int, ll> decompress;
pii dp[maxn], st[maxn*5], mn = mp(0, 0);

void init(int s, int e, int node)
{
	if(s==e){
		st[node] = mp(0, 0);
		return;
	}
	int mid = (s+e)>>1;
	int lc = node*2 + 1;
	int rc = lc + 1;
	init(s, mid, lc);
	init(mid+1, e, rc);
	st[node] = max(st[lc], st[rc]);
}

void update(int s, int e, int q, pii val, int node)
{
	if(s>q || s>e || q>e)
		return;
	if(s==e){
		st[node] = max(st[node], val);
		return;
	}
	int mid = (s+e)>>1;
	int lc = node*2 + 1;
	int rc = lc + 1;
	update(s, mid, q, val, lc);
	update(mid+1, e, q, val, rc);
	st[node] = max(st[lc], st[rc]);
}

pii query(int s, int e, int qs, int qe, int node)
{
	if(s>e || s>qe || qs>e)
		return mp(0, 0);
	if(s>=qs && qe>=e)
		return st[node];
	int mid = (s+e)>>1;
	int lc = node*2 + 1;
	int rc = lc + 1;
	return max(query(s, mid, qs, qe, lc), query(mid+1, e, qs, qe, rc));
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j;
	scanf("%d%d", &n, &d);
	for(i=1; i<=n; i++){
		scanf("%lld", &h[i]);
		compress[h[i]] = 1;
	}
	m = 0;
	for(iter=compress.begin(); iter!=compress.end(); ++iter){
		iter->s = m;
		decompress[m] = iter->f;
		m++;
	}
	//init(0, m-1, 0);
	pii ans = mn;
	int st;
	for(i=n; i>=1; i--){
		auto it = compress.lower_bound(h[i]+d);
		pii cur = mn;
		if(it != compress.end())
			cur = max(cur, query(0, m-1, it->s, m-1, 0));
		it = compress.lower_bound(h[i]-d);
		if(it->f > h[i]-d){
			if(it != compress.begin()){
				--it;
				cur = max(cur, query(0, m-1, 0, it->s, 0));
			}
		}
		else
			cur = max(cur, query(0, m-1, 0, it->s, 0));
		cur.f++;
		dp[i] = cur;
		cur.s = i;
		update(0, m-1, compress[h[i]], cur, 0);
		if(cur > ans){
			ans = cur;
			st = i;
		}
	}
	printf("%d\n", ans.f);
	while(st){
		printf("%d ", st);
		if(st == dp[st].s)
			break;
		st = dp[st].s;
	}
	return 0;
}
