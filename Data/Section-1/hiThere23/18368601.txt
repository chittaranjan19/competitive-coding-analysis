#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define maxC 1000000007
#define mn 100050
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define base 3
#define pii pair<int, int>

using namespace std;
int n, m, s, e, num = 0, trace[mn];
int d[mn], root0, root1;
long long po[mn], cost = 0;
bool mark[mn];
vector< pii > g[mn];
vector<int> way;
int ans[mn];

struct node
{
    int val, l, r, z;
    long long hashVal;
};

struct persistentTree
{
    node tree[mn * 60];

    int build(int l, int r, int val)
    {
        int re = ++ num;
        tree[re].val = val;
        tree[re].z = (1 - val) * (r - l + 1);
        if (l == r)
        {
            tree[re].hashVal = val;
            return re;
        }
        int g = ((l + r) >> 1);
        tree[re].l = build(l, g, val);
        tree[re].r = build(g + 1, r, val);
        tree[re].hashVal = (tree[tree[re].l].hashVal + tree[tree[re].r].hashVal * po[g - l + 1]) % maxC;
        return re;
    }

    int update(int l, int r, int id, int x, int y, int id0, int id1)
    {
        if (l == y && r == y)
            return id1;
        if (x <= l && r < y)
            return id0;
        int g = ((l + r) >> 1);
        int re = ++ num;
        if (x <= g && l <= y)
            tree[re].l = update(l, g, tree[id].l, x, y, tree[id0].l, tree[id1].l);
        else
            tree[re].l = tree[id].l;
        if (x <= r && g + 1 <= y)
            tree[re].r = update(g + 1, r, tree[id].r, x, y, tree[id0].r, tree[id1].r);
        else
            tree[re].r = tree[id].r;
        tree[re].val = -1;
        tree[re].z = tree[tree[re].l].z + tree[tree[re].r].z;
        tree[re].hashVal = (tree[tree[re].l].hashVal + tree[tree[re].r].hashVal * po[g - l + 1]) % maxC;
        return re;
    }

    bool getDif(int l, int r, int id1, int id2)
    {
        if (l == r)
            return tree[id1].val < tree[id2].val;
        int g = ((l + r) >> 1);
        if (tree[tree[id1].r].hashVal != tree[tree[id2].r].hashVal)
            return getDif(g + 1, r, tree[id1].r, tree[id2].r);
        return getDif(l, g, tree[id1].l, tree[id2].l);
    }

    int getNumZero(int l, int r, int id, int x)
    {
        if (r < x)
            return 0;
        if (x <= l)
            return tree[id].z;
        int g = ((l + r) >> 1);
        int a = getNumZero(l, g, tree[id].l, x);
        int b = getNumZero(g + 1, r, tree[id].r, x);
        return a + b;
    }

    int getZero(int l, int r, int id, int x)
    {
        if (l == r)
            return l;
        int g = ((l + r) >> 1);
        if (tree[tree[id].r].z >= x)
            return getZero(g + 1, r, tree[id].r, x);
        return getZero(l, g, tree[id].l, x - tree[tree[id].r].z);
    }

    void push(int l, int r, int id)
    {
        if (tree[id].val != -1)
        {
            FOR(i, l, r)
                ans[i] = tree[id].val;
            return;
        }
        int g = ((l + r) >> 1);
        push(l, g, tree[id].l);
        push(g + 1, r, tree[id].r);
    }
} t;

bool check(int id1, int id2)
{
    return t.getDif(0, mn - 1, id1, id2);
}

class comp
{
    public: bool operator() (pii a, pii b)
    {
        return !check(a.F, b.F);
    }
};

priority_queue< pii , vector< pii >, comp> p;

void setup()
{
    root0 = t.build(0, mn - 1, 0);
    root1 = t.build(0, mn - 1, 1);
    po[0] = 1;
    FOR(i, 1, mn - 1)
        po[i] = (po[i - 1] * base) % maxC;
    cin >> n >> m;
    int u, v, w;
    FOR(i, 1, m)
    {
        cin >> u >> v >> w;
        g[u].pb(mp(v, w));
        g[v].pb(mp(u, w));
    }
    cin >> s >> e;
}

void print(int x)
{
    t.push(0, mn - 1, x);
    FORD(i, mn - 1, 0)
        cost = ((cost << 1) + ans[i]) % maxC;
    cout << cost << '\n';
    while(e)
    {
        way.pb(e);
        e = trace[e];
    }
    cout << way.size() << '\n';
    FORD(i, int(way.size()) - 1, 0)
        cout << way[i] << ' ';
}

void xuly()
{
    FOR(i, 1, n)
        d[i] = root1;
    d[s] = root0;
    p.push(mp(root0, s));
    while(!p.empty())
    {
        int u = p.top().S;
        int w = p.top().F;
        p.pop();
        if (mark[u])
            continue;
        mark[u] = true;
        if (u == e)
        {
            print(w);
            return;
        }
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int v = g[u][i].F;
            if (mark[v])
                continue;
            int y = g[u][i].S;
            int z = t.getZero(0, mn - 1, w, t.getNumZero(0, mn - 1, w, y));
            int temp = t.update(0, mn - 1, w, y, z, root0, root1);
            if (check(temp, d[v]));
            {
                d[v] = temp;
                trace[v] = u;
                p.push(mp(temp, v));
            }
        }
    }
    cout << -1;
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
