#include <iostream>
#include <cstdio>
#include <cmath>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <iomanip>
#include <cctype>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <utility>
#include <climits>
#include <list>
#include <deque>
#include <ctime>

using namespace std;

const int m = 26;

int n;
string s[105];
stack<char> topo;
vector<int> g[30];
int vis[30];

bool dfs(int v)
{
    vis[v] = -1;
    for(int i = 0; i < g[v].size(); i++)
        if(vis[g[v][i]] < 0)
            return false;
        else if(!vis[g[v][i]] && !dfs(g[v][i]))
            return false;
    vis[v] = 1;
    topo.push(v + 'a');
    return true;
}

bool topo_sort()
{
    for(int i = m - 1; i >= 0; i--)
        if(!vis[i] && !dfs(i))
            return false;
    return true;
}

int main()
{
    cin >> n;
    bool flag = true;
    for(int i = 0; i < n; i++)
        cin >> s[i];
    for(int i = 0; i < n - 1 && flag; i++)
        for(int k = i + 1; k < n && flag; k++)
            for(int j = 0; flag; j++)
                if(j >= s[i].size())
                    break;
                else if(j >= s[k].size())
                {
                    flag = false;
                    break;
                }
                else if(s[i][j] != s[k][j])
                {
                    int a = s[i][j] - 'a', b = s[k][j] - 'a';
                    g[a].push_back(b);
                    break;
                }
    if(flag && topo_sort())
        for(; !topo.empty(); topo.pop())
            cout << topo.top() << (topo.size() == 1 ? "\n" : "");
    else
        cout << "Impossible\n";
    return 0;
}
