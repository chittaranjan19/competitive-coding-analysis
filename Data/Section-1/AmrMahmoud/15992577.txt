#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

bool v[205][205][205];

int main()
{
  int n;
  cin >> n;
  string s;
  cin >> s;
  int x = 0, y = 0, z = 0;
  for(int i=0;i<n;i++)
  {
    if(s[i] == 'B') x++;
    else if(s[i] == 'G') y++;
    else if(s[i] == 'R') z++;
  }
  queue<pair<pair<int, int>, int> > q;
  q.push(mp(mp(x, y), z));
  v[x][y][z] = true;
  bool xx = false;
  bool yy = false;
  bool zz = false;
  while(!q.empty())
  {
    x = q.front().f.f;
    y = q.front().f.s;
    z = q.front().s;
    q.pop();
    if(!x && !y)
    {
      zz = true;
      continue;
    }
    if(!z && !y)
    {
      xx = true;
      continue;
    }
    if(!x && !z)
    {
      yy = true;
      continue;
    }
    if(x && y && !v[x - 1][y - 1][z + 1])
    {
      v[x - 1][y - 1][z + 1] = true;
      q.push(mp(mp(x - 1, y - 1), z + 1));
    }
    if(x && z && !v[x - 1][y + 1][z - 1])
    {
      v[x - 1][y + 1][z - 1] = true;
      q.push(mp(mp(x - 1, y + 1), z - 1));
    }
    if(y && z && !v[x + 1][y - 1][z - 1])
    {
      v[x + 1][y - 1][z - 1] = true;
      q.push(mp(mp(x + 1, y - 1), z - 1));
    }

    if(x > 1 && !v[x - 1][y][z])
    {
      v[x - 1][y][z] = true;
      q.push(mp(mp(x - 1, y), z));
    }
    if(y > 1 && !v[x][y - 1][z])
    {
      v[x][y - 1][z] = true;
      q.push(mp(mp(x, y - 1), z));
    }
    if(z > 1 && !v[x][y][z - 1])
    {
      v[x][y][z - 1] = true;
      q.push(mp(mp(x, y), z - 1));
    }
  }
  if(xx) cout << 'B';
  if(yy) cout << 'G';
  if(zz) cout << 'R';
  return 0;
}
