#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
const int maxn=405,inf=1000000;
int vis[405][405];

struct Edge
{
   int from,to,dist;
   Edge(int u,int v,int d):from(u),to(v),dist(d) {}
};

struct Dijkstra
{
   int n,m;
   vector<Edge> edges;
   vector<int> G[maxn];
   bool done[maxn];
   int d[maxn];

   void init(int n)
   {
      this->n=n;
      for(int i=0;i<n;i++) G[i].clear();
      edges.clear();
   }

   void AddEdge(int from,int to,int dist)
   {
      edges.push_back(Edge(from,to,dist));
      m=edges.size();
      G[from].push_back(m-1);
   }

   struct HeapNode
   {
      int d,u;
      bool operator < (const HeapNode & rhs) const
      {
         return d>rhs.d;
      }
   };

   void dijkstra(int s)
   {
      priority_queue<HeapNode> Q;
      for(int i=1;i<=n;i++) d[i]=inf;
      d[s]=0;
      memset(done,0,sizeof(done));
      Q.push((HeapNode){0,s});
      while(!Q.empty())
      {
         HeapNode x=Q.top();
         Q.pop();
         int u=x.u;
         if(done[u])continue;
         done[u]=true;
         for(int i=0;i<G[u].size();i++)
         {
            Edge& e=edges[G[u][i]];
            if(d[e.to]>d[u]+e.dist)
            {
               d[e.to]=d[u]+e.dist;
               Q.push((HeapNode){d[e.to],e.to});
            }
         }
      }
   }
};

int main()
{
   Dijkstra ans1,ans2;
   int k,i,j,a,b;
   scanf("%d%d",&ans1.n,&k);
   ans2.n=ans1.n;
   memset(vis,0,sizeof(vis));
   for(i=0;i<k;i++)
   {
      scanf("%d%d",&a,&b);
      ans1.AddEdge(a,b,1);
      ans1.AddEdge(b,a,1);
      vis[a][b]=vis[b][a]=1;
   }
   for(i=1;i<=ans2.n;i++)
   {
      for(j=1;j<=ans2.n;j++)
      {
         if(!vis[i][j]){ans2.AddEdge(i,j,1);ans2.AddEdge(j,i,1);}
      }
   }
   if(!vis[1][ans1.n])
   {
      ans1.dijkstra(1);
      if(ans1.d[ans1.n]!=inf)printf("%d\n",ans1.d[ans1.n]);
      else printf("-1\n");
   }
   else
   {
      ans2.dijkstra(1);
      if(ans2.d[ans2.n]!=inf)printf("%d\n",ans2.d[ans1.n]);
      else printf("-1\n");
   }
   return 0;
}
