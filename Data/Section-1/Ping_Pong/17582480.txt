#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

#define ll long long
#define ld long double

using namespace std;

const int inf = (int)2 * 1e8;
const int MOD = (int)1e9 + 7;
const int P = 239;
const int MAX_N = 500000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

int n, m;
bool graph[3000][3000];
int dist[3000][3000];
queue<int> q;

void bfs(int p)
{
    while (!q.empty())
    {
        int x = q.front();
        q.pop();
        for (int i = 0; i < n; i++)
            if (graph[x][i] && (dist[p][i] > dist[p][x] + 1))
            {
                dist[p][i] = dist[p][x] + 1;
                q.push(i);
            }
    }
}

int cnt_ver = 1;
pair<pair<int, int>, pair<int, int> > tree1[3000][3000 * 4], tree2[3000][3000 * 4];

pair<pair<int, int>, pair<int, int> > max_pair(pair<pair<int, int>, pair<int, int> > a, pair<pair<int, int>, pair<int, int> > b)
{
    pair<pair<int, int>, pair<int, int> > ans;
    if (a.first.first > b.first.first)
    {
        ans.first = a.first;
        if (a.second.first > b.first.first)
            ans.second = a.second;
        else
            ans.second = b.first;
    }
    else
    {
        ans.first = b.first;
        if (b.second.first > a.first.first)
            ans.second = b.second;
        else
            ans.second = a.first;
    }
    return ans;
}

void build1(int p)
{
    for (int i = 0; i < n; i++)
        if (dist[p][i] == 0 || dist[p][i] == inf)
            tree1[p][cnt_ver - 1 + i] = make_pair(make_pair(-inf, -1), make_pair(-inf, -1));
        else
            tree1[p][cnt_ver - 1 + i] = make_pair(make_pair(dist[p][i], i), make_pair(-inf, -1));
    for (int i = cnt_ver - 2; i >= 0; i--)
        tree1[p][i] = max_pair(tree1[p][i * 2 + 1], tree1[p][i * 2 + 2]);
}

pair<pair<int, int>, pair<int, int> > ans1(int p, int x, int lx, int rx, int l, int r)
{
    if (lx > r || rx < l)
        return make_pair(make_pair(-inf, -1), make_pair(-inf, -1));
    else if (lx >= l && rx <= r)
        return tree1[p][x];
    else
        return max_pair(ans1(p, x * 2 + 1, lx, (lx + rx) / 2, l, r), ans1(p, x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r));
}

void build2(int p)
{
    for (int i = 0; i < n; i++)
        if (dist[p][i] == 0 || dist[p][i] == inf)
            tree2[i][cnt_ver - 1 + p] = make_pair(make_pair(-inf, -1), make_pair(-inf, -1));
        else
            tree2[i][cnt_ver - 1 + p] = make_pair(make_pair(dist[p][i], p), make_pair(-inf, -1));
    for (int i = cnt_ver - 2; i >= 0; i--)
        tree2[p][i] = max_pair(tree2[p][i * 2 + 1], tree2[p][i * 2 + 2]);
}

pair<pair<int, int>, pair<int, int> > ans2(int p, int x, int lx, int rx, int l, int r)
{
    if (lx > r || rx < l)
        return make_pair(make_pair(-inf, -1), make_pair(-inf, -1));
    else if (lx >= l && rx <= r)
        return tree2[p][x];
    else
        return max_pair(ans2(p, x * 2 + 1, lx, (lx + rx) / 2, l, r), ans2(p, x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r));
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
        {
            graph[i][j] = false;
            dist[i][j] = inf;
        }
    for (int i = 0; i < m; i++)
    {
        int s, f;
        scanf("%d %d", &s, &f);
        graph[s - 1][f - 1] = true;
    }
    for (int i = 0; i < n; i++)
    {
        dist[i][i] = 0;
        q.push(i);
        bfs(i);
    }
    /*for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            cout << dist[i][j] << " ";
        cout << endl;
    }*/
    while (cnt_ver < n)
        cnt_ver <<= 1;
    for (int i = 0; i < n; i++)
        build1(i);
    for (int i = 0; i < n; i++)
        build2(i);
    int ans = 0;
    pair<pair<int, int>, pair<int, int> > ans3;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if (i != j && dist[i][j] != inf)
            {
                {
                    pair<pair<int, int>, pair<int, int> > cnt1 = max_pair(ans2(i, 0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1, cnt_ver - 1 + j - 1), ans2(i, 0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + j + 1, cnt_ver * 2 - 2));
                    pair<pair<int, int>, pair<int, int> > cnt2 = max_pair(ans1(j, 0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1, cnt_ver - 1 + i - 1), ans1(j, 0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + i + 1, cnt_ver * 2 - 2));
                    if (cnt1.first.second != cnt2.first.second && cnt1.first.second != i && cnt2.first.second != j)
                    {
                        int x = cnt1.first.first + dist[i][j] + cnt2.first.first;
                        if (x > ans)
                        {
                            ans = x;
                            ans3.first.first = cnt1.first.second;
                            ans3.first.second = i;
                            ans3.second.first = j;
                            ans3.second.second = cnt2.first.second;
                        }
                    }
                    if (cnt1.first.second != cnt2.second.second && cnt1.first.second != i && cnt2.second.second != j)
                    {
                        int x = cnt1.first.first + dist[i][j] + cnt2.second.first;
                        if (x > ans)
                        {
                            ans = x;
                            ans3.first.first = cnt1.first.second;
                            ans3.first.second = i;
                            ans3.second.first = j;
                            ans3.second.second = cnt2.second.second;
                        }
                    }
                    if (cnt1.second.second != cnt2.first.second && cnt1.second.second != i && cnt2.first.second != j)
                    {
                        int x = cnt1.second.first + dist[i][j] + cnt2.first.first;
                        if (x > ans)
                        {
                            ans = x;
                            ans3.first.first = cnt1.second.second;
                            ans3.first.second = i;
                            ans3.second.first = j;
                            ans3.second.second = cnt2.first.second;
                        }
                    }
                    if (cnt1.second.second != cnt2.second.second && cnt1.second.second != i && cnt2.second.second != j)
                    {
                        int x = cnt1.second.first + dist[i][j] + cnt2.second.first;
                        if (x > ans)
                        {
                            ans = x;
                            ans3.first.first = cnt1.second.second;
                            ans3.first.second = i;
                            ans3.second.first = j;
                            ans3.second.second = cnt2.second.second;
                        }
                    }
                    /*if (i == 0 && j == 7)
                    {
                        cout << cnt1.first.first << " " << cnt1.first.second << endl;
                        cout << cnt1.second.first << " " << cnt1.second.second << endl;
                        cout << cnt2.first.first << " " << cnt2.first.second << endl;
                        cout << cnt2.second.first << " " << cnt2.second.second << endl;
                    }*/
                }
            }
    //cout << ans << endl;
    cout << ans3.first.first + 1 << " " << ans3.first.second + 1 << " " << ans3.second.first + 1 << " " << ans3.second.second + 1;
    return 0;
}
