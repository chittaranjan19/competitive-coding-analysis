import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * Date: 11.05.14
 * Time: 18:08
 */
public class XorTree {

    public XorTree() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String h = rd.readLine();
        int n = Integer.parseInt(h);
        List<List<Integer>> edges = new ArrayList<>();
        edges.add(null);
        for(int i=0;i<n;i++) {
            edges.add(new ArrayList<Integer>());
        }
        for(int i=0;i<n-1;i++) {
            h = rd.readLine();
            String[] q = h.split("\\s+");
            int u = Integer.parseInt(q[0]);
            int v = Integer.parseInt(q[1]);
            edges.get(u).add(v);
            edges.get(v).add(u);
        }
        h = rd.readLine();
        String[] a1 = h.split("\\s+");
        int[] current = new int[n+1];
        for(int i=0;i<a1.length;i++) {
            current[i+1] = Integer.parseInt(a1[i]);
        }
        h = rd.readLine();
        String[] a2 = h.split("\\s+");
        int[] goal = new int[n+1];
        for(int i=0;i<a2.length;i++) {
            goal[i+1] = Integer.parseInt(a2[i]);
        }

        boolean[] visited = new boolean[n+1];

        List<Integer> result = new ArrayList<>();

        Queue<int[]> queue = new LinkedList<>();
        int[] initialState = new int[] { 1, 0, 0 };
        if(goal[1] != current[1]) {
            initialState[2] = 1;
            result.add(1);
        }
        queue.add(initialState);
        visited[1] = true;
        while(!queue.isEmpty()) {
            int[] y = queue.poll();
            for(Integer other: edges.get(y[0])) {
                if(!visited[other]) {
                    visited[other] = true;
                    boolean diff = current[other] != goal[other];
                    boolean flipped = y[1] == 1;
                    int[] state = new int[] { other, 0, 0 };
                    if(diff && !flipped) {
                        state[1] = y[2];
                        state[2] = 1 - y[1];
                        result.add(other);
                    } else {
                        state[1] = y[2];
                        state[2] = y[1];
                    }
                    queue.add(state);
                }
            }
        }

        out(result.size());
        for(Integer r: result) {
            out(r);
        }
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new XorTree();
    }
}
