#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

struct Edge {
  int from, to, cap, flow, index;
  Edge(int from, int to, int cap, int flow, int index) :
    from(from), to(to), cap(cap), flow(flow), index(index) {}
};

struct Dinic {
  int N;
  vector<vector<Edge> > G;
  vector<Edge *> dad;
  vector<int> Q;

  Dinic(int N) : N(N), G(N), dad(N), Q(N) {}

  void AddEdge(int from, int to, int cap) {
    G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
    if (from == to) G[from].back().index++;
    G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
  }

  long long BlockingFlow(int s, int t) {
    fill(dad.begin(), dad.end(), (Edge *) NULL);
    dad[s] = &G[0][0] - 1;

    int head = 0, tail = 0;
    Q[tail++] = s;
    while (head < tail) {
      int x = Q[head++];
      for (int i = 0; i < G[x].size(); i++) {
    Edge &e = G[x][i];
    if (!dad[e.to] && e.cap - e.flow > 0) {
      dad[e.to] = &G[x][i];
      Q[tail++] = e.to;
    }
      }
    }
    if (!dad[t]) return 0;

    long long totflow = 0;
    for (int i = 0; i < G[t].size(); i++) {
      Edge *start = &G[G[t][i].to][G[t][i].index];
      int amt = INF;
      for (Edge *e = start; amt && e != dad[s]; e = dad[e->from]) {
    if (!e) { amt = 0; break; }
    amt = min(amt, e->cap - e->flow);
      }
      if (amt == 0) continue;
      for (Edge *e = start; amt && e != dad[s]; e = dad[e->from]) {
    e->flow += amt;
    G[e->to][e->index].flow -= amt;
      }
      totflow += amt;
    }
    return totflow;
  }

  long long GetMaxFlow(int s, int t) {
    long long totflow = 0;
    while (long long flow = BlockingFlow(s, t))
      totflow += flow;
    return totflow;
  }
};

int res[105][105];

int main()
{
  ios_base::sync_with_stdio(0);
  int n, m, x, y, s = 0;
  cin >> n >> m;
  Dinic solve(2 * n + 5);
  for(int i=0;i<n;i++)
  {
    cin >> x;
    solve.AddEdge(0, i + 1, x);
  }
  for(int i=0;i<n;i++)
  {
    cin >> x;
    s+=x;
    solve.AddEdge(i + n + 1, 2 * n + 2, x);
    solve.AddEdge(i + 1, i + n + 1, 1000000);
  }
  for(int i=0;i<m;i++)
  {
    cin >> x >> y;
    solve.AddEdge(x, y + n, 1000000);
    solve.AddEdge(y, x + n, 1000000);
  }
  if(solve.GetMaxFlow(0, 2 * n + 2) != s)
  {
    cout << "NO";
  }
  else
  {
    cout << "YES\n";
    for(int i=1;i<=n;i++)
    {
      for(int j=0;j<solve.G[i].size();j++)
      {
        Edge e = solve.G[i][j];
        res[i - 1][e.to - n - 1] = e.flow;
      }
    }
    for(int i=0;i<n;i++)
    {
      for(int j=0;j<n;j++)
        cout << res[i][j] << " ";
      cout << "\n";
    }
  }
  return 0;
}
