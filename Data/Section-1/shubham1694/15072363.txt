#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define ll long long
#define f first
#define s second

typedef pair<int, int> pii;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 300010;

struct line{
    int x1, x2, y1, y2;
};

struct event{
    int x, y, y1, y2, type;
    bool operator<(const event &e) const{
        if(x==e.x)
            return type < e.type;
        return x<e.x;
    }
};

/*
    type 0: horizontal, start
    type 1: vertical
    type 2: horizontal, end
*/

map<int, vector<pii> > xs, ys;
vector<pii> temp;
map<int, int> compress;
line arr[maxn];
event e[maxn];
int ft[maxn], cnt[maxn];

void update(int x, int val)
{
    while(x<maxn){
        ft[x]+=val;
        x+=(x&(-x));
    }
}

int read(int x)
{
    int ret = 0;
    while(x>0){
        ret+=ft[x];
        x-=(x&(-x));
    }
    return ret;
}

int main()
{
    //freopen("i.txt", "r", stdin);
    //freopen("o.txt", "w", stdout);
    int n, m, i, j, k;
    ll intersections=0, total_points=0, ans;
    m = 0;
    scanf("%d", &n);
    for(i=0; i<n; i++){
        scanf("%d%d%d%d", &arr[i].x1, &arr[i].y1, &arr[i].x2, &arr[i].y2);
        compress[arr[i].x1] = 1;
        compress[arr[i].x2] = 1;
        compress[arr[i].y1] = 1;
        compress[arr[i].y2] = 1;
        if(arr[i].x1==arr[i].x2)
            xs[arr[i].x1].pb(mp(min(arr[i].y1, arr[i].y2), max(arr[i].y1, arr[i].y2)));
        
        else
            ys[arr[i].y1].pb(mp(min(arr[i].x1, arr[i].x2), max(arr[i].x1, arr[i].x2)));
    }
    for(auto it=xs.begin(); it!=xs.end(); ++it){
        sort(all(it->s));
        temp.clear();
        temp.pb((it->s)[0]);
        for(i=1; i<(it->s).size(); i++){
            if((it->s)[i].f <= temp[temp.size()-1].s)
                temp[temp.size()-1].s = max(temp[temp.size()-1].s, (it->s)[i].s);
            else
                temp.pb((it->s)[i]);
        }
        it->s = temp;
    }
    for(auto it=ys.begin(); it!=ys.end(); ++it){
        sort(all(it->s));
        temp.clear();
        temp.pb((it->s)[0]);
        for(i=1; i<(it->s).size(); i++){
            if((it->s)[i].f <= temp[temp.size()-1].s)
                temp[temp.size()-1].s = max(temp[temp.size()-1].s, (it->s)[i].s);
            else
                temp.pb((it->s)[i]);
        }
        it->s = temp;
    }
    /*for(auto it=xs.begin(); it!=xs.end(); ++it){
        cout << it->f << "\n";
        for(i=0; i<(it->s).size(); i++)
            cout << it->s[i].f << " " << it->s[i].s << "\n";
    }
    for(auto it=ys.begin(); it!=ys.end(); ++it){
        cout << it->f << "\n";
        for(i=0; i<(it->s).size(); i++)
            cout << it->s[i].f << " " << it->s[i].s << "\n";
    }
    cout << xs.size() << "\n";*/
    for(auto it=xs.begin(); it!=xs.end(); ++it){
        for(i=0; i<(it->s).size(); i++){
            e[m++] = (event){it->f, -1, it->s[i].f, it->s[i].s, 1};
            total_points+=1ll*(it->s[i].s - it->s[i].f + 1);
        }
    }
    for(auto it=ys.begin(); it!=ys.end(); ++it){
        for(i=0; i<(it->s).size(); i++){
            e[m++] = (event){it->s[i].f, it->f, -1, -1, 0};
            e[m++] = (event){it->s[i].s, it->f, -1, -1, 2};
            total_points+=1ll*(it->s[i].s - it->s[i].f + 1);
        }
    }
    //cout << total_points << "\n";
    j = 1;
    for(auto it=compress.begin(); it!=compress.end(); ++it)
        it->second = j++;
    sort(e, e+m);
    for(i=0; i<m; i++){
        //cout << e[i].type << " " << e[i].x << " " << e[i].y << " " << e[i].y1 << " " << e[i].y2 << "\n";
        if(e[i].type==0){
            j = compress[e[i].y];
            cnt[j]++;
            k = read(j)-read(j-1);
            if(k==0)
                update(j, 1);
        }
        else if(e[i].type==2){
            j = compress[e[i].y];
            cnt[j]--;
            if(!cnt[j])
                update(j, -1);
        }
        else{
            j = compress[e[i].y1];
            k = compress[e[i].y2];
            intersections+=1ll*(read(k)-read(j-1));
        }
    }
    //cout << intersections << "\n";
    ans = total_points - intersections;
    printf("%lld\n", ans);
    return 0;
}
