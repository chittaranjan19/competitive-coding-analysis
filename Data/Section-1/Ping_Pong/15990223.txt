#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e8;
const int P = 239;
const int MAX_N = 500;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int n, m;
char graph[MAX_N][MAX_N];
bool used[MAX_N][MAX_N];

vector<pair<char, pair<int, int> > > ans;

void dfs(int x, int y, int lx, int ly)
{
    used[x][y] = true;
    ans.push_back(make_pair('B', make_pair(x + 1, y + 1)));
    if (x > 0 && graph[x - 1][y] == '.' && !used[x - 1][y])
        dfs(x - 1, y, x, y);
    if (y > 0 && graph[x][y - 1] == '.' && !used[x][y - 1])
        dfs(x, y - 1, x, y);
    if (x < n - 1 && graph[x + 1][y] == '.' && !used[x + 1][y])
        dfs(x + 1, y, x, y);
    if (y < m - 1 && graph[x][y + 1] == '.' && !used[x][y + 1])
        dfs(x, y + 1, x, y);
    if (lx != -1 && ly != -1)
    {
        ans.push_back(make_pair('D', make_pair(x + 1, y + 1)));
        ans.push_back(make_pair('R', make_pair(x + 1, y + 1)));
    }
}

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            scanf(" %c", &graph[i][j]);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            used[i][j] = false;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (graph[i][j] == '.' && !used[i][j])
                dfs(i, j, -1, -1);
    printf("%d\n", ans.size());
    for (int i = 0; i < ans.size(); i++)
        printf("%c %d %d\n", ans[i].first, ans[i].second.first, ans[i].second.second);
    return 0;
}
