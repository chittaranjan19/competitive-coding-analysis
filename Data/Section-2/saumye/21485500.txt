#include <bits/stdc++.h>
#define maxn 200005

using namespace std;

int c[maxn], comp_color[maxn];
vector<int> adj[maxn];
bool vis[maxn];

int dfs(int v, int &max_col, vector<int> &pos)
{
	vis[v] = 1;
	comp_color[c[v]] ++;
	pos.push_back(c[v]);
	max_col = max(max_col, comp_color[c[v]]);
	int res = 1;

	for ( int i = 0 ; i < adj[v].size() ; i ++ )
	{
		if ( !vis[adj[v][i]] )
		{
			res += dfs(adj[v][i], max_col, pos);
		}
	}

	return res;
}

int main()
{
	int n, m, k, i;
	scanf("%d%d%d", &n, &m, &k);

	for ( i = 1 ; i <= n ; i ++ )
	{
		scanf("%d", &c[i]);
	}

	for ( i = 1 ; i <= m ; i ++ )
	{
		int l, r;
		scanf("%d%d", &l, &r);
		adj[l].push_back(r);
		adj[r].push_back(l);
	}

	int ans = 0;
	for ( i = 1 ; i <= n ; i ++ )
	{
		//set comp_color[] to 0
		//call dfs if ith node is not visited
		if ( !vis[i] )
		{
			//memset(comp_color, 0, sizeof comp_color);
			int max_col = 0;
			vector<int> pos;
			int size = dfs(i, max_col, pos);
			ans += size - max_col;

			//clear comp_color at pos[]
			for ( int j = 0 ; j < pos.size() ; j ++ )
			{
				comp_color[pos[j]] = 0;
			}
		}
	}

	printf("%d\n", ans);

	return 0;
}