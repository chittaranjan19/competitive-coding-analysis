#include <stdio.h>
#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int P = 239;
const int MAX_N = 100000;
const int ABC = 26;
const ld pi = 3.1415926535897932384626;
const ld eps = 1e-6;

vector<vector<int> > g, gr;
vector<int> order;
vector<bool> used;
vector<int> comp;

void dfs1(int u)
{
    used[u] = true;
    for (int v : g[u])
        if (!used[v])
            dfs1(v);
    order.push_back(u);
}

void dfs2(int u)
{
    used[u] = true;
    comp.push_back(u);
    for (int v : gr[u])
        if (!used[v])
            dfs2(v);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    g.resize(n);
    gr.resize(n);
    vector<int> cost(n);
    for (int i = 0; i < n; i++)
        cin >> cost[i];
    int m;
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        int a, b;
        cin >> a >> b;
        g[a - 1].push_back(b - 1);
        gr[b - 1].push_back(a - 1);
    }
    used.assign(n, false);
    for (int i = 0; i < n; i++)
        if (!used[i])
            dfs1(i);
    used.assign(n, false);
    int ans = 0, cnt = 1;
    for (int i = n - 1; i >= 0; i--)
        if (!used[order[i]])
        {
            comp.clear();
            dfs2(order[i]);
            int a1 = inf, a2 = 0;
            for (int u : comp)
                if (cost[u] < a1)
                {
                    a1 = cost[u];
                    a2 = 1;
                }
                else if (cost[u] == a1)
                    a2++;
            ans += a1;
            cnt = (ll)cnt * a2 % MOD;
        }
    cout << ans << " " << cnt << endl;
    return 0;
}
