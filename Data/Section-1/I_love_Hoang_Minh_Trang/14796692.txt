#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
int n;
int a[10];

int gt[101];
int mul(int x, int y)
{
    return (1LL * x * y) % INF;
}

int power(int a, int x)
{
    int ans = 1;
    while (x)
    {
        if (x & 1) ans = mul(ans, a);
        a = mul(a, a);
        x >>= 1;
    }
    return ans;
}

int C(int n, int k)
{
    return (mul(mul(gt[n], power(gt[k], INF - 2)), power(gt[n - k], INF - 2)));
}

void add(int &a, int b)
{
    a += b;
    if (a >= INF) a-= INF;
}
int f[101][10];
int sa[10];
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("213B.inp", "r", stdin);
    freopen("213B.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n;
    gt[0] = 1;
    FORE(i, 1, 100) gt[i] = mul(gt[i - 1], i);
    FOR(i, 0, 10) cin >> a[i];
    sa[0] = a[0];
    FORE(i, 1, 9) sa[i] = sa[i - 1] + a[i];
    FORE(i, 0, 9) f[0][i] = 1;
    FORE(len, 1, n){
        f[len][9] = (a[9] <= len);
        FORD(j, 8, 1){
            int tmp = 0;
            FORE(i, a[j], len - (sa[9] - sa[j])) add(tmp, mul(f[len - i][j + 1], C(len, i)));
            f[len][j] = tmp;
        }
        int tmp = 0;
        FORE(i, a[0], len) add(tmp, mul(f[len - i][1], C(len - 1, i)));
        f[len][0] = tmp;
    }

    int ans = 0;
    FORE(i, 1, n) add(ans, f[i][0]);
    cout << ans;
    return 0;
}

