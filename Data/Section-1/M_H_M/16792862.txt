//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 1e5 + 100;

int n, m;
bool mark[N];

int k;
int isl[N];
int isr[N];
int sz[N];
int l[N];
int r[N];

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	memset(isl, -1, sizeof isl);
	memset(isr, -1, sizeof isr);
	cin >> n >> m;
	for(int i = 0; i < m; ++i){
		int u, v;
		cin >> u >> v;
		u --; v --;
		if(!mark[u] && !mark[v]){
			mark[u] = mark[v] = true;
			isl[u] = k;
			isr[v] = k;
			l[k] = u;
			r[k] = v;
			sz[k] = 2;
			if(sz[k] == n){
				cout << i + 1 << "\n";
				return 0;
			}
			k ++;
		}
		else if(mark[u] && mark[v]){
			if(isr[u] != -1 && isl[v] != -1){
				sz[isr[u]] += sz[isl[v]];
				if(sz[isr[u]] == n){
					cout << i + 1 << "\n";
					return 0;
				}
				r[isr[u]] = r[isl[v]];
				isr[r[isl[v]]] = isr[u];
				isr[u] = -1;
				isl[v] = -1;
			}
		}
		else if(mark[u] && !mark[v]){
			if(isr[u] != -1){
				sz[isr[u]] ++;
				if(sz[isr[u]] == n){
					cout << i + 1 << "\n";
					return 0;
				}
				r[isr[u]] = v;
				isr[v] = isr[u];
				isr[u] = -1;
			}
		}
		else{
			if(isl[v] != -1){
				sz[isl[v]] ++;
				if(sz[isl[v]] == n){
					cout << i + 1 << "\n";
					return 0;
				}
				l[isl[v]] = u;
				isl[u] = isl[v];
				isl[v] = -1;
			}
		}
	}
	cout << "-1\n";
	return 0;
}
