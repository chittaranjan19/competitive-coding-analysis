#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<iomanip>
using namespace std;
#define ll long long
#define ld long double
#define vi vector<int>
#define pb push_back
#define pii pair<int,int>
#define mp make_pair
#define st first
#define nd second
#define mini(a,b) a=min(a,(b))
#define maxi(a,b) a=max(a,(b))
#define RE(i,n) for(int i=0,_n=(n);i<_n;++i)
#define RI(i,n) for(int i=1,_n=(n);i<=_n;++i)
const int inf=1e9+5, nax=1e6+5;

char sl[55][55];
int pomik[55][55];
int n, dl;
vi odw[5000];
bool rozroz[5000];
int licz_rozro = 0;
ld pot[55];
bool vis[1 << 20];
ld sil[55];
ld nowe[1 << 20];
ld nt[55][55];



#define vvi vector<vector<int> >
vvi ja;

void F(int m) {
	if(vis[m]) return;
	vis[m] = true;
	for(auto a : ja) if(a.size() == 1) nowe[m]++;
	RE(bit, dl) if(!(  m & (1 << bit)   )) if(!vis[m | ( 1 << bit)]) {
		vector<pair<int , vi > > klawa;
		int zlicz = 0;
		RE(i, ja.size()) if((int)ja[i].size() > 1) {
			for(auto a : ja[i])
				odw[ pomik[a][bit] ].pb(a);
			vvi tel;
			for(auto a : ja[i]){
				int cy = pomik[a][bit];
				if(!odw[cy].empty()) {
					tel.pb(odw[cy]);
					odw[cy].clear();
				}
			}
			klawa.pb(mp(i, ja[i]));
			ja[i] = tel[0];
			RI(j, (int) tel.size() - 1) ja.pb(tel[j]);
			zlicz += (int) tel.size() - 1;
		}
		F(m | (1 << bit));
		RE(_, zlicz) ja.pop_back();
		for(auto a : klawa) ja[a.st] = a.nd;
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	
	pot[0] = 1;
	RI(i, 51) pot[i] = pot[i - 1] * 2.0L;
	
	sil[0] = 1;
	RI(i, 51) sil[i] = sil[i-1] * i;
	
	RE(i, 52) RE(j, i + 1) nt[i][j] = sil[i] / sil[j] / sil[i - j];
	
	cin >> n;
	RE(i, n) cin >> sl[i];
	dl = strlen(sl[0]);
	RE(i, n) RE(j, dl) pomik[i][j] = (int) sl[i][j];
	vi cyk;
	RE(i, n) cyk.pb(i);
	ja.pb(cyk);
	F(0);
	
	ld res = 0;
	
	RE(m, (1 << dl)) {
		int zapalone = __builtin_popcount(m);
		ld licz = nowe[m];
		RE(bit, dl) if((m & (1 << bit))) licz -= nowe[m - (1 << bit)] / (ld) zapalone;
		res += licz * zapalone / ((ld)n) / nt[dl][zapalone];
	}
	cout << setprecision(30) << res;
	return 0;
}
