#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <fstream>
#include <numeric>
#include <stdexcept>
#include <cassert>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<pair<pair<int, int> , pair<int, int> > > edges;

struct disjointset
{
  vector<int> rank, parent, sz;
    int subtrees;

    disjointset(int n)
    {
        subtrees = n;
        for(int i=0;i<n;i++)
            rank.pb(1),parent.pb(i), sz.pb(1);
    }

    int find_set(int x)
    {
        if(x == parent[x])
            return x;
        return parent[x] = find_set(parent[x]);
    }

    void link(int x,int y)
    {
        if(rank[x] > rank[y])
            swap(x, y);
        parent[x] = y;
        sz[y] += sz[x];
        if(rank[x] == rank[y])
            rank[y]++;
    }

    bool union_sets(int x,int y)
    {
        x = find_set(x),y = find_set(y);
        if(x != y)
        {
            link(x,y);
            subtrees--;
        }
        return x != y;
    }

    bool same_set(int x,int y)
    {
    return find_set(x) == find_set(y);
    }
}temp(100005);

LL res[100005];
bool v[100005];
vector<pair<int, int> > g[100005];
int tot = 0;

int dfs(int node, int parent)
{
  v[node] = true;
  int sol = temp.sz[node];
  for(int i=0;i<g[node].size();i++)
  {
    int nxt = g[node][i].f;
    int ind = g[node][i].s;
    if(nxt == parent) continue;
    int cnt = dfs(nxt, node);
    res[ind] = cnt * 2LL * (tot - cnt);
    sol+=cnt;
  }
  return sol;
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("suffix.in", "r", stdin);
  //freopen("suffix.out", "w", stdout);
  int n;
  cin >> n;
  int x, y, z, ind;
  for(int i=0;i<n-1;i++)
  {
    cin >> x >> y >> z;
    edges.pb(mp(mp(z, i), mp(x, y)));
  }
  sort(edges.begin(), edges.end());
  for(int i=0;i<n - 1;i++)
  {
    z = edges[i].f.f;
    int k = 0;
    while(i + k < n - 1 && z == edges[i + k].f.f)
      k++;
    for(int j=i;j<i+k;j++)
    {
      x = edges[j].s.f;
      y = edges[j].s.s;
      x = temp.find_set(x);
      y = temp.find_set(y);
      g[x].clear();
      g[y].clear();
    }
    for(int j=i;j<i+k;j++)
    {
      x = edges[j].s.f;
      y = edges[j].s.s;
      ind = edges[j].f.s;
      x = temp.find_set(x);
      y = temp.find_set(y);
      v[x] = v[y] = false;
      g[x].pb(mp(y, ind));
      g[y].pb(mp(x, ind));
    }
    for(int j=i;j<i+k;j++)
    {
      x = edges[j].s.f;
      x = temp.find_set(x);
      if(!v[x])
      {
        tot = dfs(x, -1);
        dfs(x, -1);
      }
    }
    for(int j=i;j<i+k;j++)
    {
      x = edges[j].s.f;
      y = edges[j].s.s;
      temp.union_sets(x, y);
    }
    i+=k-1;
  }
  LL maxi = -1;
  vector<int> v;
  for(int i=0;i<n - 1;i++)
  {
    if(maxi < res[i])
    {
      maxi = res[i];
      v.clear();
      v.pb(i);
    }
    else if(maxi == res[i])
      v.pb(i);
  }
  cout << maxi << " " << v.size() << "\n";
  for(int i=0;i<v.size();i++)
    cout << v[i] + 1 << " ";
  return 0;
}
