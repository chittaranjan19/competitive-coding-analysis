#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Castle
{
	Castle(tint height, tint index)
	{
		altura = height;
		indice = index;
	}
	tint altura,indice;
};

bool operator < (Castle c1, Castle c2)
{
	return make_tuple(c1.altura, c1.indice) < make_tuple(c2.altura,c2.indice);
}

int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<Castle> c(n,Castle(0,0));
	forn(i,n)
	{
		tint h;
		cin >> h;
		c[i] = Castle(h,i);
	}
	sort(c.begin(),c.end());
	tint mini = 0;
	tint ans = 0;
	set<tint> tengo;
	forn(i,n)
	{
		tengo.insert(c[i].indice);
		if (tengo.size() == i-mini+1 && mini == *tengo.begin() && i == *--tengo.end())
		{
			ans++;
			mini = i+1;
			tengo.clear();
		}
	}
	cout << ans << endl;
	
	
	return 0;
}



