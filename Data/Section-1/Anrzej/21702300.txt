#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 5e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

ld f(ld x){
	return (x + 1) / (x * 2 + x*x);
}

int n, m;
int a[111];
string s[111];

bool check(string str, string pattern){
	bool ok = 1;
	if (str.length() != pattern.length()) return 0;
	for (int i = 0; i < pattern.length(); i++){
		if (pattern[i] == '?') continue;
		ok &= pattern[i] == str[i];
	}
	return ok;
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++) cin >> s[i];
	for (int i = 0; i < m; i++) { cin >> a[i]; a[i] -= 1; };
	int len = -1;
	for (int i = 0; i < m; i++){
		if (len == -1)
			len = (s[a[i]].length());
		else{
			if (len != s[a[i]].length()){
				cout << "No";
				exit(0);
			}
		}
	}
	set<int> del;
	string pattern = "";
	for (int i = 0; i < len; i++){
		set<char> ss;
		for (int j = 0; j < m; j++){
			del.insert(a[j]);
			ss.insert(s[a[j]][i]);
		}
		if (ss.size() == 1)
			pattern += *ss.begin();
		else pattern += '?';
	}
	for (int i = 0; i < n; i++){
		if (del.count(i)) continue;
		if (check(s[i], pattern)) {
			cout << "No";
			exit(0);
		}
	}
	cout << "Yes" << endl << pattern;
	return 0;
}