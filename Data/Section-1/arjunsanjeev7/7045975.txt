// Ice Skating

#include <algorithm>
#include <bits/stdc++.h>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <memory.h>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

using namespace std;

int X[1001]={0},Y[1001]={0},X_cnt[1001]={0},Y_cnt[1001]={0},l;
set<pair<int,int> > S,S_copy;
set<pair<int,int> >::iterator it1;

void recurse(int x, int y)
{
	set<pair<int,int> >::iterator it;
	for(it=S.begin();it!=S.end();it++)
	{
		if(it->first==x || it->second==y)
		{
			if(S_copy.find(pair<int,int>(it->first,it->second))!=S_copy.end())
			{
				S_copy.erase(S_copy.find(pair<int,int>(it->first,it->second)));
				recurse(x,it->second);
				recurse(it->first,y);
			}
		}
	}
}

int main()
{
	int n,i,x,y;
	l=0;
	cin>>n;
	for(i=0;i<n;i++)
	{
		cin>>x>>y;
		S.insert(pair<int,int>(x,y));
	}
	S_copy=S;
	for(it1=S.begin();it1!=S.end();it1++)
	{
		x=it1->first;
		y=it1->second;
		if(S_copy.size()!=0 && S_copy.find(pair<int,int>(x,y))!=S_copy.end())
		{
			l++;
			recurse(x,y);
		}	
	}
	cout<<l-1<<endl;
	return 0;
}
