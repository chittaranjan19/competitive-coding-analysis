#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int n, b;

int DP[5005][5005][2];
bool v[5005][5005][2];

int solve(int ind, int k, bool l)
{
  if(ind == b) return 0;
  if(k == 0) return 1;
  int &temp = DP[ind][k][l];
  if(v[ind][k][l]) return temp;
  v[ind][k][l] = true;
  if(l)
  {
    if(ind > b) temp = solve(ind - 1, k, 1);
    else temp = solve(ind + 1, k, 1);
    temp += solve(ind, k - 1, 0);
    if(temp >= mod)
      temp -= mod;
    return temp;
  }
  if(ind > b) temp = solve(min(2 * ind - b - 1, n), k, 1);
  else temp = solve(max(2 * ind - b + 1, 1), k, 1);
  temp -= solve(ind, k - 1, 0);
  if(temp < 0) temp += mod;
  return temp;
}

int main()
{
  int a, k;
  scanf("%d %d %d %d", &n, &a, &b, &k);
  printf("%d", solve(a, k, 0));
  return 0;
}