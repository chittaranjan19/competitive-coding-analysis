//~  Inshaallah
/*
ID: omarmuh1
PROG: test
LANG: C++
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define pp pop_back
#define pii pair<int ,int>
#define pll pair<ll , ll>
#define mid(x , y)	(x+y)/2
#define sz(x) int(x.size())
#define db		cout << "****" << endl;
#define all(x) 	x.begin() , x.end()
#define lgn 	19
#define N 		200007
#define INF 	1000000007
#define LLINF 	1000000000000000009
#define tr(i, c) for(__typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
#define Help_me  ios_base::sync_with_stdio(false);

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> omar;

template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}

//~ freopen("test.out" , "r" , stdin);
//~ freopen("test.out" , "w",  stdout);

int a , b , T[N<<2] , lz[N<<2] , can[N] , ans[N] , c , n , m;
vector <pii> q[N];
int p[N] , d[N];
stack <pii> st;

void shift(int l , int r , int v)
{
	if(lz[v])
	{
		lz[v<<1] = lz[v];
		lz[v<<1|1] = lz[v];
		
		T[v<<1] = 0;
		T[v<<1|1] = 0;
		
		lz[v] = 0;
	}
}

void upd(int x , int y , int z , int l , int r , int v)
{
	if(y < l || r < x)
		return;
	
	if(x <= l && r <= y)
	{
		T[v] = z;
		lz[v] = (z ? 1 : 0);
		return;
	}
	
	shift(l , r , v);
	
	upd(x , y , z , l , mid(l , r) , v<<1);
	upd(x , y , z , mid(l , r)+1 , r , v<<1|1);
	
	T[v] = T[v<<1] + T[v<<1|1];
}

int bul(int x , int y , int l , int r , int v)
{
	if(y < l || r < x)
		return 0;
	
	if(x <= l && r <= y)
		return T[v];
	
	return bul(x , y , l , mid(l , r) , v<<1) + bul(x , y , mid(l , r)+1 , r , v<<1|1);
}

int main()
{	
	scanf("%d" , &n);
	
	for(int i = 1 ; i <= n ; i++)	scanf("%d%d" , p + i , d + i);
	
	scanf("%d" , &m);
	
	for(int i = 1 ; i <= m ; ++i)
	{
		scanf("%d%d" , &a , &b);
		
		q[a].pb({b , i});
	}
	
	for(int i = n ; i >= 1 ; --i)
	{
		int tr = p[i] + d[i];
		
		while(!st.empty() && st.top().ff <= tr)
			umax(tr , st.top().ss) , st.pop();
		
		st.push({p[i] , tr});
		can[i] = tr;
	}
	
	for(int i = n ; i >= 1 ; --i)
	{
		int t = lower_bound(p+1 , p+n+1 , can[i]+1) - p;
		
		if(t < n+1)
		{
			upd(i , t-(p[t] > can[i]) , 0 , 1 , n , 1);
			upd(t , t , p[t] - can[i] , 1 , n , 1);
		}
		
		for(auto j : q[i])
			ans[j.ss] = bul(i , j.ff , 1 , n , 1);
	}
	
	for(int i = 1 ; i <= m ; ++i)
		printf("%d\n" , ans[i]);
	
	return 0;
}
