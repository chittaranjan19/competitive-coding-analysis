#include <bits/stdc++.h>

using namespace std;

const int maxn = 1e5 + 5;

struct edge
{
    int to, x, next;

    edge(int to = 0, int x = 0, int next = 0) : to(to), x(x), next(next) {}
} G[maxn << 1], E[maxn];
int head[maxn], tot, a[maxn], cnt;
char c[5];
bool used[maxn];

void init()
{
    memset(head, -1, sizeof(head));
    tot = cnt = 0;
}

void addedge(int u, int v, int x)
{
    G[tot] = edge(v, x, head[u]);
    head[u] = tot++;
    G[tot] = edge(u, x, head[v]);
    head[v] = tot++;
}

void dfs(int u, int col, int s)
{
    used[u] = true;
    if(s)
    {
        a[cnt++] = u;
        for(int i = head[u]; ~i; i = G[i].next)
        {
            G[i].x ^= 1;
            G[i ^ 1].x ^= 1;
        }
    }
    for(int i = head[u]; ~i; i = G[i].next)
    {
        if(used[G[i].to]) continue;
        dfs(G[i].to, col, col != G[i].x);
    }
}

bool check(int col)
{
    for(int i = 0; i < tot; i += 2) if(G[i].x != col) return false;
    return true;
}

int solve(int n, int m)
{
    int ret = -1, tmp = maxn;
    for(int i = 0; i < 2; ++i)
    {
        for(int j = 0; j < 2; ++j)
        {
            memset(used, 0, sizeof(used));
            init();
            for(int k = 0; k < m; ++k) addedge(E[k].to, E[k].next, E[k].x);
            for(int k = 1; k <= n; ++k) if(!used[k]) dfs(k, i, j);
            if(check(i) && cnt < tmp)
            {
                tmp = cnt;
                ret = i << 1 | j;
            }
        }
    }
    return ret;
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 0; i < m; ++i)
    {
        scanf("%d%d%s", &E[i].to, &E[i].next, c);
        E[i].x = *c == 'B';
    }
    int ans = solve(n, m);
    if(~ans)
    {
        memset(used, 0, sizeof(used));
        init();
        for(int i = 0; i < m; ++i) addedge(E[i].to, E[i].next, E[i].x);
        for(int i = 1; i <= n; ++i) if(!used[i]) dfs(i, ans >> 1, ans & 1);
        printf("%d\n", cnt);
        for(int i = 0; i < cnt; ++i) printf("%d%c", a[i], " \n"[i == cnt - 1]);
    }
    else puts("-1");
    return 0;
}
