#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define ls rt << 1
#define rs rt << 1 | 1
#define lson ls, l, m
#define rson rs, m + 1, r

using namespace std;

typedef long long ll;

const int maxn = 1e5 + 5;
const int mod = 1e9 + 7;

struct mat
{
    int r, c;
    int a[2][2];

    mat(int r = 0, int c = 0) : r(r), c(c)
    {
        memset(a, 0, sizeof(a));
    }
} node[maxn << 2], lazy[maxn << 2], ma;

mat add_mod(const mat &a, const mat &b)
{
    mat c(a.r, a.c);
    for(int i = 0; i < a.r; ++i) for(int j = 0; j < a.c; ++j) c.a[i][j] = (a.a[i][j] + b.a[i][j]) % mod;
    return c;
}

mat mul_mod(const mat &a, const mat &b)
{
    mat c(a.r, b.c);
    for(int i = 0; i < a.r; ++i)
    {
        for(int j = 0; j < b.c; ++j)
        {
            for(int k = 0; k < a.c; ++k) c.a[i][j] = (c.a[i][j] + (ll)a.a[i][k] * b.a[k][j]) % mod;
        }
    }
    return c;
}

mat pow_mod(mat a, int n)
{
    mat ret(a.r, a.c);
    for(int i = 0; i < ret.r; ++i) ret.a[i][i] = 1;
    while(n)
    {
        if(n & 1) ret = mul_mod(ret, a);
        a = mul_mod(a, a);
        n >>= 1;
    }
    return ret;
}

void modify(int rt, const mat &a)
{
    lazy[rt] = mul_mod(lazy[rt], a);
    node[rt] = mul_mod(node[rt], a);
}

void pushup(int rt)
{
    node[rt] = add_mod(node[ls], node[rs]);
}

void pushdown(int rt)
{
    modify(ls, lazy[rt]);
    modify(rs, lazy[rt]);
    lazy[rt].a[0][0] = lazy[rt].a[1][1] = 1;
    lazy[rt].a[0][1] = lazy[rt].a[1][0] = 0;
}

void build(int rt, int l, int r)
{
    lazy[rt].r = lazy[rt].c = 2;
    lazy[rt].a[0][0] = lazy[rt].a[1][1] = 1;
    lazy[rt].a[0][1] = lazy[rt].a[1][0] = 0;
    if(l == r)
    {
        int x;
        scanf("%d", &x);
        node[rt] = ma;
        node[rt] = pow_mod(node[rt], x - 1);
        return;
    }
    int m = (l + r) >> 1;
    build(lson);
    build(rson);
    pushup(rt);
}

void update(int rt, int l, int r, int x, int y, const mat &c)
{
    if(x <= l && r <= y)
    {
        modify(rt, c);
        return;
    }
    pushdown(rt);
    int m = (l + r) >> 1;
    if(x <= m) update(lson, x, y, c);
    if(m < y) update(rson, x, y, c);
    pushup(rt);
}

int query(int rt, int l, int r, int x, int y)
{
    if(x <= l && r <= y) return node[rt].a[0][0];
    pushdown(rt);
    int m = (l + r) >> 1, ret = 0;
    if(x <= m) ret = (ret + query(lson, x, y)) % mod;
    if(m < y) ret = (ret + query(rson, x, y)) % mod;
    return ret;
}

int main()
{
    int n, q;
    ma = mat(2, 2);
    ma.a[0][0] = ma.a[0][1] = ma.a[1][0] = 1;
    scanf("%d%d", &n, &q);
    build(1, 1, n);
    while(q--)
    {
        int op, l, r, x;
        scanf("%d%d%d", &op, &l, &r);
        if(op == 1)
        {
            scanf("%d", &x);
            update(1, 1, n, l, r, pow_mod(ma, x));
        }
        else printf("%d\n", query(1, 1, n, l, r));
    }
    return 0;
}
