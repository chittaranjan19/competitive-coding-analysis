# include <iostream>
# include <cstdlib>
# include <cstdio>
# include <cmath>

using namespace std;

const int N = 100009;
const double INF = 1e50, EPS = 1e-6;

struct point
{
    double x, y;
    point ()
    {
        x = y = 0.0;
    }
    point (double x, double y)
    {
        x = x;
        y = y;
    }
    void unit ()
    {
        double d = dist ();
        x /= d;
        y /= d;
    }
    double dist ()
    {
        return sqrt (x * x + y * y);
    }
    point operator += (point a)
    {
        x += a.x;
        y += a.y;
    }
    point operator *= (double a)
    {
        x *= a;
        y *= a;
    }
    void operator -= (point a)
    {
        x -= a.x;
        y -= a.y;
    }
};

point p, a[N], u, p1, p2;
double d, mind = INF, maxd, L, R, m1, m2, d1, d2;
int n;

int main ()
{
    cin >> n >> p.x >> p.y;
    cout.precision (16);

    for (int i = 0; i <= n; ++i)
    {
        if (i == n)
            a[i] = a[0];
        else
            cin >> a[i].x >> a[i].y;
        a[i] -= p;
        d = a[i].dist ();
        maxd = max (maxd, d);
        mind = min (mind, d);
        if (i)
        {
            u = a[i - 1];
            u -= a[i];
            R = u.dist ();
            u.unit ();
            L = 0;
            while (R - L > EPS)
            {
                m1 = L + L + R; m1 /= 3.0;
                m2 = R + R + L; m2 /= 3.0;
                p1 = u; p1 *= m1; p1 += a[i];
                p2 = u; p2 *= m2; p2 += a[i];
                d1 = p1.dist ();
                d2 = p2.dist ();
                if (d1 > d2) L = m1;
                else R = m2;
            }
            p1 = u; p1 *= L; p1 += a[i];
            mind = min (mind, p1.dist ());
        }
    }

    cout << fixed << acos (-1.0) * (maxd * maxd - mind * mind) << "\n";

    return 0;
}
