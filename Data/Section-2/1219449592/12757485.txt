#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <vector>
#include <string.h>
#include <queue>
using namespace std;
const int N = 4005, INF = 20000;
int n, m, map[N][N], vis[N], deg[N];

void dfs(int t)
{
	vis[t] = 1;
	int z = 1;
	for(; z <= n; z++)
	{
		if (!vis[z] && map[t][z])
		{
			//cout << t << endl; 
		//	vis[t] = 1;
			dfs(z);
		}
	}
}

int main()
{
//	freopen("1.txt", "r", stdin);
	int i, j, k, u, v;
	scanf("%d%d", &n, &m);
	memset(map, 0, sizeof(map));
	memset(vis, 0, sizeof(vis));
	memset(deg, 0, sizeof(deg));
	for(i = 0; i < m; i++)
	{
		scanf("%d%d", &u, &v);
		map[u][v] = map[v][u] = 1;
		deg[u]++;
		deg[v]++;
	}
	dfs(1);
	for (i = 1; i <= n; i++)
	{
		if (!vis[i])
		{
			cout << "-1\n";
			return 0;
		}
	}
	int min = INF, t;
	for (i = 1; i <= n; i++)
	{
		if (deg[i] >= 2)
		{
			for(j = i+1; j <= n; j++)
			{
				if (map[i][j] && deg[j] >= 2)
				{
					for(k = j+1; k <= n; k++)
					{
						if (map[i][k] && map[j][k] && deg[k] >= 2)
						{
							t = deg[i] + deg[j] + deg[k] - 6;
							if (t < min)
							{
								min = t;
							}
						}
					}
				}
				
			}
		}
	}
	cout << min << endl;
	return 0;
}
