#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> tree[400005], rng[100005];
int lazy[400005], idx, n, ans[100005];
vector<int> g[100005], q[100005];

void build(int i,int L,int R)
{
  if(L == R)
  {
    tree[i] = mp(0, 1);
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  if(tree[i*2+1].f < tree[i*2+2].f)
    tree[i] = tree[i*2+1];
  else if(tree[i*2+1].f > tree[i*2+2].f)
    tree[i] = tree[i*2+2];
  else
  {
    tree[i] = tree[i*2+2];
    tree[i].s += tree[i*2+1].s;
  }
}

void update(int i,int L,int R,int x,int y,int val)
{
  if(lazy[i] != 0)
  {
    tree[i].f+=lazy[i];
    if(L != R)
    {
      lazy[i*2+1]+=lazy[i];
      lazy[i*2+2]+=lazy[i];
    }
    lazy[i] = 0;
  }
  if(L >= x && R <= y)
  {
    lazy[i]+=val;
    tree[i].f+=lazy[i];
    if(L != R)
    {
      lazy[i*2+1]+=lazy[i];
      lazy[i*2+2]+=lazy[i];
    }
    lazy[i] = 0;
    return;
  }
  if(L > y || R < x)
    return;
  update(i*2 + 1, L, (L + R) / 2, x, y, val);
  update(i*2 + 2, (L + R) / 2 + 1, R, x, y, val);
  if(tree[i*2+1].f < tree[i*2+2].f)
    tree[i] = tree[i*2+1];
  else if(tree[i*2+1].f > tree[i*2+2].f)
    tree[i] = tree[i*2+2];
  else
  {
    tree[i] = tree[i*2+2];
    tree[i].s += tree[i*2+1].s;
  }
}

pair<int, int> query(int i,int L,int R,int x,int y)
{
  if(lazy[i] != 0)
  {
    tree[i].f+=lazy[i];
    if(L != R)
    {
      lazy[i*2+1]+=lazy[i];
      lazy[i*2+2]+=lazy[i];
    }
    lazy[i] = 0;
  }
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return mp(INF, -1);
  pair<int, int> a = query(i*2 + 1, L, (L + R) / 2, x, y), b = query(i*2 + 2, (L + R) / 2 + 1, R, x, y);
  if(a.f < b.f) return a;
  if(a.f > b.f) return b;
  b.s += a.s;
  return b;
}

void dfs(int node, int parent = -1)
{
  rng[node].f = idx++;
  for(int x : g[node])
  {
    if(x == parent) continue;
    dfs(x, node);
  }
  rng[node].s = idx - 1;
}

void solve(int node, int parent = -1)
{
  for(int x : q[node])
    update(0, 0, n - 1, rng[x].f, rng[x].s, 1);
  if(!q[node].empty()) update(0, 0, n - 1, rng[node].f, rng[node].s, 1);
  ans[node] = n;
  pair<int, int> tmp = query(0, 0, n - 1, 0, n - 1);
  if(tmp.f == 0) ans[node] -= tmp.s;
  ans[node] -= (query(0, 0, n - 1, rng[node].f, rng[node].f).f != 0);
  for(int x : g[node])
  {
    if(x == parent) continue;
    solve(x, node);
  }
  for(int x : q[node])
    update(0, 0, n - 1, rng[x].f, rng[x].s, -1);
  if(!q[node].empty()) update(0, 0, n - 1, rng[node].f, rng[node].s, -1);
}

int main()
{
  int m, x, y;
  cin >> n >> m;
  for(int i=0;i<n-1;i++)
  {
    scanf("%d %d", &x, &y);
    g[x].pb(y);
    g[y].pb(x);
  }
  for(int i=0;i<m;i++)
  {
    scanf("%d %d", &x, &y);
    q[x].pb(y);
    q[y].pb(x);
  }
  build(0, 0, n - 1);
  dfs(1);
  solve(1);
  for(int i=1;i<=n;i++)
    printf("%d ", ans[i]);
  return 0;
}
