#include <cstdio>
#include <map>
#include <queue>
#include <algorithm>
using namespace std;
typedef pair<long long, int> pli;
int n,m,k,i,j,y,b[10010];
long long h,x,e,p[10010],w[100100];
vector<long long> a[10010];
priority_queue<pli,vector<pli>,greater<pli> > q;
priority_queue<pair<int, long long> > all;
map<long long, int> M;
int main() {
  scanf("%I64d%d%d%d",&h,&n,&m,&k);
  for (i=0; i<n; i++) {
    scanf("%I64d%d",&x,&y);
	w[i]=x-1;
	a[w[i]%k].push_back(w[i]);
	M[w[i]]=y;
  }
  for (i=0; i<k; i++) {
    sort(a[i].begin(),a[i].end());
	if (i==0) {
	  for (j=0; j<a[i].size(); j++) all.push(make_pair(M[a[i][j]],a[i][j]));
	  p[i]=0; b[i]=-1;
	} else {
	  b[i]=int(a[i].size())-1;
	  p[i]=2000000000000000000LL;
	}
  }
  while (m--) {
    scanf("%d",&y);
	if (y==1) {
	  scanf("%I64d",&x);
	  for (i=0; i<k; i++) q.push(make_pair(p[i],i));
	  while (!q.empty()) {
	    i=q.top().second;
		e=q.top().first;
		q.pop();
		if (e!=p[i]) continue;
		for (; b[i]>=0 && a[i][b[i]]>=p[i]; b[i]--) all.push(make_pair(M[a[i][b[i]]],a[i][b[i]]));
		j=(i+x)%k;
		if (p[i]+x<p[j]) {
		  p[j]=p[i]+x;
		  q.push(make_pair(p[j],j));
		}
	  }
	  continue;
	}
	if (y==3) {
	  if (all.empty()) {
	    puts("0");
		continue;
	  }
	  while (true) {
	    j=all.top().first;
	    x=all.top().second;
		all.pop();
		i=M[x];
		if (j==i) {
		  printf("%d\n",j);
		  break;
		}
		all.push(make_pair(i,x));
	  }
	  continue;
	}
	scanf("%I64d%d",&x,&y);
	M[w[x-1]]-=y;
  }
  return 0;
}
