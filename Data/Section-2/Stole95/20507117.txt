import java.io.*;
import java.util.*;

public class Main {
	public static void main(String[] args) {
		FastScanner2 sc = new FastScanner2(System.in);
		
		String str = sc.next();
		
		if(str.length()%2 == 1){
			System.out.println(-1);
			System.exit(0);
		}
		
		int[] arr = new int[4];
		
		for(char c : str.toCharArray()){
			if(c == 'L') arr[0] ++;
			else if(c == 'R') arr[1]++;
			else if(c == 'U') arr[2]++;
			else if(c == 'D') arr[3]++;
		}
		
//		int min = Integer.MAX_VALUE;
		
		int upDownDiff = Math.abs(arr[2] - arr[3]);
		int leftRightDiff = Math.abs(arr[0] - arr[1]);
		
		int min = Math.max(upDownDiff, leftRightDiff);
		
		int len = str.length();
		
		int tmp1 = Math.abs(arr[0] - arr[1]);
		int tmp2 = Math.abs(arr[2] - arr[3]);
		int zbir = 0;
		
		if(tmp1%2 == 1 && tmp2%2 == 1)
			zbir = 1;
		tmp1/=2;
		tmp2/=2;
		zbir+=tmp1;
		zbir+=tmp2;
		min = Math.min(min, zbir);
//		min = Math.min(min, Math.abs(arr[0] - arr[1])/2 + Math.abs(arr[2] - arr[3])/2 );
//		
		if(arr[0]>= len/2){
			int tmp = len - arr[0] - arr[1];
			if(tmp == 0){
				tmp += Math.abs(len/2 - arr[0]);
				min = Math.min(min, tmp);
			}
		}
		else if(arr[1]>= len/2){
			int tmp = len - arr[1] - arr[0];
			if(tmp == 0){
				tmp += Math.abs(len/2 - arr[1]);
				
				min = Math.min(min, tmp);
			}
			
		}
		else if(arr[2]>= len/2){
			int tmp = len - arr[2] - arr[3];
			if(tmp == 0){
				tmp += Math.abs(len/2 - arr[2]);
				min = Math.min(min, tmp);
			}
			
		}
		else if(arr[3]>= len/2){
			int tmp = len - arr[3] - arr[2];
			if(tmp == 0){
				tmp += Math.abs(len/2 - arr[3]);
				min = Math.min(min, tmp);
			}
		}
		
		
		
		System.out.println(min);
	}
}

class FastScanner2{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScanner2(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}