#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

struct Tree
{
	Tree(int xx, int aa)
	{
		x = xx;
		a = aa;
	}
	int x,a;
};

bool operator < (Tree t1, Tree t2)
{
	return t1.x < t2.x;
}

bool operator > (Tree t1, Tree t2)
{
	return t1.x > t2.x;
}

bool operator == (Tree t1, Tree t2)
{
	return t1.x == t2.x;
}
bool wayToSort(Tree t1, Tree t2)
{
	 return t1.x > t2.x; 
}

int main()
{
	int n;
	cin >> n;
	vector<Tree> left;
	vector<Tree> right;
	forn(i,n)
	{
		int x,a;
		cin >> x >> a;
		Tree arbol = Tree(x,a);
		if (x < 0)
			left.push_back(arbol);
		else
			right.push_back(arbol);
	}
	sort(left.begin(),left.end(),wayToSort);
	sort(right.begin(),right.end());
	int izq = left.size();
	int der = right.size();
	int total = 0;
	if (izq <= der)
	{
		forn(i,izq)
		{
			total += left[i].a;
			total += right[i].a;
		}
		if (izq < der)
			total += right[izq].a;
		
	}
	else
	{
		forn(i,der)
		{
			total += left[i].a;
			total += right[i].a;
		}
		total += left[der].a;
	}
	cout << total << endl;
	return 0;
}
