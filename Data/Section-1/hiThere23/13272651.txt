#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 101000
#define maxC 1000000007
#define p2 pair<int, int>
#define mp make_pair
#define F first
#define S second

using namespace std;
int area, edge;
pair< p2, char > p[4];

bool comp(pair< p2, char > a, pair< p2, char > b)
{
    return a.F.S > b.F.S || (a.F.S == b.F.S && a.F.F > b.F.F);
}

void setup ()
{
    FOR(i, 1, 3)
    {
        cin >> p[i].F.F >> p[i].F.S;
        p[i].S = 'A' - 1 + i;
        if (p[i].F.F > p[i].F.S)
            swap(p[i].F.F, p[i].F.S);
        area += p[i].F.F * p[i].F.S;
    }
    sort(p + 1, p + 4, comp);
    edge = sqrt(area);
    if (edge * edge != area || p[1].F.S != edge)
    {
        cout << -1;
        exit(0);
    }
}

void ans()
{
    FOR(i, 1, p[1].F.F)
    {
        FOR(j, 1, edge)
        cout << p[1].S;
        cout << "\n";
    }
}

void checkCase(int x1, int y1, int x2, int y2)
{
    if (y1 != y2 || x1 + x2 != edge || y1 + p[1].F.F != edge)
        return;
    ans();
    FOR(i, 1, y1)
    {
        FOR(j, 1, edge)
        cout << (j <= x1? p[2].S:p[3].S);
        cout << "\n";
    }
    exit(0);
}

void xuly ()
{
    if (p[2].F.S == edge)
    {
        if (p[3].F.S == edge && p[1].F.F + p[2].F.F + p[3].F.F == edge)
        {
            ans();
            FOR(i, 1, p[2].F.F)
            {
                FOR(j, 1, edge)
                cout << p[2].S;
                cout << "\n";
            }
            FOR(i, 1, p[3].F.F)
            {
                FOR(j, 1, edge)
                cout << p[3].S;
                cout << "\n";
            }
            return;
        }
        cout << -1;
        return;
    }
    checkCase(p[2].F.F, p[2].F.S, p[3].F.F, p[3].F.S);
    checkCase(p[2].F.F, p[2].F.S, p[3].F.S, p[3].F.F);
    checkCase(p[2].F.S, p[2].F.F, p[3].F.F, p[3].F.S);
    checkCase(p[2].F.S, p[2].F.F, p[3].F.S, p[3].F.F);
    cout << -1;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
