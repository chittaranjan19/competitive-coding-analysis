import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Thor {
    public static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    static class Tuple {
        int first;
        int second;

        Tuple(int f, int s) {
            first = f;
            second = s;
        }
    }

    public static void main(String[] args) {
        FastReader fs = new FastReader();
        int n = fs.nextInt();
        int q = fs.nextInt();

        int ans = 0;

        boolean[] mark = new boolean[q];
        ArrayList<Queue<Integer>> e = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            e.add(new LinkedList<Integer>());
        }

        Queue<Tuple> Q = new LinkedList<>();

        int i = 0;
        while (q-- > 0) {
            int type = fs.nextInt();
            int x = fs.nextInt() - 1;

            if (type == 1) {

                ans++;
                e.get(x).add(i);
                Q.add(new Tuple(i, x));
                i++;
            }

            if (type == 2) {
                ans -= e.get(x).size();
                for (int y : e.get(x)) {
                    mark[y] = true;
                }
                e.get(x).clear();
            }

            if (type == 3) {
                int t = x;
                while (!Q.isEmpty() && Q.peek().first <= t) {
                    Tuple tuple = Q.remove();
                    int j = tuple.first;
                    int y = tuple.second;
                    if (mark[j] == false) {
                        mark[j] = true;
                        e.get(y).remove();
                        ans--;
                    }
                }

            }
            System.out.println(ans);
        }

    }
}