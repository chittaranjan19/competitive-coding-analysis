#include<iostream>
#include<sstream>
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<bitset>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
using namespace std;
#define VAR(a,b) __typeof(b) a=(b)
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
#define ALL(c) (c).begin(),(c).end()
#define TRACE(x) cerr << "TRACE(" #x ")" << endl;
#define DEBUG(x) cerr << #x << " = " << x << endl;

int ribbon[4005];
int pieces[4005];

int main(){
  int n, a, b, c;
  cin >> n >> a >> b >> c;
  ribbon[a] = 1;
  ribbon[b] = 1;
  ribbon[c] = 1;
  ribbon[0] = 1;
  int m = max(a,b);
  m = max(m,c);
  
  for(int i = 1; i <= n; i++){
      ribbon[i] = max(ribbon[i],ribbon[i-a]);
      if (ribbon[i]){
        pieces[i] = pieces[i-a] + 1;
        ribbon[i] = 0;
      }      
    
      ribbon[i] = max(ribbon[i], ribbon[i-b]);
      if (ribbon[i]){
        pieces[i] = max(pieces[i-b] + 1, pieces[i]);
        ribbon[i] = 0;
      }
    
      ribbon[i] = max(ribbon[i], ribbon[i-c]);
      if (ribbon[i]){
        pieces[i] = max(pieces[i], pieces[i-c] + 1);

      }
  }

  cout << pieces[n] << endl;
  return 0;
}
        

