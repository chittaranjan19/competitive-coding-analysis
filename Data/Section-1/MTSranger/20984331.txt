#include <iostream>
#include <iomanip>
#include <queue>
#include <cstdio>
#include <cstring>

using namespace std;
typedef double ld;
typedef pair<int, int> pii;
typedef pair<pii, pii> piiii;
const int N = 1000001;

// super fast range tree
const int MAXN = 1048576;
pii INF(2147483647, 2147483647);
pii t[2 * MAXN];
void build() {  // build the tree
  for (int i = MAXN - 1; i > 0; --i) t[i] = min(t[i<<1], t[i<<1|1]);
}

pii query(int l, int r) {  // sum on interval [l, r)
  pii res = INF;
  for (l += MAXN, r += MAXN; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = min(res, t[l++]);
    if (r&1) res = min(res, t[--r]);
  }
  return res;
}

int n;
int seq[N]; ld sum[N];
bool f2[N], f1[N];

/*
ld bfsum[N];
void bruteForce() {
    for (int k = 1; k <= n; k++) {
        bfsum[k] = 0;
        for (int i = 0; i+k-1 <= n-1; i++) {
            bfsum[k] += tree.query(i, i+k-1).first;
        }
    }
}
*/

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &seq[i]);
        t[MAXN+i] = pii(seq[i], i);
    }
    for (int i = n; i < MAXN; i++) t[MAXN+i] = INF;
    build();

    // get the first "min" fence post
    pii nxt = query(0, n);
    int mid = nxt.second;

    // three types of fence posts: constrained on 2 sides, 1 side, and 0 sides
    // constrained on 2 side: +1 each round
    // constrained on 1 side: +0 each round
    // constrained on 0 side: -1 each round
    memset(f2, 0, sizeof f2); f2[mid] = true;
    memset(f1, 0, sizeof f1);
    ld s2 = nxt.first, s0 = 0;

    priority_queue<piiii> q;
    if (mid > 0) q.push(piiii(pii(mid, mid), pii(0, mid-1)));
    if (mid < n-1) q.push(piiii(pii(n-1-mid, mid), pii(mid+1, n-1)));

    //cerr << "f2: "; for (int i = 0; i < n; i++) cerr << f2[i] << " "; cerr << endl;
    //cerr << "f1: "; for (int i = 0; i < n; i++) cerr << f1[i] << " "; cerr << endl;

    for (int k = n; k >= 1; k--) {
        while (!q.empty() && q.top().first.first == k) {
            piiii z = q.top(); q.pop();
            int a = z.second.first, b = z.second.second;
            int oldmid = z.first.second;
            int oldval = seq[oldmid];

            if (f2[oldmid]) {
                f2[oldmid] = false;
                f1[oldmid] = true;
                s2 -= oldval;
            } else if (f1[oldmid]) {
                f1[oldmid] = false;
                s0 += oldval;
            }

            pii nxt = query(a, b+1);
            int newval = nxt.first;
            int newmid = nxt.second;
            f2[newmid] = true;
            s2 += newval;

            //cerr << "break: " << a << " " << b << " " << oldmid << " " << newmid << endl;
            //cerr << "f2: "; for (int i = 0; i < n; i++) cerr << f2[i] << " "; cerr << endl;
            //cerr << "f1: "; for (int i = 0; i < n; i++) cerr << f1[i] << " "; cerr << endl;

            if (newmid > a) {
                q.push(piiii(pii(newmid-a, newmid), pii(a, newmid-1)));
            }
            if (newmid < b) {
                q.push(piiii(pii(b-newmid, newmid), pii(newmid+1, b)));
            }
        }

        //cerr << "s = " << s2 << " " << s0 << endl;;

        sum[k] = (k == n ? 0 : sum[k+1]) + (s2 - s0);
    }

    //bruteForce();

    int m; scanf("%d", &m);
    for (int i = 0; i < m; i++) {
        int k; scanf("%d", &k);
        printf("%.16f\n", sum[k] / (n-k+1));

        //cout << sum[k] / (n-k+1); cerr << " " << bfsum[k]/(n-k+1); cout << endl;
    }
}
