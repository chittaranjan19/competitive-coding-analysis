#include<bits/stdc++.h>

using namespace std;

#define mp make_pair
#define pb push_back
#define F first
#define S second

bool lex(string b, string a){
  if(a == b)return true;
  return lexicographical_compare(a.begin(), a.end(), b.begin(), b.end());
}

int mini(long long a, long long b){
  return a < b ? a : b;
}

int main(){

  int n, c[100005], i;
  cin >> n;
  for(i = 0; i < n; i++){
    cin >> c[i];
  }
  string word[100005];
  for(i = 0; i < n; i++){
    cin >> word[i];
  }

  long long na[100005], y[100005];
  
  for(i = 0; i < n; i++){
    na[i] = -1;
    y[i] = -1;
  }


  string nope, yup, temp;
  
  nope = word[0];
  reverse(word[0].begin(), word[0].end());
  yup = word[0];
  
  na[0] = 0;
  y[0] = c[0];

  for(i = 1; i < n; i++){
    if(lex(word[i], nope) and na[i - 1] != -1){
      na[i] = na[i - 1];
    }
    if(lex(word[i], yup) and y[i - 1] != -1){
      if(na[i] > y[i - 1] || na[i] == -1)na[i] = y[i - 1];
    }
    temp = word[i];
    reverse(word[i].begin(), word[i].end());

    if(lex(word[i], nope) and na[i - 1] != -1){
      y[i] = na[i - 1] + c[i];
    }
    if(lex(word[i], yup) and y[i - 1] != -1){
      if(y[i] > y[i - 1] + c[i] || y[i] == -1)y[i] = y[i - 1] + c[i];
    }

    nope = temp;
    yup = word[i];

    if(na[i] == -1 and y[i] == -1){
      cout << -1;
      return 0;
    }
  }
  if(y[n - 1] == -1)cout << na[n - 1];
  else if (na[n - 1] == -1) cout << y[n - 1];
  else cout << mini(y[n - 1], na[n - 1]);
  
  
  return 0;
}
