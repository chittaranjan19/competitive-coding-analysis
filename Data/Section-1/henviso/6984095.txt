#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <set>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define INRANGE0(x, n) ((x) > -1 && (x) < n)
#define INRANGE(x, a, b) ((x) >= a && (x) <= b)
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INCMOD(a,b,c) (((a)+b)%c)
#define DECMOD(a,b,c) (((a)+c-b)%c)
#define ROUNDINT(a) (int)((double)(a) + 0.5)
#define INF 0x3f3f3f3f
#define EPS 1e-11
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL  //J PRIMEIROS
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//scanf(" %d ", &t);

int n;
string s[50];

map< string, int > pd;

int solve(string str, bool first){
    //cout << "CHAMANDO SOLVE " << str << " " << first << endl;
    
    int &ans = pd[str];
    if(str.size() == 2*n-1){
        return 0;
    }
    if(ans == -INF){
        REP(i, 26){
            int a = 0;
            if(i == 0) a += first ? 1 : -1;
            if(i == 1) a += first ? -1 : 1;
            string nxt = str;
            nxt.push_back('a' + i);
            if(pd.count(nxt)){
                a -= solve(nxt, !first);
                ans = max(ans, a); 
            }
        }
    }
    //cout << " STR " << str << " ANS " << ans;
    return ans;
}

void bt(string str, int r, int c){
    pd[str] = -INF;
    if(r == n-1 && c == n-1){
        return;
    }
    if(r + 1 < n) bt(str+s[r+1][c], r+1, c);
    if(c + 1 < n) bt(str+s[r][c+1], r, c+1);
}

int main(){
    cin >> n;
    REP(i, n) cin >> s[i];

    bt(string(1, s[0][0]), 0, 0);
    
    int ans = -solve(string(1, s[0][0]), false);
    if(s[0][0] == 'a') ans++;
    if(s[0][0] == 'b') ans--;
  
    //cout << " ANS " << ans << endl;
  
    if(ans > 0) cout << "FIRST\n";
    else if(ans < 0) cout << "SECOND\n";
    else cout << "DRAW\n";
}
