#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

int n, a[maxn], b[maxn], prefcnt[maxn];
vector<int> factors[2];
ll ways[maxn];

ll modpow(ll a, ll b)
{
      if(a==0)
            return 0;
      ll x = 1, y = a;
      while(b){
            if(b&1)
                  x = (x*y)%mod;
            y = (y*y)%mod;
            b >>= 1;
      }
      return x;
}

int main()
{
      int i, j;
      scanf("%d", &n);
      for(i=1; i<=n; i++){
            scanf("%d", &a[i]);
            prefcnt[a[i]]++;
      }
      for(i=maxn-1; i>=0; i--)
            prefcnt[i] += prefcnt[i+1];
      ll ans = 0;
      for(i=1; i<maxn; i++){
            factors[0].clear();
            factors[1].clear();
            ll sub = 0, temp = 1;
            for(j=1; j<=sqrt(i); j++){
                  if(i%j)
                        continue;
                  factors[0].pb(j);
                  sub = (sub + ways[j])%mod; 
                  if(j != i/j){
                        factors[1].pb(i/j);
                        sub = (sub + ways[i/j])%mod;
                  }
            }
            int tot_cnt = factors[0].size() + factors[1].size();
            ll pcnt = 0, d;
	    int m = factors[1].size();
            for(j=0; j<m; j++){
                  d = prefcnt[factors[1][j]] - pcnt;
                  pcnt += d;
		  if(j==0)
                  	temp = (temp*(modpow(factors[0].size()+(m-j), d) - modpow(factors[0].size()+m-j-1, d) + mod))%mod;
                  else
                  	temp = (temp*modpow(factors[0].size()+(m-j), d))%mod;
            }
	    m = factors[0].size();
            for(j=m-1; j>=0; j--){
                  d = prefcnt[factors[0][j]] - pcnt;
                  pcnt += d;
                  temp = (temp*modpow(j+1, d))%mod;
            }
            ways[i] = temp;
            ans = (ans + ways[i])%mod;
      }      
      printf("%lld\n", ans);
      return 0;
}