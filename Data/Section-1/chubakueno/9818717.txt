#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> pii;
typedef long long ll;
int main(){
    int n;
    cin>>n;
    int sqrtn=sqrt(n);
    map <int,vector<int> > mx;
    map <int,vector<int> > my;
    map<pair<int,int>, bool> tip;
    for(int i=0;i<n;++i){
        int x,y;
        cin>>x>>y;
        mx[x].push_back(y);
        tip[make_pair(x,y)]=false;
    }
    map<int,vector<int> >::iterator it;
    for(it=mx.begin(); it!=mx.end(); ++it){
        int size=(it->second).size();
        if(size>sqrtn){
            for(int i=0;i<size;++i){
                int x=it->first;
                int y=(it->second)[i];
                my[y].push_back(x);
                tip[make_pair(x,y)]=true;
            }
            mx.erase(it);
        }
    }
    ll cx=0,dx=0;
    ll cy=0,dy=0;
    for(it=mx.begin(); it!=mx.end(); ++it){
        int size=(it->second).size();
        for(int i=0;i<size;++i){
            for(int j=i+1;j<size;++j){
                int x=it->first;
                int y1=(it->second)[i];
                int y2=(it->second)[j];
                int lado=abs(y1-y2);
                pii e1=make_pair(x+lado,y1);
                pii e2=make_pair(x+lado,y2);
                if(tip.count(e1)&&tip.count(e2)){
                    if(!tip[e1]&&!tip[e2])
                        ++dx;
                    ++cx;
                }
                pii e3=make_pair(x-lado,y1);
                pii e4=make_pair(x-lado,y2);
                if(tip.count(e3)&&tip.count(e4)){
                    if(!tip[e3]&&!tip[e4])
                        ++dx;
                    ++cx;
                }
            }
        }
    }
    cx-=dx/2;
    for(it=my.begin(); it!=my.end(); ++it){
        int size=(it->second).size();
        for(int i=0;i<size;++i){
            for(int j=i+1;j<size;++j){
                int y=it->first;
                int x1=(it->second)[i];
                int x2=(it->second)[j];
                int lado=abs(x1-x2);
                pii e1=make_pair(x1,y+lado);
                pii e2=make_pair(x2,y+lado);
                if(tip.count(e1)&&tip.count(e2)){
                    if(tip[e1]&&tip[e2])
                        ++dy;
                    ++cy;
                }
                pii e3=make_pair(x1,y-lado);
                pii e4=make_pair(x2,y-lado);
                if(tip.count(e3)&&tip.count(e4)){
                    if(tip[e3]&&tip[e4])
                        ++dy;
                    ++cy;
                }
            }
        }
    }
    cy-=dy/2;
    cout<<cx+cy;
}