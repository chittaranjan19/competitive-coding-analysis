#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 5e5 + 10, lg = 20;

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

ll x[N], y[N];

pair<double, int> l1[N], l2[N];
double lt[N];

int main()
{
	ll x1, x2, y1, y2, t1, t2;
	cin >> x1 >> y1 >> x2 >> y2 >> t1 >> t2;
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> x[i] >> y[i];
	for (int i = 0; i < n; i++)
	{
		lt[i] = sqrt(sqr(x[i] - t1) + sqr(y[i] - t2));

		l1[i] = mp(lt[i] - sqrt(sqr(x[i] - x1) + sqr(y[i] - y1)), i);
		l2[i] = mp(lt[i] - sqrt(sqr(x[i] - x2) + sqr(y[i] - y2)), i);
	}
	double mn1 = -3e9, mn2 = -3e9; int nmn1, nmn2;

	double sum = 0;
	for (int i = 0; i < n; i++)
		sum += 2*lt[i];
	
	sort(l1, l1 + n);
	sort(l2, l2 + n);
	if (n == 1){
		if (l1[0].fs > l2[0].fs)
			mn1 = l1[0].fs;
		else mn2 = l2[0].fs;
	}
	else{
		mn1 = l1[n-1].fs, mn2 = l2[n-1].fs;
		if (l1[n - 1].sc == l2[n - 1].sc)
		{
			if (l1[n - 1].fs + l2[n - 2].fs > l1[n - 2].fs + l2[n - 1].fs)
				mn1 = l1[n - 1].fs, mn2 = l2[n - 2].fs;
			else mn1 = l1[n - 2].fs, mn2 = l2[n - 1].fs;
		}
	}

	if (mn1 > mn2){
		sum -= (mn1);
		if (mn2 > 0)
			sum -= (mn2);
	}
	else{
		sum -= (mn2);
		if (mn1 > 0)
			sum -= mn1;
	}
	printf("%.15f", sum);
	return 0;
}