#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define all(v) (v).begin(), (v).end()

typedef long long ll; const int MAXN = 10010; void setmin (ll &a, ll b) {if (a > b) {a = b; } } template<class T, class Comp = less<T> > struct mono_queue {deque<pair<T, int> > dq; Comp comp; int left, right; mono_queue () : dq(), comp(), left(0), right(0) {} void push (const T &t) {while (!dq.empty() && comp(t, dq.back().first)) {dq.pop_back(); } dq.push_back(make_pair(t, right++)); } void pop() {assert(!empty()); if (dq.front().second == left) {dq.pop_front(); } left++; } T get() {assert(!empty()); return dq.front().first; } int getind() {assert(!empty()); return dq.front().second; } int size() {return right - left; } bool empty() {return left == right; } void clear() {dq.clear(); left = right = 0; } }; int N, X, M; int A[MAXN][2]; int A1, A2; vector<ll> vall(1, 0); ll dp[2][MAXN]; int indexof (int x) {return lower_bound(all(vall), x) - vall.begin(); } int getdist (int x) {if (A1 <= x && x <= A2) {return 0; } if (x < A1) {return vall[A1] - vall[x]; } else {return vall[x] - vall[A2]; } } int main() {if (fopen("input.txt", "r")) {freopen("input.txt", "r", stdin); } ios::sync_with_stdio(false); cin >> N >> X; vall.push_back(X); for (int i = 1; i <= N; i++) {for (int j = 0; j < 2; j++) {cin >> A[i][j]; vall.push_back(A[i][j]); } } sort(all(vall)); vall.resize(unique(all(vall)) - vall.begin()); M = vall.size() - 1; int cur = 0, prv = 1; fillchar(dp, 63); dp[cur][indexof(X)] = 0; for (int i = 1; i <= N; i++) {for (int j = 0; j < 2; j++) {A[i][j] = indexof(A[i][j]); } } mono_queue<ll> mq; for (int i = 1; i <= N; i++) {swap(cur, prv); A1 = A[i][0]; A2 = A[i][1]; for (int j = 1; j <= M; j++) {mq.push(dp[prv][j] - vall[j]); dp[cur][j] = mq.get() + vall[j]; } mq.clear(); for (int j = M; j >= 1; j--) {mq.push(dp[prv][j] + vall[j]); setmin(dp[cur][j], mq.get() - vall[j]); dp[cur][j] += getdist(j); } mq.clear(); } cout << *min_element(dp[cur] + 1, dp[cur] + M + 1) << endl; }