#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 200000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int a[MAX_N], tree[MAX_N * 4];

void make_tree(int cnt)
{
    for (int i = 0; i < cnt; i++)
        tree[cnt - 1 + i] = a[i];
    int curr = 0, t = 1, x = cnt / 2;
    for (int i = cnt - 2; i >= 0; i--)
    {
        if (t == 1)
            tree[i] = tree[i * 2 + 1] | tree[i * 2 + 2];
        else
            tree[i] = tree[i * 2 + 1] ^ tree[i * 2 + 2];
        curr++;
        if (curr == x)
        {
            t = 1 - t;
            curr = 0;
            x /= 2;
        }
    }
}

void update(int pos, int val)
{
    tree[pos] = val;
    int curr = pos, t = 1;
    while (curr > 0)
    {
        if (t == 1)
            tree[(curr - 1) / 2] = tree[(curr - 1) / 2 * 2 + 1] | tree[(curr - 1) / 2 * 2 + 2];
        else
            tree[(curr - 1) / 2] = tree[(curr - 1) / 2 * 2 + 1] ^ tree[(curr - 1) / 2 * 2 + 2];
        t = 1 - t;
        curr = (curr - 1) / 2;
    }
}

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m, pos, val;
    cin >> n >> m;
    int cnt = 1 << n;
    for (int i = 0; i < cnt; i++)
        cin >> a[i];
    make_tree(cnt);
    //for (int i = 0; i < cnt * 2 - 1; i++)
    //  cout << tree[i] << " ";
    for (int i = 0; i < m; i++)
    {
        cin >> pos >> val;
        update(cnt - 1 + pos - 1, val);
        cout << tree[0] << endl;
    }
    return 0;
}