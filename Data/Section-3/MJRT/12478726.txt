#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
//////////////////////
#include<iostream>
#include<algorithm>
#include<string>
#include <iterator>
#include<sstream>
#include<functional>
#include<numeric>
///////////////////////
#include<vector>
#include<map>
#include <stack>
#include<queue>
#include<set>
#include <bitset>
#include <list>
using namespace std;
#define lch(x)  ((x) << 1)
#define rch(x) ((x)<<1|1)
#define dad(x) ((x)>>1)
#define lowbit(x) ((x)&(-x))
typedef  long long int LL;
const int INF = 0x4f4f4f4f ;
const double eps = 1e-6;
const long double PI = acos(0.0) * 2.0;
const int N = 10 + 100;
int n,m;
char maze[N][N];
bool vis[N][N];
const int dx[] = {0,1,0,-1};
const int dy[] = {1,0,-1,0};
bool dfs(int x ,int y,int px,int py,int cnt,char c);
int main()
{
    //freopen("in.txt", "r", stdin);
    while(scanf("%d%d%*c",&n,&m) == 2)
    {
        memset(vis,0,sizeof(vis));
        for(int i = 0 ; i < n ; i++)
            gets(maze[i]);

        for(int i = 0 ; i < n ; i++)
        {
            for(int j = 0 ; j < n ; j++)
            {
                if(!vis[i][j])
                {
                    if(dfs(i,j,-1,-1,1,maze[i][j]))
                    {
                        puts("Yes");
                        return 0;
                    }
                }
            }
        }
        puts("No");
    }
    return 0;
}

bool dfs(int x ,int y,int px,int py,int cnt,char c)
{
    vis[x][y] = 1;
    for(int i = 0 ; i < 4 ; i++)
    {
        int nx = x +dx[i] , ny = y + dy[i];

        if(0<= nx && nx < n && 0 <= ny && ny < m && maze[nx][ny] == c)
        {
            //if(nx == px && ny == py)    continue;
           // if(vis[nx][ny]) return true;
            //return dfs(nx,ny,x,y,cnt+1,c);

            if(!vis[nx][ny])    return dfs(nx,ny,x,y,cnt+1,c);
            else if( (nx != px || ny != py) && cnt>=4)     return true;
        }
    }
    return 0;
}
