import java.io.*;
import java.util.*;
import java.math.*;

/*
 * Created by Epsilon Alpha on 23-Sep-16 at 4:42 AM.
 */

public final class Dragons
{
    public static void main(String[] args) throws Exception
    {
        Parser Reader = new Parser(System.in);
        OutputWriter Writer = new OutputWriter(System.out);
        int s = Reader.nextInt();
        int n = Reader.nextInt();

        Pair[] dragon = new Pair[n];

        for(int i=0;i<n;i++)
        {
            int x = Reader.nextInt();
            int y = Reader.nextInt();
            Pair P = new Pair(x,y);
            dragon[i] = P;
        }

        Comparator<Pair> comp = new PairComparator();

        Arrays.sort(dragon, comp);
        boolean flag = true;
        for(int i=0;i<n;i++)
        {
            if(s > dragon[i].strength)
                s += dragon[i].bonus;
            else
            {
                flag = false;
                break;
            }
        }
        Writer.println(flag?"YES":"NO");
        Writer.close();
    }

    private static class Pair
    {
        int strength;
        int bonus;

        Pair(int strength, int bonus)
        {
            this.strength = strength;
            this.bonus = bonus;
        }
    }

    private static class PairComparator implements Comparator<Pair>
    {
        @Override
        public int compare(Pair P1, Pair P2)
        {
            return P1.strength-P2.strength;
        }
    }

    private static class Parser
    {
        final private int BUFFER_SIZE = 1 << 16;

        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Parser(InputStream in)
        {
            din = new DataInputStream(in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public int nextInt() throws Exception
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public long nextLong() throws Exception
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public String next() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c > ' ');
            return ret.toString();
        }

        public String nextLine() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c != '\n');
            return ret.toString();
        }

        private void fillBuffer() throws Exception
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) buffer[0] = -1;
        }

        private byte read() throws Exception
        {
            if (bufferPointer == bytesRead) fillBuffer();
            return buffer[bufferPointer++];
        }
    }

    private static class OutputWriter
    {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream)
        {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)), true);
        }

        public OutputWriter(Writer writer)
        {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object... objects)
        {
            for (int i = 0; i < objects.length; i++)
            {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void println(Object... objects)
        {
            print(objects);
            writer.println();
        }

        public void close()
        {
            writer.close();
        }

        public void flush()
        {
            writer.flush();
        }
    }
}