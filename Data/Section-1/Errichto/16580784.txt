#include<bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
const int inf = 1e9 + 5;
const int nax = 1e6 + 5;

int t[nax];
vector<pii> query[nax];
pii changes[nax];
bool increased[nax];
int m1[nax], m2[nax];
int licz1, licz2;
int ans[nax];

int main() {
	int n, q;
	scanf("%d%d", &n, &q);
	RI(i, n) scanf("%d", &t[i]);
	RI(i, q) {
		int a, b;
		scanf("%d%d", &a, &b);
		query[a].pb(mp(i, b));
	}
	m2[0] = inf;
	// first LIS
	RI(iii, n) {
		int val = t[iii];
		int low = 0, high = licz1;
		// najpozniejszy mniejszy niz val
		while(low < high) {
			int mid = (low + high + 1) / 2;
			if(m1[mid] < val) low = mid;
			else high = mid - 1;
		}
		if(low == licz1) {
			++licz1;
			increased[iii] = true; // moze zbedne?
		}
		changes[iii] = mp(low+1, m1[low+1]);
		// printf("%d %d\n", low+1, val);
		m1[low+1] = val;
	}
	
	int maks_ans = licz1;
	
	// second LIS
	FORD(iii, n, 1) {
		// przywroc
		pii change = changes[iii];
		m1[change.st] = change.nd;
		if(m1[change.st] == 0) --licz1;
		
		// queries
		for(pii zap : query[iii]) {
			int indeks = zap.first; // only to store the answer
			
			int val = zap.second;
			// f(val);
			int low = 0, high = licz1; // najpozniejszy mniejszy niz val
			while(low < high) {
				int mid = (low + high + 1) / 2;
				if(m1[mid] < val) low = mid;
				else high = mid - 1;
			}
			int a1 = low;
			low = 0; high = licz2;
			while(low < high) {
				int mid = (low + high + 1) / 2;
				if(m2[mid] > val) low = mid;
				else high = mid - 1;
			}
			int b1 = low;
			//REP(i, 5) printf("%d ", m1[i]); printf(" = %d\n", licz1); 
			//printf("%d %d %d (%d)\n", iii, a1, b1, val);
			maxi(ans[indeks], a1 + b1 + 1);
			RI(z, 3) {
				if(iii - z >= 1) {
					val = t[iii-1];
								low = 0, high = licz1; // najpozniejszy mniejszy niz val
								while(low < high) {
									int mid = (low + high + 1) / 2;
									if(m1[mid] < val) low = mid;
									else high = mid - 1;
								}
								a1 = low;
								low = 0; high = licz2;
								while(low < high) {
									int mid = (low + high + 1) / 2;
									if(m2[mid] > val) low = mid;
									else high = mid - 1;
								}
								b1 = low;
								//REP(i, 5) printf("%d ", m1[i]); printf(" = %d\n", licz1); 
								//printf("%d %d %d (%d)\n", iii, a1, b1, val);
								maxi(ans[indeks], min(maks_ans, a1 + b1 + 1));
				}
				if(iii + z <= n) {
					val = t[iii+1];
								low = 0, high = licz1; // najpozniejszy mniejszy niz val
								while(low < high) {
									int mid = (low + high + 1) / 2;
									if(m1[mid] < val) low = mid;
									else high = mid - 1;
								}
								a1 = low;
								low = 0; high = licz2;
								while(low < high) {
									int mid = (low + high + 1) / 2;
									if(m2[mid] > val) low = mid;
									else high = mid - 1;
								}
								b1 = low;
								//REP(i, 5) printf("%d ", m1[i]); printf(" = %d\n", licz1); 
								//printf("%d %d %d (%d)\n", iii, a1, b1, val);
								maxi(ans[indeks], min(maks_ans, a1 + b1 + 1));
				}
			}
			// mini(ans[indeks], maks_ans);
		}
		
		// second LIS
		int val = t[iii];
		int low = 0, high = licz2;
		// najpozniejszy wiekszy niz val
		while(low < high) {
			int mid = (low + high + 1) / 2;
			if(m2[mid] > val) low = mid;
			else high = mid - 1;
		}
		if(low == licz2) ++licz2;
		// printf("> %d %d\n", low, val);
		m2[low+1] = val;
	}
	// puts("");
	// REP(i, 5) printf("%d ", m2[i]);
	// puts("");
	
	RI(i, q) {
		assert(ans[i]);
		printf("%d\n", ans[i]);
	}
	return 0;
}
