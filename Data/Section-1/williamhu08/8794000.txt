//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1 << 17, INF = 1e9 + 10;

int N, S, L;
int arr[MAXN], dp[MAXN];
int sdp[2 * MAXN];
int smin[2 * MAXN], smax[2 * MAXN];

void update (int seg[2 * MAXN], int x, int v, bool ismax) {
	for (seg[x += MAXN] = v; x >>= 1; ) {
		int sl = seg[2 * x], sr = seg[2 * x + 1];
		seg[x] = ismax ? max(sl, sr) : min(sl, sr);
	}
}

int query (int seg[2 * MAXN], int a, int b, bool ismax, int cur = 1, int l = 0, int r = MAXN) {
	if (r <= a || b <= l) {
		return ismax ? -INF : INF;
	}
	if (a <= l && r <= b) {
		return seg[cur];
	}
	int mid = (l + r) / 2;
	int ql = query(seg, a, b, ismax, 2 * cur, l, mid), qr = query(seg, a, b, ismax, 2 * cur + 1, mid, r);
	return ismax ? max(ql, qr) : min(ql, qr);
}

bool works (int a, int b) {
	return query(smax, a, b, true) - query(smin, a, b, false) <= S;
}
int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces487B.in", "r", stdin);
#endif
	scanf("%d %d %d", &N, &S, &L);
	fill_n(smin, 2 * MAXN, INF);
	fill_n(smax, 2 * MAXN, -INF);
	for (int i = 1; i <= N; i++) {
		scanf("%d", &smax[i + MAXN]);
		smin[i + MAXN] = smax[i + MAXN];
	}
	for (int i = MAXN - 1; i; i--) {
		smin[i] = min(smin[2 * i], smin[2 * i + 1]);
		smax[i] = max(smax[2 * i], smax[2 * i + 1]);
	}
	//initialization of dp array: careful with 0
	fill_n(dp + 1, N, INF);
	fill_n(sdp, 2 * MAXN, INF);
	update(sdp, 0, 0, false);
	//now do the real thing
	for (int i = L; i <= N; i++) {
		//ok now we'll actually use the dp
		int lo = 1, hi = i - (L - 1);
		if (!works(hi, i + 1)) {
			// printf("right there continued at i = %d\n", i);
			continue;
		}
		//otherwise "hi" works
		if (works(1, i + 1)) {
			hi = 1;
		} else {
			//binary search for the point
			while (hi - lo > 1) {
				int mid = (lo + hi) / 2;
				if (works(mid, i + 1)) {
					hi = mid;
				} else {
					lo = mid;
				}
			}
		}
		// printf("i = %d, hi = %d\n", i, hi);
		dp[i] = 1 + query(sdp, hi - 1, i - (L - 1), false);
		update(sdp, i, dp[i], false);
	}
	//print ans
	printf("%d\n", (N = dp[N]) >= MAXN ? -1 : N);
	if (N >= 90000) {
		puts("output");
	}
}