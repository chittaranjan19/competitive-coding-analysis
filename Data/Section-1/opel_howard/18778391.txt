#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof((b).rend()) a = (b).rbegin(); a != (b).rend(); ++a)
#define iterate(a, b) for(__typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)
#define all(i) (i).begin(), (i).end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, args)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

int main() {
#ifdef DEBUG
	freopen("680C.in", "r", stdin);
#endif
    
    vi is_prime(105, true);
    is_prime[0] = is_prime[1] = false;
    loop(i, 100) {
    	if (is_prime[i]) {
    		for (int j = i; i*j <= 100; ++j) {
    			is_prime[i*j] = false;
    		}
    	}
    }
    vi primes;
    loop1(val, 100) {
    	if (is_prime[val]) {
    		primes.pub(val);
    		debug("prime: %d\n", val);
    	}
    }
    debug("%d\n", (int) primes.size());

    int pdiv_count = 0;
    int pdiv = 0;
    for (int idx = 0; primes[idx] < 50; ++idx) {
    	printf("%d\n", primes[idx]);
    	fflush(stdout);
    	string inp;
    	getline(cin, inp);
    	if (inp == "yes") {
    		pdiv_count++;
    		pdiv = primes[idx];
    	}
    }
    if (pdiv_count > 1) {
    	puts("composite");
    }
    if (pdiv < 10) {
    	printf("%d\n", pdiv*pdiv);
    	fflush(stdout);
    	string inp;
    	getline(cin, inp);
    	if (inp == "yes") {
    		puts("composite");
    		return 0;
    	}
    }
    puts("prime");


    return 0;
}