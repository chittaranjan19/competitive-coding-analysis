//why are you stalking me?
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define dbg(x) cerr << #x << " = " << x << endl

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 505, MAXS = 2 * MAXN;

struct parcel {
	int in, out, w, s, v;
	void read() {
		cin >> in >> out >> w >> s >> v;
	}
	bool operator < (const parcel &p) const {
		return out < p.out;
	}
	bool equals (const parcel &p) const {
		return in == p.in && out == p.out;
	}
};

int N, S;
parcel arr[MAXN];
int prv[MAXN];
bool ok[MAXN][MAXN];	//let's put an order on stuff.
int dpsub[MAXN][MAXN];
int dp[MAXN][MAXS];

int getdp (int x, int st, int dpth = 0) {
	//x = current, st = strength
	if (st < 0) {
		return 0;
	}
	int &ref = dp[x][st];
	if (ref != -1) {
		return ref;
	}
	int *dp2 = dpsub[dpth++];
	dp2[0] = arr[x].v;
	for (int i = 1; i <= N; i++) {
		if (ok[x][i]) {
			dp2[i] = max(dp2[i - 1], dp2[prv[i]] + getdp(i, min(arr[i].s, st - arr[i].w), dpth));
		} else {
			dp2[i] = dp2[i - 1];
		}
	}
	return ref = dp2[N];
}

int main() {
	//why are you stalking me?
	// int t = clock();
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> N >> S;
	for (int i = 1; i <= N; i++) {
		arr[i].read();
	}
	N++;
	arr[N].in = -1;
	arr[N].out = MAXS;
	arr[N].w = 0;
	arr[N].s = S;
	arr[N].v = 0;
	sort(arr + 1, arr + N + 1);
	//order
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (i != j) {
				if (arr[i].equals(arr[j])) {
					ok[i][j] = (i < j);
				} else {
					ok[i][j] = (arr[i].in <= arr[j].in && arr[j].out <= arr[i].out);
				}
			}
		}
	}
	//prv
	for (int i = 1; i <= N; i++) {
		for (int j = i - 1; j; j--) {
			if (arr[j].out <= arr[i].in) {
				prv[i] = j;
				break;
			}
		}
	}
	fillchar(dp, -1);
	cout << getdp(N, S) << endl;
	// cerr << "time = " << float(clock() - t) / CLOCKS_PER_SEC << " sec\n";
}