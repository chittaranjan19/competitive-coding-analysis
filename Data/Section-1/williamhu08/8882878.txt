//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10;

int N;
map<int, vector<pair<ll, int> > > colors;
vector<pair<ll, int> > sums[MAXN];	//pair(sum, what color)
int ans[2], take[2];
ll ansht;

void upd (int a1, int t1, int a2, int t2, ll h) {
	if (h <= ansht) {
		return;
	}
	ansht = h;
	ans[0] = a1;
	ans[1] = a2;
	take[0] = t1;
	take[1] = t2;
}

int main() {
	//why are you stalking me?
	ios_base::sync_with_stdio(false);
#ifndef ONLINE_JUDGE
	freopen("codeforces159E.in", "r", stdin);
#endif
	cin >> N;
	for (int i = 1; i <= N; i++) {
		int c;
		ll s;
		cin >> c >> s;
		colors[c].push_back(make_pair(s, i));
	}
	rep(it, colors) {
		// cout << it->first << endl;
		vector<pair<ll, int> > &ref = it->second;
		sort(ref.rbegin(), ref.rend());
		// rep(jt, ref) {
			// cout << "(size = " << jt->first << ", index = " << jt->second << ") ";
		// }
		// cout << endl;
		int c = it->first;	//this is the color
		ll s = 0;	//the current sum
		for (int i = 0, siz = ref.size(); i < siz; i++) {
			sums[i + 1].push_back(make_pair(s += ref[i].first, c));
		}
	}
	for (int i = 1; i < MAXN - 1; i++) {
		//try pair with i or i - 1
		vector<pair<ll, int> > &cur = sums[i];
		if (cur.empty()) {
			continue;
		}
		sort(cur.rbegin(), cur.rend());
		if (cur.size() > 1) {
			//then take two of them
			upd(cur[0].second, i, cur[1].second, i, cur[0].first + cur[1].first);
		}
		__typeof(cur) &prv = sums[i - 1];
		if (!prv.empty()) {
			if (prv[0].second != cur[0].second) {
				upd(cur[0].second, i, prv[0].second, i - 1, cur[0].first + prv[0].first);
			} else if (prv.size() >= 2) {
				upd(cur[0].second, i, prv[1].second, i - 1, cur[0].first + prv[1].first);
			}
		}
		__typeof(prv) &nxt = sums[i + 1];
		if (!nxt.empty()) {
			//take the current one
			if (nxt[0].second != cur[0].second) {
				upd(nxt[0].second, i + 1, cur[0].second, i, nxt[0].first + cur[0].first);
			} else if (nxt.size() >= 2) {
				upd(nxt[1].second, i + 1, cur[0].second, i, nxt[1].first + cur[0].first);
			}
		}
	}
	int t = take[0] + take[1];
	cout << ansht << endl << t << endl;
	//now let's see
	for (int i = 0; i < t; i++) {
		//take from ans[i & 1]. take the i >> 1
		cout << colors[ans[i & 1]][i >> 1].second << ' ';
	}
}