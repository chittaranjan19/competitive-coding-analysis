#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<stack>

using namespace std;

#define pb push_back
#define boostio ios_base::sync_with_stdio(0);cin.tie(0);

bool vis[100005];
vector<int> state(100005, -1);
vector<int> adjlist[100005];

int main(){
  boostio;

  int n, i, t, j, v1, v2, edge;

  //cin >> t;
  //int torg = t;

 
  int curr = 0;
  int flag = 0;
  int x;
  cin >> n >> edge;
  for(i = 0; i <= n; i++){
    adjlist[i].clear();
    vis[i] = false;
    state[i] = -1;
  }
  
  for(i = 0; i < edge; i++){
    cin >> v1 >> v2;
    adjlist[v1].pb(v2);
    adjlist[v2].pb(v1);
  }

  stack<int> dfss;

  for(i = 0; i <= n; i++){
    vis[i] = false;
    state[i] = -1;
  }

  for(i = 1; i <= n; i++){
    if(flag) break;
    if(vis[i])continue;
    dfss.push(i);      
    vis[i] = true;
    state[i] = 0;
    while(!dfss.empty() && !flag){
      int v = dfss.top();
      dfss.pop();
      curr = state[v];
	
      for(int j = 0; j != adjlist[v].size(); j++){
	x = adjlist[v][j];
	if(!vis[x]){
	  dfss.push(x);
	}
	if(state[x] == -1){
	  state[x] = (curr+1)%2;
	  //curr++;
	}
	else{
	  if(state[x] != (curr+1)%2){
	    flag = 1;
	    break;
	  }
	  //curr++;
	}
	//state[x] = (curr)%2;
	vis[x] = true;
      }      
    }
  }

 
  if(flag == 1){
    cout << -1;
    return 0;
  }

  vector<int> alp;
  vector<int> bet;
  
  for(i = 1; i <= n; i++){
    if(state[i] == 0)alp.pb(i);
    else bet.pb(i);
  }
  cout << alp.size() << endl;
  for(i = 0; i != alp.size(); i++)cout << alp[i] << ' ';
  cout << endl;
  cout << bet.size() << endl;
  for(i = 0; i != bet.size(); i++)cout << bet[i] << ' ';
  //cout << endl;
  
    
  
    return 0;
  }
