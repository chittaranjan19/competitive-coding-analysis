#include <bits/stdc++.h>
using namespace std;

vector <int> VT[1000010];
int num[1000010];
bool vis[1000010];
int cp[1000010];
int cd[1000010];
int cnt;

void dfs (int n) {
    for (int i = 0; i < VT[n].size (); i++) {
        if (!vis[VT[n][i]]) {
            cp[cnt] = VT[n][i];
            cd[cnt++] = num[VT[n][i]];
            vis[VT[n][i]] = true;
            dfs (VT[n][i]);
        }
    }
}

int main () {
    int n, m;
    scanf ("%d%d", &n, &m);
    for (int i = 1; i <= n; i++) {
        scanf ("%d", &num[i]);
        VT[i].clear ();
    }
    memset (vis, false, sizeof vis);
    for (int i = 1; i <= m; i++) {
        int u, v;
        scanf ("%d%d", &u, &v);
        VT[u].push_back (v);
        VT[v].push_back (u);
    }
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            cnt = 0;
            cp[cnt] = i;
            cd[cnt++] = num[i];
            vis[i] = true;
            dfs (i);
            sort (cd, cd + cnt);
            sort (cp, cp + cnt);
            for (int i = 0, j = cnt - 1; i < cnt; i++, j--) {
                num[cp[i]] = cd[j];
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        if (i < n)  printf ("%d ", num[i]);
        else        printf ("%d\n", num[i]);
    }
    return 0;
}
