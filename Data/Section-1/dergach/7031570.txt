#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define pi acos(-1.0)
#define eps 1e-9

int a[100005], b[100005], d, n, p[100005], c[100005];
ll x;
ll getNextX() {
    x = (x * 37 + 10007) % 1000000007;
    return x;
}
void initAB() {
    for(int i = 0; i < n; i = i + 1){
        a[i] = i + 1;
    }
    for(int i = 0; i < n; i = i + 1){
        swap(a[i], a[getNextX() % (i + 1)]);
    }
    for(int i = 0; i < n; i = i + 1){
        if (i < d)
            b[i] = 1;
        else
            b[i] = 0;
    }
    for(int i = 0; i < n; i = i + 1){
        swap(b[i], b[getNextX() % (i + 1)]);
    }
}

int main()
{
    cin >> n >> d >> x;
    initAB();
    for(int i = 0; i < n; i++)
        p[a[i]] = i;
    set <int> ones, pos;
    for(int i = 0; i < n; i++)
    {
        pos.insert(i);
        if(b[i])
            ones.insert(i);
    }
    for(int i = n; i >= 1; i--)
    {
        int cur = p[i];
        while(true)
        {
            if(pos.lower_bound(cur) == pos.end()) 
                break;
            cur = *pos.lower_bound(cur);
            if(b[cur-p[i]])
            {
                c[cur] = i;
                pos.erase(cur);
            }
            if(pos.upper_bound(cur) == pos.end()) 
                break;
            cur = *pos.upper_bound(cur);
            if(ones.lower_bound(cur-p[i]) == ones.end())
                break;
            cur = max(cur, *ones.lower_bound(cur-p[i]) + p[i]);
        }
    }
    for(int i = 0; i < n; i++)
        printf("%d\n", c[i]);
    return 0;
}
