#include <iostream>
#include <algorithm>

int nod(int, int);

int main() {
    using namespace std;
    int n = 0;
    scanf("%d", &n);
    int matrix[250002] = {0};
    for (int  i = 0; i < n * n; i++) {
        scanf("%d", &matrix[i]);
    }
    sort(matrix, matrix + n * n);
    /*
    for (int  i = 0; i < n * n; i++) {
        printf("%d ", matrix[i]);
    }
    printf("\n");
     */
    int element[501][2] = {matrix[0], 1}, ne = 0; // element[0][0] = matrix[0]; element[0][1] = 1;
    for (int i = 1; i < n * n; i++) {
        if (matrix[i] == element[ne][0]) {
            element[ne][1]++;
        }
        else {
            ne++;
            element[ne][0] = matrix[i];
            element[ne][1] = 1;
        }
    }
    // ne = quntity - 1
    /*
    for (int i = 0; i <= ne; i++) {
        printf("%d;%d ", element[i][0], element[i][1]);
    }
    printf("\nne = %d\n", ne);
     */
    // find original array
    int ans[501] = {0};
    for (int i = 0, ie = ne; i < n; ) {
        if (element[ie][1] > 0) {
            ans[i] = element[ie][0];
            for (int ii = i - 1; ii >= 0; ii--) {
                int nd = nod(ans[ii], ans[i]), iie = ie;
                while (nd < element[iie][0]) {
                    iie--;
                }
                element[iie][1] -= 2;
            }
            element[ie][1]--;
            i++;
        }
        else {
            ie--;
        }
    }
    for (int i = 0; i < n; i++) {
        printf("%d ", ans[i]);
    }
    printf("\n");
    return 0;
}
/*
 6
 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 12 12 12 12 12 12 12 24 36
 1;11 3;16 12;7 24;1 36;1
 36 24 12 3 3 1
 
 4
 2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2
 6 4 3 2

 2
 1 1 1 1
 1 1
 
 3
 1 3 1 1 2 1 2 2 2
 3 2 2
 */

int nod(int a, int b) {
    if (b!=0)
        return nod(b, a%b);
    return a;
}