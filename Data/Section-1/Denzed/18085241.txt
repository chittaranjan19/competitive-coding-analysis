#include <bits/stdc++.h>

#define f       first
#define s       second
#define mp      make_pair
#define rank    something_which_is_supposed_to_be_rank
#define left    something_which_is_supposed_to_be_left
#define right   something_which_is_supposed_to_be_right

using namespace std;

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

vector<pair<int,int>> moves = {{1, 0}, 
                               {0, -1}, 
                               {-1, 0},
                               {0, 1}};

map<char,vector<int>> blocks = {{'+', {0, 1, 2, 3}}, 
                                {'-', {1, 3}}, 
                                {'|', {0, 2}}, 
                                {'v', {0}}, 
                                {'<', {1}}, 
                                {'^', {2}}, 
                                {'>', {3}}, 
                                {'L', {0, 2, 3}}, 
                                {'R', {0, 1, 2}}, 
                                {'U', {0, 1, 3}}, 
                                {'D', {1, 2, 3}}, 
                                {'*', {}}};

const int N = 1000;

struct pos {
    int x, y, r;
};

string field[N];
bool is[N][N][4][4];
int dist[N][N][4], xt, yt, xm, ym, n, m;
queue<pos> q;

int main() {
    cin.sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    memset(dist, -1, sizeof(dist));
    for (int i = 0; i < n; ++i) {
        cin >> field[i];
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            for (int r = 0; r < 4; ++r) {
                for (int k: blocks[field[i][j]]) {
                    int i2 = i + moves[(k + r) % 4].f;
                    int j2 = j + moves[(k + r) % 4].s;
                    int k2 = (k > 1 ? k - 2 : k + 2);
                    if (-1 < i2 && i2 < n && -1 < j2 && j2 < m) {
                        auto block = blocks[field[i2][j2]];
                        is[i][j][r][k] = find(block.begin(), block.end(), k2) != block.end();
                    }
                }
            }
        }
    }
    cin >> xt >> yt >> xm >> ym;
    dist[xt - 1][yt - 1][0] = 0;
    q.push({xt - 1, yt - 1, 0});
    for (pos cur; !q.empty(); ) {
        cur = q.front();
        q.pop();
        int d = dist[cur.x][cur.y][cur.r];
        int &d1 = dist[cur.x][cur.y][(cur.r + 1) % 4];
        if (d1 == -1 || d + 1 < d1) {
            d1 = d + 1;
            q.push({cur.x, cur.y, (cur.r + 1) % 4});
        }
        for (int j: blocks[field[cur.x][cur.y]]) {
            if (is[cur.x][cur.y][cur.r][j]) {
                int i = (j + cur.r) % 4;
                int new_x = cur.x + moves[i].f;
                int new_y = cur.y + moves[i].s;
                int &d2 = dist[new_x][new_y][cur.r];
                if (d2 == -1 || d2 > d + 1) {
                    d2 = d + 1;
                    q.push({new_x, new_y, cur.r});
                }
            }
        }
    }
    int ans = -1;
    for (int r = 0; r < 4; ++r) {
        if (dist[xm - 1][ym - 1][r] != -1 && (ans == -1 || dist[xm - 1][ym - 1][r] < ans)) {
            ans = dist[xm - 1][ym - 1][r];
        }
    }
    cout << ans << "\n";
    cerr << "Time elapsed: " << (ld) clock() / CLOCKS_PER_SEC << "\n";
    return 0;
}