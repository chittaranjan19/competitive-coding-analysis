/*
        *************        ****************        ***************             ***                 ***
        *************        ****************        ***************            *****              *** ***
        **                   ***           **        ***         ***           ***  ***           ***   ***
        **                   ****************        ***         ***          ***    ***         ***     ***
        *************        ****************        ***         ***         ***      ***       ***       ***
        *************        ********                ***         ***        ***        ***     ***         ***
        **                   ***   *****             ***         ***       ***          ***   ***           ***
        **                   ***      ****           ***************      ***            *** ***             ***
        **                   ***        ****         ***************     ***              ***                 ***


        **************      ****************      **************       **************       ****************
        **************      ****************      **************       **************       ****************
        ***         **      ***          ***      ***         **       **                   ***           **
        ***         **      ***          ***      ***         **       **                   ****************
        **************      ***          ***      **************       **************       ****************
        **************      ***          ***      **************       **************       ********
        ***         **      ***          ***      ***         **       **                   ***   *****
        ***         **      ***          ***      ***         **       **                   ***      ****
        ***         **      ***          ***      ***         **       **                   ***        ****
        **************      ****************      **************       **************       ***         ****
        **************      ****************      **************       **************       ***          ****
*/
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)
#define _ ?

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 2e5 + 2;
const int mod = 1e9 + 7;

vector<int> st[MAX_N], ans;
int n, unit[MAX_N], goal[MAX_N];

void dfs(int n, int next, int nenext, int pred){
    //cout << n << endl;
    if (nenext == -1 && goal[n] != unit[n]){
        ans.pb(n);
        nenext*= -1;
        for (int i = 0; i < st[n].size(); i++)
            if (st[n][i] != pred)
            dfs(st[n][i], nenext, next, n);
    }
    else if (nenext == -1){for (int i = 0; i < st[n].size(); i++)
        if (st[n][i] != pred)
            dfs(st[n][i], nenext, next, n);}
    else if (goal[n] == unit[n])
        for (int i = 0; i < st[n].size(); i++)
        {if (st[n][i] != pred)
            dfs(st[n][i], nenext, next, n);}
    else{
        ans.pb(n);
        nenext = -1;
        for (int i = 0; i < st[n].size(); i++)
        if (st[n][i] != pred)
            dfs(st[n][i], nenext, next, n);
    }
}

int main()
{
    scanf("%d", &n);
    for (int i = 0; i < n - 1; i++){
        int a, b;
        scanf("%d%d", &a, &b);
        st[a].pb(b);
        st[b].pb(a);
    }
    for (int i = 1; i <= n; i++)
        scanf("%d", &unit[i]);
    for (int i = 1; i <= n; i++)
        scanf("%d", &goal[i]);
    dfs(1, 1, 1, 1);
    cout << ans.size() << endl;
    for (auto it : ans)
        printf("%d\n", it);
    return 0;
}
