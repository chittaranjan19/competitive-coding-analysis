#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <limits>
#include <map>
#include <utility>
using namespace std;
typedef long long int lli;
struct arista{int hacia, id;};
vector<int> hijos;
vector<int> largo;
vector<lli> usos;
vector<int> niveles;
vector<vector<arista> > tree;

int dfs(int ind, int prev,int nivel){
	int res=1;
	for(int i=0;i<tree[ind].size();++i){
		if(tree[ind][i].hacia==prev) continue;
		res+=dfs(tree[ind][i].hacia,ind,nivel+1);
	}
	hijos[ind]=res;
	niveles[ind]=nivel;
	return res;
}
int main(){
	int n;
	cin>>n;
	tree.resize(n+1);
	hijos.resize(n+1);
	largo.resize(n+1);
	niveles.resize(n+1);
	usos.resize(n+1);
	for(int i=1;i<n;++i){
		int a,b,l;
		cin>>a>>b>>l;
		arista temp;
		temp.hacia=b;temp.id=i;
		tree[a].push_back(temp);
		temp.hacia=a;temp.id=i;
		tree[b].push_back(temp);
		largo[i]=l;
	}
	dfs(1,0,0);
	double expvalue=0;
	for(int i=1;i<=n;++i){
		for(int j=0;j<tree[i].size();++j){
			if(niveles[i]>niveles[tree[i][j].hacia]) continue;
			lli a=hijos[tree[i][j].hacia];
			lli b=n-a;
			usos[tree[i][j].id]=a*b*(b-1)+b*a*(a-1);
		}
	}
	double denom=(lli)n*(n-1)*(n-2)/6;
	for(int i=1;i<=n;++i)
		expvalue+=usos[i]*largo[i]/denom;
	int q;
	cin>>q;
	cout.precision(std::numeric_limits< double >::digits10);
	for(int i=0;i<q;++i){
		int ind,val;
		cin>>ind>>val;
		int dif=largo[ind]-val;
		expvalue-=dif*usos[ind]/denom;
		largo[ind]=val;
		cout<<expvalue<<endl;
	}
	return 0;
}