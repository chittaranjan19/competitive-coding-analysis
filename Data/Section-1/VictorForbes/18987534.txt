#include <bits/stdc++.h>

#define PI 3.14159265358979323846

#define INF_1 0x3f // 0011 1111
#define INF_2 0x7f // 0111 1111

#define MOD_1 1000000007 // 10e9 + 7
#define MOD_2 1000000009 // 10e9 + 9

#define N 100001

#define pb push_back
#define eb emplace_back

using namespace std;

typedef unsigned long long ull;
typedef unsigned int ui;
typedef long long ll;

int n, m;
set <int> g[N];
int incoming_edge[N];
queue <int> q;
set <int> vertices;

bool has_edges(){
	int i;

	for (i = 1; i <= n; i++){
		if (incoming_edge[i]){
			return true;
		}
	}

	return false;
}

int main(){
	int a, b, i;

	scanf("%d%d", &n, &m);

	for (i = 0; i < m; i++){
		scanf("%d%d", &a, &b);

		g[a].insert(b);

		vertices.insert(a);
		vertices.insert(b);

		incoming_edge[b]++;
	}

	for (i = 1; i <= n; i++){
		if (!incoming_edge[i]){
			q.push(i);
		}
	}

	while (!q.empty()){
		a = q.front();
		q.pop();

		for (auto it = g[a].begin(); it != g[a].end(); it++){
			b = *it;
			// g[a].erase(b);
			incoming_edge[b]--;

			if (!incoming_edge[b]){
				q.push(b);
			}
		}
	}

	if (has_edges()){ // doesn't have topological sort.
		printf("%d\n", (int)vertices.size());
	}
	else{
		printf("%d\n", (int)vertices.size() - 1);
	}

	return 0;
}