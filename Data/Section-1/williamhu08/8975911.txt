//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1 << 17;

//this is a max segtree
int tree[2 * MAXN];

void update (int a, int v) {
	for (tree[a += MAXN] = v; a /= 2; ) {
		tree[a] = max(tree[2 * a], tree[2 * a + 1]);
	}
}

int query (int a, int b, int cur = 1, int l = 0, int r = MAXN) {
	if (r <= a || b <= l) {
		return 0;
	}
	if (a <= l && r <= b) {
		return tree[cur];
	}
	int mid = (l + r) / 2;
	return max(query(a, b, 2 * cur, l, mid), query(a, b, 2 * cur + 1, mid, r));
}

int N, arr[MAXN], L;
int leftarr[MAXN], rightarr[MAXN];	//for the lis
int appear[MAXN];

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	cin >> N;
	for (int i = 1; i <= N; i++) {
		cin >> arr[i];
	}
	//calculate left LIS
	for (int i = 1; i <= N; i++) {
		int a = arr[i];
		update(a, leftarr[i] = query(0, a) + 1);
	}
	memset(tree, 0, sizeof(tree));
	for (int i = N; i; i--) {
		int a = arr[i];
		update(a, rightarr[i] = query(a + 1, MAXN) + 1);
	}
	L = tree[1];
	for (int i = 1; i <= N; i++) {
		//if it even is in a single LIS
		if (leftarr[i] + rightarr[i] - 1 == L) {
			//if the left is unique
			appear[leftarr[i]]++;
		}
	}
	for (int i = 1; i <= N; i++) {
		cout << (leftarr[i] + rightarr[i] - 1 == L ? 2 + (appear[leftarr[i]] == 1) : 1);
	}
}