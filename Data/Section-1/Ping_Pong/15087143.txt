#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;
const int inf = (int)1e9;
const int MAX_N = 100000;
const int MOD = (int)1e9 + 7;

int n;
vector<vector<pair<int, int> > > graph(MAX_N);
bool used[MAX_N];
vector<int> ans;

bool dfs(int x, int type)
{
    bool b = false;
    used[x] = true;
    for (int i = 0; i < graph[x].size(); i++)
        if (!used[graph[x][i].first])
            b |= dfs(graph[x][i].first, graph[x][i].second);
    if ((!b) && (!type))
        ans.push_back(x);
    return b || !type;
}

int main()
{
    //freopen("slalom.in", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int s, f, t;
    cin >> n;
    for (int i = 0; i < n - 1; i++)
    {
        cin >> s >> f >> t;
        graph[s - 1].push_back(make_pair(f - 1, 2 - t));
        graph[f - 1].push_back(make_pair(s - 1, 2 - t));
    }
    for (int i = 0; i < n; i++)
        used[i] = false;
    dfs(0, 1);
    cout << ans.size() << endl;
    for (int i = 0; i < ans.size(); i++)
        cout << ans[i] + 1 << " ";
    return 0;
}
