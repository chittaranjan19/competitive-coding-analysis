#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<int> tree[100005];
LL arr[100005], neg[100005], pos[100005];

void dfs(int node, int parent)
{
  for(int i=0;i<tree[node].size();i++)
  {
    int x = tree[node][i];
    if(x == parent) continue;
    dfs(x, node);
    neg[node] = max(neg[node], neg[x]);
    pos[node] = max(pos[node], pos[x]);
  }
  arr[node]+=pos[node] - neg[node];
  if(arr[node] < 0) pos[node]-=arr[node];
  else neg[node]+=arr[node];
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("test.in", "r", stdin);
  //freopen("report.out", "w", stdout);
  int n, x, y;
  cin >> n;
  for(int i=0;i<n - 1;i++)
  {
    cin >> x >> y;
    tree[x].pb(y);
    tree[y].pb(x);
  }
  for(int i=1;i<=n;i++)
    cin >> arr[i];
  dfs(1, 1);
  cout << neg[1] + pos[1];
  return 0;
}