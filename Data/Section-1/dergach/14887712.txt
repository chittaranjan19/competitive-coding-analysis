#pragma comment(linker, "/STACK:100000000")
#include <cstdio>
#include <cstring>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string> 
#include <map>
#include <iostream>
#include <queue>
#include <time.h>
#include <set>
#include <bitset>
using namespace std;

typedef long long ll;

#define INF 1000000000
#define eps 1e-7
#define mod 1000000007
#define SHIFT 100000

int n, m, k, s;
int a[200005], b[200005];
pair <int, int> ca[200005], cb[200005];
int sza, szb;

int main()
{
    cin >> n >> m >> k >> s;
    for(int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    for(int i = 0; i < n; i++)
        scanf("%d", &b[i]);
    for(int i = 0; i < m; i++)
    {
        int t, c;
        scanf("%d %d", &t, &c);
        if(t == 1)
            ca[sza++] = make_pair(c, i + 1);
        else
            cb[szb++] = make_pair(c, i + 1);
    }
    sort(ca, ca + sza);
    sort(cb, cb + szb);
    int L = 1, R = n;
    while(L < R)
    {
        int C = (L + R) / 2;
        ll minD = 1234567, minP = 1234567;
        for(int i = 0; i < C; i++)
        {
            minD = min(minD, (ll)a[i]);
            minP = min(minP, (ll)b[i]);
        }
        int cura = 0, curb = 0, spent = 0;
        while(cura < sza || curb < szb)
        {
            if((cura < sza && curb < szb && ca[cura].first * minD < cb[curb].first * minP) || curb == szb)
            {
                if(spent + ca[cura].first * minD > s)
                    break;
                spent += ca[cura++].first * minD;
            }
            else
            {
                if(spent + cb[curb].first * minP > s)
                    break;
                spent += cb[curb++].first * minP;
            }
        }
        if(cura + curb >= k)
            R = C;
        else
            L = C + 1;
    }

    int C = R;
    ll minD = 1234567, minP = 1234567;
    for(int i = 0; i < C; i++)
    {
        minD = min(minD, (ll)a[i]);
        minP = min(minP, (ll)b[i]);
    }
    int cura = 0, curb = 0, spent = 0;
    vector <int> va, vb;
    while(cura < sza || curb < szb)
    {
        if((cura < sza && curb < szb && ca[cura].first * minD < cb[curb].first * minP) || curb == szb)
        {
            if(spent + ca[cura].first * minD > s)
                break;
            va.push_back(ca[cura].second);
            spent += ca[cura++].first * minD;
        }
        else
        {
            if(spent + cb[curb].first * minP > s)
                break;
            vb.push_back(cb[curb].second);
            spent += cb[curb++].first * minP;
        }
    }
    if(cura + curb >= k)
    {
        while(va.size() + vb.size() > k)
        {
            if(va.size() > 0)
                va.pop_back();
            else
                vb.pop_back();
        }
        printf("%d\n", R);
        for(int i = 0; i < va.size(); i++)
            printf("%d %d\n", va[i], min_element(a, a + R) - a + 1);
        for(int i = 0; i < vb.size(); i++)
            printf("%d %d\n", vb[i], min_element(b, b + R) - b + 1);
    }
    else
        puts("-1");
    return 0;
}
