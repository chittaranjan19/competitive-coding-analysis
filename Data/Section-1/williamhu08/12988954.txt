#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 155;

int N, M;

struct matrix {
	bitset<MAXN> data[MAXN];
	void operator = (const matrix &m) {
		for (int i = 0; i < N; i++) {
			data[i] = m.data[i];
		}
		// return *this;	//wow 1-sec speedup...
	}
	matrix flip() const {
		matrix res;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				res.data[i][j] = data[j][i];
			}
		}
		return res;
	}
	matrix operator * (const matrix &m) const {
		matrix f = m.flip(), res;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				res.data[i][j] = (data[i] & f.data[j]).any();
			}
		}
		return res;
	}
	void operator *= (const matrix &m) {
		(*this) = (*this) * m;
	}
} one;

matrix adj, pwr2[35];

matrix mpow (int p, bool need) {
	//need = need to compute
	matrix res = one;
	if (need) {
		pwr2[0] = adj;
	}
	for (int i = 0; p; p >>= 1, i++) {
		if (p & 1) {
			res *= pwr2[i];
		}
		if (need) {
			pwr2[i + 1] = pwr2[i] * pwr2[i];
		}
	}
	return res;
}

// int tt = clock();

// void pt() {
// 	printf("Time: %f\n", float(clock() - tt) / CLOCKS_PER_SEC);
// }

int main() {
	// atexit(pt);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		one.data[i][i] = true;
	}
	map<int, vector<pii> > mp;
	for (int i = 0, a, b, d; i < M; i++) {
		scanf("%d %d %d", &a, &b, &d);
		mp[d].push_back(pii(a - 1, b - 1));
	}
	mp[1183940279].push_back(pii(N - 1, N - 1));
	matrix cpos = one;
	adj.data[N - 1][N - 1] = true;
	int prv = 0;
	for (auto it : mp) {
		int cur = it.first;
		matrix npos = cpos * mpow(cur - prv, true);
		if (npos.data[0][N - 1]) {
			int lo = prv, hi = cur;
			while (hi - lo > 1) {
				int mid = (lo + hi) / 2;
				if ((cpos * mpow(mid - prv, false)).data[0][N - 1]) {
					hi = mid;
				} else {
					lo = mid;
				}
			}
			printf("%d\n", hi);
			return 0;
		}
		prv = cur;
		cpos = npos;
		for (pii p : it.second) {
			adj.data[p.first][p.second] = true;
		}
	}
	puts("Impossible");
}