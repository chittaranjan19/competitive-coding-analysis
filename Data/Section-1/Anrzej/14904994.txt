#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <ctime>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair
#define pb push_back

int n, m, q;
vector<int> c[111111];
vector<int> g[111111];
int tm = 0, tin[111111], tout[111111], up[20][111111];
vector<int> mn[20][111111];

vector<int> mrg(vector<int> a, vector<int> b, int k = 10)
{
	vector<int> res;
	int i = 0, j = 0;
	while ((i != a.size() && j != b.size()) && res.size() != k)
	{
		if (a[i] < b[j])
			res.push_back(a[i++]);
		else res.push_back(b[j++]);
	}
	while (i != a.size() && res.size() != k)
		res.push_back(a[i++]);
	while (j != b.size() && res.size() != k)
		res.push_back(b[j++]);
	return res;
}

void dfs(int v, int p)
{
	up[v][0] = p;
	mn[v][0] = c[p];
	tin[v] = tm++;
	for (int i = 1; i <= 19; i++)
	{
		up[v][i] = up[up[v][i - 1]][i - 1];
		mn[v][i] = mrg(mn[v][i - 1], mn[up[v][i - 1]][i - 1]);
	}
	for (int i = 0; i < g[v].size(); i++)
	{
		int to = g[v][i];
		if (to == p) continue;
		dfs(to, v);
	}
	tout[v] = tm++;
}

bool isupper(int u, int v)
{
	return (tin[u] <= tin[v] && tout[u] >= tout[v]);
}

int lca(int u, int v)
{
	if (isupper(u, v)) return u;
	if (isupper(v, u)) return v;
	for (int i = 19; i >= 0; i--)
	{
		if (!isupper(up[u][i], v))
			u = up[u][i];
	}
	return up[u][0];
}

vector<int> find(int u, int L, int k)
{
	vector<int> res;
	if (u != L)
		res = c[u];
	for (int i = 19; i >= 0; i--)
	{
		if (!isupper(up[u][i], L))
		{
			res = mrg(res, mn[u][i], k);
			u = up[u][i];
		}
	}
	return res;
}

int main()
{
	cin >> n >> m >> q;
	for (int i = 1; i < n; i++)
	{
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for (int i = 1; i <= m; i++){
		int t;
		cin >> t;
		c[t].push_back(i);
	}
	for (int i = 1; i <= m; i++)
	{
		sort(c[i].begin(), c[i].end());
		c[i].resize(min((int)c[i].size(), 10));
	}
	dfs(1, 1);
	while (q--)
	{
		int u, v, a;
		cin >> u >> v >> a;
		int L = lca(u, v);
		vector<int> res = find(u, L, a);
		res = mrg(res, find(v, L, a));
		res = mrg(res, c[L]);
		cout << min((int)res.size(), a) << ' ';
		for (int i = 0; i < min((int)res.size(), a); i++)
			cout << res[i] << ' ';
		cout << endl;
	}
	return 0;
}