import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.NavigableMap;
import java.util.NavigableSet;
import java.util.TreeMap;

public class ProblemF {
    BufferedReader rd;

    ProblemF() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        int[][] g = new int[n][2];
        NavigableMap<Integer, NavigableMap<Integer, Integer>> byA = new TreeMap<>();
        NavigableMap<Integer, NavigableMap<Integer, Integer>> byB = new TreeMap<>();
        StringBuilder buf = new StringBuilder();
        for(int i=0;i<n;i++) {
            int[] u = intarr();
            int a,b;
            NavigableMap<Integer, Integer> z;
            switch(u[0]) {
                case 1:
                    a = u[1];
                    b = u[2];
                    g[i][0] = a;
                    g[i][1] = b;
                    add(byA, a, b);
                    add(byB, b, a);
                    break;
                case 2:
                    a = g[u[1]-1][0];
                    b = g[u[1]-1][1];
                    remove(byA, a, b);
                    remove(byB, b, a);
                    break;
                case 3:
                    int q = u[1];
                    long max = Long.MIN_VALUE;
                    if(buf.length() > 0) {
                        buf.append('\n');
                    }
                    if(byA.isEmpty()) {
                        buf.append("EMPTY SET");
                    } else {
                        max = Math.max(max, process(byA.firstEntry(), q, false));
                        max = Math.max(max, process(byA.lastEntry(), q, false));
                        max = Math.max(max, process(byB.firstEntry(), q, true));
                        max = Math.max(max, process(byB.lastEntry(), q, true));
                        buf.append(max);
                    }
                    break;
            }
        }
        out(buf);
    }

    private long process(Map.Entry<Integer, NavigableMap<Integer, Integer>> e, long q, boolean rev) {
        return Math.max(process(e.getKey().longValue(), e.getValue().firstKey().longValue(), q, rev),
                process(e.getKey().longValue(), e.getValue().lastKey().longValue(), q, rev));
    }

    private long process(long x, long y, long q, boolean rev) {
        long a = rev?y:x;
        long b = rev?x:y;
        return a*q+b;
    }

    private void add(NavigableMap<Integer, NavigableMap<Integer, Integer>> byA, int a, int b) {
        NavigableMap<Integer, Integer> z = byA.computeIfAbsent(a, k -> new TreeMap<>());
        z.put(b, z.getOrDefault(b, 0)+1);
    }

    private void remove(NavigableMap<Integer, NavigableMap<Integer, Integer>> byA, int a, int b) {
        NavigableMap<Integer, Integer> z = byA.get(a);
        if(z.size() == 1 && z.get(b).equals(1)) {
            byA.remove(a);
        } else {
            z.put(b, z.get(b)-1);
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemF();
    }
}
