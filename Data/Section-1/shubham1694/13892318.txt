#include <bits/stdc++.h>

using namespace std;

vector<pair<int, int> > v;
vector<int> compress;
map<int, int> m1;
int dp[200001], ft[500010], lim = 500001;

int rmq(int idx)
{
    int ret = 0;
    while(idx>0){
        ret = max(ret, ft[idx]);
        idx-=(idx&(-idx));
    }
    return ret;
}

void update(int idx, int val)
{
    while(idx<=lim){
        ft[idx]=max(val, ft[idx]);
        idx+=(idx&(-idx));
    }
}

int main()
{
    int n, i, j, ans=0, cur;
    scanf("%d", &n);
    v.resize(n);
    for(i=0; i<n; i++){
        scanf("%d%d", &v[i].first, &v[i].second);
        m1[v[i].first+v[i].second];
        m1[v[i].first-v[i].second];
    }
    j = 1;
    for(auto it=m1.begin(); it!=m1.end(); ++it)
        it->second = j++;
    sort(v.begin(), v.end());
    sort(compress.begin(), compress.end());
    for(i=0; i<n; i++){
        j = m1[v[i].first-v[i].second];
        cur = rmq(j)+1;
        ans = max(ans, cur);
        j = m1[v[i].first+v[i].second];
        update(j, cur);
    }
    printf("%d\n", ans);
    return 0;
}