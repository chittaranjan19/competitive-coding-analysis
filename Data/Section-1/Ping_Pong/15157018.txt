#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;
const long long inf = (long long)2 * 1e18;
const long long MOD = (long long)1e9 + 7;
const long long MAX_N = 100000;

int main()
{
    //freopen("ladder.in", "r", stdin);
    //freopen("ladder.out", "w", stdout);
    //ios_base::sync_with_stdio(false);
    //cin.tie(NULL);
    set<long long> s;
    set<long long>::iterator it;
    long long n, k;
    cin >> n >> k;
    long long a[n], p[n], q[n];
    for (long long i = 0; i < n; i++)
        cin >> a[i];
    for (long long i = 0; i < n; i++)
    {
        it = s.lower_bound(a[i]);
        if (it != s.begin())
        {
            it--;
            p[i] = *it;
        }
        else
            p[i] = -1;
        s.insert(a[i]);
    }
    /*for (long long i = 0; i < n; i++)
        cout << p[i] << " ";
    cout << endl;*/
    for (long long i = 0; i < n; i++)
        q[a[i] - 1] = i;
    long long dp[k + 1][n];
    for (long long j = 0; j < n; j++)
        dp[0][j] = 1;
    for (long long i = 1; i < k + 1; i++)
        for (long long j = 0; j < n; j++)
            if (p[j] == -1)
                dp[i][j] = 0;
            else
                dp[i][j] = dp[i][q[p[j] - 1]] + dp[i - 1][q[p[j] - 1]];
    long long ans = 0;
    for (long long j = 0; j < n; j++)
        ans += dp[k][j];
    cout << ans;
    return 0;
}
