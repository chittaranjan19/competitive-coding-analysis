#include <iostream>
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<ll, int> P;
typedef pair<P, P> PP;

const int maxn = 3e5 + 100;
const ll INF = 1LL << 60;

struct edge
{
    int from, to, num, cost;
    edge(int from = 0, int to = 0, int num = 0, int cost = 0) : from(from), to(to), num(num), cost(cost) {}
};
vector<edge> E;
vector<int> t, V[maxn];
ll d[maxn];
ll cost[maxn];

ll Tree(int u, int n)
{
    priority_queue<PP, vector<PP>, greater<PP> > q;
    fill(cost + 1, cost + n + 1, INF);
    cost[u] = 0;
    ll res = 0;
    for(int i = 0; i < V[u].size(); ++i)
    {
        edge e = E[V[u][i]];
        int k = u == e.from ? e.to : e.from;
        cost[k] = e.cost;
        q.push(PP(P(d[k], e.cost), P(e.num, k)));
    }
    while(!q.empty())
    {
        PP p = q.top();
        q.pop();
        int v = p.second.second;
        if(p.first.second != cost[v])
        {
            continue;
        }
        res += cost[v];
        t.push_back(p.second.first + 1);
        for(int i = 0; i < V[v].size(); ++i)
        {
            edge e = E[V[v][i]];
            int k = v == e.from ? e.to : e.from;
            if(d[k] == d[v] + e.cost && cost[k] > e.cost)
            {
                cost[k] = e.cost;
                q.push(PP(P(d[k], cost[k]), P(e.num, k)));
            }
        }
    }
    return res;
}

void Dijkstra(int u, int n)
{
    priority_queue<P, vector<P>, greater<P> >q;
    fill(d + 1, d + n + 1, INF);
    d[u] = 0;
    q.push(P(0, u));
    while(!q.empty())
    {
        P p = q.top();
        q.pop();
        int v = p.second;
        if(d[v] != p.first)
        {
            continue;
        }
        for(int i = 0; i < V[v].size(); ++i)
        {
            edge e = E[V[v][i]];
            int k = v == e.from ? e.to : e.from;
            if(d[k] > d[v] + e.cost)
            {
                d[k] = d[v] + e.cost;
                q.push(P(d[k], k));
            }
        }
    }
}

int main()
{
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < m; ++i)
    {
        int x, y, l;
        cin >> x >> y >> l;
//        E[x].push_back(edge(y, i, l));
//        E[y].push_back(edge(x, i, l));
        E.push_back(edge(x, y, i, l));
        V[x].push_back(i);
        V[y].push_back(i);
    }
    int u;
    cin >> u;
    Dijkstra(u, n);
    cout << Tree(u, n) << endl;
    for(int i = 0; i < t.size(); ++i)
    {
        cout << t[i] << (i != t.size() ? ' ' : '\n');
    }
    return 0;
}
