#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <ctime>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

int n;
int a[111111], ans[111111];

vector<int> g[111111];

vector<vector<int> > sz[111111];

bool used[111111];
vector<int> ckl;

void dfs(int v)
{
	ckl.push_back(v);
	used[v] = 1;
	for (int i = 0; i < g[v].size(); i++)
	{
		if (!used[g[v][i]])
			dfs(g[v][i]);
	}
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i + 1];
	for (int i = 1; i <= n; i++)
	{
		g[i].push_back(a[i]);
		//g[a[i]].push_back(i);
	}
	for (int i = 1; i <= n; i++)
	{
		if (!used[i])
		{
			ckl.clear();
			dfs(i);
			sz[ckl.size()].push_back(ckl);
		}
	}
	for (int i = 0; i <= n; i++)
	{
		if (sz[i].size() % 2 != 0 && i % 2 == 0)
		{
			cout << -1;
			return 0;
		}
		if (sz[i].size() % 2 == 1)
		{
			vector<int> v;
			for (int j = 0; j < sz[i].size(); j++)
			{
				for (int k = 0; k < sz[i][j].size(); k++)
					ans[sz[i][j][k]] = sz[i][j][(k+1 + i/2) % i];
			}
		}
		else
		{
			for (int j = 0; j < sz[i].size(); j += 2)
			{
				for (int k = 0; k < sz[i][j].size(); k++)
				{
					ans[sz[i][j][k]] = sz[i][j + 1][(k) % i];
					ans[sz[i][j + 1][k]] = sz[i][j][(k + 1) % i];
				}
			}
		}
	}
	for (int i = 1; i <= n; i++)
		cout << ans[i] << ' ';
	return 0;
}