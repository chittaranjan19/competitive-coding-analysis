#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

typedef long long ll;
typedef pair<ll, int> pli;

const int maxn = 2e7 + 5;
const ll INF = 1LL << 59;

ll d[maxn];
bool used[maxn];

ll dijkstra(int t, int x, int y)
{
    priority_queue<pli, vector<pli>, greater<pli> > pque;
    fill(d, d + maxn, INF);
    d[0] = 0;
    pque.push(pli(d[0], 0));
    while(!pque.empty())
    {
        pli p = pque.top();
        pque.pop();
        int u = p.second;
        if(used[u]) continue;
        used[u] = true;
        if(u == t) break;
        if(u && d[u - 1] > d[u] + x)
        {
            d[u - 1] = d[u] + x;
            pque.push(pli(d[u - 1], u - 1));
        }
        if(u + 1 <= 2 * t && d[u + 1] > d[u] + x)
        {
            d[u + 1] = d[u] + x;
            pque.push(pli(d[u + 1], u + 1));
        }
        if(u < t && d[2 * u] > d[u] + y)
        {
            d[2 * u] = d[u] + y;
            pque.push(pli(d[2 * u], 2 * u));
        }
    }
    return d[t];
}

int main()
{
    int n, x, y;
    cin >> n >> x >> y;
    cout << dijkstra(n, x, y) << endl;
    return 0;
}
