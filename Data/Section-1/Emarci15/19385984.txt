#include <cstdio>
#include <algorithm>

using namespace std;

int n,k;
int uni[200000];
int d[200000];
int elso[200000];
int kov[400000];
int hova[400000];

int db[200000];
int apa[200000];

long long ret;

int stck[200000],QQ[200000],stckv;

void dfs(int P) {
    stckv = 0;
    stck[0] = P;
    QQ[0] = -1;

    while(stckv>=0) {
        int p = stck[stckv];
        if(QQ[stckv] < 0) {
            QQ[stckv] = elso[p];
        } else {
            uni[p] += uni[hova[QQ[stckv]]];
            QQ[stckv] = kov[QQ[stckv]];
        }

        bool bl(0);
        for(; QQ[stckv]>=0; QQ[stckv] = kov[QQ[stckv]]) {
            if(apa[p] == hova[QQ[stckv]]) continue;

            d[hova[QQ[stckv]]] = d[p]+1;
            apa[hova[QQ[stckv]]] = p;
            stck[stckv+1] = hova[QQ[stckv]];
            QQ[stckv+1] = -1;
            stckv++;
            bl = 1;
            break;
        }
        if(!bl) {
            ret += min(uni[p],2*k-uni[p]);
            stckv--;
        }
    }
}

void scan(int &x) {
    x = 0; char c=getchar(); while(c<'0') c = getchar();
    do { x=(x<<3) + (x<<1) + c - '0'; c = getchar(); } while(c>='0');
}

int main()
{
    scan(n); scan(k);
    for(int i=0; i<2*k; i++) {
        int x; scan(x); x--;
        uni[x] = 1;
    }

    for(int i=0; i<n; i++) elso[i] = -1;

    for(int i=0; i<n-1; i++) {
        int x,y; scan(x); scan(y); x--; y--;
        kov[2*i] = elso[x];
        hova[2*i] = y;
        elso[x] = 2*i;

        kov[2*i+1] = elso[y];
        hova[2*i+1] = x;
        elso[y] = 2*i+1;
    }

    apa[0] = -1;
    dfs(0);

    printf("%I64d\n",ret);

    return 0;
}
