#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef pair<int, int> P;

const int MAXN = 200000 + 5;
const int INF = 1e9 + 7;

P p[MAXN];
int a[MAXN];
struct segtree
{
    int node[MAXN << 2];

    void pushup(int rt)
    {
        node[rt] = max(node[rt << 1], node[rt << 1 | 1]);
    }

    void build()
    {
        memset(node, 0, sizeof(node));
    }

    void update(int rt, int l, int r, int p, int a)
    {
        if(l == r)
        {
            node[rt] = max(node[rt], a);
            return;
        }
        int m = (l + r) >> 1;
        p <= m ? update(rt << 1, l, m, p, a) : update(rt << 1 | 1, m + 1, r, p, a);
        pushup(rt);
    }

    int query(int rt, int l, int r, int x, int y)
    {
        if(x <= l && r <= y) return node[rt];
        int m = (l + r) >> 1, res = 0;
        if(x <= m)
        {
            res = max(res,query(rt << 1, l, m, x, y));
        }
        if(m < y)
        {
            res = max(res, query(rt << 1 | 1, m + 1, r, x, y));
        }
        return res;
    }
} tree;

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        tree.build();
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d%d", &p[i].first, &p[i].second);
            a[i] = p[i].first + p[i].second;
        }
        a[0] = -INF;
        sort(a, a + n + 1);
        sort(p + 1, p + n + 1);
        int m = unique(a, a + n + 1) - a;
        for(int i = 1; i <= n; ++i)
        {
            int k = upper_bound(a, a + m, p[i].first - p[i].second) - a - 1;
            int tmp = tree.query(1, 0, m - 1, 0, k) + 1;
            k = lower_bound(a, a + m, p[i].first + p[i].second) - a;
//            cout << tmp << endl;
            tree.update(1, 0, m - 1, k, tmp);
        }
        printf("%d\n", tree.query(1, 0, m - 1, 0, m - 1));
    }
    return 0;
}
