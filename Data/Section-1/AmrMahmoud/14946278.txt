#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> arr[100005];
int DP[100005];

int main()
{
  int n;
  scanf("%d", &n);
  for(int i=0;i<n;i++)
    scanf("%d %d", &arr[i].f, &arr[i].s);
  if(n == 1)
  {
    cout << 0;
    return 0;
  }
  sort(arr, arr + n);
  int res = INF_MAX;
  for(int i=1;i<n;i++)
  {
    int L = 0, R = i - 1;
    while(R > L)
    {
      int mid = L + (R - L) / 2;
      if(arr[mid].f < arr[i].f - arr[i].s)
        L = mid + 1;
      else R = mid;
    }
    if(arr[R].f < arr[i].f - arr[i].s)
      R++;
    DP[i] = i - R;
    if(R) DP[i] += DP[R - 1];
    res = min(n - i - 1 + DP[i], res);
  }
  cout << res;
  return 0;
}
