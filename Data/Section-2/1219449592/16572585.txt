#include <bits/stdc++.h>
#define ll long long
#define N	200010
using namespace std;
struct point{
	int x, y;
}node[N];
bool cmp_x(point a, point b)
{
	if (a.x == b.x)	return a.y < b.y;
	return a.x < b.x;
}
bool cmp_y(point a, point b)
{
	return a.y < b.y;
}
map<int,int> mx, my;
int main()
{
#ifndef ONLINE_JUDGE
//	freopen("1.txt", "r", stdin);
#endif
	int i, j, k, n, xx, yy;
	ll ans = 0, t, tmp;
	map<int,int>::iterator it;
	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		scanf("%d%d", &node[i].x, &node[i].y);
		if (mx.find(node[i].x) == mx.end())
		{
			mx.insert(pair<int,int>(node[i].x, 1));
		}
		else
		{
			mx[node[i].x]++;
		}
		if (my.find(node[i].y) == my.end())
		{
			my.insert(pair<int,int>(node[i].y, 1));
		}
		else
		{
			my[node[i].y]++;
		}
	}
	for (it = mx.begin(); it != mx.end(); it++)
	{
//		cout << it->first << "  " << it->second << endl;
		ans += it->second*(it->second-1)/2;
	}
//	cout << endl << endl;
	for (it = my.begin(); it != my.end(); it++)
	{
//		cout << it->first << "  " << it->second << endl;
		ans += it->second*(it->second-1)/2;
	}
	sort(node, node+n, cmp_x);
	t = 1;
	for (i = 1; i < n; i++)
	{
		if (node[i].x == node[i-1].x && node[i].y == node[i-1].y)
		{
			t++;
		}
		else
		{
			ans -= t*(t-1)/2;
			t = 1;
		}
	}
	ans -= t*(t-1)/2;
	cout << ans;
//	tmp = 1;
//	for (i = 1; i < n; i++)
//	{
//		if (node[i-1].x == node[i].x)
//		{
//			t++;
//			if (node[i-1].y == node[i].y)
//			{
//				tmp++;
//			}
//			else
//			{
//				ans -= tmp*(tmp-1)/2;
//				tmp = 1;
//			}
//		}
//		else
//		{
//			ans += t*(t-1)/2;
//			t = 1;
//		}
//	}
//	ans += t*(t-1)/2;
//	sort(node, node+n, cmp_y);
//	t = 1;
//	tmp = 1;
//	for (i = 1; i < n; i++)
//	{
//		if (node[i-1].y == node[i].y)
//		{
//			t++;
//		}
//		else
//		{
//			ans += t*(t-1)/2;
//			t = 1;
//		}
//	}
//	ans += t*(t-1)/2;
//	cout << ans;
	return 0;
}
