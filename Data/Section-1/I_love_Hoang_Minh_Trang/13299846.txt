using namespace std;
#include<bits/stdc++.h>
#define FOR(i, a, b) for (int i = a; i < b; i++)
#define FORE(i, a, b) for (int i = a; i <= b; i++)
#define FORD(i, a, b) for (int i = a; i >= b; i--)
const int MAXN = 2*1e5;
const int INF  = 1e9 + 7;

vector< int > adj[MAXN];
int n, k, vet[MAXN], d[MAXN], dd[MAXN];

void dfs(int u)
{
    vet[u] = 1;
    for(int i = 0; i < adj[u].size(); i++) {
        int v = adj[u][i];
        if (!vet[v]) {
            d[v] = d[u] + 1;
            dfs(v);
        }
    }
}

int main()
{
    ios::sync_with_stdio(false); cin.tie(0);
    //freopen("161D.inp", "r", stdin);
    //freopen("161D.out", "w", stdout);
    cin >> n >> k;
    FORE(i, 1, n - 1) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    d[1] = 1;
    dfs(1);
    long long ans = 0;
    FORE(i, 1, n) dd[d[i]]++;
    int top = 0;
    FORE(i, 1, n) top = max(top, d[i]);
    //FORE(i, 1, n) cout<<d[i]<<" ";cout<<endl;
    //FORE(i, 1, top) cout<<dd[i]<<" ";cout<<endl;
    FORE(i, 1, n) {
        //if (d[i] - k > 0) ans+=dd[d[i] - k];
        if (d[i] + k <= top) ans += dd[d[i] + k];
    }
    cout<<ans;
    return 0;
}
