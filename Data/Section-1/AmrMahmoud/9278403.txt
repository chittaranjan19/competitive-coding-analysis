#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

double DP[5001][5001];
double arr[5001];
int maxt[5001], n, t;

int main()
{
    ios_base::sync_with_stdio(0);
    cin >> n >> t;
    for(int i=1;i<=n;i++)
        cin >> arr[i] >> maxt[i], arr[i]/=100;
    DP[0][0] = 1.0;
    double res = 0.0;
    for(int i=1;i<=n;i++)
    {
        double p ,pp;
        pp = pow(1 - arr[i], maxt[i] - 1);
        p = pp * (1 - arr[i]);
        for(int j=i;j<=t;j++)
        {
            DP[i][j] = DP[i][j-1] * (1 - arr[i]);
            DP[i][j]+=DP[i - 1][j - 1] * arr[i];
            if(j - i + 1 > maxt[i])
                DP[i][j]-= p * DP[i-1][j - maxt[i] - 1];
            if(j - i + 1 >= maxt[i])
            {
                DP[i][j]-=arr[i] * pp * DP[i-1][j - maxt[i]];
                DP[i][j]+=pp * DP[i-1][j - maxt[i]];
            }
        }
        double temp = 0.0;
        double tmp = 1.0;
        for(int j=t;j>=0 && (i == n || j + maxt[i+1] > t);j--)
        {
            temp+= tmp * DP[i][j];
            if(i != n) tmp *= (1 - arr[i+1]);
        }
        res+= temp * i;
    }
    printf("%.10f",res);
    return 0;
}