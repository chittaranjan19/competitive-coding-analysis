#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

const int MaxVal = 100005;
int tree[MaxVal], arr[MaxVal];

void update(int idx, int val)
{
  if(idx <= 0) return;
  while (idx <= MaxVal && idx > 0){
    tree[idx] = tree[idx] + val;
    idx = idx + (idx & -idx);
  }
}

int read(int idx)
{
  if(idx <= 0) return 0;
  int sum = 0;
  while (idx > 0 && idx <= MaxVal){
    sum = sum + tree[idx];
    idx = idx - (idx & -idx);
  }
  return sum;
}

int main()
{
  //freopen("seaport.in", "r", stdin);
  //freopen("seaport.out", "w", stdout);
  int n, q, x, y;
  scanf("%d %d", &n, &q);
  for(int i=0;i<n;i++)
  {
    update(i + 1, 1);
    arr[i] = 1;
  }
  int L = 0, R = n - 1;
  bool reversed = false;
  while(q--)
  {
    scanf("%d", &x);
    if(x == 1)
    {
      scanf("%d", &x);
      if(x <= (R - L + 1) - x)
      {
        if(!reversed)
        {
          for(int i=0;i<x;i++)
          {
            update(L + x + i + 1, arr[L + x - i - 1]);
            arr[L + x + i] += arr[L + x - i - 1];
          }
          L += x;
        }
        else
        {
          for(int i=0;i<x;i++)
          {
            update(R - x - i + 1, arr[R - x + i + 1]);
            arr[R - x - i] += arr[R - x + i + 1];
          }
          R -= x;
        }
      }
      else
      {
        x = (R - L + 1) - x;
        if(!reversed)
        {
          for(int i=0;i<x;i++)
          {
            update(R - x - i + 1, arr[R - x + i + 1]);
            arr[R - x - i] += arr[R - x + i + 1];
          }
          R -= x;
        }
        else
        {
          for(int i=0;i<x;i++)
          {
            update(L + x + i + 1, arr[L + x - i - 1]);
            arr[L + x + i] += arr[L + x - i - 1];
          }
          L += x;
        }
        reversed = !reversed;
      }
    }
    else
    {
      scanf("%d %d", &x, &y);
      y--;
      if(!reversed) printf("%d\n", read(y + L + 1) - read(x + L));
      else printf("%d\n", read(R - x + 1) - read(R - y));
    }
  }
  return 0;
}
