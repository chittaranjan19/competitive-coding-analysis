import java.io.BufferedInputStream;
import java.util.*;

/**
 * Created by leen on 6/2/16.
 */
public class Main {

    static int[][] DELTAS = new int[][] {
            {-1, 0},
            {0, -1},
            {1, 0},
            {0, 1}
    };

    public static void main(String[] args) {
        Scanner scan = new Scanner(new BufferedInputStream(System.in));
        while(scan.hasNext()) {
            int numRows = scan.nextInt();
            int numCols = scan.nextInt();
            int numTypes = scan.nextInt();
            int[][] grids = new int[numRows][numCols];
            ArrayList<Point>[] pointsByType = new ArrayList[numTypes + 1];


            ArrayList<Point> points0 = new ArrayList<Point>(1);
            points0.add(new Point(0, 0, 0));
            pointsByType[0] = points0;

            for(int x = 1; x <= numTypes; x++)
                pointsByType[x] = new ArrayList<Point>();

            for (int i = 0; i < numRows; i++) {
                for (int j = 0; j < numCols; j++) {
                    int type = scan.nextInt();
                    pointsByType[type].add(new Point(i, j, Integer.MAX_VALUE));
                }
            }

            for (int t = 1; t <= numTypes; t++) {
                List<Point> points = pointsByType[t];
                List<Point> lastPoints = pointsByType[t - 1];

                if(points.size() * lastPoints.size() <= 30 * numRows * numCols) {
                    for (Point p : points) {
                        for (Point lp : lastPoints) {
                            int newDist = lp.calcDistance(p) + lp.minDistance;
                            if (newDist < p.minDistance)
                                p.minDistance = newDist;
                        }
                    }
                }
                else {
                    for(int[] gridsRow : grids)
                        Arrays.fill(gridsRow, -1);

                    Queue<Point> queue = new LinkedList<Point>();
                    for(Point p : lastPoints) {
                        queue.offer(p);
                        grids[p.x][p.y] = p.minDistance;
                    }

                    while(!queue.isEmpty()) {
                        Point p = queue.poll();
                        for(int k = 0; k < 4; k++) {
                            int[] delta = DELTAS[k];
                            int neibourX = p.x + delta[0], neibourY = p.y + delta[1];

                            if(neibourX < 0 || neibourX >= numRows || neibourY < 0 || neibourY >= numCols)
                                continue;

                            int currentDistanceOfNeibour = grids[neibourX][neibourY];
                            if(currentDistanceOfNeibour == -1 || currentDistanceOfNeibour > p.minDistance + 1) {
                                grids[neibourX][neibourY] = p.minDistance + 1;
                                queue.offer(new Point(neibourX, neibourY, p.minDistance + 1));
                            }
                        }
                    }

                    for(Point p : points)
                        p.minDistance = grids[p.x][p.y];
                }
            }

            System.out.println(pointsByType[numTypes].get(0).minDistance);
        }
    }

    static class Point {
        final int x;
        final int y;
        Point next;
        int minDistance;

        Point(int x, int y, int minDistance) {
            this.x = x;
            this.y = y;
            this.minDistance = minDistance;
        }

        @Override
        public int hashCode() {
            return x ^ y;
        }

        @Override
        public boolean equals(Object obj) {
            if(obj instanceof Point) {
                Point that = (Point) obj;
                return minDistance == that.minDistance && x == that.x && y == that.y;
            }
            else
                return false;
        }

        int calcDistance(Point that) {
            return Math.abs(x - that.x) + Math.abs(y - that.y);
        }

    }
}