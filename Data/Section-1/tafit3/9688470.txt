import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class ProblemB {
    BufferedReader rd;

    private ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        rd.readLine();
        int[] d = intarr();
        int[] c = intarr();
        int n = d.length;

        {
            int g = d[0];
            for(int i=1;i<n;i++) {
                g = gcd(g,d[i]);
            }
            if(g > 1) {
                out(-1);
                return;
            }
        }
        Map<Integer, Integer> byLen = new HashMap<>();
        for(int i=0;i<n;i++) {
            int dd = reduceDivisors(d[i]);
            Integer cost = byLen.get(dd);
            if(cost == null) {
                cost = c[i];
            } else {
                cost = Math.min(c[i], cost);
            }
            byLen.put(dd, cost);
        }
        n = byLen.size();
        d = new int[n];
        c = new int[n];
        {
            int i = 0;
            for(Map.Entry<Integer, Integer> e: byLen.entrySet()) {
                d[i] = e.getKey();
                c[i] = e.getValue();
                i++;
            }
        }
        Map<Integer, Integer> combined = new HashMap<>();
        Integer one = byLen.get(1);
        if(one != null) {
            combined.put(1, one);
        }
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(i!=j) {
                    int g = gcd(d[i],d[j]);
                    relax(combined, g, c[i] + c[j]);
                }
            }
        }
        boolean changed = true;
        while(changed) {
            changed = false;
            Set<Integer> keys = new HashSet<>(combined.keySet());
            keys.remove(1);
            for(Integer key: keys) {
                for(int i=0;i<n;i++) {
                    int g = gcd(key, d[i]);
                    if(g != key) {
                        if(relax(combined, g, combined.get(key) + c[i])) {
                            changed = true;
                        }
                    }
                }
            }
        }
        out(combined.get(1));
    }

    private int reduceDivisors(int x) {
        int r = 1;
        int k = x;
        int s = 2;
        while(k > 1 && s*s <= x) {
            if(k%s==0) {
                r *= s;
                while(k%s==0) {
                    k/=s;
                }
            }
            if(s==2) {
                s++;
            } else {
                s+= 2;
            }
        }
        if(k > 1) {
            r *= k;
        }
        return r;
    }

    private boolean relax(Map<Integer, Integer> combined, int len, int cost) {
        boolean was = false;
        Integer cur = combined.get(len);
        if(cur == null || cost < cur) {
            cur = cost;
            was = true;
        }
        combined.put(len, cur);
        return was;
    }


    public static int gcd(int a, int b) {
        while (b > 0) {
            int c = a % b;
            a = b;
            b = c;
        }
        return a;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        int n = s.length();
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
