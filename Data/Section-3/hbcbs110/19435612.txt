#include<iostream>
#include<cstdio>
using namespace std;
const long long mod=1000000007;
struct Matrix
{
    long long m[2][2];
    void MOD()
    {
        m[0][0]%=mod;
        m[0][1]%=mod;
        m[1][0]%=mod;
        m[1][1]%=mod;
    }
    void unt()
    {
        m[0][0]=1;
        m[1][0]=0;
        m[0][1]=0;
        m[1][1]=1;
    }
};
Matrix mmmp(Matrix A,Matrix B)
{
    Matrix ans;
    ans.m[0][0]=A.m[0][0]*B.m[0][0]%mod+A.m[0][1]*B.m[1][0]%mod;
    ans.m[0][1]=A.m[0][0]*B.m[0][1]%mod+A.m[0][1]*B.m[1][1]%mod;
    ans.m[1][0]=A.m[1][0]*B.m[0][0]%mod+A.m[1][1]*B.m[1][0]%mod;
    ans.m[1][1]=A.m[1][0]*B.m[0][1]%mod+A.m[1][1]*B.m[1][1]%mod;
    ans.MOD();
    return ans;
}
Matrix qpow(Matrix A,long long n)
{
    Matrix ans;
    ans.unt();
    while(n)
    {
        if(n%2) ans=mmmp(ans,A);
        A=mmmp(A,A);
        n>>=1;
    }
    return ans;
}
int main()
{
    long long n,x,ans;
    Matrix ndx;
    cin>>ndx.m[0][0]>>ndx.m[0][1]>>n>>x;
    ndx.m[1][0]=0;
    ndx.m[1][1]=1;
    ndx=qpow(ndx,n);
    ans=ndx.m[0][0]*x%mod+ndx.m[0][1];
    ans%=mod;
    cout<<ans<<endl;
    return 0;
}
