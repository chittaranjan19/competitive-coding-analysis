#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<pair<int, int>, int> arr[200005];
int sum[205];
int cnt[200005];
int tree[400005];
int tree2[400005];
int pos[200005];

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("funny.in", "r", stdin);
  //freopen("funny.out", "w", stdout);
  int n;
  cin >> n;
  for(int i=0;i<n;i++)
  {
    cin >> arr[i].f.f;
    cnt[arr[i].f.f]++;
    arr[i].s = i;
  }
  for(int i=0;i<n;i++)
  {
    cin >> arr[i].f.s;
    sum[arr[i].f.s]++;
  }
  sort(arr, arr + n);
  int res = 0, sol = INF;
  for(int i=n-1;i>=0;i--)
  {
    if(i != n - 1 && arr[i].f.f == arr[i + 1].f.f)
      continue;
    for(int j=0;j<cnt[arr[i].f.f];j++)
      sum[arr[i-j].f.s]--;
    if(cnt[arr[i].f.f] > (i + 1) / 2)
      sol = min(sol, res);
    else
    {
      int tmp = res, rem = min(i + 1 - cnt[arr[i].f.f], i + 1 - (cnt[arr[i].f.f] * 2 - 1));
      for(int i=1;i<=200 && rem && tmp < sol;i++)
      {
        int nxt = min(rem, sum[i]);
        rem-=nxt;
        tmp+=i * nxt;
      }
      sol = min(sol, tmp);
    }
    for(int j=0;j<cnt[arr[i].f.f];j++)
      res+=arr[i-j].f.s;
  }
  cout << sol;
  return 0;
}
