#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <fstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
#include <bitset>
using namespace std;

typedef long long ll;
typedef long long ull;
#define pi acos(-1.0)
#define eps 1e-7
#define start 131072
#define LINF 1000000000000000000LL
#define pi acos(-1.0)
#define SHIFT 225000
#define mod 10007

int n;

int check(int x1, int y1, int x2, int y2)
{
	printf("? %d %d %d %d\n", x1, y1, x2, y2);
	fflush(stdout);
	int cnt;
	scanf("%d", &cnt);
	return cnt;
}

void findBorders(int &x1, int &y1, int &x2, int &y2, int cnt)
{
	//determine right border
	int L = x1, R = x2;
	while(L < R)
	{
		int C = (L + R) / 2;
		if(check(x1, y1, C, y2) == cnt)
			R = C;
		else
			L = C + 1;
	}
	x2 = R;

	//determine left border
	L = x1; R = x2;
	while(L < R)
	{
		int C = (L + R + 1) / 2;
		if(check(C, y1, x2, y2) == cnt)
			L = C;
		else
			R = C - 1;
	}
	x1 = R;

	//determine top border
	L = y1; R = y2;
	while(L < R)
	{
		int C = (L + R) / 2;
		if(check(x1, y1, x2, C) == cnt)
			R = C;
		else
			L = C + 1;
	}
	y2 = R;

	//determine bottom border
	L = y1; R = y2;
	while(L < R)
	{
		int C = (L + R + 1) / 2;
		if(check(x1, C, x2, y2) == cnt)
			L = C;
		else
			R = C - 1;
	}
	y1 = R;
}
 
int main()
{
	scanf("%d", &n);

	int x1 = 1, y1 = 1, x2 = n, y2 = n;
	findBorders(x1, y1, x2, y2, 2);
	
	int x11 = x1, y11 = y1, x12 = x2, y12 = y2;
	int x21 = x1, y21 = y1, x22 = x2, y22 = y2;

	bool hasCommonRightBorder = (x11 == x12 || check(x11, y11, x12 - 1, y12) == 0);
	bool hasCommonLeftBorder = (x11 == x12 || check(x11 + 1, y11, x12, y12) == 0);
	if(!hasCommonRightBorder && !hasCommonLeftBorder)
	{
		x12 -= 1;
		findBorders(x11, y11, x12, y12, 1);
		if(x11 == x1)
		{
			x21 += 1;
			findBorders(x21, y21, x22, y22, 1);
		}
		else
			if(y11 == y1)
			{
				y21++;
				findBorders(x21, y21, x22, y22, 1);
			}
			else
			{
				y22--;
				findBorders(x21, y21, x22, y22, 1);
			}
	}
	else
	{
		y11++;
		y22--;
		findBorders(x11, y11, x12, y12, 1);
		findBorders(x21, y21, x22, y22, 1);
	}

	printf("! %d %d %d %d %d %d %d %d\n", x11, y11, x12, y12, x21, y21, x22, y22);
	fflush(stdout);
	
	return 0;
}