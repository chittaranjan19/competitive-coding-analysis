#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define INRANGE0(x, n) ((x) > -1 && (x) < n)
#define INRANGE(x, a, b) ((x) >= a && (x) <= b)
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INCMOD(a,b,c) (((a)+b)%c)
#define DECMOD(a,b,c) (((a)+c-b)%c)
#define ROUNDINT(a) (int)((double)(a) + 0.5)
#define INF 2000000000
#define EPS 1e-9
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL  //J PRIMEIROS
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//scanf(" %d ", &t);
#define DFS_WHITE -1
#define DFS_BLACK 1
#define DFS_GRAY 2

vi pset;
vi psize;
 
void initSet(int N){
	pset.assign(N, 0);
	psize.assign(N, 1);
	for(int i = 0; i<N; i++) pset[i] = i;
}
 
int findSet(int i){
	return (pset[i] == i) ? i : (pset[i] = findSet(pset[i]));
}
 
bool isSameSet(int i, int j){
	return findSet(i) == findSet(j);
}
 
int unionSet(int i, int j){
	if(isSameSet(i,j)) return psize[findSet(j)];
	if(psize[findSet(j)] < psize[findSet(i)]) return unionSet(j, i);
	psize[findSet(j)] += psize[findSet(i)];
	pset[findSet(i)] = findSet(j);
	return psize[findSet(j)];
}

int n, m, u, v;
int li[10100][2];

int main(){
	scanf(" %d %d ", &n, &m);
	REPP(i, 1, m+1){
		scanf(" %d %d ", &u, &v);
		li[i][0] = u; li[i][1] = v;
	}
	int cc, k;
	int l, r;
	scanf(" %d ", &k);
	REP(i, k){
		int vert = 0;
		cc = 0;
		scanf(" %d %d ", &l, &r);
		initSet(n+1);
		REPP(j, 1, l) unionSet(li[j][0], li[j][1]);
		REPP(j, r+1, m+1) unionSet(li[j][0], li[j][1]);
		bitset<510> vis; vis.reset();
		REPP(j, 1, n+1){
			if(!vis[findSet(j)]){
				cc++;
				vis[findSet(j)] = true;
			}
		}
		printf("%d\n", cc);
	}
}
