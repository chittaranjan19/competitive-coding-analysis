#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int tree[400005][60];
int arr[100005];

void build(int i,int L,int R)
{
    if(L == R)
    {
        for(int j=0;j<60;j++)
            tree[i][j] = 2 - (j % arr[L] != 0);
        return ;
    }
    build(i*2 + 1, L, (L + R) / 2);
    build(i*2 + 2, (L + R) / 2 + 1, R);
    for(int j=0;j<60;j++)
        tree[i][j] = tree[i*2 + 1][j] + tree[i*2 + 2][(j + tree[i*2 + 1][j]) % 60];
}

void update(int i,int L,int R,int node,int val)
{
    if(L == R)
    {
        for(int j=0;j<60;j++)
            tree[i][j] = 2 - (j % val != 0);
        return ;
    }
    if(node <= (L + R) / 2)
        update(i*2 + 1, L, (L + R) / 2, node, val);
    else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
   for(int j=0;j<60;j++)
        tree[i][j] = tree[i*2 + 1][j] + tree[i*2 + 2][(j + tree[i*2 + 1][j]) % 60];
}

int query(int i,int L,int R,int x,int y, int temp)
{
    if(L >= x && R <= y)
        return tree[i][temp];
    if(L > y || R < x)
        return 0;
    int tmp = query(i*2 + 1, L, (L + R) / 2, x, y, temp);
    tmp+=query(i*2 + 2, (L + R) / 2 + 1, R, x, y, (temp + tmp) % 60);
    return tmp;
}

int main()
{
    ios_base::sync_with_stdio(0);
    int n,q;
    cin >> n;
    for(int i=0;i<n;i++)
        cin >> arr[i];
    build(0, 0, n - 1);
    cin >> q;
    int x, y;
    string s;
    while(q--)
    {
        cin >> s >> x >> y;
        if(s[0] == 'A')
            cout << query(0, 0, n - 1, x - 1, y - 2, 0) << '\n';
        else update(0, 0, 0, x - 1, y);
    }
    return 0;
}