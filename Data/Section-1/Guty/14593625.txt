#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


bool sePuede(vector<tint> &s, tint k, tint c)
{
	tint n = s.size();
	vector<tint> capacidades (k,0);
	tint j = 0;
	tint i = 0;
	tint totalMetidos = 0;
	while (i < n && j < k)
	{
		if (capacidades[j] + s[i] <= c && totalMetidos <= 2)
		{
			capacidades[j] += s[i];
			totalMetidos++;
			i++;
		}
		else
		{
			j++;
			totalMetidos = 0;
		};
		//imprimirVector(capacidades);
		//cout << " ---- " << endl;
	}
	if (i == n)
		return true;
	else
		return false;
}

int main()
{
	ios_base::sync_with_stdio(0);
	tint n,k;
	cin >> n >> k;
	vector<tint> s (n);
	tint cinf = 0;
	tint csup = 0;
	forn(i,n)
	{
		cin >> s[i];
		csup += s[i];
		cinf = max(cinf,s[i]);
	}
	cinf -= 1;

	while (csup - cinf > 1)
	{
		tint c = (cinf + csup) / 2;
		if (sePuede(s,k,c))
			csup = c;
		else
			cinf = c;
	}
	cout << csup << endl;
	
		
	return 0;
}



