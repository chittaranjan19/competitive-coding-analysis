#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

char s[200005];

const int MaxVal = 200002;
int tree[800002][10][10], k;
char l[800002], r[800002];
char lazy[800002];

void build(int i,int L,int R)
{
  if(L == R)
  {
    l[i] = s[L];
    r[i] = s[L];
    lazy[i] = -1;
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  l[i] = l[i*2 + 1];
  r[i] = r[i*2 + 2];
  for(int ii=0;ii<k;ii++)
    for(int jj=0;jj<k;jj++)
      tree[i][ii][jj] = tree[i*2+1][ii][jj] + tree[i*2+2][ii][jj];
  if(r[i*2+1] != l[i*2+2])
    tree[i][r[i*2+1] - 'a'][l[i*2+2] - 'a']++;
  lazy[i] = -1;
}

void update(int i,int L,int R,int x,int y,char val)
{
  if(L >= x && R <= y)
  {
    l[i] = r[i] = val;
    for(int ii=0;ii<k;ii++)
      for(int jj=0;jj<k;jj++)
        tree[i][ii][jj] = 0;
    if(L != R)
    {
      lazy[i*2+1] = val;
      lazy[i*2+2] = val;
    }
    lazy[i] = -1;
    return;
  }
  if(lazy[i] != -1)
  {
    l[i] = r[i] = lazy[i];
    for(int ii=0;ii<k;ii++)
      for(int jj=0;jj<k;jj++)
        tree[i][ii][jj] = 0;
    if(L != R)
    {
      lazy[i*2+1] = lazy[i];
      lazy[i*2+2] = lazy[i];
    }
    lazy[i] = -1;
  }
  if(L > y || R < x)
    return;
  update(i*2 + 1, L, (L + R) / 2, x, y, val);
  update(i*2 + 2, (L + R) / 2 + 1, R, x, y, val);
  l[i] = l[i*2 + 1];
  r[i] = r[i*2 + 2];
  for(int ii=0;ii<k;ii++)
    for(int jj=0;jj<k;jj++)
      tree[i][ii][jj] = tree[i*2+1][ii][jj] + tree[i*2+2][ii][jj];
  if(r[i*2+1] != l[i*2+2])
    tree[i][r[i*2+1] - 'a'][l[i*2+2] - 'a']++;
}

char p[15];

int main()
{
  int n, m, x, y, res;
  char c;
  scanf("%d %d %d", &n, &m, &k);
  scanf("%s", s);
  build(0, 0, n - 1);
  while(m--)
  {
    scanf("%d", &x);
    if(x == 1)
    {
      scanf("%d %d %c", &x, &y, &c);
      x--, y--;
      update(0, 0, n - 1, x, y, c);
    }
    else
    {
      scanf("%s", p);
      res = n;
      for(int i=0;i<k;i++)
        for(int j=i+1;j<k;j++)
          res -= tree[0][p[i] - 'a'][p[j] - 'a'];
      printf("%d\n", res);
    }
  }
  return 0;
}
