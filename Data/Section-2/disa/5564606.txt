#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <queue>


using namespace std;

//ifstream cin ("input.txt");
//ofstream cout ("output.txt");

typedef long long ll;

char a[505][505];

int dist[505][505];

bool used[505][505];

int n, m, k;

struct str {
	int x, y, dist;
	str() {};
	str(int x, int y, int dist) : x(x), y(y), dist(dist) {}
	bool operator <(str q) const {
		return dist > q.dist;
	}
};

multiset <str> s;

queue <str> q;

void bfs(str v) {
	q.push(v);
	used[v.x][v.y] = true;
	dist[v.x][v.y] = 0;
	s.insert(v);
	while(!q.empty()) {
		v = q.front();
		q.pop();
		if(!used[v.x + 1][v.y] && a[v.x + 1][v.y] == '.') {
			dist[v.x + 1][v.y] = dist[v.x][v.y] + 1;
			used[v.x + 1][v.y] = true;
			q.push(str(v.x + 1, v.y, dist[v.x][v.y] + 1));
			s.insert(str(v.x + 1, v.y, dist[v.x][v.y] + 1));
		}
		if(!used[v.x - 1][v.y] && a[v.x - 1][v.y] == '.') {
			dist[v.x - 1][v.y] = dist[v.x][v.y] + 1;
			used[v.x - 1][v.y] = true;
			q.push(str(v.x - 1, v.y, dist[v.x][v.y] + 1));
			s.insert(str(v.x - 1, v.y, dist[v.x][v.y] + 1));
		}
		if(!used[v.x][v.y + 1] && a[v.x][v.y + 1] == '.') {
			dist[v.x][v.y + 1] = dist[v.x][v.y] + 1;
			used[v.x][v.y + 1] = true;
			q.push(str(v.x, v.y + 1, dist[v.x][v.y] + 1));
			s.insert(str(v.x, v.y + 1, dist[v.x][v.y] + 1));
		}
		if(!used[v.x][v.y - 1] && a[v.x][v.y - 1] == '.') {
			dist[v.x][v.y - 1] = dist[v.x][v.y] + 1;
			used[v.x][v.y - 1] = true;
			q.push(str(v.x, v.y - 1, dist[v.x][v.y] + 1));
			s.insert(str(v.x, v.y - 1, dist[v.x][v.y] + 1));
		}
	}
}

void print () {
	if(k == 0) {
		for(int i = 1; i <= n; i++) {
			for(int j = 1; j <= m; j++) {
				cout << a[i][j] ;
			}
			cout << '\n';
		}
		exit(0);
	}
}


int main () {
	cin >> n >> m >> k;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			cin >> a[i][j];
		}
	}
	for(int i = 0; i <= m + 1; i++) {
		a[0][i] = '#';
		a[n + 1][i] = '#';
	}
	for(int i = 0; i <= n + 1; i++) {
		a[i][0] = '#';
		a[i][m + 1] = '#';
	}
	bool ok = false;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			if(a[i][j] == '.') {
				bfs(str(i, j, 0));
				ok = true;
				break;
			}
		}
		if(ok)
			break;
	}
	while(k > 0) {
		str v = *s.begin();
		s.erase(s.begin());
		a[v.x][v.y] = 'X';
		k--;
		print();
	}
	print();
    return 0;
}