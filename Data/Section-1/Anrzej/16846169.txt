#include <cstdio>

const int N = 111;

int h, n, m;
bool mp[N][N][N];

/**
 * 000 000 000
 * 010 010 010
 * 000 000 000
 */
bool check_1(int i, int j, int k) {
    if (i == 0 || i == h - 1)
        return false;
    return mp[i - 1][j][k] && mp[i + 1][j][k];
}

/**
 * 000 010 000
 * 000 010 000
 * 000 010 000
 */
bool check_2(int i, int j, int k) {
    if (j == 0 || j == n - 1)
        return false;
    return mp[i][j - 1][k] && mp[i][j + 1][k];
}

/**
 * 000 000 000
 * 000 111 000
 * 000 000 000
 */
bool check_3(int i, int j, int k) {
    if (k == 0 || k == m - 1)
        return false;
    return mp[i][j][k - 1] && mp[i][j][k + 1];
}

/**
 * 000 000 000
 * 010 010 000
 * 000 010 000
 */
bool check_4(int i, int j, int k) {
    if (i == 0 || j == n - 1)
        return false;
    return mp[i - 1][j][k] && mp[i][j + 1][k] && !mp[i - 1][j + 1][k];
}

/**
 * 000 000 000
 * 010 011 000
 * 000 000 000
 */
bool check_5(int i, int j, int k) {
    if (i == 0 || k == m - 1)
        return false;
    return mp[i - 1][j][k] && mp[i][j][k + 1] && !mp[i - 1][j][k + 1];
}

/**
 * 000 010 000
 * 000 010 010
 * 000 000 000
 */
bool check_6(int i, int j, int k) {
    if (j == 0 || i == h - 1)
        return false;
    return mp[i][j - 1][k] && mp[i + 1][j][k] && !mp[i + 1][j - 1][k];
}

/**
 * 000 010 000
 * 000 011 000
 * 000 000 000
 */
bool check_7(int i, int j, int k) {
    if (j == 0 || k == m - 1)
        return false;
    return mp[i][j - 1][k] && mp[i][j][k + 1] && !mp[i][j - 1][k + 1];
}

/**
 * 000 000 000
 * 000 110 010
 * 000 000 000
 */
bool check_8(int i, int j, int k) {
    if (k == 0 || i == h - 1)
        return false;
    return mp[i][j][k - 1] && mp[i + 1][j][k] && !mp[i + 1][j][k - 1];
}

/**
 * 000 000 000
 * 000 110 000
 * 000 010 000
 */
bool check_9(int i, int j, int k) {
    if (k == 0 || j == n - 1)
        return false;
    return mp[i][j][k - 1] && mp[i][j + 1][k] && !mp[i][j + 1][k - 1];
}

int main() {
    scanf("%d%d%d", &h, &n, &m);

    getchar(); // Read EOLN

    for (int i = 0; i < h; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < m; k++)
                mp[i][j][k] = bool(getchar() - '0');
            getchar(); // Read EOLN
        }
        if (i < h - 1)
            getchar(); // Read EOLN
    }

    int ans = 0;

    for (int i = 0; i < h; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < m; k++) {
                if (!mp[i][j][k])
                    continue;
                bool can =
                    check_1(i, j, k) || check_2(i, j, k) ||
                    check_3(i, j, k) || check_4(i, j, k) ||
                    check_5(i, j, k) || check_6(i, j, k) ||
                    check_7(i, j, k) || check_8(i, j, k) ||
                    check_9(i, j, k) || false;
                if (can)
                    ans++;
            }
        }
    }

    printf("%d", ans); // Ans <= (10^6 - 4)

    return 0;
}
