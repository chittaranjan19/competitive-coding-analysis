#include <bits/stdc++.h>
using namespace std;

#define fr first
#define sc second
#define mkp make_pair

int n, m, a[int(1e3) + 1][int(1e3) + 1], cnt, x, y, newx[4], newy[4];
bool u[int(1e3) + 1][int(1e3) + 1];
char c[int(1e3) + 1][int(1e3) + 1];
queue <pair <int, int> > q;

bool in(int x, int y){
	return ((0 <= x && x < n) && (0 <= y && y < m));
}

void dfs(int x, int y){
	//cerr << x << " " << y << "\n";
	//system("pause");
	u[x][y] = 1;
	for(int i = 0; i < 4; ++ i){
		if(in(x + newx[i], y + newy[i]) && u[x + newx[i]][y + newy[i]] == 0 && c[x + newx[i]][y + newy[i]] == '.'){
			cnt ++;
			//u[x + newx[i]][y + newy[i]] = 1;
			dfs(x + newx[i], y + newy[i]);
		}
	}
	return;
}

int main(){
	newx[0] = 0, newy[0] = 1;
	newx[1] = 1, newy[1] = 0;
	newx[2] = 0, newy[2] = -1;
	newx[3] = -1, newy[3] = 0;
	cin >> n >> m;
	for(int i = 0; i < n; ++ i){
		for(int j = 0; j < m; ++ j){
			cin >> c[i][j];
			if(c[i][j] == '*'){
				q.push(mkp(i, j));
			}
		}
	}
	while(q.size()){
		//cerr << "okay";
		cnt = 1;
		for(int i = 0; i < n; ++ i){
			memset(u[i], 0, m);
		}
		//cerr << "okay";
		x = q.front().fr;
		y = q.front().sc;
		dfs(x, y);
		a[x][y] = cnt;
		q.pop();
		//cerr << "okay";
	}
	for(int i = 0; i < n; ++ i){
		for(int j = 0; j < m; ++ j){
			if(!a[i][j]){
				cout << ".";
			} else {
				cout << a[i][j] % 10;
			}
		}
		cout << "\n";
	}
	return 0;
}