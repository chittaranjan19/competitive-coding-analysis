#include <iostream> 
#include <cstdlib> 
#include <cstring> 
#include <climits> 
#include <vector> 
#include <queue> 
#include <algorithm> 
#include <utility> 
using namespace std; 

#define MAXV 100001
#define INF 987654321

int V,E,K; //n,m,k 
struct edge {int to,cost;}; 
vector<edge> G[MAXV]; 
typedef pair<int,int> P; // first = shortest distance, second = node number. 
int d[MAXV]; // contains shortest distance from starting node.  
vector<int> supply;  
int cannot[MAXV]; 

void dijkstra(int s){ // s is the starting node.  
	for (int i = 1; i <= V; i++){
		d[i] = INF; 
	}
	d[s] = 0;  
	priority_queue< P,vector<P>,greater<P> > que; 
	que.push(P(d[s],s));    
	while (!que.empty()){
		P p = que.top(); que.pop(); 
		int v = p.second; 
		if (d[v] < p.first) continue; 
		for (int i = 0; i < G[v].size(); i++){
			edge e = G[v][i];   
			if (d[e.to] > d[v]+e.cost){
				d[e.to] = d[v]+e.cost;  
				que.push(P(d[e.to],e.to)); 
			}
		}
	}
}

int main(){
	ios_base::sync_with_stdio(false); 
	cin.tie(0);  
	cin >> V >> E >> K;  
	for (int i = 0; i < E; i++){
		edge e;  
		int a,b,c; 
		cin >> a >> b >> c; 
		e.to = b,e.cost = c; 
		G[a].push_back(e);  
		e.to = a,e.cost = c; 
		G[b].push_back(e); 
	}
	for (int i = 0; i < K; i++){
		int supply_place; 
		cin >> supply_place;  
		cannot[supply_place] = 1;  
		supply.push_back(supply_place); 
	}
	int minval = INF; 
	for (int i = 1; i <= V; i++){
		if (!cannot[i]){ 
			dijkstra(i); 
			for (int j = 0; j < supply.size(); j++){ 
				minval = min(minval,d[supply[j]]); 
			}
		}
	}
	if (minval == INF){
		cout << -1 << endl; 
	}else{
		cout << minval << endl; 
	}
	return 0; 
}