#include <iostream>
#include <cstdio>
#include <queue>
#include <set>
#include <algorithm>

using namespace std;

//struct re
//{
//    int a, b, c, d, s;
//    re(int a = 0, int b = 0, int c = 0, int d = 0, int s = 0) : a(a), b(b), c(c), d(d), s(s) {}
//};
//
//queue<re> q;
//
//int main()
//{
//    int w, h, n;
//    scanf("%d%d%d", &w, &h, &n);
//    q.push(re(0, w, 0, h, h * w));
//    char c;
//    int x;
//    while(n--)
//    {
//        getchar();
//        int maxn = 0;
//        scanf("%c %d", &c, &x);
////        queue<re> qq;
//        int t = q.size();
//        if(c == 'H')
//            while(t--)
//            {
//                re p = q.front();
//                q.pop();
//                if(p.c < x && p.d > x)
//                {
//                    int w1 = x - p.c, w2 = p.d - x, h = p.b - p.a;
//                    maxn = max(maxn, h * max(w1, w2));
////                    if(h * w1 == maxn)
//                        q.push(re(p.a, p.b, p.c, x, h * w1));
////                    if(h * w2 == maxn)
//                        q.push(re(p.a, p.b, x, p.d, h * w2));
//                }
//                else
//                {
//                    maxn = max(maxn, p.s);
//                    q.push(p);
//                }
//            }
//            else if(c == 'V')
//            while(t--)
//            {
//                re p = q.front();
//                q.pop();
//                if(p.a < x && p.b > x)
//                {
//                    int h1 = x - p.a, h2 = p.b - x, w = p.d - p.c;
//                    maxn = max(maxn, w * max(h1, h2));
////                    if(w * h1 == maxn)
//                        q.push(re(p.a, x, p.c, p.d, w * h1));
////                    if(w * h2 == maxn)
//                        q.push(re(x, p.b, p.c, p.d, w * h2));
//                }
//                else
//                {
//                    maxn = max(maxn, p.s);
//                    q.push(p);
//                }
//            }
//            printf("%d\n", maxn);
////            while(!qq.empty())
////            {
////                re p = qq.front();
////                qq.pop();
////                if(p.s == maxn)
////                    q.push(p);
//            }
//        }

int maxh, maxw;
set<int> usedh, usedw;
typedef set<int>::iterator it;

int main()
{
    int w, h, n;
    scanf("%d%d%d", &w, &h, &n);
    char c;
    int x;
    maxh = h, maxw = w;
    usedh.insert(h), usedw.insert(w);
    usedh.insert(0), usedw.insert(0);
    while(n--)
    {
        getchar();
        scanf("%c %d", &c, &x);
        if(c == 'H')
        {
//            it l = upper_bound(usedh.begin(), usedh.end(), x);
//            it u = l--;
//            printf("%d\n", maxw * max(*u - x, x - *l));
            usedh.insert(x);
            maxh = 0;
            for(it i = usedh.begin(), j = usedh.begin(); i != usedh.end(); )
            {
                if(i == usedh.begin())
                {
                    i++;
                    continue;
                }

maxh = max(maxh, *i - *j);
i++;
j++;
            }
            printf("%d\n", maxh * maxw);
        }
        else if(c == 'V')
        {
//            it l =  upper_bound(usedw.begin(), usedw.end(), x);
//            it r = l--;
//            printf("%d\n", maxh * max(*r - x, x - *l));
            usedw.insert(x);
            maxw = 0;
            for(it i = usedw.begin(), j = usedw.begin(); i != usedw.end();)
            {
                                if(i == usedw.begin())
                {
                    i++;
                    continue;
                }
                maxw = max(maxw, *i - *j);
i++;
j++;
            }
              printf("%d\n", maxh * maxw);
        }
    }
    return 0;
}
