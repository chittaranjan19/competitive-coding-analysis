#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

bool sorter(ii a, ii b) {
    return a.a < b.a;
}

int main() {
    // freopen("580B.in", "r", stdin);
    
    int n, d;
    scanf("%d %d", &n, &d);

    vii fds(n+1);
    fds[0] = mp(INT_MIN, 0);
    loop1(it, n)
        scanf("%d %d", &(fds[it].a), &(fds[it].b));

    sort(all(fds), sorter);

    vector<ll> pfx_sum(n+1, 0);
    loop1(it, n)
        pfx_sum[it] = pfx_sum[it-1]+fds[it].b;

    ll ans = 0;

    loop1(j, n) {
        int l = 0, r = n;
        while (l < r) {
            int m = (l+r) >> 1;
            if (fds[m].a < fds[j].a-d)
                l = m+1;
            else
                r = m;
        }
        if (fds[l].a > fds[j].a-d)
            --l;
        l = max(l, 0);
        ans = max(ans, pfx_sum[j]-pfx_sum[l]);
    }
    printf("%I64d\n", ans);
    return 0;
}