#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

struct disjointset
{
    vector<int> rank, parent;
    int subtrees;

    disjointset(int n)
    {
        subtrees = n;
        for(int i=0;i<n;i++)
            rank.pb(1),parent.pb(i);
    }

    int find_set(int x)
    {
        if(x == parent[x])
            return x;
        return parent[x] = find_set(parent[x]);
    }

    void link(int x,int y)
    {
        if(rank[x] > rank[y])
            swap(x, y);
        parent[x] = y;
        if(rank[x] == rank[y])
            rank[y]++;
    }

    bool union_sets(int x,int y)
    {
        x = find_set(x),y = find_set(y);
        if(x != y)
        {
            link(x,y);
            subtrees--;
        }
        return x != y;
    }

    bool same_set(int x,int y)
    {
        return find_set(x) == find_set(y);
    }
};

vector<pair<int, int> > q, qq[100005];
vector<int> g[100005];
int in[100005], out[100005], c, cc;
bool has[100005], res[100005];

void dfs(int node)
{
  in[node] = c++;
  for(int i=0;i<g[node].size();i++)
    dfs(g[node][i]);
  out[node] = cc++;
}

int main()
{
  int n, m, x, y, z;
  scanf("%d %d", &n, &m);
  for(int i=0;i<m;i++)
  {
    scanf("%d", &x);
    if(x == 1)
    {
      scanf("%d %d", &y, &z);
      q.pb(mp(y, z));
      g[z].pb(y);
      has[y] = true;
    }
    else if(x == 2)
    {
      scanf("%d", &x);
      q.pb(mp(--cc, x));
    }
    else
    {
      scanf("%d %d", &x, &y);
      qq[y].pb(mp(x, c++));
    }
  }
  c = cc = 0;
  for(int i=1;i<=n;i++)
    if(!has[i])
      g[0].pb(i);
  dfs(0);
  disjointset d(n + 2);
  c = 0;
  for(int i=0;i<q.size();i++)
  {
    x = q[i].f;
    y = q[i].s;
    if(x < 0)
    {
      x*=-1;
      for(int j=0;j<qq[x].size();j++)
      {
        c++;
        if(!d.same_set(y, qq[x][j].f)) continue;
        if(in[qq[x][j].f] <= in[y] && out[qq[x][j].f] >= out[y])
          res[qq[x][j].s] = true;
      }
    }
    else d.union_sets(x, y);
  }
  for(int i=0;i<c;i++)
  {
    if(res[i]) printf("YES\n");
    else printf("NO\n");
  }
  return 0;
}