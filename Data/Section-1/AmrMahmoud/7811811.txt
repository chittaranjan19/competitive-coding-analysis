#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int fail[100005],fail2[100005];
int counter;

int main()
{
    string s1,s2;
    cin >> s1 >> s2;
    if(s1.size() > s2.size())
        swap(s1,s2);
    int k = 0;
    for(int i=1;i<s1.size();i++)
    {
        while(k > 0 && s1[k] != s1[i])
            k = fail[k-1];
        if(s1[k] == s1[i]) k++;
        fail[i] = k;
    }
    k = 0;
    for(int i=1;i<s2.size();i++)
    {
        while(k > 0 && s2[k] != s2[i])
            k = fail2[k-1];
        if(s2[k] == s2[i]) k++;
        fail2[i] = k;
    }
    for(int i=1;i<=s1.size();i++)
    {
        if(s1[i-1] != s2[i-1]) break;
        if((int)s1.size() % i == 0 && (int)s2.size() % i == 0)
        {
            bool done = true;
            int test = s1.size() - 1;
            int temp = test - fail[test];
            for(int j=test;j>=i;j-=i)
            {
                if(j - fail[j] != temp || !(fail[j] >= j - i && fail[j] <= j))
                {
                    done = false;
                    break;
                }
            }
            if(!done) continue;
            test = s2.size() - 1;
            temp = test - fail2[test];
            for(int j=test;j>=i;j-=i)
            {
                if(j - fail2[j] != temp || !(fail2[j] >= j - i && fail2[j] <= j))
                {
                    done = false;
                    break;
                }
            }
            if(done) counter++;
        }
    }
    cout << counter;
    return 0;
}