#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

#include <unordered_set>
#include <unordered_map>

#pragma warning(disable: 4101)
using namespace std;

#define forn(i,n) for (int i = 0; i < int(n); ++i)
#define for1(i,n) for (int i = 1; i < int(n); ++i)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i,l,r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a,b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const double pi = acos(-1.0);
const int BASE=31;
const int BASE1=131;
const int M=1000000011;
const int M1=982451653;
int power[3000000];
int prefix[3000000];
int power1[3000000];
int prefix1[3000000];
string s;


void calc_power(int n)
{
    power[0] = 1;
    for (int i = 0; i < n; ++i)
    power[i+1] =  (long long) power[i] * BASE % M;
    power1[0] = 1;
    for (int i = 0; i < n; ++i)
    power1[i+1] =  (long long) power1[i] * BASE1 % M1;
}

void calc_prefix()
{
    int n = s.size();
    prefix[0] = 0;
    for (int i = 0; i < n; ++i)
        prefix[i+1] = ((long long)prefix[i] * BASE + s[i] - 'a' +1) % M;
    prefix1[0] = 0;
    for (int i = 0; i < n; ++i)
        prefix1[i+1] = ((long long)prefix1[i] * BASE1 + s[i] - 'a' +1) % M1;
}

int get_hash(int i, int j)
{
    //cout <<i << " " << j << " "<<prefix[j] << " " << prefix[i-1]  << " " << power[j-i+1] << endl;
    return (prefix[j] - (long long)prefix[i-1] * power[j-i+1] % M+M) % M;
}

int get_hash1(int i, int j)
{
    //cout <<i << " " << j << " "<<prefix[j] << " " << prefix[i-1]  << " " << power[j-i+1] << endl;
    return (prefix1[j] - (long long)prefix1[i-1] * power1[j-i+1] % M1+M1) % M1;
}

int main()
{
#if 0
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

#if 0
    cout << setprecision(20) << fixed;
#endif
    long long k;
    vector <pair<long long, long long> > kik;
    cin >> s;
    calc_power(s.size());
	calc_prefix();
    string t;
    cin >> t;
    long long otv=0;
    cin >> k;
    int x=0;
    for (int i=0;i<s.size();i++)
    {
        int sum=0;
        string e;
        for (int j=i;j<s.size();j++)
    {
        if (t[s[j]-97]=='0') sum++;
        e+=s[j];
        if (sum<=k) {kik.pb(make_pair(get_hash(i+1,j+1), get_hash1(i+1, j+1)));}
        //cout << e <<" "<< sum << endl;
    }
    }
    sort(all(kik));otv=1;
    for (int i=1;i<kik.size();i++) if (kik[i].ft!=kik[i-1].ft || kik[i].sc!=kik[i-1].sc) otv++;
    cout << otv;
return 0;
}
