#include <iostream>
#include <vector>
#include <string.h>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <math.h>

#define ll long long
#define pb push_back
#define mp make_pair
#define traverse(container, it) \
for(typeof(container.begin()) it = container.begin(); it!= container.end(); it++)
using namespace std;

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

int gcd(int a, int b){ if(b==0) return a; return gcd(b,a%b); }
int lcm(int a, int b) {return a*(b/gcd(a,b));}
void setbool(bool a[], int n, bool x){for(int i=0;i<n;i++){a[i] = x;}}
void setint(int a[], int n, int x){for(int i=0;i<n;i++){a[i] = x;}}

vector<int> graph[100001], graph1[100001];

int main(int argc, const char * argv[]) 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n, u, v, m, mi, ma;
    
    cin>>n;
    
    cin>>m;
    
    while(m--)
    {
        cin>>u>>v;
        
        mi = min(u, v);
        ma = max(u, v);
        
        graph[ma].pb(mi);
        graph1[u].pb(v);
        graph1[v].pb(u);
    }
    
    int ans[100001];
    setint(ans, n+1, 1);
    for(int i=1;i<=n;i++)
    {
        traverse(graph[i], it)
        {
            if(ans[i] < 1+ans[*it])
            {
                ans[i] = 1+ans[*it];
            }
        }
    }
    
    int max = (int)graph1[1].size();
    for(int i=2;i<=n;i++)
    {
        int temp = ((int)graph1[i].size())*ans[i];
        if(temp > max)
        {
            max = temp;
        }
    }
    
    cout<<max<<endl;
    
    return 0;
}
