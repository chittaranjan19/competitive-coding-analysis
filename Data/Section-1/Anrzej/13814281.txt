#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
#include <string>
#include <queue>
#define ll long long
#define mp make_pair
using namespace std;

const int N = 1000;

int n;
long k, ans;
pair<long, long> d[100];
long a[100];

long can()
{
	for (int i = 0; i < n; i++)
		a[i] = k;
	long t = d[0].first;
	priority_queue< pair<long, long> > q;
	for (int i = 0; i < n; i++) {
		q.push(mp(-d[i].second, i));
		pair<long, long> p = q.top();
		int mn = min(d[i].first - t, a[p.second]);
		a[p.second] -= mn, t += mn;
		if (a[p.second] == 0)
			q.pop();
	}
	while (!q.empty()) {
		pair<long, long> p = q.top();
		q.pop();
		int mn = min(a[p.second], -p.first - t);
		a[p.second] -= mn, t += mn;
	}
	for (int i = 0; i < n; i++)
		if (a[i] != 0)
			return false;
	return true;
}


int main() 
{
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> d[i].first >> d[i].second;

	sort(d, d + n), ans = 0;

	for (long time = 1; time <= 3; time++)
	{
		
		k = time;
		if (can())
			ans = time * n;
		
	}
	cout << ans;
	return 0;

}