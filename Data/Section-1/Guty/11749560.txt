#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint factorialModuloP(tint q, tint p)
{
	tint r = 1;
	forsn(i,1,q+1)
	{
		r *= i;
		r %= p;
	}
	return r;
}


tint inversoModuloP(tint n, tint p)
{
    n = n % p;
    for(tint x = 1; x < p; x++)
		if(n*x % p == 1) return x;
    return 0;
}


int main()
{
	tint p = 1000000007;
	tint k;
	cin >> k;
	vector<tint> c (k);
	vector<tint> parcialesC(k);
	tint n = -1;
	forn(i,k)
	{
		cin >> c[i];
		n += c[i];
		if (i == 0)
			parcialesC[i] = c[i];
		else
			parcialesC[i] = c[i] + parcialesC[i-1];
	}
	tint arriba = factorialModuloP(n,p);
	tint abajo1 = 1;
	forn(i,k)
	{
		abajo1 *= factorialModuloP(c[i]-1,p);
		abajo1 %= p;
	}
	tint abajo2 = 1;
	forn(i,k-1)
	{
		abajo2 *= parcialesC[i];
		abajo2 %= p;
	}
	tint abajo = (abajo1*abajo2)%p;
	tint res = arriba / abajo; // No me sale hacer division modular.
	cout << res << endl;
		
	
	return 0;
}
