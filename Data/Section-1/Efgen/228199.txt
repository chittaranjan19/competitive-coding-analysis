import java.io.*;
import java.util.*;
import java.math.*;

public class Solution {
	static final String FileName = "test";
	
	void solve() throws IOException {
		int n = nextInt();
		int[] x = new int[n];
		int[] y = new int[n];
		int minX = Integer.MAX_VALUE;
		int minY = Integer.MAX_VALUE;
		int maxX = -Integer.MAX_VALUE;
		int maxY = -Integer.MAX_VALUE;
		int minDX = Integer.MAX_VALUE;
		int minDY = Integer.MAX_VALUE;
		int maxDX = -Integer.MAX_VALUE;
		int maxDY = -Integer.MAX_VALUE;
		for (int i=0; i<n; i++) {
			x[i] = nextInt();
			y[i] = nextInt();
			
			int dx = x[i]+y[i];
			int dy = x[i]-y[i];
			
			if (x[i]<minX) minX = x[i]; 
			if (x[i]>maxX) maxX = x[i];
			if (y[i]<minY) minY = y[i]; 
			if (y[i]>maxY) maxY = y[i];
			
			if (dx<minDX) minDX = dx; 
			if (dx>maxDX) maxDX = dx;
			if (dy<minDY) minDY = dy; 
			if (dy>maxDY) maxDY = dy;
		}
		
		int res = 2*(maxX-minX+maxY-minY);
		
		res -= maxX+maxY-maxDX;
		res -= minDX - (minX+minY);
		res -= maxX-minY-maxDY;
		res -= minDY - (minX-maxY);
		out.println(res+4);
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
    static final int inf = 1000000000+10;
    static final long linf = 1l<<62;
    static final double eps = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;    
    
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }
    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }
    long nextLong() throws IOException {
            return Long.parseLong(next());
    }
    public static void main(String[] args) {        
    	new Solution().run();    
    }    
}
