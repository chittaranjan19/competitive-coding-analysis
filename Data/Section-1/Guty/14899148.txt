#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


bool sePuede (vector<tint> flower, tint c, tint w, tint m)
{
	tint n = flower.size();
	vector<tint> v (n+w,0);
	forn(i,n)
	{
		tint k = max(c - flower[i] - v[i + w - 1] + v[i], (tint) 0);
		v[i+w] = v[i+w-1] + k;
		m -= k;
		if (m < 0)
			break;
	}
	return m >= 0;
		
}

int main()
{
	#ifdef ACMTUYO
		if (!freopen("C.in","r",stdin))
			return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint n,m,w;
	while (cin >> n >> m >> w)
	{
		vector<tint> flower (n);
		forn(i,n)
			cin >> flower[i];
		tint cinf = *min_element(flower.begin(),flower.end());
		tint csup = 2000000000; // alcanza con 1000500001
		while (csup - cinf > 1)
		{
			tint c = (csup + cinf)/2;
			if (sePuede(flower,c,w,m))
				cinf = c;
			else
				csup = c;
		}
		cout << cinf << endl;
	}
	
	return 0;
}



