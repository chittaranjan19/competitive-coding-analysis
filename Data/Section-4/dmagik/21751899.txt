#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define PB pop_back
#define pf push_front
#define PF pop_front
#define ll long long int
#define mod 1000000007
#define mp make_pair
list <int> *adj;
map <int,int> ma;
vector <int> v;
int cou;
void dfs(int node,bool *visit,bool *in,int *b)
{
    ma[b[node]]++;
    visit[node]=true;
    v.pb(node);
    std::list <int>::iterator i;
    for(i=adj[node].begin();i!=adj[node].end();i++)
    {
        if(visit[*i]!=true&&in[*i]==true)
            dfs(*i,visit,in,b);
    }
}

void DFS(int n,bool *in,int *b)
{
    bool *visit=new bool[n];
    for(int i=0;i<n;i++)
        visit[i]=false;
    for(int i=0;i<n;i++)
    {
        ma.clear();
        v.clear();
        if(visit[i]==false&&in[i]==true)
            dfs(i,visit,in,b);
        std::map <int,int>::iterator it;
        int max=-1,col;
        for(it=ma.begin();it!=ma.end();it++)
        {
            if((it->second)>max)
                {
                    max=it->second;
                    col=it->first;
                }
        }
        std::vector<int>::iterator jt;
        for(jt=v.begin();jt!=v.end();jt++)
        {
            if(b[*jt]!=col)
                cou++;
        }

    }
}


int main()
{
    int n,m,k;
    cin>>n>>m>>k;
    adj=new list<int>[n];
    int b[n];
    for(int i=0;i<n;i++)
    {
        cin>>b[i];
    }
    int l,r;
    bool *in=new bool[n];
    for(int i=0;i<n;i++)
    {
        in[i]=false;
    }
    while(m--)
    {
        cin>>l>>r;
        l--;r--;
        adj[l].pb(r);
        adj[r].pb(l);
        in[l]=true;
        in[r]=true;
    }
    DFS(n,in,b);
    cout<<cou<<endl;
}