import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemA2 {
    BufferedReader rd;
    int m0, m1, m2;

    private ProblemA2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] y = intarr();
        int[] m = intarr();
        int[] cq = intarr();

        m0 = m[0];
        m1 = m[1];
        m2 = m[2];
        int c0 = cq[0];
        int c1 = cq[1];
        int c2 = cq[2];
        int y0 = y[0];
        int y1 = y[1];
        int y2 = y[2];

        int cost = -1;
        boolean cn = true;
        while(cn) {
            cost++;
            int i=0;
            while(cn) {
                int kq = cost - i*c0;
                if(kq < 0) {
                    break;
                }
                int j=0;
                while(cn) {
                    int k = kq - j*c1;
                    if(k < 0) {
                        break;
                    }
                    if(k%c2 == 0) {
                        if(yangWins(y0+i,y1+j,y2+k/c2)) {
                            cn = false;
                            break;
                        }
                    }
                    j++;
                }
                i++;
            }
        }
        out(cost);
    }

    private boolean yangWins(int x0, int x1, int x2) {
        int decM = Math.max(0, x1 - m2);
        int decY = Math.max(0, m1 - x2);
        if(decY == 0) {
            return decM > 0;
        }
        if(decM == 0) {
            return false;
        }
        int stepsY = x0 / decY;
        if(stepsY >= 0) {
            int hY = x0 - stepsY*decY;
            int hM = m0 - stepsY*decM;
            if(hY > 0 && hM <= 0) {
                return true;
            }
        }
        int stepsM = m0 / decM;
        if(stepsM >= 0) {
            int hY = x0 - stepsM*decY;
            int hM = m0 - stepsM*decM;
            if(hY > 0 && hM <= 0) {
                return true;
            }
        }
        return false;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = s.split(" ");
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA2();
    }
}
