#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define maxC 2000000007
#define mn 100005
#define pb push_back
#define mp make_pair
#define base 29

using namespace std;
int n, firstA = 0, secondA = 0, firstB = 0, secondB = 0;
long long ax, ay, bx, by, tx, ty;
double sum = 0, disA[mn], disB[mn], disT[mn];

void setup()
{
    long long x, y;
    cin >> ax >> ay >> bx >> by >> tx >> ty >> n;
    disA[0] = disB[0] = 1ll * maxC * maxC;
    FOR(i, 1, n)
    {
        cin >> x >> y;
        disT[i] = sqrt((x - tx) * (x - tx) + (y - ty) * (y - ty));
        disA[i] = sqrt((x - ax) * (x - ax) + (y - ay) * (y - ay)) - disT[i];
        disB[i] = sqrt((x - bx) * (x - bx) + (y - by) * (y - by)) - disT[i];
        sum += disT[i] * 2;
        if (disA[i] < disA[firstA])
        {
            secondA = firstA;
            firstA = i;
        }
        else
            if (disA[i] < disA[secondA])
                secondA = i;
        if (disB[i] < disB[firstB])
        {
            secondB = firstB;
            firstB = i;
        }
        else
            if (disB[i] < disB[secondB])
                secondB = i;
    }
}

void xuly()
{
    if (firstA != firstB)
        cout << fixed << setprecision(8) << sum + disA[firstA] + disB[firstB];
    else
        cout << fixed << setprecision(8) << min(sum + disA[firstA] + disB[secondB], sum + disA[secondA] + disB[firstB]);
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
