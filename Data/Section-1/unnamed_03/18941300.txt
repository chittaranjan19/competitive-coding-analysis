#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn = 200000;
long long ch[maxn*4],seg[maxn*4];
int A[maxn];
int a,b,c;string s;
bool work()
{
	int cnt=0;bool bad=0;
	a=b=c=0;
	getline(cin,s);
	for(int i=0;i<s.length();i++)
	{
		if(s[i]==' '){cnt++;continue;}
		if(cnt==0)a=a*10+s[i]-'0';
		else if(cnt==1)b=b*10+s[i]-'0';
		else 
		{
			if(s[i]=='-')bad=1;
			else c=c*10+s[i]-'0';
		}
	}
	a++;b++;if(bad)c=-c; 
	if(cnt==2)return 0;
	return 1;
}
void build_tree(int l,int r,int cur)
{
	if(l==r){ch[cur]=A[l];seg[cur]=0;return ;}
	int lc=cur<<1,rc=lc|1,m=(l+r)>>1;
	build_tree(l,m,lc);
	build_tree(m+1,r,rc);
	ch[cur]=min(ch[lc],ch[rc]);
	seg[cur]=0;
	return ;
}
void add(int l,int r,int cur,int x,int y,int v)
{
	if(x<=l&&r<=y){ch[cur]+=v,seg[cur]+=v;return ;}
	if(l>y||r<x)return ;
	int lc=cur<<1,rc=lc|1,m=(l+r)>>1;
	add(l,m,lc,x,y,c);
	add(m+1,r,rc,x,y,c);
	ch[cur]=min(ch[lc],ch[rc])+seg[cur];
	return ;
}
long long query(int l,int r,int cur,int x,int y)
{
//	cout<<l<<" "<<r<<" "<<x<<" "<<y<<endl; 
	if(x<=l&&r<=y)return ch[cur];
	if(l>y||r<x)return (long long)1<<60;
	int lc=cur<<1,rc=lc|1,m=(l+r)>>1;
	return min(query(l,m,lc,x,y),query(m+1,r,rc,x,y))+seg[cur];
} 
int main()
{
	int n,m;cin>>n;
	for(int i=1;i<=n;i++)scanf("%d",&A[i]);getline(cin,s);
	build_tree(1,n,1);
	cin>>m;getline(cin,s); 
	for(int i=1;i<=m;i++)
	if(work())
	{
//		cout<<a<<" "<<b<<endl;
		if(a<=b)printf("%I64d\n",query(1,n,1,a,b));
		else printf("%I64d\n",min(query(1,n,1,a,n),query(1,n,1,1,b)));
	}
	else 
	{
//		cout<<a<<" "<<b<<" "<<c<<endl;
		if(a<=b)add(1,n,1,a,b,c);
		else add(1,n,1,a,n,c),add(1,n,1,1,b,c);
	}
	return 0;
} 