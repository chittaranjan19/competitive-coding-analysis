import java.util.*;
import java.io.*;

public class D {
	public static void main(String[] args) {
		FastScannerD sc = new FastScannerD(System.in);
		
		int N = sc.nextInt();
		
		int K = sc.nextInt();
		
		Word[] words = new Word[N];
		
		for(int i = 0 ; i < N ; i++){
			int sz = sc.nextInt();
			
			words[i] = new Word(sz);
			int[] arr = words[i].arr;
			
			for(int j = 0 ; j < sz ; j++){
				arr[j] = sc.nextInt();
			}
		}
		
		int diff = K - Math.max(words[0].arr[0], words[N-1].arr[0]) + Math.min(words[0].arr[0], words[N-1].arr[0]);
		if(words[0].arr[0] == words[N-1].arr[0]) diff = 0;
		
		if(diff == 0){
//			System.out.println("We are here");
			boolean smaller = false;
			
			int rot = 0;
			for(int j = 0 ; j < (N-1) ; j++){
				int[] arr1 = words[j].arr;
				int[] arr2 = words[j+1].arr;
				
				int len = Math.min(arr1.length, arr2.length);
				int k = 0;
				
				smaller = true;
				
				int eq = 0;
				
				for(k = 0 ; k < len ; k++){
					if( ((arr1[k] + rot)%(K+1) + 1) > ((arr2[k] + rot)%(K+1) + 1)){
						smaller = false;
						break;
					}
					else if( ((arr1[k] + rot)%(K+1) + 1) == ((arr2[k] + rot)%(K+1) + 1)){
						eq++;
					}
				}
//				System.out.println("Between words " + j + " and " + (j+1) + " smaller is " + smaller);
				if(smaller && eq == len){
					if(arr1.length > arr2.length) smaller = false;
				}
				
//				System.out.println(smaller);
				
				if(!smaller) break;
			}
			
			if(smaller){
				System.out.println(rot);
				System.exit(0);
			}
			else System.out.println(-1);
			System.exit(0);
		}
		
//		System.out.println(diff);
		
		for(int i = 1 ; (i + diff) <= K ; i++ ){
			int rot = 0;
			if(words[0].arr[0] < i){
				rot = i - words[0].arr[0];
			}
			else if(words[0].arr[0] > i){
				rot = K - words[0].arr[0] + i;
			}
			
			boolean smaller = false;
			
			for(int j = 0 ; j < (N-1) ; j++){
				int[] arr1 = words[j].arr;
				int[] arr2 = words[j+1].arr;
				
				int len = Math.min(arr1.length, arr2.length);
				int k = 0;
				
				smaller = true;
				
				int eq = 0;
				
				for(k = 0 ; k < len ; k++){
					if( ((arr1[k] + rot)%(K+1) + 1) > ((arr2[k] + rot)%(K+1) + 1)){
						smaller = false;
						break;
					}
					else if( ((arr1[k] + rot)%(K+1) + 1) == ((arr2[k] + rot)%(K+1) + 1)){
						eq++;
					}
				}
//				System.out.println("Between words " + j + " and " + (j+1) + " smaller is " + smaller);
				if(smaller && eq == len){
					if(arr1.length > arr2.length) smaller = false;
				}
				
//				System.out.println(smaller);
				
				if(!smaller) break;
			}
			
			if(smaller){
				System.out.println(rot);
				System.exit(0);
			}
		}
//		System.out.println(Arrays.toString(words[0].arr));
		System.out.println(-1);
		
	}
}

class Word{
	int[] arr;
	
	public Word(int N){
		arr = new int[N];
	}
}

class FastScannerD{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScannerD(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}