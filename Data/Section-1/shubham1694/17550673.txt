#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;
const int logn = 20;

vector<int> adj[maxn];
vector<pii> q[maxn];
map<int, int> level;
int n, m, siz[maxn], depth[maxn], sc[maxn], dp[logn][maxn], ans[maxn];

void dfs(int cur, int p, int d)
{
	siz[cur] = 1;
	depth[cur] = d;
	dp[0][cur] = p;
	for(int it:adj[cur]){
		dfs(it, cur, d+1);
		siz[cur]+=siz[it];
	}
}

int find_parent(int u, int k)
{
	int i, ret = u;
	for(i=logn-1; i>=0; i--){
		if(k&(1<<i)){
			k-=(1<<i);
			ret = dp[i][ret];
		}
	}
	return ret;
}

void add(int cur, int x)
{
	level[depth[cur]]+=x;
	for(int it:adj[cur]){
		if(!sc[it])
			add(it, x);
	}
}

void solve(int cur, int keep)
{
	int mxsize = -1, special_child = -1;
	for(int it:adj[cur]){
		if(siz[it]>mxsize){
			mxsize = siz[it];
			special_child = it;
		}
	}
	for(int it:adj[cur]){
		if(it!=special_child)
			solve(it, 0);
	}
	if(special_child!=-1){
		sc[special_child] = 1;
		solve(special_child, 1);
	}
	add(cur, 1);
	for(pii it:q[cur]){
		int d = depth[cur] + it.s;
		ans[it.f] = (int)level[d] - 1;
	}
	if(special_child!=-1)
		sc[special_child] = 0;
	if(!keep)
		add(cur, -1);
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, u, v;
	scanf("%d", &n);
	for(i=1; i<=n; i++){
		scanf("%d", &u);
		adj[u].pb(i);
	}	
	dfs(0, 0, 0);
	for(i=1; i<logn; i++){
		for(j=1; j<=n; j++)
			dp[i][j] = dp[i-1][dp[i-1][j]];
	}
	scanf("%d", &m);
	for(i=1; i<=m; i++){
		scanf("%d%d", &u, &v);
		int p = find_parent(u, v);
		if(p>0)
			q[p].pb(mp(i, v));
	}
	solve(0, 0);
	for(i=1; i<=m; i++)
		printf("%d\n", ans[i]);
	return 0;
}
