#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	ios_base::sync_with_stdio(0);
	tint n,m;
	cin >> n >> m;
	vector<tint> f (n+1);
	vector<tint> b (m+1);
	vector<vector<tint> > p (n+1);
	vector<tint> a (m+1);
	forsn(i,1,n+1)
	{
		cin >> f[i];
		p[f[i]].push_back(i);
	}
	bool ambiguity = false;
	forsn(i,1,m+1)
	{
		cin >> b[i];
		vector<tint> aux = p[b[i]];
		if (p[b[i]].size() > 1)
			ambiguity = true;
		else if (p[b[i]].size() == 0)
		{
			cout << "Impossible" << endl;
			return 0;
		}
		else
			a[i] = aux[0];
	}
	if (ambiguity)
		cout << "Ambiguity" << endl;
	else
	{
		cout << "Possible" << endl;
		forsn(i,1,m+1)
			cout << a[i] << " ";
		cout << endl;
	}
	
		
	
		
	return 0;
}



