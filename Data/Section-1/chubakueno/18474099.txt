#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll,ll> ii;
typedef pair<ll,ii> iii;
int ans[1000000];
int want[1000000];
int vis[1000000];
vector<vector<int> > dag;
vector<int> sorted; // Arreglo que contendrá la solución
int n,m;
vector<int> color;
void topologic_sort_visit(int v)
{
	color[v] = 1; // Discovered
	for(int i = 0; i < dag[v].size(); i++)
	{
		int u = dag[v][i];
		if(color[u] < 1) // Not discovered
		{
			topologic_sort_visit(u);
		}
	}
	color[v] = 2;
	sorted.push_back(v);
}
void topologic_sort()
{
	sorted.clear();
	color.clear();
	color.resize(n,0);
	for(int i = 0; i < (int)dag.size(); i++)
		if(color[i] < 1) // blanco
			topologic_sort_visit(i);
	reverse(sorted.begin(),sorted.end());
}
int main(){
	ios::sync_with_stdio(false);
	cin>>n>>m;
	dag.resize(n);
	memset(ans,-1,sizeof ans);
	memset(vis,0,sizeof vis);
	for(int i=0;i<m;++i){
		int p,q;
		cin>>p>>q;--p;--q;
		ans[q]=p;
	}
	for(int i=0;i<n;++i){
		cin>>want[i];
		--want[i];
	}
	
	bool ok=true;
	for(int i=0;i<n;++i){
		if(ans[i]==-1) continue;
		if(want[ans[i]]==want[i]){
			//cout<<ans[i]<<" "<<i<<endl;
			dag[ans[i]].push_back(i);
		}else if(i==want[i]){
			//cout<<i<<" "<<ans[i]<<endl;
			dag[i].push_back(ans[i]);
		}else{
			ok=false;
		}
	}
	if(ok==false){
		cout<<-1;
		return 0;
	}	
	topologic_sort();
	cout<<sorted.size()<<endl;
	for(int i=0;i<sorted.size();++i)
		cout<<sorted[i]+1<<endl;
}