#include<bits/stdc++.h>
using namespace std;

#define lli long long
#define pb push_back
#define mp make_pair
#define gc getchar_unlocked
#define DEBUG(x) cout<<">value ("<<#x<<") : "<<x<<endl;
#define mod 1000000007

const int lmt = 1000005;
int toadd = 550005;
set<int>sumSt[lmt];
set<int> difSt[lmt];

const lli oo = (long long)1e18;
lli ans[lmt];
vector<pair<int,int>> in;

pair<int,int> horizotalInters(int a,int slope,int c,int y){
    int x = a*y-c;
    x /= slope;
    return make_pair(x,y);
}

bool outside(pair<int,int> p,int n,int m){
    if(p.first<0 || p.first>n) return true;
    //cout<<"out"<<endl;
    if(p.second<0 || p.second>m) return true;
   // cout<<"out2"<<endl;
    return false;
}

pair<int,int> vericalInters(int a,int slope,int c,int x){
    int y = slope*x+c;
    return make_pair(x,y);
}

bool endpoint(int x,int y,int n,int m){
    if(x==0 && y==0) return true;
    if(x==0 && y==m) return true;
    if(x==n && y==0) return true;
    if(x==n && y==m) return true;
    return false;
}

lli timm=0LL;

lli calcDist(int x,int y,int xx,int yy){
    double xd = (double)(x-xx)*(double)(x-xx);
    double yd = (double)(y-yy)*(double)(y-yy);
    double ans = (xd+yd)/2;
    return ((long long)sqrt(ans));
}

void solve(int sx,int sy,int ex,int ey,int slope){
    vector<int> toerase;
   // cout<<sx<<" "<<sy<<" "<<ex<<" "<<ey<<" "<<timm<<endl;
    if(slope==1){
        int diff = sy-sx+toadd;
        for(auto &it:difSt[diff]){
            lli loc = calcDist(sx,sy,in[it].first,in[it].second)+timm;
           // cout<<"ans for"<<in[it].first<<" "<<in[it].second<<" "<<loc<<endl;
           // DEBUG(loc);
           // DEBUG(ans[it]);
            ans[it]=min(ans[it],loc);
          //  DEBUG(ans[it]);
            sumSt[sx+sy].erase(it);
            toerase.pb(it);
        }
        for(int i=0;i<toerase.size();i++)
            difSt[diff].erase(toerase[i]);
        timm = calcDist(sx,sy,ex,ey)+timm;
    }
    else{
        int sum=sx+sy;
        for(auto &it:sumSt[sum]){
            lli loc = calcDist(sx,sy,in[it].first,in[it].second)+timm;
           // cout<<"ans for"<<in[it].first<<" "<<in[it].second<<" "<<loc<<endl;
           // DEBUG(loc);
           // DEBUG(ans[it]);
            ans[it]=min(ans[it],loc);
           // DEBUG(ans[it]);
            difSt[sy-sx+toadd].erase(it);
            toerase.pb(it);
        }
        for(int i=0;i<toerase.size();i++)
            sumSt[sum].erase(toerase[i]);
        timm = calcDist(sx,sy,ex,ey)+timm;
    }
}

void printfAns(int k){
    for(int i=0;i<k;i++)
        cout<<ans[i]<<" ";
    cout<<endl<<endl;
}

int main(){
    int n,m,k;
    scanf("%d %d %d",&n,&m,&k);
    for(int i=0;i<k;i++){
        ans[i]=oo;
        int x,y;
        scanf("%d %d",&x,&y);
        in.pb({x,y});
        sumSt[x+y].insert(i);
        difSt[y-x+toadd].insert(i);
    }
    //rt 1,down 1 , diff d 1
    int slope = 1;
    int sx=0,sy=0,ex=0,ey=0;
    int cnt = 0;
    while(true && cnt++<20){
        int c = sy-slope*sx;
       // DEBUG(sx);
       // DEBUG(sy);
        //        printfAns(k);
        pair<int,int> p = horizotalInters(1,slope,c,0);
        if(!outside(p,n,m) && !((p.first==sx)&&(p.second==sy))){
           // cout<<"hori 0 "<<p.first<<" "<<p.second<<endl;
            ex=p.first;
            ey=p.second;
            solve(sx,sy,ex,ey,slope);
            if(slope==-1)
                slope=1;
            else
                slope=-1;
            sx=ex;
            sy=ey;
            if(endpoint(sx,sy,n,m))
                break;
            continue;
        }
        p = horizotalInters(1,slope,c,m);
        /*cout<<"hor mm "<<p.first<<" "<<p.second<<endl;
        cout<<outside(p,n,m)<<endl;*/
        if(!outside(p,n,m) && !((p.first==sx)&&(p.second==sy))){
            //cout<<"hori n "<<p.first<<" "<<p.second<<endl;
            ex=p.first;
            ey=p.second;
            solve(sx,sy,ex,ey,slope);
            if(slope==-1)
                slope=1;
            else
                slope=-1;
            sx=ex;
            sy=ey;
            if(endpoint(sx,sy,n,m))
                break;
            continue;
        }
        p = vericalInters(1,slope,c,0);
        if(!outside(p,n,m) && !((p.first==sx)&&(p.second==sy))){
            ex=p.first;
            ey=p.second;
           // cout<<"ver 0 "<<p.first<<" "<<p.second<<endl;
            solve(sx,sy,ex,ey,slope);
            if(slope==-1)
                slope=1;
            else
                slope=-1;
            sx=ex;
            sy=ey;
            if(endpoint(sx,sy,n,m))
                break;
            continue;
        }
        p = vericalInters(1,slope,c,n);
        //cout<<"ver mm "<<p.first<<" "<<p.second<<endl;
        //cout<<outside(p,n,m)<<endl;
        if(!outside(p,n,m) && !((p.first==sx)&&(p.second==sy))){
           // cout<<"ver m "<<p.first<<" "<<p.second<<endl;
            ex=p.first;
            ey=p.second;
            solve(sx,sy,ex,ey,slope);
            if(slope==-1)
                slope=1;
            else
                slope=-1;
            sx=ex;
            sy=ey;
            if(endpoint(sx,sy,n,m))
                break;
        }
    }
    for(int i=0;i<k;i++){
        if(ans[i]==oo)
            ans[i]=-1;
        printf("%lld\n",ans[i]);
    }
    return 0;
}
