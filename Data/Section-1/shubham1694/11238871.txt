#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define inf 1000000000
#define maxn 5000000

#define ll long long
#define pii pair<int, int>
#define pb push_back
#define sin scanint
#define bitcount(x) __builtin_popcount(x)
#define fill(s, p) memset(s, p, sizeof(s));
#define gc getchar

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

ll modpow(ll a, ll b)
{
    ll x=1ll, y=a;
    while(b){
        if(b%2)
            x=(x*y)%MOD;
        y=(y*y)%MOD;
        b/=2;
    }
    return x;
}

ll gcd(ll a, ll b)
{
    if(a%b==0)
        return b;
    else
        return gcd(b, a%b);
}

vector<int> prime;
bool p[maxn+10];
int cnt[maxn+10];

void gen_p()
{
    fill(p, true);
    int i, j;
    for(i=4; i<=maxn; i+=2)
        p[i] = false;
    for(i=3; i<sqrt(maxn); i+=2){
        if(p[i]){
            for(j=i*i; j<=maxn; j+=i)
                p[j] = false;
        }
    }
    for(i=2; i<=maxn; i++){
        if(p[i])
            prime.pb(i);
    }
    return;
}

int main()
{
    gen_p();
    int t, a, b, i, j, prev;
    sin(t);
    while(t--){
        sin(a);
        sin(b);
        for(i=0; i<prime.size(); i++){
            cnt[prime[i]] = 0;
            if(prime[i]>a)
                break;
            prev = 1;
            while(1){
                prev *= prime[i];
                if((a/prev)==0)
                    break;
                cnt[prime[i]]+=(a/prev);
            }
        }
        //for(i=0; i<20; i++)
        //  cout << i << " " << cnt[i] << endl;
        for(i=0; i<prime.size(); i++){
            if(prime[i]>b)
                break;
            prev = 1;
            while(1){
                prev *= prime[i];
                if((b/prev)==0)
                    break;
                cnt[prime[i]]-=(b/prev);
            }
        }
        //for(i=0; i<20; i++)
        //  cout << i << " " << cnt[i] << endl;
        prev = 0;
        for(i=0; i<prime.size(); i++){
            if(prime[i]>a)
                break;
            prev+=cnt[prime[i]];
        }
        cout << prev << endl;
    }
    return 0;
}