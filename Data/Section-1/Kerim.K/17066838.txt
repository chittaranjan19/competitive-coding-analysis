#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define x first
#define y second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> point;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
double eps=1e-9;
vector<point> poly;
int px[MAXN],py[MAXN];
bool PointInsidePolygon(point P){
    int n = poly.size();
    bool in = 0;
    for(int i = 0,j = n-1;i<n;j = i++){
        double dx = poly[j].x-poly[i].x;
        double dy = poly[j].y-poly[i].y;
        
        if((poly[i].y<=P.y+eps && P.y<poly[j].y) ||
            (poly[j].y<=P.y+eps && P.y<poly[i].y))
            if(P.x-eps<dx*(P.y-poly[i].y)/dy+poly[i].x)
                in ^= 1;
    }
    return in;
}
int ans=0;
int tap(int x){
	if(px[x]==px[x+1] and py[x+1]>py[x])
		return 1;
	if(px[x]==px[x+1] and py[x+1]<py[x])
		return 3;
	if(py[x]==py[x+1] and px[x+1]>px[x])
		return 2;
	if(py[x]==py[x+1] and px[x+1]<px[x])
		return 4;				
}
int main(){
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%d%d",&px[i],&py[i]);
		poly.pb(mp(px[i],py[i]));
	}
	scanf("%d%d",&px[n+1],&py[n+1]);
	int yon=1;
	for(int i=1;i<=n;i++){
		int tar=tap(i);
		if(tar==yon){
			yon=(yon+1);
			if(yon>4)
				yon=1;
		}
		else{
			ans++;
			yon=(tar+1);
			if(yon>4)
				yon=1;
		}
	}
	printf("%d\n",ans);
	return 0;
}

