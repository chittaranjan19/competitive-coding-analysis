#include <bits/stdc++.h>/*
#include <ext/pb_ds/assoc_container.hpp> //required
#include <ext/pb_ds/tree_policy.hpp> //required
using namespace __gnu_pbds; //required
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ordered_set <int> s;
or:
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ordered_set s;
cout << s.order_of_key(3) << endl;	// the number of elements in s less than 3 (in this case, 0-based index of element 3)
	cout << *s.find_by_order(1) << endl; // 1-st elemt in s (in sorted order, 0-based)
*/
using namespace std;

#define maxn 100007
#define INF 1 << 30
#define LLINF 10000000000000000009
#define pb push_back
#define mp make_pair
#define ss second
#define ff first
#define pii pair<int,int>


typedef long long ll;
typedef pair<ll,ll> PII;
//priority_queue< PII , vector<PII>, greater<PII> >q;
int arr[1000009];

stack<int>st;
queue<int>q;
deque<int>de;
stack<int>st1;
queue<int>q1;
deque<int>de1;

int main()
{
	int n,m,ans=0,sta=0,qa=0,dea1=0,dea2=0;
	cin>>m;
	for(int i=0;i<m;i++){
		cin>>n;
		if(n==0)
		{
			ans=0;
			if(st.size()>0){			
				ans++;
			}
			if(q.size()>0){
				ans++;
			}
			if(de.size()>0){	
				ans++;
			}
			cout<<ans;
			if(ans>0)
			cout<<" ";
			if(st.size()>0){			
				cout<<"popStack";
				if(q.size()>0 or de.size()>0)
				cout<<" ";
			}
			if(q.size()>0){
				cout<<"popQueue";
				if(de.size()>0)
				cout<<" ";
			}
			if(de.size()>0){	
				if(de.front()>=de.back())	
				cout<<"popFront";
				else
				cout<<"popBack";			
			}
			cout<<endl;
			st=st1;
			q=q1;
			de=de1;
			//if(st.size()==0 && q.size()==0 && de.size()==0)
		}
		else
		{
			sta=0;
			qa=0;
			dea1=0;
			dea2=0;
			if(st.size()>0)
			sta=st.top();
			if(q.size()>0)
			qa=q.front();
			if(de.size()>0)
			dea1=de.front();
			if(de.size()>0)
			dea2=de.back();
			
			if(sta<=qa && sta<=dea1 && sta<=dea2){
				st.push(n);	
				cout<<"pushStack"<<endl;
			}
			else if(qa<=sta && qa<=dea1 && qa<=dea2){
				q.push(n);
				cout<<"pushQueue"<<endl;
			}
			else if(dea1<=sta && dea1<=qa && dea1<=dea2){
				de.push_front(n);
				cout<<"pushFront"<<endl;
			}
			else{
				de.push_back(n);
				cout<<"pushBack"<<endl;
			}
		}
	}
return 0;
}
/*
5
3
2
3
1
0
*/