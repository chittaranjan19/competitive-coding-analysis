// first reads and sorts all points to avoid BST
// then adds and removes points online, O(N * log^2(N))

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
struct P {
	ll x, y;
	void read() { scanf("%lld%lld", &x, &y); }
	void write() const { printf("(%lld,%lld)", x, y); }
	ll operator * (const P & b) const { return x * b.y - y * b.x; }
	P operator + (const P & b) const { return P{x + b.x, y + b.y}; }
	P operator - (const P & b) const { return P{x - b.x, y - b.y}; }
	bool operator < (const P & b) const {
		return make_pair(x, y) < make_pair(b.x, b.y);
	}
	bool operator == (const P & b) const {
		return make_pair(x, y) == make_pair(b.x, b.y); }
	bool underLine(const P & a, const P & b) const {
		/* write();
		printf(".underLine( ");
		a.write();
		printf(", ");
		b.write();
		puts(" );\n"); */
		return (b - a) * (*this - a) <= 0;
	}
};

int tak_dupsko;
struct Node {
	int size, a_size, b_size;
	P * a, * b, * first;
	Node * L, * R;
	void check() {
		// printf("%d vs. %d + %d\n", size, a_size, b_size);
		if(L != NULL) assert(size == a_size + b_size);
		assert(a_size <= size);
		assert(b_size <= size);
		if(L == NULL) assert(a_size == 0 && b_size == 0);
		assert((L == NULL) == (R == NULL));
		assert((first == NULL) == (size == 0));
		if(L != NULL) {
			assert((a == NULL) == L -> empty());
			assert((b == NULL) == R -> empty());
		}
		// printf("%d %d %d\n", size, (L == NULL ? 0 : L -> size), (R == NULL ? 0 : R -> size));
		if(L == NULL) {
			assert(size == 0 || size == 1);
			assert(a_size == 0 && b_size == 0);
		}
		else assert(size <= L -> size + R -> size);
		// puts("ok");
	}
	bool empty() { return size == 0; }
	bool isLeaf() { return L == NULL; }
	bool nonLeaf() { return !isLeaf(); }
	void act() {
		if(isLeaf()) {
			check();
			return;
		}
		if(L -> size) first = L -> first;
		else if(R -> size) first = R -> first;
		else first = NULL;
		if(L -> empty() || R -> empty()) {
			a = L -> first; // maybe NULL
			a_size = L -> size;
			b = R -> first;
			b_size = R -> size;
			size = a_size + b_size;
			check();
			return;
		}
		// printf("run because %d %d\n", L -> size, R -> size);
		assert(L -> size && R -> size);
		a_size = b_size = 1;
		size = act(L, R); // modifies a_size and b_size
		check();
		// printf("size = %d\n", size);
	}
	private : int act(Node * inter1, Node * inter2) {
		// printf("> %d %d\n", inter1 -> size, inter2 -> size);
		assert(inter1 -> size && inter2 -> size);
		if(inter1 -> size == 1 && inter2 -> size == 1) {
			// puts("ret 2");
			a = inter1 -> first;
			b = inter2 -> first;
			return 2;
		}
		P * A, * B, * C, * D;
		A = B = C = D = NULL;
		if(inter1 -> size > 1) {
			if(NULL == (A = inter1 -> a))
				return act(inter1 -> R, inter2);
			if(NULL == (B = inter1 -> b))
				return act(inter1 -> L, inter2);
		}
		if(inter2 -> size > 1) {
			if(NULL == (C = inter2 -> a))
				return act(inter1, inter2 -> R);
			if(NULL == (D = inter2 -> b))
				return act(inter1, inter2 -> L);
		}
		// printf("%d %d\n", inter1 -> isLeaf(), inter2 -> isLeaf());
		auto remA = [&] {
			int tmp = inter1 -> a_size;
			tmp -= inter1 -> R -> size - inter1 -> b_size;
			a_size += tmp;
			// printf("a += %d (teraz %d)\n", tmp, a_size);
			return tmp + act(inter1 -> R, inter2);
		};
		auto remB = [&] { return act(inter1 -> L, inter2); };
		auto remC = [&] { return act(inter1, inter2 -> R); };
		auto remD = [&] {
			int tmp = inter2 -> b_size;
			tmp -= inter2 -> L -> size - inter2 -> a_size;
			b_size += tmp;
			return tmp + act(inter1, inter2 -> L);
		};
		if(inter1 -> size == 1) {
			assert(inter2 -> size >= 2);
			assert(inter1 -> first != NULL);
			assert(C != NULL);
			assert(D != NULL);
			if(C -> underLine(* inter1 -> first, *D)) {
				assert(inter2 -> b != NULL);
				assert(inter2 -> R != NULL);
				return remC();
			}
			else {
				return remD();
			}
		}
		if(inter2 -> size == 1) {
			if(B -> underLine(*A, * inter2 -> first))
				return remB();
			else {
				assert(inter1 -> b != NULL);
				// printf("%d %d\n", inter1 -> size, inter2 -> size);
				// printf("%d %d\n", inter1 -> L -> size, inter1 -> R -> size);
				assert(inter1 -> R -> size);
				return remA();
			}
		}
		if(B -> underLine(*A, *C) || B -> underLine(*A, *D)
			|| B -> underLine(*A, *inter2 -> first))
			return remB();
		if(C -> underLine(*B, *D))
			return remC();
		assert(!C -> underLine(*A, *D));
		int a_memo = a_size, b_memo = b_size;
		int ret_maybe = remA();
		if(B -> underLine(*A, *b)) {
			a_size = a_memo;
			b_size = b_memo;
			assert(++tak_dupsko < 1000 * 1000);
			inter1 = inter1 -> L; // remB()
			return remD();
		}
		return ret_maybe;
	}
	public : long long query(long long mul) {
		auto evaluate = [&] (P * p) {
			return mul * p -> x + p -> y;
		};
		if(size == 1) return evaluate(first);
		if(L -> empty()) return R -> query(mul);
		if(R -> empty()) return L -> query(mul);
		if(evaluate(a) > evaluate(b)) return L -> query(mul);
		else return R -> query(mul);
	}
};

const int UPPER = 0, LOWER = 1;
struct Hull {
	vector<Node> tr[2];
	vector<P> all;
	int pot;
	int getID(const P & a, int type) const {
		int tmp = lower_bound(all.begin(), all.end(), a) - all.begin();
		assert(all[tmp] == a); // I didn't get it in the constructor
		return tmp;
	}
	Hull(vector<P> w) {
		sort(w.begin(), w.end());
		w.resize(unique(w.begin(), w.end()) - w.begin());
		all = w;
		pot = 1;
		while(pot < (int) all.size()) pot *= 2;
		for(int rep = 0; rep < 2; ++rep) {
			vector<Node> & t = tr[rep];
			t.clear();
			t.resize(2 * pot);
			for(int i = 1; i < pot; ++i) {
				t[i].L = & t[2*i];
				t[i].R = & t[2*i+1];
			}
		}
	}
	void change(const P & last) {
		for(int type = 0; type < 2; ++type) {
			int id = getID(last, type);
			P * which_point = & all[id];
			if(type == LOWER) id = (int) all.size() - 1 - id;
			// printf("id = %d\n", id);
			Node & tmp = tr[type][pot+id];
			if(tmp.empty()) {
				tmp.size = 1;
				tmp.first = which_point;
				// printf("type = %d, id = %d, points = ", type, id);
				// all[id].write();
				// puts("");
			}
			else {
				tmp.size = 0;
				tmp.first = NULL;
			}
			for(int i = pot + id; i >= 1; i /= 2)
				tr[type][i].act();
			// if(tr[type][pot].size) tr[type][pot].first -> write();
			// puts("");
		}
	}
	void query(long long mul) {
		if(tr[UPPER][1].size == 0) {
			puts("EMPTY SET");
			return;
		}
		else printf("%lld\n",
				max(tr[0][1].query(mul), tr[1][1].query(mul)));
	}
};
const int nax = 3e5 + 5;
int type[nax], val[nax];
P p[nax];
int main() {
	int n;
	scanf("%d", &n);
	vector<P> w;
	for(int i = 1; i <= n; ++i) {
		scanf("%d", &type[i]);
		if(type[i] == 1) {
			p[i].read();
			w.push_back(p[i]);
		}
		else scanf("%d", &val[i]);
	}
	Hull hull(w);
	map<P, int> m;
	for(int i = 1; i <= n; ++i) {
		if(type[i] == 1) {
			if(m[p[i]]++ == 0) hull.change(p[i]);
		}
		else if(type[i] == 2) {
			if(--m[p[val[i]]] == 0) hull.change(p[val[i]]);
		}
		else {
			assert(type[i] == 3);
			hull.query(val[i]);
		}
	}
}
