#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <iterator>
#include <stack>
#include <string>
#include <climits>
#include <bitset>
#include <queue>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <sstream>
#include <iomanip>

#define MOD 1000000007
#define ll long long int
#define vi vector<int>
#define vll vector<long long int>
#define vvi vector<vector<int> >
#define vvl vector<vector<long long int> >
#define vp vector<pair<int, int> >
#define sc(n) scanf("%d", &n)
#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define PI 3.14159265

using namespace std;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent >>= 1;
		base = (base * base) % modulus;
	}
	return result;
}

ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
	if (a == 0)
	{
		*x = 0, *y = 1;
		return b;
	}
	ll x1, y1;
	ll gcd = gcdExtended(b%a, a, &x1, &y1);
	*x = y1 - (b/a) * x1;
	*y = x1;
	return gcd;
}

ll modInverse(ll a, ll m)
{
	ll x, y;
	ll g = gcdExtended(a, m, &x, &y);
	ll res = (x%m + m) % m;
	return res;
}

bool isstore[100005];
class edges
{
	public:
		int n1, n2, weight;

		edges(){}

		edges(int a, int b, int c)
		{
			n1=a;
			n2=b;
			weight=c;
		}
};

bool compare(const edges& a, const edges& b)
{
	return a.weight < b.weight;
}

int main()
{
	ssync;
	int n;
	sc(n);
	
	string s = to_string(n);
	bool four, seven = false;

	for (int i = 0; i < s.length(); ++i)
	{
		if (s[i] != '4' && s[i] != '7')
		{
			cout << "NO" << endl;
			exit(0);
		}
		else if (s[i] == '4')
			four = true;
		else if (s[i] == '7')
			seven = true;
	}
	if (four && seven)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
	
	
	
	return 0;
}

