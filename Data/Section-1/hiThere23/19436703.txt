#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int q, rig = 1, r = 0, con[mn], top = 0, check[mn];
string s;
vector<int> lQue, nQue;
vector<long long> way[mn], poQ, poQ1, divQ, fac, divfac;

void setup()
{
    int t;
    cin >> q >> s;
    con[s.size()] = 1;
    check[1] = s.size();
    FOR(i, 1, q)
    {
        cin >> t;
        if (t == 1)
        {
            cin >> s;
            if(!con[s.size()])
            {
                con[s.size()] = ++ rig;
                check[rig] = s.size();
            }
        }
        else
        {
            cin >> t;
            lQue.pb(t);
            nQue.pb(s.size());
            top = max(top, t);
        }
    }
    top ++;
}

long long power(long long a, long long b)
{
    long long re = 1;
    while(b)
    {
        if (b & 1)
            re = (re * a) % maxC;
        b >>= 1;
        a = (a * a) % maxC;
    }
    return re;
}

long long c(int a, int b)
{
    long long re = (fac[b] * divfac[a]) % maxC;
    re = (re * divfac[b - a]) % maxC;
    return re;
}

void build(int x)
{
    long long sum = 0;
    FOR(i, x, top)
    {
        long long add = (c(x - 1, i - 1) * poQ1[i - x]) % maxC;
        add = (add * divQ[i]) % maxC;
        sum += add;
        way[i].pb(sum);
    }
    FOR(i, 0, x - 1)
        way[i].pb(0);
}

void prepare()
{
    fac.pb(1);
    divfac.pb(1);
    poQ.pb(1);
    poQ1.pb(1);
    FOR(i, 1, top)
    {
        fac.pb((fac[i - 1] * i) % maxC);
        divfac.pb(power(fac[i], maxC - 2));
        poQ.pb((poQ[i - 1] * 26) % maxC);
        poQ1.pb((poQ1[i - 1] * 25) % maxC);
    }
    divQ.resize(top);
    divQ.pb(power(26, maxC - 1 - top));
    FORD(i, top - 1, 0)
        divQ[i] = (divQ[i + 1] * 26) % maxC;
    FOR(i, 1, rig)
        build(check[i]);
}

void xuly()
{
    prepare();
    FOR(i, 0, int(lQue.size()) - 1)
    {
        if (lQue[i] < nQue[i])
        {
            cout << "0\n";
            continue;
        }
        int c = con[nQue[i]] - 1;
        long long ans = (way[lQue[i]][c] - way[nQue[i] - 1][c]) % maxC;
        ans = (ans + maxC) % maxC;
        ans = (ans * poQ[lQue[i]]) % maxC;
        cout << ans << '\n';
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
