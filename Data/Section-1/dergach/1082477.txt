#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

#define eps 1e-8
#define INF 1010101010

vector <vector <pair <int, int> > > v;
int i, j, k, n, L, m, s, from, to, w, cnt;
set <pair <int, int> > sp;
set <pair <int, int> > :: iterator it;
int d[100005], used[100005];
pair <int, int> tmp;

int main()
{
    bool ok = true;
    scanf("%d %d %d", &n, &m, &s);
    v.resize(n+1);
    for(i = 0; i < m; i++)
    {
        scanf("%d %d %d", &from, &to, &w);
        v[from].push_back(make_pair(to, w));
        v[to].push_back(make_pair(from, w));
    }
    scanf("%d", &L);

    for(i = 1; i <= n; i++)
        d[i] = INF;
    d[s] = 0;
    sp.insert(make_pair(0, s));

    while(!sp.empty())
    {
        ok = false;
        while(!sp.empty())
        {
            it = sp.begin();
            tmp = *it;
            sp.erase(it);
            w = tmp.first;
            i = tmp.second;
            if(used[i] == 0)
            {
                ok = true;
                break;
            }
        }
        if(sp.empty() && !ok)
            break;
        used[i] = 1;
        for(j = 0; j < v[i].size(); j++)
            if(v[i][j].second + w < d[v[i][j].first])
            {
                d[v[i][j].first] = v[i][j].second + w;
                sp.insert(make_pair(d[v[i][j].first], v[i][j].first));
            }
    }

    for(i = 1; i <= n; i++)
        if(d[i] == L)
            cnt++;

    int cnt2 = 0;
    for(i = 1; i <= n; i++)
    {
        for(j = 0; j < v[i].size(); j++)
        {
            if(L - d[i] > 0 && L - d[i] < v[i][j].second && v[i][j].second - L + d[i] + d[v[i][j].first] > L)
                cnt++;
        }
    }

    for(i = 1; i <= n; i++)
    {
        for(j = 0; j < v[i].size(); j++)
        {
            if(L - d[i] > 0 && L - d[i] < v[i][j].second && v[i][j].second - L + d[i] + d[v[i][j].first] == L)
                cnt2++;
        }
    }

    cnt += cnt2 / 2;
    printf("%d\n", cnt);
    return 0;
}