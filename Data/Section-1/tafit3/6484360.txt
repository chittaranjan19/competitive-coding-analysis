import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Map;
import java.util.TreeMap;

public class Megacity {

    private Megacity() throws IOException {
        final double TENMIL = 1e7;
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String h = rd.readLine();
        String[] t = h.split("\\s+");
        int n = Integer.parseInt(t[0]);
        int s = Integer.parseInt(t[1]);
        Map<BigDecimal,Integer> p = new TreeMap<BigDecimal, Integer>();
        p.put(BigDecimal.ZERO,s);
        for(int i=0;i<n;i++) {
            h = rd.readLine();
            t = h.split("\\s+");
            int x = Integer.parseInt(t[0]);
            int y = Integer.parseInt(t[1]);
            int population = Integer.parseInt(t[2]);
            long distance = Math.round(Math.sqrt(x*x + y*y)*TENMIL);
            BigDecimal distanceDec = new BigDecimal(new BigInteger(""+distance),7);
            addToCountMap(p, distanceDec, population);
        }
        int sum = 0;
        for(Map.Entry<BigDecimal, Integer> e: p.entrySet()) {
            sum += e.getValue();
            if(sum >= 1000000) {
                System.out.println(e.getKey().doubleValue());
                return;
            }
        }
        System.out.println("-1");
    }

    private void addToCountMap(Map<BigDecimal, Integer> p, BigDecimal key, Integer value) {
        Integer currentValue = p.get(key);
        if(currentValue == null) {
            currentValue = value;
        } else {
            currentValue += value;
        }
        p.put(key, value);
    }

    private void out(String s) {
        System.out.println(s);
    }

    public static void main(String[] args) throws IOException {
        new Megacity();
    }
}
