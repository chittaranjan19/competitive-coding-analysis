import java.io.*;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.StringTokenizer;

/**
 * Created by Leonti on 2016-03-13.
 */
public class D {
    public static void main(String[] args) {
        InputReader inputReader = new InputReader(System.in);
        PrintWriter printWriter = new PrintWriter(System.out, true);

        int n = inputReader.nextInt();
        int m = inputReader.nextInt();
        int s = inputReader.nextInt();
        int d = inputReader.nextInt();
        int[] a = new int[n + 2];
        for (int i = 1; i < n + 1; i++) {
            a[i] = inputReader.nextInt();
        }
        a[n + 1] = m + s + 2;

        Arrays.sort(a, 1, a.length - 1);

        if (a[1] <= s ||
                d < 2) {
            printWriter.print("IMPOSSIBLE");
        } else {
            int[] b = new int[2 * n];
            int currentD = d;
            boolean isPossible = true;
            for (int i = 1, j = 0; i < n + 1; i++) {
                int toPrev = a[i] - a[i - 1];
                int toNext = a[i + 1] - a[i];

                if (toPrev >= s + 2 && i != 1) {
                    b[j++] = a[i] - 1;
                    currentD--;
                } else if (toPrev >= s + 1 && i == 1){
                    b[j++] = a[i] - 1;
                    currentD--;
                }

                if (toNext >= s + 2) {
                    if (currentD >= 1) {
                        b[j++] = a[i] + 1;
                        currentD = d;
                    } else {
                        isPossible = false;
                        break;
                    }
                } else if (toNext + 1 > currentD) {
                    isPossible = false;
                    break;
                } else {
                    currentD -= toNext;
                }
            }

            if (isPossible) {
                int i = 0;
                for (; i < 2 * n && b[i] != 0 ; i++) {
                    if (i != 0) {
                        if (i % 2 == 0) {
                            printWriter.println("RUN " + (b[i] - b[i - 1]));
                        } else {
                            printWriter.println("JUMP " + (b[i] - b[i - 1]));
                        }
                    } else {
                        printWriter.println("RUN " + b[i]);
                    }
                }
                if ((m - b[i - 1]) != 0) {
                    printWriter.println("RUN " + (m - b[i - 1]));
                }
            } else {
                printWriter.print("IMPOSSIBLE");
            }
        }

        printWriter.close();
    }

    private static class InputReader {
        private final BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream in) {
            reader = new BufferedReader(new InputStreamReader(in));
        }

        public int[] nextIntArray(int size) {
            int[] array = new int[size];
            for (int i = 0; i < size; ++i) {
                array[i] = nextInt();
            }
            return array;
        }

        public long[] nextLongArray(int size) {
            long[] array = new long[size];
            for (int i = 0; i < size; ++i) {
                array[i] = nextLong();
            }
            return array;
        }

        public double[] nextDoubleArray(int size) {
            double[] array = new double[size];
            for (int i = 0; i < size; ++i) {
                array[i] = nextDouble();
            }
            return array;
        }

        public String[] nextStringArray(int size) {
            String[] array = new String[size];
            for (int i = 0; i < size; ++i) {
                array[i] = next();
            }
            return array;
        }

        public boolean[][] nextBooleanTable(int rows, int columns, char trueCharacter) {
            boolean[][] table = new boolean[rows][columns];
            for (int i = 0; i < rows; ++i) {
                String row = next();
                assert row.length() == columns;
                for (int j = 0; j < columns; ++j) {
                    table[i][j] = (row.charAt(j) == trueCharacter);
                }
            }
            return table;
        }

        public char[][] nextCharTable(int rows, int columns) {
            char[][] table = new char[rows][];
            for (int i = 0; i < rows; ++i) {
                table[i] = next().toCharArray();
                assert table[i].length == columns;
            }
            return table;
        }

        public int[][] nextIntTable(int rows, int columns) {
            int[][] table = new int[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    table[i][j] = nextInt();
                }
            }
            return table;
        }

        public long[][] nextLongTable(int rows, int columns) {
            long[][] table = new long[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    table[i][j] = nextLong();
                }
            }
            return table;
        }

        public double[][] nextDoubleTable(int rows, int columns) {
            double[][] table = new double[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    table[i][j] = nextDouble();
                }
            }
            return table;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line = readLine();
                if (line == null) {
                    return false;
                }
                tokenizer = new StringTokenizer(line);
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                tokenizer = new StringTokenizer(readLine());
            }
            return tokenizer.nextToken();
        }

        public String readLine() {
            String line;
            try {
                line = reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return line;
        }
    }
}
