#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <cstring>

using namespace std;
typedef long long ll;

/*
ll gcd(ll b, ll a) {
	if (b < a) {
		ll tmp = b; b = a; a = tmp;
	}
	if (a == 0) return b;
	while (a > 0) {
		ll tmp = b;
		b = b-a;
		a = tmp%a;
	}
	return b;
}

struct rational_t { ll nu, de;
  rational_t(const ll &n = 0, const ll &d = 1) {
    ll g = gcd(abs(n), abs(d)); nu = n / g; de = d / g;
    if (de < 0) { nu = -nu; de = -de; } }
  rational_t operator+(const rational_t& b) const
  { return rational_t( nu*b.de+de*b.nu, de*b.de ); }
  rational_t operator-(const rational_t& b) const
  { return rational_t( nu*b.de-de*b.nu, de*b.de ); }
  rational_t operator-() { return rational_t(-nu, de); }
  rational_t operator*(const rational_t& b) const
  { return rational_t( nu*b.nu, de*b.de ); }
  rational_t operator/(const rational_t& b) const
  { return rational_t( nu*b.de, de*b.nu ); }
  bool operator== (const rational_t & b) const {return nu * b.de == b.nu * de;}
  bool operator== (const ll &k) const { return nu == k * de; }
  bool operator< (const rational_t& b) const { return nu * b.de < b.nu * de; }};
*/

typedef long double ld;
ll poly[100005];

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n, k; cin >> n >> k;
	int unk = -1;
	int unkCount = 0;
	for (int i = 0; i < n; i++) {
		string s; cin >> s;
		if (s[0] == '?') {
			unk = i;
			unkCount++;
		} else {
			poly[i] = atoi(s.c_str());
		}
	}

	if (unkCount > 1 || (unkCount == 1 && n % 2 == 0)) {
		cout << "No" << endl;
	} else {
		bool good = true;
		if (unk == 0 || unk == n) {
			cout << "Yes" << endl;
		} else {
			ld a = poly[n];
			for (int i = n-1; i > unk; i--) {
				a = poly[i] + (k*a);
			}

			ld a2 = (ld)poly[0]/(ld)(-k);
			for (int i = 0; i < unk; i++) {
				a2 = (a2 - poly[i]) / k;
			}

			if (abs(a - a2) < 1e-8) {
				cout << "Yes" << endl;
			} else {
				cout << "No" << endl;
			}
		}
	}
}
