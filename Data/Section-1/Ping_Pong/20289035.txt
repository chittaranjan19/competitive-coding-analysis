#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e9;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;
const ll P = 239;

vector<ll> F;

void build(ll n)
{
    F.resize(n, 0);
}

void add(ll x, ll val)
{
    for (; x < F.size(); x = x | (x + 1))
        F[x] = (F[x] + val) % MOD;
}

ll get(ll x)
{
    ll res = 0;
    for (; x >= 0; x = (x & (x + 1)) - 1)
        res = (res + F[x]) % MOD;
    return res;
}

ll get(ll l, ll r)
{
    return (get(r) - get(l - 1) + MOD) % MOD;
}

int main()
{
    //freopen("point.in", "r", stdin);
    //freopen("point.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n, m;
    cin >> n >> m;
    ll a[m][2];
    set<ll> s;
    s.insert(0);
    s.insert(n);
    for (ll i = 0; i < m; i++)
    {
        cin >> a[i][0] >> a[i][1];
        s.insert(a[i][1]);
    }
    n = s.size();
    build(n);
    vector<ll> b, dp(n, 0);
    for (auto i : s)
        b.push_back(i);
    sort(b.begin(), b.end());
    map<ll, ll> left;
    for (ll i = 0; i < n; i++)
        left[b[i]] = b[i];
    for (ll i = 0; i < m; i++)
        left[a[i][1]] = min(left[a[i][1]], a[i][0]);
    dp[0] = 1;
    add(0, 1);
    for (ll i = 1; i < n; i++)
    {
        dp[i] = get(lower_bound(b.begin(), b.end(), left[b[i]]) - b.begin(), i - 1);
        add(i, dp[i]);
    }
    cout << dp[n - 1];
    return 0;
}
