const   inf     =6*trunc(1e6);

type    arr1    =array[0..inf] of longint;
        arr2    =array[0..inf] of boolean;

var     n       :longint;
        c       :arr2;
        nt      :arr1;
        top     :longint;
        i       :longint;
        Era     :Arr1;
        s     :arr1;
        tmp   :longint;
        x,y,t   :longint;

procedure init;
var     i :longint;
        j :int64;
begin
        fillchar(c,sizeof(c),true);
        top:=0;
        for i:=2 to inf do
        if c[i] then
        begin
                inc(top);
                nt[top]:=i;
                Era[i]:=top;
                j:=int64(i)*int64(i);
                while j<=inf do
                begin
                        c[j]:=false;
                        Era[j]:=top;
                        j:=j+i;
                end;
        end;
end;

begin
        init;
        s[0]:=0;
        s[1]:=1;
        for i:=2 to inf do
        begin
                tmp:=i;
                s[i]:=s[i-1];
                while tmp<>1 do
                begin
                        inc(s[i]);
                        tmp:=tmp div nt[Era[tmp]];
                end;
        end;
        readln(t);
        for i:=1 to t do
        begin
                readln(x,y);
                writeln(s[x]-s[y]);
        end;
end.