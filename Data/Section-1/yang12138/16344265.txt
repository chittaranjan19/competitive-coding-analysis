/*
    ━━━━━┒
    ┓┏┓┏┓┃让老子先跳！
    ┛┗┛┗┛┃＼○／
    ┓┏┓┏┓┃ //
    ┛┗┛┗┛┃ノ)
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┃┃┃┃┃┃
    ┻┻┻┻┻┻
*/
#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <algorithm>
#include <cctype>
#include <stack>
#include <map>
#include <set>
#include <iomanip>
#include <cstdlib>
#include <queue>
#include <ctime>
#include <cmath>
using namespace std;
typedef long long ll;
struct node
{
    int x,y,num;
    bool operator < (const node & a)const
    {
        return x>a.x;
    }
}p[3];
void print1(int i)
{
    for(int j=1;j<=p[i].y;j++)
    {
        for(int k=1;k<=p[i].x;k++)
        {
            char c=p[i].num+'A';
            printf("%c",c);
        }
        printf("\n");
    }
}
int main()
{
    int s=0;
    for(int i=0;i<3;i++)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        p[i].x=max(a,b),p[i].y=min(a,b);
        p[i].num=i;
        s+=p[i].x*p[i].y;
    }
    sort(p,p+3);
    int k=(int)sqrt(s);
    if(k*k!=s) printf("-1\n");
    else
    {
        if(k!=p[0].x) printf("-1\n");
        else
        {
            if(p[0].x==p[1].x&&p[0].x==p[2].x)
            {
                printf("%d\n",k);
                for(int i=0;i<3;i++) print1(i);
            }
            else if(p[1].x==p[2].x||p[1].y==p[2].y||p[1].y==p[2].x)
            {
                if(p[1].y==p[2].y) swap(p[1].x,p[1].y),swap(p[2].x,p[2].y);
                else if(p[1].y==p[2].x) swap(p[1].x,p[1].y);
                printf("%d\n",k);
                print1(0);
                for(int i=1;i<=p[1].x;i++)
                {
                    for(int j=1;j<=p[1].y;j++)
                    {
                        char c=p[1].num+'A';
                        printf("%c",c);
                    }
                    for(int j=1;j<=p[2].y;j++)
                    {
                        char c=p[2].num+'A';
                        printf("%c",c);
                    }
                    printf("\n");
                }
            }
            else printf("-1\n");
        }
    }
    return 0;
}

















