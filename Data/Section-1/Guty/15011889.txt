#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Fragment
{
	tint sector,fragment;
	Fragment( tint ss, tint ff)
	{
		sector = ss;
		fragment = ff;
	}
};

bool operator < (Fragment f1, Fragment f2)
{
	return make_tuple(f1.fragment,f1.sector) < make_tuple(f2.fragment, f2.sector);
}



int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<Fragment> f (n,Fragment(0,0));
	forn(i,n)
	{
		tint a;
		cin >> a;
		f[i] = Fragment(i,a);
	}
	sort(f.begin(),f.end());
	tint s = f[0].sector;
	tint ans = 0;
	forsn(i,1,n)
	{
		ans += (abs(s - f[i].sector));
		s = f[i].sector;
	}
	cout << ans << endl;
	return 0;
}



