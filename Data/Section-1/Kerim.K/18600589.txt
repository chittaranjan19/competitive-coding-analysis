#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
vector<PII>adj[MAXN];
int dis[MAXN],arr[MAXN],kind[MAXN];
int p[MAXN],c[MAXN],lvl[MAXN];
int in[MAXN],out[MAXN],TIM,vis[MAXN];
void dfs(int nd,int pr,int cost){
	in[nd]=++TIM;
	lvl[nd]=(pr==-1?1:lvl[pr]+1);
	if(pr!=-1)
		dis[nd]=max(0,dis[pr])+cost;
	tr(it,adj[nd])
		if(it->ff!=pr)
			dfs(it->ff,nd,it->ss);	
	out[nd]=TIM;			
}
bool cmp(int x,int y){
	return (lvl[x]<lvl[y]);
}
int sad(int x){
	return (dis[x]>arr[x]);
}
void go(int l,int r){
	for(int i=l;i<=r;i++)
		vis[i]=1;
}
int main(){
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d",arr+i),kind[i]=i;
	for(int i=2;i<=n;i++){
		scanf("%d%d",&p[i],&c[i]);
		adj[p[i]].pb(mp(i,c[i]));
	}
	dfs(1,-1,0);
	sort(kind+1,kind+n+1,cmp);
	for(int i=1;i<=n;i++){
		int nd=kind[i];
		if(vis[in[nd]])
			continue;	
		if(sad(nd))
			go(in[nd],out[nd]);	
	}
	printf("%d\n",accumulate(vis+1,vis+n+1,0));
	/*
	queue<int>q;
	for(int i=2;i<=n;i++){
		if(deg[i]==1)
			q.push(i);
		int cost=0,j=i;
		dis[i]=-INF;
		while(1){
			if(j==1)
				break;
			cost+=c[j];
			umax(dis[i],cost);
			j=p[j];
		}
	}		
	while(!q.empty()){
		int nd=q.front();
		q.pop();
		if(arr[nd]<dis[nd]){
			deg[p[nd]]--;
			if(deg[p[nd]]==1)
				q.push(p[nd]);
			ans++;
		}
	}*/
	return 0;
}