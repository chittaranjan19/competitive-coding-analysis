#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define mn 405
#define maxC 2000000000
#define mp make_pair
#define F first
#define S second
#define pb push_back

using namespace std;
int n, m, ans = maxC;
vector<int> g[mn], h[mn];
bool road[mn][mn], mark[mn];

void dfs1(int u, int dem)
{
    if (u == n)
    {
        ans = min(ans, dem);
        return;
    }
    mark[u] = true;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i];
        if (mark[v])
            continue;
        dfs1(v, dem + 1);
    }
    mark[u] = false;
}

void dfs2(int u, int dem)
{
    if (u == n)
    {
        ans = min(ans, dem);
        return;
    }
    mark[u] = true;
    FOR(i, 0, int(h[u].size()) - 1)
    {
        int v = h[u][i];
        if (mark[v])
            continue;
        dfs2(v, dem + 1);
    }
    mark[u] = false;
}

void setup()
{
    int u, v;
    cin >> n >> m;
    FOR(i, 1, m)
    {
        cin >> u >> v;
        road[u][v] = road[v][u] = true;
        g[u].pb(v);
        g[v].pb(u);
    }
    FOR(i, 1, n)
    FOR(j, 1, n)
    if (i != j && !road[i][j])
        h[i].pb(j);
    if (road[1][n])
        dfs2(1, 0);
    else
        dfs1(1, 0);
    if (ans != maxC)
        cout << ans;
    else
        cout << -1;
}

void xuly()
{

}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
