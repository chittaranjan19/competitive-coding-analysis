#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

int n, m, tm[200000], fp[200000], ft[200000], qn = 1, p[200000], sz[200000]; //dp[40][200000]
vector<int> g[200000];
vector<pair<int, int> > q;

int find(int a){
	if (p[a] == a) return a;
	else return find(p[a]);
}

void merge(int a, int b){
	if ((a = find(a)) != (b = find(b))){
		if(sz[a] < sz[b])
			swap(a, b);
		sz[a] += sz[b];
		p[b] = a;
	}
}

int main()
{
	//freopen("forest.in", "r", stdin);
	//freopen("forest.out", "w", stdout);
	cin >> n >> m;
	for (int i = 1; i <= n; i++){
		p[i] = i;
		sz[i] = 1;
	}
	for (int i = 0; i < m; i++){
		int tp;
		cin >> tp;
		if (tp == 1){
			int a, b;
			cin >> a >> b;
			merge(a, b);
			g[b].push_back(a);
			tm[a] = i + 1;
		}
		if (tp == 2){
			int a;
			cin >> a;
			fp[qn] = a;
			ft[qn++] = i + 1;
		}
		if (tp == 3){
			int a, b;
			cin >> a >> b;
			int wrk = a, doc = b, fwrk = fp[doc], time_wrt = ft[doc], time_lead = tm[fwrk];
			int g1 = find(wrk), g2 = find(fwrk);
			if (find(wrk) == find(fwrk) && time_lead < time_wrt)
				cout << "YES" << endl;
			else cout << "NO" << endl;
		}
	}
	return 0;
}