#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>

#define ll long long
#define ull unsigned long long
#define mp make_pair
using namespace std;

const int N = 100100;

vector<int> g[N];
bool used[N][2];
int n, m, cnt[2];

void dfs(int v, int c)
{
    if (used[v][c]) return;
    cnt[c]++;
    used[v][c] = true;
    for (int i = 0; i < g[v].size(); i++)
        dfs(g[v][i], c ^ 1);
}

int main()
{
    cin >> n >> m;
    memset(used, false, sizeof(used));
    for (int i = 0; i < m; i++)
    {
        int a, b;
        cin >> a >> b;
        --a; --b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    if (m == 0)
    {
        ll ans = n;
        ans *= (n - 1);
        ans *= (n - 2);
        ans /= 6;
        cout << 3 << ' ' << ans;
        return 0;
    }
    ll ans = 0;
    for (int i = 0; i < n; i++)
    if (!used[i][0] && !used[i][1])
    {
        cnt[0] = cnt[1] = 0;
        dfs(i, 0);
        ans += (ll)cnt[0] * ((ll)cnt[0] - 1) / 2;
        ans += (ll)cnt[1] * ((ll)cnt[1] - 1) / 2;
    }
    for (int i = 0; i < n; i++)
    {
        if (used[i][0] && used[i][1])
        {
            cout << 0 << ' ' << 1;
            return 0;
        }
    }
    for (int i = 0; i < n; i++)
    {
        if (g[i].size() > 1)
        {
            cout << 1 << ' ' << ans;
            return 0;
        }
    }
    ans = (ll)m*ll(n - 2);
    cout << 2 << ' ' << ans;
    return 0;
}