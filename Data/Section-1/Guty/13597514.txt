#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


// Aca termina el template. 

struct Child
{
	Child(tint vv, tint dd, tint pp)
	{
		v = vv;
		d = dd;
		p = pp;	
	}
	tint v,d,p;
};

bool sobrevivo (tint i, vector<bool> &adentro, vector<Child> &fila, vector<int> &salieron)
{
	tint confidence = fila[i].p;
	forn(j,i)
	{
		if (adentro[j])
			confidence -= max(tint (0), fila[j].v-i+j+1+salieron[j]);
		else
			confidence -= fila[j].d;
	}
	salieron[i] = salieron[i-1];
	if (confidence < 0)
		salieron[i]++;
	return confidence >= 0;
}

int main()
{
	tint n;
	cin >> n;
	vector<Child> fila (n,Child(0,0,0));
	forn(i,n)
	{
		tint v,d,p;
		cin >> v >> d >> p;
		fila[i] = Child(v,d,p);
	}
	vector<int> salieron (n,0);
	vector<bool> adentro (n,false);
	adentro[0] = true;
	forsn(i,1,n)
		adentro[i] = sobrevivo(i,adentro,fila,salieron);
	tint total = 0;
	forn(i,n)
		total += adentro[i];
	cout << total << endl;
	bool pri = true;
	//imprimirVector(salieron);
	forn(i,n)
	{
		if (adentro[i])
		{
			if (pri) pri = false;
			else cout << " ";
			cout << i+1;
		}
	}
	cout << endl;
	return 0;
}
