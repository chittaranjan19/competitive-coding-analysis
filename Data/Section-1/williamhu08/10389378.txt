//why are you stalking me?
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define dbg(x) cerr << #x << " = " << x << endl

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1 << 17, MAXLG = 17;

int N, Q;
int A[MAXN], B[MAXN];
vector<int> adj[MAXN];
int depth[MAXN];
int in[MAXN], out[MAXN], z;
int par[MAXN][MAXLG];
int bit[2 * MAXN];

void update (int x, int v) {
	for (; x < 2 * MAXN; x += (x & -x)) {
		bit[x] += v;
	}
}

int query (int x) {
	int s = 0;
	for (; x; x &= x - 1) {
		s += bit[x];
	}
	return s;
}

void dfs (int x, int p, int d) {
	depth[x] = d++;
	par[x][0] = p;
	in[x] = ++z;
	for (int t : adj[x]) {
		if (t != p) {
			dfs(t, x, d);
		}
	}
	out[x] = ++z;
}

int lca (int a, int b) {
	if (depth[a] > depth[b]) {
		swap(a, b);
	}
	for (int i = 0, d = depth[b] - depth[a]; i < MAXLG; i++) {
		if (d & (1 << i)) {
			//advance
			b = par[b][i];
		}
	}
	if (a == b) {
		return a;
	}
	for (int k = MAXLG - 1; k >= 0; k--) {
		if (par[a][k] != par[b][k]) {
			a = par[a][k];
			b = par[b][k];
		}
	}
	return par[a][0];
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d", &N);
	for (int i = 1; i < N; i++) {
		scanf("%d %d", &A[i], &B[i]);
		adj[A[i]].push_back(B[i]);
		adj[B[i]].push_back(A[i]);
	}
	//precomp dists
	dfs(1, 0, 0);
	for (int j = 1; j < MAXLG; j++) {
		for (int i = 1; i <= N; i++) {
			par[i][j] = par[par[i][j - 1]][j - 1];
		}
	}
	for (int qtype = scanf("%d", &Q), a, b; Q--; ) {
		scanf("%d %d", &qtype, &a);
		if (qtype == 1 || qtype == 2) {
			//color black or white
			int x = A[a], y = B[a];
			if (depth[x] > depth[y]) {
				swap(x, y);
			}
			if (qtype == 1) {
				update(in[x], 1);
				update(in[y], 1);
				update(out[x], -2);
			} else {
				update(in[x], -1);
				update(in[y], -1);
				update(out[x], 2);			
			}
		} else {
			scanf("%d", &b);
			//make sure all edges are good black
			int va = a, vb = b;
			if (in[a] < in[b]) {
				a = b;
			}
			if (query(out[a]) == query(in[a] - 1)) {
				printf("%d\n", depth[va] + depth[vb] - 2 * depth[lca(va, vb)]);
			} else {
				puts("-1");
			}
		}
	}
}