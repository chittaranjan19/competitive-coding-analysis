#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector<int>
#define vb vector<bool>
#define vl vector<long long>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int (i) = 0; (i) < n; ++(i))
#define loop1(i, n) for(int (i) = 1; (i) <= n; ++(i))
#define reverse_iterate(a, b) for(__typeof((b).rend()) (a) = (b).rbegin(); (a) != (b).rend(); ++(a))
#define iterate(a, b) for(__typeof((b).begin()) (a) = (b).begin(); (a) != (b).end(); ++(a))
#define all(i) (i).begin(), (i).end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

		
template <typename U> class Comparator {
public:
    bool operator() (const U lhs, const U rhs) {
        return lhs.a < rhs.a;
    }
};

int main() {
    // freopen("579B.in", "r", stdin);
    
    int n;
    scanf("%d", &n);

    pque<pair<int, ii>, vector<pair<int, ii> >, Comparator<pair<int, ii> > > pq;
    for (int i = 1; i < 2*n; ++i) {
    	for (int j = 0; j < i; ++j) {
    		int val;
    		scanf("%d", &val);
    		pq.push(mp(val, mp(i, j)));
    	}
    }

    vi pairs(2*n, -1);
    while (!pq.empty()) {
    	ii prs = pq.top().b;
    	pq.pop();
    	if ((pairs[prs.a] != -1) or (pairs[prs.b] != -1))
    		continue;
    	pairs[prs.a] = prs.b;
    	pairs[prs.b] = prs.a;
    }

    loop(it, 2*n) {
    	if (it)
    		printf(" ");
    	printf("%d", pairs[it]+1);
    }
    printf("\n");

    return 0;
}