#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 6000;
const int mod = 1e9 + 7;

vector <pair<int, int> > st[MAX_N];
vector <int> rev[MAX_N];
pair<int, int> dp[MAX_N][MAX_N];
vector <int> to;
vector <int> ans;
int use[MAX_N] = {0, };
int n, m, t;

void dfs(int v){
    use[v] = 1;
    for (int i = 0; i < st[v].size(); i++){
        int next = st[v][i].ft;
        int ves = st[v][i].sc;
        for (int j = 2; j <= n; j++){
            if (dp[v][j].ft > dp[next][j - 1].ft + ves){
                dp[v][j].ft = dp[next][j - 1].ft + ves;
                dp[v][j].sc = next;
            }
        }
    }
    for (int i = 0; i < rev[v].size(); i++){
        if (!use[rev[v][i]]){
            to.pb(rev[v][i]);
            use[rev[v][i]] = 1;
        }
    }
}

void ansss(int v, int i){
    ans.pb(v);
    if (dp[v][i].sc != v) ansss(dp[v][i].sc, i - 1);
}

int main(){
    #if 0
        freopen("cinemaholics.in", "r", stdin);
        freopen("cinemaholics.out", "w", stdout);
    #endif
    //cout << setprecision(20);
    cin >> n >> m >> t;
    for (int i = 0; i < m; i++){
        int a, b, c;
        cin >> a >> b >> c;
        st[b].pb(mp(a, c));
        rev[a].pb(b);
    }
    for (int i = 1; i < 5000; i++)
        for (int j = 1; j < 5000; j++)
        dp[i][j].ft = mod;
    dp[1][1].ft = 0;
    dp[1][1].sc = 1;
    to.pb(1);
    int l = 0;
    while(l != to.size()){
        int sled = to[l];
        l++;
        dfs(sled);
    }
    //for (auto it : to) cout << it << " " ;
    /*for (int i =  1; i <= n; i++){
        cout << dp[n][i].ft << endl;
    }*/
    for (int i = n; i >= 0; i--){
        if (dp[n][i].ft <= t) {
            ansss(n, i);
            cout << ans.size() << endl;
            for (int i = (int) ans.size() - 1; i >= 0; i--)
                cout << ans[i] <<" ";
            return 0;
        }
    }
    return 0;
}
