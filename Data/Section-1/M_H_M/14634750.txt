//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 50 * 1000 + 100;
const int SQ = 300;

ll sum[SQ];
int a[N];
int n, q;
set <pii> s[SQ];

inline void add(int l, int r, int val){
	while(l % SQ != 0 && l < r){
		s[l / SQ].erase(MP(a[l], l));
		a[l] += val;
		s[l / SQ].insert(MP(a[l], l));
		l ++;
	}
	while(r % SQ != 0 && l < r){
		r --;
		s[r / SQ].erase(MP(a[r], r));
		a[r] += val;
		s[r / SQ].insert(MP(a[r], r));
	}
	for(; l < r; l += SQ)
		sum[l / SQ] += val; 
}

inline int get(int x){
	int k = 0;
	int l = -1, r = -1;
	for(int i = 0; i < n; i += SQ){
		auto it = s[k].lower_bound(MP(x, 0));
		if(l == -1 && it != s[k].end() && it -> X == x)
			l = it -> Y;
		it = s[k].lower_bound(MP(x + 1, 0));
		if(it != s[k].begin()) it --;
		if(it -> X == x)
			r = it -> Y;
		k ++;
	}
	if(l == -1) return -1;
	return r - l;
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> q;
	for(int i = 0; i < n; ++i){
		cin >> a[i];
		s[i / SQ].insert(MP(a[i], i));
	}
	for(int i = 0; i < q; ++i){
		int t;
		cin >> t;
		if(t == 1){
			int l, r, x;
			cin >> l >> r >> x;
			l --;
			add(l, r, x);
		}
		else{
			int x;
			cin >> x;
			cout << get(x) << "\n";
		}
	}
	return 0;
}
