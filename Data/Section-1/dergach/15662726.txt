#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
using namespace std;

typedef long long ll;
#define mod 1000000007LL
#define pi acos(-1.0)
#define LINF 1000000000000000000LL
#define eps 1e-10

struct point
{
	int x, y, i, j;
	bool operator<(const point& p) const
	{
		if(x != p.x)
			return x < p.x;
		return y < p.y;
	}
}a[100005];

ll S(point p1, point p2, point p3)
{
	return (ll)p1.x * p2.y + (ll)p2.x * p3.y + (ll)p3.x * p1.y - (ll)p1.y * p2.x - (ll)p2.y * p3.x - (ll)p3.y * p1.x;
}

int main()
{
	int n;
	scanf("%d", &n);
	for(int i = 0; i < n; i++)
	{
		scanf("%d %d", &a[i].x, &a[i].y);
		a[i].i = i + 1; 
	}
	sort(a, a + n);
	for(int i = 0; i < n; i++)
		a[i].j = i;
	vector <point> up, down;
	up.push_back(a[0]);
	down.push_back(a[0]);
	for(int i = 1; i < n; i++)
	{
		if(i == n - 1 || S(a[0], a[i], a[n-1]) < 0)
		{
			while(up.size() > 1 && S(up[up.size()-2], up[up.size()-1], a[i]) > 0)
				up.pop_back();
			up.push_back(a[i]);
		}
		if(i == n - 1 || S(a[0], a[i], a[n-1]) > 0)
		{
			while(down.size() > 1 && S(down[down.size()-2], down[down.size()-1], a[i]) < 0)
				down.pop_back();
			down.push_back(a[i]);
		}
	}
	for(int i = down.size() - 2; i > 0; i--)
		up.push_back(down[i]);

	int c1, c2, c3;
	for(int i = 0; i < up.size() - 2; i++)
		if(S(up[i], up[i+1], up[i+2]) != 0)
		{
			c1 = up[i].j, c2 = up[i+1].j, c3 = up[i+2].j;
			for(int j = 0; j < n; j++)
			{
				if(j == c1 || j == c2 || j == c3)
					continue;
				if(abs(S(a[c1], a[c2], a[c3])) - abs(S(a[j], a[c2], a[c3])) ==
				   abs(S(a[c1], a[j], a[c3])) + abs(S(a[c1], a[c2], a[j])))
				{
					if(S(a[j], a[c2], a[c3]) != 0)
						c1 = a[j].j;
					else
						if(S(a[c1], a[j], a[c3]) != 0)
							c2 = a[j].j;
						else
							c3 = a[j].j;
				}
			}
			break;
		}

	printf("%d %d %d\n", a[c1].i, a[c2].i, a[c3].i);
	return 0;
}

