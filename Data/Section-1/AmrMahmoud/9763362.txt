#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

pair<int ,int> arr[5];

int main()
{
    //ios_base::sync_with_stdio(0);
    //freopen("squary.in", "r", stdin);
    //freopen("squary.out", "w", stdout);
    int n, mini = INF_MAX, maxi = 0;
    cin >> n;
    for(int i=0;i<n;i++)
    {
        cin >> arr[i].first >> arr[i].second;
        mini = min(mini, arr[i].first);
        maxi = max(maxi, arr[i].second);
    }
    double res = 0;
    for(int i=mini;i<=maxi;i++)
    {
        for(int j=1;j<(1 << n);j++)
        {
            bool mask = (__builtin_popcount(j) > 1);
            for(int k=0;k<n && mask;k++)
            {
                if(j & (1 << k))
                {
                    if(!(arr[k].first <= i && arr[k].second >= i)) mask = false;
                }
                else
                {
                    if(!(arr[k].first < i)) mask = false;
                }
            }
            if(mask)
            {
                double prob = 1.0;
                for(int k=0;k<n;k++)
                {
                    if(j & (1 << k))
                    {
                        prob /=(arr[k].second - arr[k].first + 1);
                    }
                    else
                    {
                        prob/= (arr[k].second - arr[k].first + 1);
                        if(i > arr[k].second)
                            prob*=arr[k].second - arr[k].first + 1;
                        else prob*= i - arr[k].first;
                    }
                }
                //cout << prob << " " << i << " " << j << endl;
                res+=prob * i;
            }
            /// NOT EQUAL

            mask = true;
            for(int k=0;k<n && mask;k++)
            {
                if(j & (1 << k))
                {
                    if(!(i >= arr[k].first && i <= arr[k].second))
                    {
                        mask = false;
                    }
                }
            }
            if(!mask) continue;
            for(int _=0;_<n;_++)
            {
             //   if(i == 2 && j == 1 && win == 6)
               //     cerr << "TEST";
                int win = 1 << _;
                mask = true;
                if(win & j) continue;
                int temp = 0;
                for(int k=0;k<n && mask;k++)
                {
                    if(win & (1 << k))
                    {
                        if(arr[k].second <= i) mask = false;
                    }
                    else if((j & (1 << k)) == 0)
                    {
                        if(arr[k].first >= i) mask = false;
                    }
                }
                if(!mask) continue;
                double prob = 1;
                /// winners
                temp = INF_MAX;
                int temp2 = i + 1;
                for(int k=0;k<n;k++)
                {
                    if(win & (1 << k))
                    {
                        temp = min(temp, arr[k].second);
                        temp2 = max(temp2, arr[k].first);
                    }
                }
                for(int k=0;k<n;k++)
                {
                    if(win & (1 << k))
                    {
                        if(!(temp >= arr[k].first && temp2 <= arr[k].second)) mask = false;
                    }
                }
                if(!mask) continue;
                temp = temp - temp2 + 1;
                for(int k=0;k<n;k++)
                {
                    if(win & (1 << k))
                    {
                        prob *= temp * 1.0 / (arr[k].second - arr[k].first + 1);
                    }
                }
                /// prize
                for(int k=0;k<n;k++)
                {
                    if(j & (1 << k))
                    {
                        prob /= (arr[k].second - arr[k].first + 1);
                    }
                    else if((win & (1 << k)) == 0)
                    {
                        prob /= (arr[k].second - arr[k].first + 1);
                        if(i > arr[k].second)
                            prob*=arr[k].second - arr[k].first + 1;
                        else prob*= i - arr[k].first;
                    }
                }
                //prob/=__builtin_popcount(win);
                res+=prob * i;
            }
        }
    }
    printf("%.15lf", res);
    return 0;
}
