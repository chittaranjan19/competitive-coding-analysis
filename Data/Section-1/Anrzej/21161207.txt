#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 4e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

int dx[] = {0, 0, -1, 1}, dy[] = {-1, 1, 0, 0};

vector<int> g[N];
bool used[N];
int timer = 0, tin[N], fup[N];
pair<int, int> ed[N];
bool is_bridge[N];
bool del[N];
 
void dfs (int v, int p = -1) {
	used[v] = true;
	tin[v] = fup[v] = timer++;
	for (size_t i=0; i<g[v].size(); ++i) {
		int eid = g[v][i];
		int _v = ed[eid].fs, to = ed[eid].sc;
		if(_v != v)
			swap(_v, to);
		if (to == p)  continue;
		if (used[to])
			fup[v] = min (fup[v], tin[to]);
		else {
			dfs (to, v);
			fup[v] = min (fup[v], fup[to]);
			if (fup[to] > tin[v])
				is_bridge[eid] = 1;
		}
	}
}

int p[N];
int dsu_get (int v) {
	return (v == p[v]) ? v : (p[v] = dsu_get (p[v]));
}

void dsu_unite (int a, int b) {
	a = dsu_get (a);
	b = dsu_get (b);
	if (rand() & 1)
		swap (a, b);
	if (a != b)
		p[a] = b;
}
int deg[N];

int main()
{
	int n, m;
	cin >> n >> m;
	for(int i = 0; i < m; i++){
		int u, v;
		cin >> u >> v;
		ed[i] = mp(u, v);
		g[u].push_back(i);
		g[v].push_back(i);
	}
	int s, t, ds, dt;
	cin >> s >> t >> ds >> dt;
	dfs(1);
	int sb = 0, tb = 0;
	for(int i = 0; i < g[s].size(); i++){
		sb += is_bridge[g[s][i]];
	}
	for(int i = 0; i < g[t].size(); i++){
		tb += is_bridge[g[t][i]];
	}
	if(sb > ds || tb > dt){
		cout << "NO";
		exit(0);
	}
	int scnt = g[s].size(), tcnt = g[t].size();
	for(int i = 0; i < g[s].size(); i++){
		if(is_bridge[g[s][i]]) continue;
		del[g[s][i]] = 1;
		scnt -= 1;
	}
	for(int i = 0; i < g[t].size(); i++){
		if(is_bridge[g[t][i]]) continue;
		del[g[t][i]] = 1;
		tcnt -= 1;
	}
	for (int i=1; i<n; ++i)
		p[i] = i;
	vector<pair<int, int> > ans;
	for(int i = 0; i < m; i++){
		if(del[i]) continue;
		int a = ed[i].fs, b = ed[i].sc;
		if(dsu_get(a) != dsu_get(b))
			dsu_unite(a, b), ans.push_back(mp(a, b)), deg[a]++, deg[b]++;
	}
	if(ans.size() != n-1){
		for(int i = 0; i < g[s].size(); i++){
			int a = ed[g[s][i]].fs, b = ed[g[s][i]].sc;
			if(a != s) swap(a, b);
			if(a == s && b == t && ds-1 == deg[a] && dt-1 == deg[b] && ans.size() != n-2) continue;
			if(deg[a] == ds) continue;
			if(b == t && deg[b] == dt) continue;
			if(dsu_get(a) != dsu_get(b))
				dsu_unite(a, b), ans.push_back(mp(a, b)), deg[a]++, deg[b]++;
		}
	}
	if(ans.size() != n-1){
		for(int i = 0; i < g[t].size(); i++){
			int a = ed[g[t][i]].fs, b = ed[g[t][i]].sc;
			if(a != t) swap(a, b);
			if(a == t && b == s && ds-1 == deg[b] && dt-1 == deg[a] && ans.size() != n-2) continue;
			if(deg[a] == dt) continue;
			if(b == s && deg[b] == ds) continue;
			if(dsu_get(a) != dsu_get(b))
				dsu_unite(a, b), ans.push_back(mp(a, b)), deg[a]++, deg[b]++;
		}
	}
	cout << "YES" << endl;
	for(int i = 0; i < ans.size(); i++)
		cout << ans[i].fs << ' ' << ans[i].sc << '\n';
	return 0;
}