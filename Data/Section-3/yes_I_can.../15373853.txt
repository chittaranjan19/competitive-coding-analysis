using namespace std;
#include<bits/stdc++.h>

#define db          double
#define ll          long long
#define ull         unsigned long long

#define vi          vector<int>
#define vl          vector<long>
#define vll         vector<ll>

#define mii         map<int,int>
#define mll         map<ll,ll>

#define pi          pair<int,int>
#define pl          pair<long,long>
#define pll         pair<ll,ll>

#define pb          push_back
#define mp          make_pair
#define xx          first
#define yy          second

#define pf          printf
#define sf          scanf
#define II          ({int a; _in(a); a;})
#define IL          ({long a; _in(a); a;})
#define ILL         ({ll a; _in(a); a;})
#define ID          ({db a; sf("%lf",&a); a;})
#define IF          ({float a; sf("%f",&a); a;})
#define IC          ({char a; sf("%c",&a); a;})
#define IS          ({string a; _in_cin_string(a); a;})

#define FRI(a,b,c)  for(int i=a;   i<=b; i+=c)
#define FRL(a,b,c)  for(long i=a;  i<=b; i+=c)
#define FRLL(a,b,c) for(ll i=a;    i<=b; i+=c)

#define all(V)      V.begin(),V.end()
#define clr(A,B)    memset(A,B,sizeof A)

#define _F_in       freopen("in.txt","r",stdin)
#define _F_out      freopen("out.txt","w",stdout)

#define PI          2*acos(0.0)
#define mod         1000000007
#define INF         LLONG_MAX
#define sqr(n)      (n*n)

#define endl        '\n'

template <typename T>inline T BigMod (T b,T p,T m){if (p == 0) return 1;if (p%2 == 0){T s = BigMod(b,p/2,m);return ((s%m)*(s%m))%m;}return ((b%m)*(BigMod(b,p-1,m)%m))%m;}
template <typename T>inline T ModInv (T b,T m){return BigMod(b,m-2,m);}
template <typename T>inline T Bigmod(T b,T p,T m){ if(p==0) return 1; else if (!(p&1)) return sqr(Bigmod(b,p/2,m)) % m;else return ((b % m) * Bigmod(b,p-1,m)) % m;}
template <typename T>inline T gcd(T a,T b){ if(b==0)return a; return gcd(b,a%b);}
template <typename T>inline T lcm(T a,T b) {if(a<0)return lcm(-a,b);if(b<0)return lcm(a,-b);return a*(b/gcd(a,b));}
template <typename T>inline T euclide(T a,T b,T &x,T &y) {if(a<0){T d=euclide(-a,b,x,y);x=-x;return d;}   if(b<0){T d=euclide(a,-b,x,y);y=-y;return d;}   if(b==0){x=1;y=0;return a;}else{T d=euclide(b,a%b,x,y);T t=x;x=y;y=t-(a/b)*y;return d;}}
//template <typename T>inline T Dis(T x1,T y1,T ,T &y) {if(a<0){T d=euclide(-a,b,x,y);x=-x;return d;}   if(b<0){T d=euclide(a,-b,x,y);y=-y;return d;}   if(b==0){x=1;y=0;return a;}else{T d=euclide(b,a%b,x,y);T t=x;x=y;y=t-(a/b)*y;return d;}}
template <typename T>inline void _in(T &x){register int c = getchar();x = 0;bool neg = 0;for(;((c<48 | c>57) && c != '-');c = getchar()); if(c=='-') {neg=1;c=getchar();}for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}if(neg) x=-x;}
template <typename T>inline void _in_cin_string(T &x){register char c=getchar();for(;c != ' '&&c!='\n';c = getchar()) x+=c;}

template <typename T>inline T Set(T N,T pos){ return N=N | (1<<pos);}
template <typename T>inline T Reset(T N,T pos){return N= N & ~(1<<pos);}
template <typename T>inline bool Check(T N,T pos){return (bool)(N & (1<<pos));}
template <class T, class X > inline T   togglebit(T a, X i) { T t=1;return (a^(t<<i)); }

inline double DEG(double x) { return (180.0*x)/(PI);}
inline double RAD(double x) { return (x*(double)PI)/(180.0);}

inline ll Dis(ll x1, ll y1, ll x2, ll y2)
{
    return sqr((x1-x2))+sqr((y1-y2));
}
//------------------------------------------------------

ll n;
ll x[10005];
ll y[10005];
ll xxx;
ll yyy;
bool pointinpoly()  //ns should be given in clockwise or anti-clockwise order
{
  ll i, j;
  bool c=false;
  for (i = 1, j = n; i <= n; j = i++) {
    ll x1,y1,x2,y2;
    x1=x[i];
    y1=y[i];
    x2=x[j];
    y2=y[j];
    //keepin y1 greater
    if(y1<y2)
    {
        swap(x1,x2);
        swap(y1,y2);
    }
    if ( ((y1>yyy) != (y2>yyy)) && //here all corner(vertex) case are handled
     ((xxx-x1)*(y2-y1) < (x2-x1) * (yyy-y1)) ) //cancelling division
       c = !c;
    if(y1>=yyy && y2<=yyy && xxx<=max(x1,x2)&& xxx>=min(x1,x2) && (xxx-x1)*(y2-y1) == (x2-x1) * (yyy-y1)) return true;
  }
  return c;
}


int main()
{
    n=ILL;
    xxx=ILL,yyy=ILL;
    for(ll i=1; i<=n; i++)
        x[i]=ILL,y[i]=ILL;
    ll min_x=x[1],min_y=y[1], min_ds=Dis(x[1],y[1],xxx,yyy), max_x=x[1],max_y=y[1],mx_ds=Dis(x[1],y[1],xxx,yyy);
    for(ll i=2; i<=n; i++)
    {
        if(Dis(x[i],y[i],xxx,yyy)<min_ds)
        {
            min_x=x[i];
            min_y=y[i];
            min_ds=Dis(x[i],y[i],xxx,yyy);
        }
        if(Dis(x[i],y[i],xxx,yyy)>mx_ds)
        {
            max_x=x[i];
            max_y=y[i];
            mx_ds=Dis(x[i],y[i],xxx,yyy);
        }
    }
//    cout<<min_x<<min_y<<endl;
//    cout<<max_x<<max_y<<endl;
//    cout<<min_ds<<endl<<mx_ds<<endl;
    if(pointinpoly())
    {

        ll r=mx_ds;
//        cout<<r<<endl;
        pf("%.10lf\n",(db)r*PI);
    }
    else
    {
//         cout<<"here";
        ll r1=mx_ds;
        ll r2=min_ds;
        pf("%.10lf\n",(db)abs(r1-r2)*PI);
    }
    return 0;
}
