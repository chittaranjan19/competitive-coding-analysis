import java.io.*;
import java.util.*;
import java.math.*;

/*
 * Created by Epsilon Alpha on 23-Sep-16 at 7:16 PM.
 */

public final class Cockroach
{
    static int answer = 0;
    public static void main(String[] args) throws Exception
    {
        Parser Reader = new Parser(System.in);
        OutputWriter Writer = new OutputWriter(System.out);
        int n = Reader.nextInt();
        String S = Reader.next();
        int len = S.length();
        if(len==1)
            Writer.println(0);
        else
        {
            int countR = 0;
            int countB = 0;
            boolean alternate = true;

            for (int i = 0; i < n; i++)
            {
                char current = S.charAt(i);
                if (current == 'r')
                    countR++;
                else
                    countB++;

                if (i < n-1)
                {
                    char next = S.charAt(i+1);
                    if(next==current)
                        alternate = false;
                }
            }

            if(alternate)
                Writer.println(0);
            else if(countR == 0 || countB == 0)
                Writer.println(n/2);
            else
            {
                char[] X = S.toCharArray();

                //First swap all, so correct ones go to the end
                if(countR > countB)
                {
                    if(X[0]!='r')
                    {
                        int i = 1;
                        while(X[i]!='r')
                            i++;

                        if(i<n)
                            swap(X,i,0);
                    }
                }
                else if(countB > countR)
                {
                    if(X[0]!='b')
                    {
                        int i = 1;
                        while(i<n && X[i]!='b')
                            i++;

                        if(i<n)
                            swap(X,i,0);
                    }
                }

                //If equal then doesn't matter

                for(int i=1;i<n;i++)
                {
                    if(X[i-1] == X[i])
                    {
                        char required = (X[i] == 'r' ? 'b' : 'r');
                        int j = i+1;
                        while(j<n && X[j]!=required)
                            j++;

                        if(j<n)
                            swap(X,i,j);
                    }
                }

                //Now all swaps have been performed, so similar characters are at the end, now fill

                int k = 1;
                while(k<n && X[k-1] != X[k])
                    k++;

                char required = (countB > countR) ? 'r' : 'b';

                for(int i=k;i<n;i+=2)
                {
                    X[k] = required;
                    answer++;
                }
                Writer.println(answer);
            }
        }

        Writer.close();
    }

    static void swap(char[] ar, int i, int j)
    {
        char temp = ar[i];
        ar[i] = ar[j];
        ar[j] = temp;
        answer++;
    }

    private static class Parser
    {
        final private int BUFFER_SIZE = 1 << 16;

        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Parser(InputStream in)
        {
            din = new DataInputStream(in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public int nextInt() throws Exception
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public long nextLong() throws Exception
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public String next() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c > ' ');
            return ret.toString();
        }

        public String nextLine() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c != '\n');
            return ret.toString();
        }

        private void fillBuffer() throws Exception
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) buffer[0] = -1;
        }

        private byte read() throws Exception
        {
            if (bufferPointer == bytesRead) fillBuffer();
            return buffer[bufferPointer++];
        }
    }

    private static class OutputWriter
    {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream)
        {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)), true);
        }

        public OutputWriter(Writer writer)
        {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object... objects)
        {
            for (int i = 0; i < objects.length; i++)
            {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void println(Object... objects)
        {
            print(objects);
            writer.println();
        }

        public void close()
        {
            writer.close();
        }

        public void flush()
        {
            writer.flush();
        }
    }
}