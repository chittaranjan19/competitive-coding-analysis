#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

int n;
int a[2222222];

bool check(int i)
{
	if (i % 2 == 0)
		return a[i] < a[i + 1] && ((i!=0)?a[i] < a[i-1]:1);
	else return a[i] > a[i + 1] && ((i!=0)?a[i] > a[i-1]:1); 
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++) cin >> a[i];
	if (n % 2 == 1)
		a[n] = 1e9;
	else a[n] = 0;
	int bad = 0;
	vector<int> bd;
	for (int i = 0; i < n-1; i++){
		if (i % 2 == 0 && a[i] >= a[i + 1])
			bd.push_back(i);
		if (i % 2 == 1 && a[i] <= a[i + 1])
			bd.push_back(i);
	}
	if (bd.size() > 2){
		cout << 0;
		return 0;
	}
	if (bd.size() == 2)
	{
		set<pair<int, int> > tr;
		int ans = 0;
		for (int i = -1; i < 2; i++){
			for (int j = -1; j < 2; j++){
				if (bd[0] + i > -1 && bd[0] + i < n && bd[1] + j > -1 && bd[1] + j < n){
					if (tr.count(mp(bd[0] + i, bd[1] + j)) || tr.count(mp(bd[1]+j, bd[0]+i))) continue;
					tr.insert(mp(bd[0] + i, bd[1] + j));
					swap(a[bd[0] + i], a[bd[1] + j]);
					ans += check(bd[0]) && check(bd[1]) && check(bd[0]+i) && check(bd[0]+1) && check(bd[1]+j) && check(bd[1]+1);
					swap(a[bd[0] + i], a[bd[1] + j]);
				}
			}
		}
		cout << ans;
	}
	else
	{
		int ans = 0;
		set<pair<int, int> > tr;
		vector<pair<int, int> > anss;
		for (int k = 0; k < n; k++)
		{
			for (int i = -1; i < 2; i++){
				if (bd[0] + i > -1 && bd[0] + i < n){
					if (tr.count(mp(bd[0] + i, k)) || tr.count(mp(k, bd[0] + i))) continue;
					tr.insert(mp(bd[0] + i, k));
					swap(a[k], a[bd[0] + i]);
					ans += check(k) && check(bd[0]) && check(bd[0]+i) && check(bd[0]+1);
					swap(a[k], a[bd[0] + i]);
				}
			}
		}
		cout << ans;
	}
	return 0;
}
