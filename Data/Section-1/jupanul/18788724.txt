#include <queue>
#include <vector>

#include <algorithm>
#include <fstream>
#include <iostream>
using namespace std;
const int MAX_N = 100005;

vector<int> graph[MAX_N];
int color[MAX_N];
bool vis[MAX_N];
bool ok;

void bfs(int node) {
    queue<int> q;
    color[node] = 1;
    vis[node] = true;
    q.push(node);
    while (!q.empty()) {
        node = q.front();
        //cout << node << " " << color[node] << "\n";
        for (auto v : graph[node]) {
            if (!vis[v]) {
                vis[v] = true;
                color[v] = 3 - color[node];
                q.push(v);
            } else if (color[v] == color[node]) {
                ok = false;
                return;
            }
        }
        q.pop();
    }
}

int main() {
    int n, m, x, y;
    cin >> n >> m;
    ok = true;
    for (int i = 1; i <= m; ++ i) {
        cin >> x >> y;
        graph[x].push_back(y);
        graph[y].push_back(x);
    }
    for (int i = 1; i <= n; ++ i) {
        if (vis[i] == 0) {
            bfs(i);
            if (!ok) {
                cout << "-1\n";
                return 0;
            }
        }
    }
    vector<int> a, b;
    for (int i = 1; i <= n; ++ i) {
        if (color[i] == 1) {
            a.push_back(i);
        } else {
            b.push_back(i);
        }
    }
    cout << a.size() << "\n";
    for (int i = 0; i < (int)a.size(); i ++) {
        cout << a[i] << (i == a.size() - 1 ? '\n' : ' ');
    }
    cout << b.size() << "\n";
    for (int i = 0; i < (int)b.size(); i ++) {
        cout << b[i] << (i == b.size() - 1 ? '\n' : ' ');
    }
    return 0;
}