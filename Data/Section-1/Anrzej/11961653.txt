#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>

#define ll long long
#define ull unsigned long long
#define mp make_pair
#define x first
#define y second

using namespace std;

const int N = 100100;

string s[1000];

int main()
{
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; i++) cin >> s[i];
    vector<pair<int, int>> lr;
    bool can = true;
    for (int i = 0; i < n; i++)
    {
        bool find = false;
        int l = -1, r = -1;
        for (int j = 0; j < m; j++)
        {
            if (s[i][j] == 'X') { l = j; break; };
        }
        for (int j = m - 1; j > -1; j--)
        {
            if (s[i][j] == 'X') { r = j; break; };
        }
        if (l != -1)
        {
            for (int j = l; j <= r; j++)
            {
                if (s[i][j] == '.')
                    can = false;
            }
            lr.push_back(mp(l, r));
        }
    }
    int min_s = lr[0].second - lr[0].first + 1;
    bool cnst_s = true;
    for (int i = 1; i < lr.size(); i++)
    {
        if (lr[i].second < lr[i - 1].second) can = false;
        min_s = min(min_s, lr[i].second - lr[i].first + 1);
        if (lr[i] != lr[i - 1]) cnst_s = false;
    }
    vector<pair<int, int>> ud;
    for (int i = 0; i < m; i++)
    {
        bool find = false;
        int l = -1, r = -1;
        for (int j = 0; j < n; j++)
        {
            if (s[j][i] == 'X') { l = j; break; };
        }
        for (int j = n - 1; j > -1; j--)
        {
            if (s[j][i] == 'X') { r = j; break; };
        }
        if (l != -1)
        {
            for (int j = l; j <= r; j++)
            {
                if (s[j][i] == '.')
                    can = false;
            }
            ud.push_back(mp(l, r));
        }
    }
    int min_w = ud[0].second - ud[0].first + 1;
    bool cnst_w = true;
    for (int i = 1; i < ud.size(); i++)
    {
        if (ud[i].second < ud[i - 1].second) can = false;
        min_w = min(min_w, ud[i].second - ud[i].first + 1);
        if (ud[i] != ud[i - 1]) cnst_w = false;
    }
    if (!can) cout << "-1";
    else
    {
        if (cnst_s && !cnst_w) cout << min_s;
        if (cnst_w && !cnst_s) cout << min_w;
        if (cnst_w && cnst_s) cout << min(min_w, min_w);
        if (!cnst_w && !cnst_s) cout << min_w*min_s;
    }
    return 0;
}
