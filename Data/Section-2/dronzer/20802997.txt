
import java.util.*;
import java.io.*;

/**
 *
 * @author umang
 */

public class B448 {
    
    public static int mod = 1000000007;
    public static int lcs( String X, String Y, int m, int n ){
        int[][] L = new int[m+1][n+1];
        int i, j;
  
   /* Following steps build L[m+1][n+1] in bottom up fashion. Note 
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
   for (i=0; i<=m; i++)
   {
     for (j=0; j<=n; j++)
     {
       if (i == 0 || j == 0)
         L[i][j] = 0;
  
       else if (X.charAt(i-1) == Y.charAt(j-1))
         L[i][j] = L[i-1][j-1] + 1;
  
       else
         L[i][j] = Math.max(L[i-1][j], L[i][j-1]);
     }
   }
    
   return L[m][n];
}
    
    public static void main(String[] args) {
 
        InputReader in = new InputReader(System.in);
        PrintWriter w = new PrintWriter(System.out);
        
        String s = in.readString();
        String t = in.readString();
        
        int[] s1 = new int[26];
        int[] s2 = new int[26];
        
        for(int i=0;i<s.length();i++){
            s1[s.charAt(i)-'a']++;
        }

        for(int i=0;i<t.length();i++){
            s2[t.charAt(i)-'a']++;
        }
        boolean f;
        if(s.length()==t.length()){
            f=true;
            for(int i=0;i<26;i++){
                if(s1[i]!=s2[i]) f=false;                
            }
            if(f) w.println("array");
            else w.println("need tree");
        }
        else if(lcs(s, t,s.length() ,t.length() )==t.length()){
            w.println("automaton");
        }
        else{
            f=true;
            for(int i=0;i<26;i++){
                if(s2[i]>s1[i]) f=false;
            }
            if(f) w.println("both");
            else w.println("need tree");
        }
        
        w.close();
    }
    
    static class Pair{
        int i;
        int x;
        
        public Pair(int i,int x){
            this.x=x;
            this.i=i;
        }
        
    }
    
    static class InputReader {

		private final InputStream stream;
		private final byte[] buf = new byte[8192];
		private int curChar, snumChars;
		private SpaceCharFilter filter;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			int res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long nextLong() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
			long res = 0;
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int[] nextIntArray(int n) {
			int a[] = new int[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}

		public String readString() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		public interface SpaceCharFilter {
			public boolean isSpaceChar(int ch);
		}
	}
}    

