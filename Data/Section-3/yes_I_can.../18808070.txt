using namespace std;
#include<bits/stdc++.h>

#define db          double
#define ll          long long
#define ull         unsigned long long

#define vi          vector<int>
#define vl          vector<long>
#define vll         vector<ll>

#define mii         map<int,int>
#define mll         map<ll,ll>

#define pi          pair<int,int>
#define pl          pair<long,long>
#define pll         pair<ll,ll>

#define pb          push_back
#define mp          make_pair
#define fs          first
#define sc          second

#define pf          printf
#define sf          scanf
#define II          ({int a; _in(a); a;})
#define IL          ({long a; _in(a); a;})
#define ILL         ({ll a; _in(a); a;})
#define ID          ({db a; sf("%lf",&a); a;})
#define IF          ({float a; sf("%f",&a); a;})
#define IC          ({char a; sf("%c",&a); a;})
#define IS          ({string a; _in_cin_string(a); a;})

#define FRI(a,b,c)  for(int i=a;   i<=b; i+=c)
#define FRL(a,b,c)  for(long i=a;  i<=b; i+=c)
#define FRLL(a,b,c) for(ll i=a;    i<=b; i+=c)

#define all(V)      V.begin(),V.end()
#define clr(A,B)    memset(A,B,sizeof A)

#define _F_in       freopen("in.txt","r",stdin)
#define _F_out      freopen("out.txt","w",stdout)

#define PI          2*acos(0.0)
#define mod         1000000007
//#define INF         mod
#define sqr(n)      (n*n)

#define endl	    '\n'

template <typename T>inline T BigMod (T b,T p,T m){if (p == 0) return 1;if (p%2 == 0){T s = BigMod(b,p/2,m);return ((s%m)*(s%m))%m;}return ((b%m)*(BigMod(b,p-1,m)%m))%m;}
template <typename T>inline T ModInv (T b,T m){return BigMod(b,m-2,m);}
template <typename T>inline T Bigmod(T b,T p,T m){ if(p==0) return 1; else if (!(p&1)) return sqr(Bigmod(b,p/2,m)) % m;else return ((b % m) * Bigmod(b,p-1,m)) % m;}
template <typename T>inline T gcd(T a,T b){ if(b==0)return a; return gcd(b,a%b);}
template <typename T>inline T lcm(T a,T b) {if(a<0)return lcm(-a,b);if(b<0)return lcm(a,-b);return a*(b/gcd(a,b));}
template <typename T>inline T euclide(T a,T b,T &x,T &y) {if(a<0){T d=euclide(-a,b,x,y);x=-x;return d;}   if(b<0){T d=euclide(a,-b,x,y);y=-y;return d;}   if(b==0){x=1;y=0;return a;}else{T d=euclide(b,a%b,x,y);T t=x;x=y;y=t-(a/b)*y;return d;}}
template <typename T>inline T Dis(T x1,T y1,T x2, T y2){return sqrt( sqr(x1-x2) + sqr(y1-y2) );}
template <typename T>inline T Angle(T x1,T y1,T x2, T y2){ return atan(double(y1-y2) / double(x1-x2));}
template <typename T>inline T DIFF(T a,T b) { T d = a-b;if(d<(T)0)return -d;else return d;}
template <typename T>inline T ABS(T a) {if(a<0)return -a;else return a;}
template <typename T>inline ll isLeft(T a,T b,T c) { return (a.x-b.x)*(b.y-c.y)-(b.x-c.x)*(a.y-b.y); }

template <typename T>inline void _in(T &x){register int c = getchar();x = 0;bool neg = 0;for(;((c<48 | c>57) && c != '-');c = getchar()); if(c=='-') {neg=1;c=getchar();}for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}if(neg) x=-x;}

template <typename T>inline bool isLeapYear(T N){ if (N%4) return 0; else if (N%100) return 1; else if (N%400) return 0; else return 1; }
template <typename T>inline T Set(T N,T pos){ return N=N | (1<<pos);}
template <typename T>inline T Reset(T N,T pos){return N= N & ~(1<<pos);}
template <typename T>inline bool Check(T N,T pos){return (bool)(N & (1<<pos));}
template <class T, class X>inline T togglebit(T a, X i) { T t=1;return (a^(t<<i)); }

template <class T, class X>inline T toInt(T &sm, X s) {stringstream ss(s); ss>>sm; return sm;}
template <typename T>inline int cdigittoint(T ch){return ch-'0';}
template <typename T>inline bool isVowel(T ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
template <typename T>inline bool isConst(T ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}


inline double DEG(double x) { return (180.0*x)/(PI);}
inline double RAD(double x) { return (x*(double)PI)/(180.0);}


//------------------------------------------------------

class Graph
{
    public:
        int V;
        list<int> *adj;
        Graph(int V);
        void addEdge(int v, int w);
};
/*
 * Constructor
 */
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
/*
 * Adding Edge to Graph
 */
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);
}
/*
 * Class Bipartite Declaration
 */
class Bipartite
{
    private:
        bool isBipartite;
        bool *color;
        bool *marked;
        int *edgeTo;
        stack<int> cycle;
    public:
        Bipartite(Graph G)
        {
            isBipartite = true;
            color = new bool [G.V];
            marked = new bool [G.V];
            edgeTo = new int [G.V];
            for (int v = 0; v < G.V; v++)
            {
                if (!marked[v])
                {
                    color[v] = false;
                    dfs(G, v);
                }
            }
        }
        /*
         * DFS
         */
        void dfs(Graph G, int v)
        {
            marked[v] = true;
            list<int>::iterator w;
            for (w = G.adj[v].begin(); w != G.adj[v].end(); w++)
            {
                if (!cycle.empty())
                    return;
                if (!marked[*w])
                {
                    edgeTo[*w] = v;
                    color[*w] = !color[v];
                    dfs(G, *w);
                }
                else if (color[*w] == color[v])
                {
                    isBipartite = false;
                    cycle.push(*w);
                    for (int x = v; x != *w; x = edgeTo[x])
                    {
                        cycle.push(x);
                    }
                    cycle.push(*w);
                }
            }
        }
        /*
         * Returns true if graph is Bipartite
         */
        bool isBi()
        {
            return isBipartite;
        }
};

/*
 * Main Contains Menu
 */


 const int MAXN = 505; // number of elements.
vector<int> g[MAXN];
int match[MAXN]; //stores the matcings
int p[MAXN]; //array of ancestors.
int base[MAXN]; //Node numbering after compression.
int q[MAXN]; //Queue
bool used[MAXN], blossm[MAXN];

void initialize(int n)
{
    int i;
    for(i=0;i<n;i++)
        g[i].clear();
    clr(blossm,false);
}

int lca (int a, int b)
{
    bool used[MAXN] = { 0 };
// From the node a climb up to the roots,
//marking all even vertices
    for (;;)
    {
        a = base[a];
        used[a] = true;
        if (match[a] == -1) break; // Got the root
        a = p[match[a]];
    }
// Climb from node b,
//until we find the marked vertex
    for (;;)
    {
        b = base[b];
        if (used[b]) return b;
        b = p[match[b]];
    }
}
void mark_path (int v, int b, int children)
{
    while (base[v] != b)
    {
        blossm[base[v]]=blossm[base[match[v]]]=true;
        p[v] = children;
        children = match[v];
        v = p[match[v]];
    }
}
int find_path (int root,int n)
{
    clr(used,0);
    clr(p,-1);
    for (int i=0; i<n; ++i)
        base[i] = i;
    used[root] = true;
    int qh=0, qt=0;
    q[qt++] = root;
    while (qh < qt)
    {
        int v = q[qh++];
        for (int i=0; i<g[v].size(); ++i)
        {
            int to = g[v][i];
            if (base[v] == base[to]
                    || match[v] == to) continue;
            if (to == root || match[to] != -1
                    && p[match[to]] != -1)
            {
                int curbase = lca (v, to);
                clr(blossm,0);
                mark_path (v, curbase, to);
                mark_path (to, curbase, v);
                for (int i=0; i<n; ++i)
                    if (blossm[base[i]])
                    {
                        base[i] = curbase;
                        if (!used[i])
                        {
                            used[i] = true;
                            q[qt++] = i;
                        }
                    }
            }
            else if (p[to] == -1)
            {
                p[to] = v;
                if (match[to] == -1) return to;
                to = match[to];
                used[to] = true;
                q[qt++] = to;
            }
        }
    }
    return -1;
}
int graph_match(int n)
{
    int ret = 0;
    clr(match,-1);
    for (int i=0; i<n; ++i)
        if (match[i] == -1)
        {
            int v = find_path (i,n);
            if(v!=-1) ret++;
            while (v != -1)
            {
                int pv = p[v], ppv = match[pv];
                match[v] = pv, match[pv] = v;
                v = ppv;
            }
        }
    return ret;
}


int main()
{
    int n=II, m=II;
    Graph g1(n);
    initialize(n);
    for(int i=0; i<m ; i++)
    {
        int u=II, v=II;
        g1.addEdge(u-1, v-1);
        g1.addEdge(v-1, u-1);
        g[v-1].pb(u-1);
        g[u-1].pb(v-1);
    }
    Bipartite b(g1);
    if (b.isBi())
    {
        int ans = graph_match(n);
        vector<int> ans1, ans2;
//    printf("%d\n",ans*2);
        for(int i=0; i<n; i++)
            if(match[i]>-1)
            {
//            printf("%d %d\n",i+1,match[i]+1);
                ans1.pb(i+1);
                ans2.pb(match[i]+1);
                match[match[i]] = -1;
            }
        pf("%d\n",ans1.size());
        cout<<ans1[0];
        for(int i=1; i<ans1.size(); i++)
            pf(" %d",ans1[i]);
        pf("\n%d\n",ans2.size());
        cout<<ans2[0];
        for(int i=1; i<ans2.size(); i++)
            pf(" %d",ans2[i]);


    }
    else
        pf("-1");
}
