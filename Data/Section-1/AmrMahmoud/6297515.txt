#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000009
#define pb push_back
#define mp make_pair

using namespace std;

vector<LL> primes;

void get_primes(LL max){
    char *sieve;
    sieve = new char[max/8+1];
    memset(sieve, 0xFF, (max/8+1) * sizeof(char));
    for(LL x = 2; x <= max; x++)
        if(sieve[x/8] & (0x01 << (x % 8))){
            primes.push_back(x);
            for(LL j = 2*x; j <= max; j += x)
                sieve[j/8] &= ~(0x01 << (j % 8));
        }
    delete[] sieve;
}

LL Power(LL base,LL power)
{
    if (power == 0)
        return 1;
    if (power % 2 == 1)
        return base * Power(base, power - 1) % mod;
    LL temp = Power(base, power / 2) % mod;
    return temp * temp;
}

LL factorial(LL n)
{
    LL res=1;
    for(int i=n;i>0;i--)
        res*=i,res%=mod;
    return res;
}

int main()
{
    LL n,num=1,x;
    cin >> n;
    for(int i=0;i<n;i++)
        scanf("%I64d",&x),num*=x,num%=mod;
    x=0;
    LL counter[50000],counte=0;
    get_primes(31700);
    int k=0,last;
    while(num > 1 && primes[k] * primes[k] <= num && k < primes.size())
    {
        counter[x]=0;
        while(num%primes[k] == 0)
            counter[x]++,num/=primes[k],counte++;
        k++,x++;
        last = primes[k];
    }
    if(num > 1)
    {
        counte++;
        if(num == last)
            counter[x]++;
    }
    LL temp = Power(n,counte);
    temp = (temp + mod) % mod;
    for(int i=0;i<x;i++)
        temp/=factorial(counter[i]);
    cout << temp;
    return 0;
}