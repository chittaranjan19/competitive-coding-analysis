#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <ctime>
#include <stdio.h>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

ll n, m, k, a[100];
pair<int, int> p[10000];
ll dp[20][(1 << 18) + 10];
map<pair<int, int>, ll > s;

int cnt(int mask)
{
    int ans = 0;
    while (mask != 0){
        if (mask & 1)
            ans++;
        mask >>= 1;
    }
    return ans;
}

ll calc(int mask, int cur)
{
    if (dp[cur][mask] != 0)
        return dp[cur][mask];
    for (int i = 0; i < n; i++)
    {
        if (!(mask&(1 << i)) && i != cur)
        {
            if (cnt(mask) > m){
                ll add = 0;
                if (s.count(mp(i, cur)) != 0)
                    add = s[mp(i, cur)];
                dp[cur][mask] = max(calc(mask - (1 << i), i) + add + a[i], dp[cur][mask]);
            }
            dp[cur][mask] = max(calc(mask - (1 << i), i), dp[cur][mask]);
        }
    }
    return dp[cur][mask];
}

int main()
{
    //freopen("cranksft.in", "r", stdin);
    //freopen("cranksft.out", "w", stdout);
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    for (int i = 0; i < k; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        p[i] = mp(a, b);
        s[mp(a, b)] = c;
    }
    int g[20];
    for (int i = 0; i < n; i++)
        g[i] = i;
    int k = 5e5;
    ll ans = 0;
    while (k--)
    {
        reverse(g, g + n);
        for (int i = 0; i <= n - m; i++)
        {
            ll tans = 0;
            for (int j = i; j < i + m; j++)
            {
                if (j != i + m - 1 && s.count(mp(g[j]+1, g[j + 1]+1)))
                    tans += s[mp(g[j]+1, g[j + 1]+1)];
                tans += a[g[j]];
            }
            ans = max(ans, tans);
        }
        reverse(g, g + n);
        for (int i = 0; i <= n - m; i++)
        {
            ll tans = 0;
            for (int j = i; j < i + m; j++)
            {
                if (j != i + m - 1 && s.count(mp(g[j] + 1, g[j + 1] + 1)))
                    tans += s[mp(g[j] + 1, g[j + 1] + 1)];
                tans += a[g[j]];
            }
            ans = max(ans, tans);
        }
        next_permutation(g, g + n);
    }
    cout << ans;
    return 0;
}