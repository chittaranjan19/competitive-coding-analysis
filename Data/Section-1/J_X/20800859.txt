#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>

using namespace std;

typedef long long ll;

const int maxn = 1e5 + 5;

struct edge
{
    int to, w, next;
} G[maxn << 1];
int n, m, head[maxn], tot, f[maxn], invf[maxn];
int sz[maxn], son, root, a[maxn];
ll ans;
bool cut[maxn];
map<int, int> mp;

int getphi(int x)
{
    int ret = 1;
    for(int i = 2; i * i <= x; ++i)
    {
        if(x % i == 0)
        {
            ret = ret / x * (x - 1);
            while(x % i == 0) x /= i;
        }
    }
    if(x != 1) ret = ret / x * (x - 1);
    return ret;
}

int pow_mod(int x, int n)
{
    int ret = 1;
    while(n)
    {
        if(n & 1) ret = (ll)ret * x % m;
        x = (ll)x * x % m;
        n >>= 1;
    }
    return ret;
}

void init()
{
    memset(head, -1, sizeof(head));
    tot = 0;
    f[0] = 1;
    for(int i = 1; i < maxn; ++i) f[i] = 10LL * f[i - 1] % m;
    invf[maxn - 1] = pow_mod(f[maxn - 1], getphi(m));
    for(int i = maxn - 1; i > 0; --i) invf[i - 1] = 10LL * invf[i] % m;
}

void addedge(int u, int v, int w)
{
    G[tot].to = v;
    G[tot].w = w;
    G[tot].next = head[u];
    head[u] = tot++;
}

void getsz(int u, int fa)
{
    sz[u] = 1;
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(v == fa || cut[v]) continue;
        getsz(v, u);
        sz[u] += sz[v];
    }
}

void getcenter(int u, int fa, int t)
{
    int mx = t - sz[u];
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(v == fa || cut[v]) continue;
        getcenter(v, u, t);
        mx = max(mx, sz[v]);
    }
    if(mx < son)
    {
        root = u;
        son = mx;
    }
}

void cal(int u, int fa, int d, int g, bool flag)
{
    if(!g && flag) ++ans;
    int h = (m - ((ll)g * invf[d]) % m) % m;
    if(mp.find(h) != mp.end()) ans += mp[h];
    for(int i = head[u]; ~i; i = G[i].next)
    {
        edge e = G[i];
        if(e.to == fa || cut[e.to]) continue;
        cal(e.to, u, d + 1, (10LL * g + e.w) % m, flag);
    }
}

void col(int u, int fa, int d, int g, bool flag)
{
    if(!g && flag) ++ans;
    ++mp[g];
    for(int i = head[u]; ~i; i = G[i].next)
    {
        edge e = G[i];
        if(e.to == fa || cut[e.to]) continue;
        col(e.to, u, d + 1, ((ll)e.w * f[d] + g) % m, flag);
    }
}

void dfs(int u)
{
    getsz(u, -1);
    son = maxn;
    getcenter(u, -1, sz[u]);
    u = root;
    cut[u] = true;
    mp.clear();
    int cnt = 0;
    for(int i = head[u]; ~i; i = G[i].next)
    {
        edge e = G[i];
        if(cut[e.to]) continue;
        a[cnt++] = i;
        cal(e.to, u, 1, e.w % m, true);
        col(e.to, u, 1, e.w % m, true);
    }
    mp.clear();
    for(int i = cnt - 1; i >= 0; --i)
    {
        edge e = G[a[i]];
        cal(e.to, u, 1, e.w % m, false);
        col(e.to, u, 1, e.w % m, false);
    }
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(cut[v]) continue;
        dfs(v);
    }
    cut[u] = false;
}

int main()
{
    scanf("%d%d", &n, &m);
    init();
    for(int i = 1; i < n; ++i)
    {
        int u, v, w;
        scanf("%d%d%d", &u, &v, &w);
        addedge(u, v, w);
        addedge(v, u, w);
    }
    ans = 0;
    dfs(0);
    printf("%I64d\n", ans);
    return 0;
}
