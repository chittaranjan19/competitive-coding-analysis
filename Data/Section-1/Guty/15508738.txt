#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;

tint nmod = 1000000007;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

vector<tint> desarrollo(tint n)
{
	vector<tint> des;
	while (n > 0)
	{
		des.push_back(n%2);
		n /= 2;
	}
	return des;
}

tint potMod (tint a,tint p)
{
	tint ans = 1;
	vector<tint> des = desarrollo(p);
	tint acc = a;
	forn(k,des.size())
	{
		if (des[k] != 0)
			ans = (((ans * acc) % nmod) * des[k]) % nmod;
		acc = (acc*acc) % nmod;
	}
	return ans % nmod;
	
}



int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	tint m;
	while (cin >> m)
	{
		map<tint,tint> cantDiv;
		tint n = 1;
		forn(i,m)
		{
			tint p;
			cin >> p;
			cantDiv[p]++;
			n = (n*p) % nmod;
		}
		tint qDiv = 1;
		bool flag = false;
		for(auto x : cantDiv)
		{
			if (!flag && x.second % 2 == 1)
			{
				qDiv = (qDiv * ((x.second + 1)/2)) % (nmod - 1);
				flag = true;
			}
			else
				qDiv = (qDiv * (x.second + 1)) % (nmod - 1);
		}
		if (flag) // No es cuadrado perfecto
			cout << potMod(n,qDiv) << endl;
		else // Es cuadrado perfecto
		{
			qDiv = (qDiv - 1)/2;
			tint raiz = 1;
			for(auto x : cantDiv)
				forn(i,x.second/2)
					raiz = (raiz*x.first) % (nmod);
			cout << (potMod(n,qDiv) * raiz) % (nmod) << endl;
		}
		
		
	}
	
	ios_base::sync_with_stdio(0);
	return 0;
}



