uses    math;
const   fi      ='';
        fo      ='';
        inf     =trunc(1e5);

type    arr1    =array[0..inf] of int64;
        arr2    =array[0..inf,0..1] of int64;

var     n       :longint;
        a       :Arr1;
        dd      :arr1;
        f       :Arr2;

procedure QS(l,r:longint);
var     i, j    :longint;
        x, tg   :int64;
begin
        i:=l;j:=r;
        x:=a[l+random(r-l+1)];
        repeat
                while a[i]<x do inc(i);
                while a[j]>x do dec(j);
                if i<=j then
                begin
                        tg:=a[i];a[i]:=a[j];a[j]:=tg;
                        inc(i);
                        dec(j);
                end;
        until i>j;
        if l<j then QS(l,j);
        if i<R then QS(i,r);
end;

procedure xuly;
var     i, j    :longint;

begin
        QS(1,n);
        fillchar(dd,sizeof(dd),0);
        for i:=1 to n do inc(dd[a[i]]);
        fillchar(f,sizeof(f),0);
        f[1,0]:=0;
        f[1,1]:=dd[1];
        for i:=2 to a[n] do
        begin
                f[i,0]:=max(f[i-1,0],f[i-1,1]);
                f[i,1]:=max(f[i-1,1],f[i-2,1]+dd[i]*i);
        end;
        writeln(max(f[a[n],0],f[a[n],1]));
end;
procedure run;
var     i :longint;
begin
        assign(input,fi);assign(output,fo);
        reset(input);rewrite(output);
        readln(n);
        for i:=1 to n do read(a[i]);
        xuly;
        close(input);close(output);
end;
begin
        run;
end.