#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

int main()
{
    int n,k,neg=0;
    cin >> n >> k;
    int arr[n],arr2[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
        arr2[n-i-1] = arr[i];
        if(arr[i] < 0)
            neg++;
    }
    if(k >= neg)
    {
        int counter=0;
        for(int i=0;i<n;i++)
        {
            if(arr[i] > 0)
                counter+=arr[i];
        }
        if(counter == 0)
        {
            sort(arr,arr+n);
            cout << arr[0];
            return 0;
        }
        cout << counter;
        return 0;
    }
    for(int i=0;i<k;i++)
    {
        int temp=0,mini=0;
        bool negat=false;
        for(int j=0;j<n;j++)
        {
            if(arr[j] > 0)
                negat = true;
            if(arr[j] < temp && negat)
            {
                bool last = true;
                for(int k=j+1;k<n;k++)
                {
                    if(arr[k] > 0)
                        last = false;
                }
                if(!last)
                    temp = arr[j],mini=j;
                else break;
            }
        }
        if(temp == 0)
            continue;
        int maxi=0;
        for(int j=n-1;j>=0 && i!=k-1;j--)
        {
            if(arr[j] > 0)
            {
                maxi=j;
                break;
            }
        }
        if(i == k-1)
        {
            int maximum=0;
            for(int j=n-1;j>=0;j--)
            {
                while(arr[j] > 0)
                {
                    if(arr[j] > maximum)
                        maxi=j,maximum=arr[j];
                    j--;
                }
                if(maxi != 0)
                    break;
            }
        }
        swap(arr[maxi],arr[mini]);
    }
    int maxi=0;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<=n;j++)
        {
            int counter=0;
            for(int k=i;k<j;k++)
            {
                counter+=arr[k];
            }
            maxi=max(maxi,counter);
        }
    }
    for(int i=0;i<k;i++)
    {
        int temp=0,mini=0;
        bool negat=false;
        for(int j=0;j<n;j++)
        {
            if(arr2[j] > 0)
                negat = true;
            if(arr2[j] < temp && negat)
            {
                bool last = true;
                for(int k=j+1;k<n;k++)
                {
                    if(arr2[k] > 0)
                        last = false;
                }
                if(!last)
                    temp = arr2[j],mini=j;
                else break;
            }
        }
        if(temp == 0)
            continue;
        int maxi=0;
        for(int j=n-1;j>=0 && i!=k-1;j--)
        {
            if(arr2[j] > 0)
            {
                maxi=j;
                break;
            }
        }
        if(i == k-1)
        {
            int maximum=0;
            for(int j=n-1;j>=0;j--)
            {
                while(arr2[j] > 0)
                {
                    if(arr2[j] > maximum)
                        maxi=j,maximum=arr2[j];
                    j--;
                }
                if(maxi != 0)
                    break;
            }
        }
        swap(arr2[maxi],arr2[mini]);
    }
    int maxii=0;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<=n;j++)
        {
            int counter=0;
            for(int k=i;k<j;k++)
            {
                counter+=arr2[k];
            }
            maxii=max(maxii,counter);
        }
    }
    cout << max(maxii,maxi);
    return 0;
}
