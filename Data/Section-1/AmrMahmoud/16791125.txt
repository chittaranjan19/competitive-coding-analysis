#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> arr[100005];
int deg[100005], n;
vector<int> g[100005];

bool check(int sz)
{
  for(int i=1;i<=n;i++)
  {
    g[i].clear();
    deg[i] = 0;
  }
  for(int i=0;i<sz;i++)
  {
    g[arr[i].f].pb(arr[i].s);
    deg[arr[i].s]++;
  }
  queue<int> q;
  for(int i=1;i<=n;i++)
  {
    if(deg[i]) continue;
    q.push(i);
  }
  int cnt = 0;
  while(!q.empty())
  {
    if(q.size() > 1) return false;
    int node = q.front();
    q.pop();
    cnt++;
    for(int x : g[node])
    {
      deg[x]--;
      if(!deg[x])
        q.push(x);
    }
  }
  return cnt == n;
}

int main()
{
  int m;
  cin >> n >> m;
  for(int i=0;i<m;i++)
    scanf("%d %d", &arr[i].f, &arr[i].s);
  if(!check(m))
  {
    cout << -1;
    return 0;
  }
  int L = 1, R = m;
  while(R > L)
  {
    int mid = L + (R - L) / 2;
    if(check(mid))
      R = mid;
    else L = mid + 1;
  }
  cout << R;
  return 0;
}
