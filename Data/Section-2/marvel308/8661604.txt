#include<stdio.h>
#include<algorithm>
#include<stdlib.h>
#include<vector>
using namespace std;
int main()
{
    int n,p,i,ans=0;
    char s[100005];
    scanf("%d%d",&n,&p);
    p--;
    scanf("%s",s);
    vector<int> G;
    for(i=0;i<n;i++)
    {
        if(s[i]!=s[n-i-1])
        {
            if(i==p||i==n-p-1)
                continue;
            G.push_back(i);
            //G.push_back(n-i-1);
        }
    }
    if(s[p]!=s[n-p-1])
        ans+=2;
    while(!G.empty())
    {
        int prev=p;
        //printf("p=%d\n",p);
        int x=lower_bound(G.begin(),G.end(),p)-G.begin();
        //x--;
        int y=x-1,si=G.size();
        printf("x=%d G=%d y=%d G=%d\n",x,G[x],y,G[y]);
        if(y<0)
        {
            p=G[x];
            int na=si-x-1;
            G.erase(G.begin()+x);
            G.erase(G.begin()+na-1);
            //continue;
        }
        else if(x>=si)
        {
            p=G[y];
            int na=si-y-1;
            G.erase(G.begin()+y);
            G.erase(G.begin()+na-1);
        }
        else if(abs(G[x]-p)<abs(G[y]-p))
        {
            p=G[x];
            int na=si-x-1;
            G.erase(G.begin()+x);
            G.erase(G.begin()+na-1);
        }
        else
        {
            p=G[y];
            int na=si-y-1;
            G.erase(G.begin()+y);
            G.erase(G.begin()+na-1);
        }
        si-=2;
        ans+=(abs(prev-p)+1);
    }
    printf("%d\n",ans);
    return 0;
}
