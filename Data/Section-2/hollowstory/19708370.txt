#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<vector>
#include<queue>
#include<stack>
#include<map>

using namespace std;

const int INF = 0x3f3f3f3f;

int n, q;
int x[300005], vis[300005];
vector<int> mark[300005];

int main(){
    ios::sync_with_stdio( false );

    queue<int> Q;
    memset( x, 0, sizeof( x ) );
    memset( vis, 0, sizeof( vis ) );
    cin >> n >> q;
    int type, path, sum = 0, pos = 0, hh = 1;
    while( q-- ){
        cin >> type >> path;
        if( type == 1 ){
            x[path]++;
            sum++;
            vis[++pos] = 1;
            mark[path].push_back( pos );
        }
        if( type == 2 ){
            for( int i = 0; i < mark[path].size(); i++ )
                vis[mark[path][i]] = 0;
            sum -= x[path];
            x[path] = 0;
        }
        if( type == 3 ){
            for( int i = hh; i <= path; i++ )
                if( vis[i] == 1 ) sum--;
            hh = path + 1;
        }
        Q.push( sum );
    }
    while( !Q.empty() ){
        cout << Q.front() << endl;
        Q.pop();
    }

    return 0;
}