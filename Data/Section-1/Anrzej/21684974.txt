#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 5e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

pair<pair<ll, ll>, ll> teams[N];
set<pair<ll, int> > weights;
char ans[2][13];

int main()
{
	string ss;
	cin >> ss;
	for (int i = 0; i < 27; i++){
		for (int j = 0; j < 27; j++){
			if (ss[i] == ss[j] && abs(i - j) > 1)
			{
				int f = i, s = j, delta = abs(f - s)-1;
				if (f > s) swap(f, s);
				if (f > 27-s-1){
					int t = f;
					f = 27 - s - 1, s = 27 - t-1;
					reverse(ss.begin(), ss.end());
				}
				int part = delta / 2;
				for (int i = 0; i <= part; i++){
					ans[1][12 - part + i] = ss[f + i];
				}
				int cur = 12 - part - 1;
				for (int i = f - 1; i > -1; i--){
					ans[1][cur--] = ss[i];
				}
				if (delta % 2 == 1)
					part += 1;
				for (int i = 0; i < part; i++){
					ans[0][12 - part + i+1] = ss[s - i-1];
				}
				cur = s + 1;
				for (int i = 12 - part; i > -1; i--){
					ans[0][i] = ss[cur++];
				}
				int r = 0;
				while (cur != 27)
					ans[1][r++] = ss[cur++];
				for (int k = 0; k < 13; k++)
					cout << ans[0][k];
				cout << endl;
				for (int k = 0; k < 13; k++)
					cout << ans[1][k];
				exit(0);
			}
		}
	}
	cout << "Impossible";
	return 0;
}