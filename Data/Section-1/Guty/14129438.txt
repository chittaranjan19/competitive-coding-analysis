#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<tint> a (n);
	forn(i,n)
		cin >> a[i];
	tint total = 0;
	vector<tint> partial (n);
	partial[0] = a[0];
	forsn(i,1,n)
		partial[i] = a[i] + partial[i-1];
	forn(i,n-2)
	{
		bool sePuede = true;
		tint suma = partial[i];
		tint cinf = i+1;
		tint csup = n-2;
		tint j;
		if (partial[cinf] - partial[i] == suma)
			j = cinf;
		else if (partial[csup] - partial[i] == suma)
			j = csup;
		else
		{
			while (csup - cinf > 1)
			{
				tint c  =(cinf + csup) / 2;
				if (partial[c] - partial[i] < suma)
					cinf = c;
				else
					csup = c;
			}
			j = csup;
			if (partial[j] - partial[i] != suma)
				sePuede = false;
		}
		if (sePuede && partial[n-1] - partial[j] == suma)
			total++;
		if (a[j] == 0)
			total++;
	}
	cout << total << endl;
	return 0;
}



