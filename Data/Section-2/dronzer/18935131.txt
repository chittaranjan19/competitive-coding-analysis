#include<vector>
#include<iostream>
#include<stdio.h>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iostream>
#include<iomanip>
#include<cstdio>
#include<cmath>
#include<math.h>
#include<cstdlib>
#include<ctime>
#include<cstring>
#include<climits>
#include<sstream>
#include<string.h>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

#define lli long long
#define mp make_pair
#define pi pair<int,int>
#define pli pair<lli,lli>
#define pb push_back

const double EPS = 1e-24;
const lli mod = 1000000007ll;
const double PI = 3.14159265359;
int INF = 2147483645;

template <class T>T Max2(T a,T b){return a<b?b:a;}
template <class T>T Min2(T a,T b){return a<b?a:b;}
template <class T>T Max3(T a,T b,T c){return Max2(Max2(a,b),c);}
template <class T>T Min3(T a,T b,T c){return Min2(Min2(a,b),c);}
template <class T>T Max4(T a,T b,T c,T d){return Max2(Max2(a,b),Max2(c,d));}
template <class T>T Min4(T a,T b,T c,T d){return Min2(Min2(a,b),Max2(c,d));}

using namespace std;
typedef vector< int > vi;
typedef vector< vi > vvi;
int main()
{
ios::sync_with_stdio(false);
int n,f,l,c,min,j,next;
queue <int> q;
cin>>n;
vi gr[n+1];
vi::iterator it;
vi visit(n+1,0);
vi d(n+1,INF);
//int weight[n+1][n+1];
int a[n];
for(int i=1;i<=n;i++){
		for(j=1;j<=n;j++){
		if(i!=j){
			gr[i].pb(j);
		}
		}
}
set< pi > s;
for(int i=1;i<=n;i++){
		 cin>>a[i];
		 if(i!=a[i])
		 s.insert(mp(a[i],i));
}
f = 1;
d[f]= 0;
next = f;
for(int i = 1;i<=n;i++){
	min = INF;
	f = next;
	for( it = gr[f].begin();it < gr[f].end() ;it++){
		j = *it;
		if(s.find(mp(j,f)) !=s.end())
		d[j] = Min2( d[j], d[f] + 1);
		else
			d[j] = Min2( d[j], d[f] + abs(j-f));
		if( d[j] < min && !visit[j] ){// next is the next node of least distance from f.
			min = d[j];
			next = j;
		}
	}
	visit[f]=1;
}
for(int i=1;i<=n;i++)
cout<<d[i]<<" ";
}
