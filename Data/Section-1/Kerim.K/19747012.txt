#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}	
ll dis[MAXN],arr[MAXN],par[MAXN];
ll dp[MAXN][103];
struct CHT{
	vector<int>m,b;
	int point;
	void init(){
		point=0;
		m.resize(0);
		b.resize(0);
	}
	int intersect(int l1,int l2,int l3){
		int x1=(b[l1]-b[l2])/(m[l1]-m[l2]);
		int x2=(b[l2]-b[l3])/(m[l2]-m[l3]);
		if(x1<x2)
			return 0;//l2 line has gowy
		return 1;//l3 line has gowy
	}
	void upd(int x,int y){
		m.pb(x);b.pb(y);
		while(m.size()>2 and intersect(m.size()-3,m.size()-2,m.size()-1)){//l3 line has gowy bolsa
			m.erase(m.end()-2);//l2 linyn slopyny poz
			b.erase(b.end()-2);//l2 linyn y-axisy poz
		}
	}
	int tap(int x){
		if(point>=int(m.size()))
			point=m.size()-1;
		while(point+1<int(m.size()) and arr[x]*(x-m[point])+b[point]-par[x]>arr[x]*(x-m[point+1])+b[point+1]-par[x])	
			point++;
		return arr[x]*(x-m[point])+b[point]-par[x];	
	}
};
int main(){
	memset(dp,32,sizeof(dp));
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif
	int n,m,p;
	scanf("%d%d%d",&n,&m,&p);
	for(int i=2;i<=n;i++){
		int x;
		scanf("%d",&x);
		dis[i]=dis[i-1]+x;
	}
	for(int i=1;i<=m;i++){
		int x,y;
		scanf("%d%d",&x,&y);
		arr[i]=y-dis[x];
	}
	sort(arr+1,arr+m+1);	
	for(int i=1;i<=m;i++)
		par[i]=arr[i]+par[i-1];
	dp[0][0]=0;CHT T;
	for(int i=1;i<=m;i++)
		assert(arr[i]>=0);
	for(int y=1;y<=p;y++){
		T.init();T.upd(0,dp[0][y-1]);
		for(int x=1;x<=m;x++){
			dp[x][y]=T.tap(x);
			T.upd(x,dp[x][y-1]+par[x]);	
		//	for(int i=0;i<x;i++)
			//	umin(dp[x][y],arr[x]*(x-i)+(dp[i][y-1]+par[i])-par[x]);
		}
	}
	printf("%lld\n",dp[m][p]);	
	return 0;
}
