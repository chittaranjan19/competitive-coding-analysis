#include <iostream>
#include <queue>

using namespace std;

struct p{
    int first;
    int second;
    int third;
    p(){
        first = -1;second = -1;third = -1;
    }
};

int n,d[80][80][80];
char arr[80][80];
queue < p > q;
p par[80][80][80];

void bfs(){
    p k;
    d[0][1][2] = 0;
    d[0][2][1] = 0;
    d[1][0][2] = 0;
    d[1][2][0] = 0;
    d[2][0][1] = 0;
    d[2][1][0] = 0;
    k.first = 0;k.second = 1;k.third = 2;q.push(k);
    k.first = 0;k.second = 2;k.third = 1;q.push(k);
    k.first = 1;k.second = 0;k.third = 2;q.push(k);
    k.first = 1;k.second = 2;k.third = 0;q.push(k);
    k.first = 2;k.second = 0;k.third = 1;q.push(k);
    k.first = 2;k.second = 1;k.third = 0;q.push(k);
    while(!q.empty()){
        for(int i=0;i<n;i++){
            if(i !=q.front().first && i !=q.front().second && i !=q.front().third && arr[i][q.front().first] == arr[q.front().second][q.front().third] && d[i][q.front().second][q.front().third] == -1){
                d[i][q.front().second][q.front().third] = d[q.front().first][q.front().second][q.front().third] + 1;
                k.first = i;k.second = q.front().second;k.third = q.front().third;q.push(k);
                k.first = q.front().first;k.second = q.front().second;k.third = q.front().third;q.push(k);
                par[i][q.front().second][q.front().third] = k;
            }
        }
        for(int i=0;i<n;i++){
            if(i !=q.front().first && i !=q.front().second && i !=q.front().third && arr[i][q.front().second] == arr[q.front().first][q.front().third] && d[q.front().first][i][q.front().third] == -1){
                d[q.front().first][i][q.front().third] = d[q.front().first][q.front().second][q.front().third] + 1;
                k.first = q.front().first;k.second = i;k.third = q.front().third;q.push(k);
                k.first = q.front().first;k.second = q.front().second;k.third = q.front().third;q.push(k);
                par[q.front().first][i][q.front().third]= k;
            }
        }
        for(int i=0;i<n;i++){
            if(i !=q.front().first && i !=q.front().second && i !=q.front().third && arr[i][q.front().third] == arr[q.front().second][q.front().first] && d[q.front().first][q.front().second][i] == -1){
                d[q.front().first][q.front().second][i] = d[q.front().first][q.front().second][q.front().third] + 1;
                k.first = q.front().first;k.second = q.front().second;k.third = i;q.push(k);
                k.first = q.front().first;k.second = q.front().second;k.third = q.front().third;q.push(k);
                par[q.front().first][q.front().second][i] = k;
            }
        }
        q.pop();
    }
}

int main(){
    int x,y,z;
    cin >> n;
    cin >> x >> y >> z;
    x--;y--;z--;
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin >> arr[i][j];
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            for(int k=0;k<n;k++)
                d[i][j][k] = -1;
    bfs();
    cout << d[x][y][z] << endl;
    if(d[x][y][z] != -1){
        p tmp;
        tmp.first = -1;
        while(par[x][y][z].first != tmp.first){
            if(x != par[x][y][z].first){
                cout << x+1 << " " << par[x][y][z].first+1 << endl;
                x = par[x][y][z].first;
                continue;
            }
            if(y != par[x][y][z].second){
                cout << y+1 << " " << par[x][y][z].second+1 << endl;
                y = par[x][y][z].second;
                continue;
            }
            if(z != par[x][y][z].third){
                cout << z+1 << " " << par[x][y][z].third+1 << endl;
                z = par[x][y][z].third;
                continue;
            }
        }
    }
    return 0;
}
