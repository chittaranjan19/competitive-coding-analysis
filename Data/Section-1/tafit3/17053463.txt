import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Set;
import java.util.TreeSet;

public class ProblemF {
    BufferedReader rd;

    ProblemF() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        long[] u = longarr();
        int n = (int)u[0];
        int m = (int)u[1];
        long k = u[2];
        long[][] a = new long[n][];
        Set<Long> heights = new TreeSet<>();
        for(int i=0;i<n;i++) {
            a[i] = longarr();
            for(int j=0;j<m;j++) {
                if(a[i][j] > 0) {
                    heights.add(a[i][j]);
                }
            }
        }

        final int[][] dirs = new int[][] { { -1, 0 }, { 1,0 }, {0, -1}, {0,1}};
        long g = 0;
        for(Long ch: heights) {
            long h = ch;
            if(k>=h && (k%h == 0)) {
                long req = k/h;
                if(req <= 1000_000) {
                    long[][] v = new long[n][m];
                    for(int i=0;i<n;i++) {
                        for(int j=0;j<m;j++) {
                            g++;
                            if(v[i][j] < g && a[i][j] >= h) {
                                v[i][j] = g;
                                Queue<Integer> q = new ArrayDeque<>();
                                q.add((i<<10)+j);
                                int c = 1;
                                while(!q.isEmpty()) {
                                    int z = q.poll();
                                    int row = z>>10;
                                    int col = z&0x3ff;
                                    for(int[] d: dirs) {
                                        int nr = row + d[0];
                                        int nc = col + d[1];
                                        if(nr >= 0 && nr < n && nc >=0 && nc < m) {
                                            if(v[nr][nc] < g && a[nr][nc] >= h) {
                                                v[nr][nc] = g;
                                                q.add((nr<<10)+nc);
                                                c++;
                                            }
                                        }
                                    }
                                }
                                if(c >= req) {
                                    out("YES");
                                    StringBuilder buf = new StringBuilder();
                                    int y = 0;
                                    for(i=0;i<n;i++) {
                                        if(i > 0) {
                                            buf.append('\n');
                                        }
                                        for(j=0;j<m;j++) {
                                            if(j > 0) {
                                                buf.append(' ');
                                            }
                                            if(y < req && v[i][j]==g) {
                                                y++;
                                                buf.append(h);
                                            } else {
                                                buf.append('0');
                                            }
                                        }
                                    }
                                    out(buf);
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        }
        out("NO");
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemF();
    }
}
