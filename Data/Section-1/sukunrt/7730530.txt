#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
//#include <rope>
#include <cstring>


using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


char grid[505][505];
int e[505][505];
int v[505][505];
int n, m, k, r;
int s;
void dfs(int i, int j){
//        cout << i << " " << j << endl;
        if (grid[i][j] != '.' || v[i][j]) return;
        if (r == s-k) {
                //flag = 1;
                return;
        }
        else {
                v[i][j] = 1;
                r++;
                
                dfs(i+1, j);
                dfs(i, j+1);
                dfs(i-1, j);
                dfs(i, j-1);
        }
}
                
                
                                        
                               
int main(){
        ios::sync_with_stdio(false);
        cin >> n >> m >> k;
        for(int i = 0; i < n; i++){
                string s;
                cin >> s;
                for(int j = 0; j < m; j++)
                        grid[i+1][j+1] = s[j];
        }
        for(int i = 1; i <= n; i++) for(int j = 1; j <= m; j++) if (grid[i][j] == '.') s++;

        int i = 1, j = 1, flag = 0;
        for(; i <= n; i++){
                for(; j <= m; j++) {
                        if (grid[i][j] == '.') {
                                flag = 1;
                                break;
                        }
                        
                }
                
        if (flag) break;
        }

        dfs(i,j);
        
                
        //dfs(1,1);
        for(int i = 1; i <= n; i++){
                for(int j = 1; j <= m; j++){
                        if (grid[i][j] == '.' && !v[i][j])
                                cout << 'X';
                        else    cout << grid[i][j];
                }
                cout << "\n";
        }

        return 0;
}
        
                        
        
        
        

