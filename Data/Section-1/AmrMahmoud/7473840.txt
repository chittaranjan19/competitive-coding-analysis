#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int arr[1000005],res[1000005],res2[1000005],DP[1000005];
LL DP2[1000005];
map<int,int> counter;

int main()
{
    int n;
    cin >> n;
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    for(int i=0;i<n;i++)
    {
        res[i] = counter[arr[i]] + 1;
        counter[arr[i]]++;
    }
    counter.clear();
    for(int i=n-1;i>=0;i--)
    {
        res2[i] = counter[arr[i]] + 1;
        counter[arr[i]]++;
        DP2[res2[i]]++;
    }
    for(int i=1;i<=n;i++)
        DP2[i] += DP2[i-1];
    int counter=0;
    for(int i=0;i<n;i++)
    {
        int k = res2[i];
        while(DP2[k] != 0)
        {
            DP2[k]--;
            k++;
        }
        DP[res[i]]++;
        counter+=DP2[DP[res[i]] - 1];
    }
    cout << counter;
    return 0;
}

/*
int dist[300005],lastw[300005];
bool visited[300005];

vector<vector<pair<int,int> > > graph(300005);

int main()
{
    int n,m,x,y,z;
    cin >> n >> m;
    for(int i=0;i<m;i++)
    {
        scanf("%d %d %d",&x,&y,&z);
        graph[x].pb(mp(y,z));
    }
    priority_queue<pair<pair<int,int>,int> > dijkstra;
    for(int i=1;i<=n;i++)
        graph[0].pb(mp(i,0)),dijkstra.push(mp(mp(0,i),0));;
    while(!dijkstra.empty())
    {
        int temp = dijkstra.top().first.second,tempo = dijkstra.top().second;
        dijkstra.pop();
        if(visited[temp])
            continue;
        lastw[temp] = tempo;
        visited[temp] = true;
        for(int i=0;i<graph[temp].size();i++)
        {
            int node = graph[temp][i].first;
            if((dist[node] < dist[temp] + 1 && lastw[node] < graph[temp][i].second) && !visited[node])
            {
                dist[node] = dist[temp] + 1;
                dijkstra.push(mp(mp(dist[node],node),graph[temp][i].second));
            }
        }
        visited[temp] = false;
    }
    int maxi=0;
    for(int i=1;i<=n;i++)
        maxi = max(maxi,dist[i]);
    cout << maxi - 1;
    return 0;
}
*/
