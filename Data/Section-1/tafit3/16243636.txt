import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemC2 {
    private static final long B = 1_000_000_007L;
    BufferedReader rd;

    Long[][] dp = new Long[3000][3000];
    long[] cat = new long[3000];

    ProblemC2() throws IOException {
        cat[0] = 1;
        for(int i=1;i<3000;i++) {
            long c = 0;
            for(int j=0;j<i;j++) {
                c += (cat[j]*cat[i-1-j]);
                c %= B;
            }
            cat[i] = c;
        }

        rd = new BufferedReader(new InputStreamReader(System.in));
        int[] a = intarr();
        String s = rd.readLine();
        out(compute(a[0], a[1], s));
    }

    private long compute(int n, int m, String s) throws IOException {
        char[] c = s.toCharArray();
        int e = 0;
        int mi = 0;
        for(char u: c) {
            if(u=='(') {
                e++;
            } else {
                e--;
            }
            mi = Math.min(mi, e);
        }
        long res;
        if(mi < -2000 || e > 2000 || (n%2==1)) {
            res = 0;
        } else if(m == n) {
            res = (e==0 && mi == 0)?1:0;
        } else {
            int pr = -mi;
            int su = e-mi;
            int y = 0;
            int nm = n-m;
            res = 0;
            while(y*2 + pr + su <= nm) {
                for(int j=pr;j<=nm;j++) {
                    int k = nm - j;
                    if(k < su) {
                        break;
                    }
                    long u = 1;
                    u *= t(pr+y,j);
                    u %= B;
                    u *= t(su+y,k);
                    u %= B;
                    res += u;
                }
                y++;
            }
        }
        return res;
    }

    private long t(int h, int d) {
        Long c = dp[h][d];
        if(c == null) {
            if(d < h) {
                c = 0L;
            } else if(d == h) {
                c = 1L;
            } else if(h == 0) {
                if(d%2==0) {
                    c = cat[d/2];
                } else {
                    c = 0L;
                }
            } else {
                long u = 0;
                for(int j=0;j<=d-h;j+=2) {
                    if(d-j-1<0) {
                        break;
                    }
                    long v = cat[j/2];
                    v *= t(h-1,d-j-1);
                    v %= B;
                    u += v;
                    u %= B;
                }
                c = u;
            }
            dp[h][d] = c;
        }
        return c;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC2();
    }
}
