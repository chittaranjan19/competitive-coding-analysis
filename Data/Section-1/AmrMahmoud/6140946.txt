#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define PI acos(-1.0)
#define LL long long

using namespace std;

queue<pair<int,int> > bfs;
bool visited[2005][2005] = {false};
int depth[2005][2005];

int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int n,m,k,x,y;
    scanf("%d%d%d",&n,&m,&k);
    for(int i=0;i<k;i++)
    {
        scanf("%d%d",&x,&y);
        bfs.push(make_pair(x,y));
    }
    int lx=x,ly=y;
    while(!bfs.empty())
    {
        x=bfs.front().first,y=bfs.front().second;
        bfs.pop();
        if(visited[x][y])
            continue;
        if(depth[x][y] > depth[lx][ly])
            lx=x,ly=y;
        visited[x][y] = true;
        if(x!=1 && !visited[x-1][y])
        {
            bfs.push(make_pair(x-1,y));
            if(depth[x-1][y] == 0)
                depth[x-1][y] = depth[x][y]+1;
            else depth[x-1][y] = min(depth[x-1][y],depth[x][y]+1);
        }
        if(x!=n && !visited[x+1][y])
        {
            bfs.push(make_pair(x+1,y));
            if(depth[x+1][y] == 0)
                depth[x+1][y] = depth[x][y]+1;
            else depth[x+1][y] = min(depth[x+1][y],depth[x][y]+1);
        }
        if(y!=1 && !visited[x][y-1])
        {
            bfs.push(make_pair(x,y-1));
            if(depth[x][y-1] == 0)
                depth[x][y-1] = depth[x][y]+1;
            else depth[x][y-1] = min(depth[x][y-1] , depth[x][y]+1);
        }
        if(y!=m && !visited[x][y+1])
        {
            bfs.push(make_pair(x,y+1));
            if(depth[x][y+1] == 0)
                depth[x][y+1] = depth[x][y]+1;
            else depth[x][y+1] = min(depth[x][y+1],depth[x][y]+1);
        }
    }
    printf("%d %d",lx,ly);
    return 0;
}