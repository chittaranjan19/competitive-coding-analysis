#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 300000;
const int MAX_L = 1000000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<pair<int, int> > v[MAX_N];

typedef struct
{
	int s;
	int f;
	int w;

	void rebro(int s1, int f1, int w1)
	{
		s = s1;
		f = f1;
		w = w1;
	}
}rebro;

bool comp(rebro a, rebro b)
{
	return a.w < b.w;
}

rebro graph[MAX_N];

int main()
{
	//ifstream ifs("input.in");
	//ofstream ofs("output.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, m;
	scanf_s("%d %d", &n, &m);
	for (int i = 0; i < m; i++)
	{
		int s, f, t;
		scanf_s("%d %d %d", &s, &f, &t);
		graph[i].rebro(s - 1, f - 1, t);
	}
	sort(graph, graph + m, comp);
	int ans = 0;
	for (int i = 0; i < m; i++)
	{
		int tmp = 0;
		for (int j = 0; j < v[graph[i].s].size(); j++)
			if (v[graph[i].s][j].first < graph[i].w)
				tmp = max(tmp, v[graph[i].s][j].second);
		tmp++;
		v[graph[i].f].push_back(make_pair(graph[i].w, tmp));
		ans = max(ans, tmp);
	}
	printf("%d", ans);
	return 0;
}