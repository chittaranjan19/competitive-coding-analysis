import java.io.*;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class ProblemD {
    BufferedReader rd;
    int n;
    Map<String, Integer> cache = new HashMap<>();
    PrintStream os;
    private boolean debug = false;

    ProblemD() throws IOException {
        this(System.in, System.out);
    }

    ProblemD(InputStream is, OutputStream os) throws IOException {
        this.os = new PrintStream(os);
        rd = new BufferedReader(new InputStreamReader(is));
        compute();
    }

    private void compute() throws IOException {
        n = pint();
        int fx = cut(true);
        int[] a = null, b = null;
        if(debug) {
            out("fx = " + fx);
        }
        boolean ok = false;
        if(fx >= 0) {
            a = new int[] { 1, 1, fx, n };
            b = new int[] { fx+1, 1, n, n };
            int v1 = ask("? "+a[0]+" "+a[1]+" "+a[2]+" "+a[3]);
            int v2 = ask("? "+b[0]+" "+b[1]+" "+b[2]+" "+b[3]);
            if(v1 == 1 && v2 == 1) {
                ok = true;
            }
        }
        if(!ok) {
            int fy = cut(false);
            if(debug) {
                out("fy = " + fy);
            }
            a = new int[]{1, 1, n, fy};
            b = new int[]{1, fy + 1, n, n};
        }
        if(debug) {
            out("BEFORE REDUCE = " + Arrays.toString(a) + ", " + Arrays.toString(b));
        }
        a = reduce(a);
        b = reduce(b);
        out("! "+a[0]+" "+a[1]+" "+a[2]+" "+a[3]+" "+b[0]+" "+b[1]+" "+b[2]+" "+b[3]);
    }

    private int[] reduce(int[] a) throws IOException {
        int[] res = new int[4];
        for(int i=0;i<4;i++) {
            res[i] = s(a, i);
        }
        return res;
    }

    private int s(int[] a, int k) throws IOException {
        int mii = a[k%2];
        int maa = a[(k%2)+2];
        int mi = mii;
        int ma = maa;
        while(ma-mi > 1) {
            int x = (mi + ma) / 2;
            int u = ask(k,x,a);
            if(u == 0) {
                if(k < 2) {
                    ma = x;
                } else {
                    mi = x;
                }
            } else {
                if(k < 2) {
                    mi = x;
                } else {
                    ma = x;
                }
            }
        }
        int x = k < 2?Math.max(mi-1,mii):Math.min(mi+2,maa);
        if(debug) {
            out("starting with x=" + x);
        }
        while(true) {
            if(debug) {
                out("x=" + x);
            }
            int u = ask(k,x,a);
            if(k < 2) {
                if (u == 0) {
                    return x - 1;
                }
                if(x == maa) {
                    return x;
                }
                x++;
            } else {
                if (u == 0) {
                    return x + 1;
                }
                if(x == mii) {
                    return x;
                }
                x--;
            }
        }
    }

    private int ask(int k, int x, int[] a) throws IOException {
        StringBuilder buf = new StringBuilder();
        buf.append('?');
        for(int i=0;i<4;i++) {
            buf.append(' ');
            buf.append(i==k?x:a[i]);
        }
        return ask(buf.toString());
    }

    private int ask(String query) throws IOException {
        Integer res = cache.get(query);
        if(res == null) {
            out(query);
            res = pint();
            cache.put(query, res);
        }
        return res;
    }

    private int cut(boolean rows) throws IOException {
        int mi = 1;
        int ma = n;
        while(ma-mi > 1) {
            int x = (mi + ma) / 2;
            String query;
            if(rows) {
                query = "? 1 1 " + x + " " + n;
            } else {
                query = "? 1 1 " + n + " " + x;
            }
            int u = ask(query);
            if(u == 0) {
                mi = x;
            } else {
                ma = x;
            }
        }
        int x = mi;
        while(x <= n) {
            String query;
            if(rows) {
                query = "? 1 1 " + x + " " + n;
            } else {
                query = "? 1 1 " + n + " " + x;
            }
            int u = ask(query);
            if(u == 1) {
                return x;
            } else if(u == 2) {
                return -1;
            }
            x++;
        }
        return -1;
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private void out(Object x) {
        os.println(x);
        os.flush();
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
