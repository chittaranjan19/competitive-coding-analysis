const
      maxn=1000000;
type
     node=record
       left,right:longint;
     end;
     point=^tt;
     tt=record
       data,key:longint;
       next:point;
     end;
var
    n,m,i,l,j,k:longint;
    q,ans:array[0..300010] of longint;
    a:array[0..300010] of node;
    c:array[0..maxn+10] of longint;
    head:array[0..maxn+10] of point;
    p:point;

procedure qsort(l,r:longint);
var
    i,j:longint;
    mid,temp:node;
begin
  i:=l;j:=r;
  mid:=a[l+random(r-l+1)];
  repeat
    while a[i].right<mid.right do inc(i);
    while a[j].right>mid.right do dec(j);
    if i<=j then
      begin
        temp:=a[i];a[i]:=a[j];a[j]:=temp;
        inc(i);dec(j);
      end;
  until i>j;
  if l<j then qsort(l,j);
  if i<r then qsort(i,r);
end;

function lowbit(x:longint):longint;
begin
  exit(x and (-x));
end;

procedure change(x:longint);
begin
  while x<=maxn do
    begin
      inc(c[x]);
      inc(x,lowbit(x));
    end;
end;

function query(x:longint):longint;
var
    cnt:longint;
begin
  cnt:=0;
  while x>0 do
    begin
      inc(cnt,c[x]);
      dec(x,lowbit(x));
    end;
  exit(cnt);
end;

procedure push(x,y,z:longint);
var
    p:point;
begin
  new(p);p^.data:=y;p^.key:=z;p^.next:=head[x];head[x]:=p;
end;

begin {main}
  randomize;
  readln(n,m);
  for i:=1 to n do
    readln(a[i].left,a[i].right);
  qsort(1,n);
  fillchar(c,sizeof(c),0);
  for i:=1 to m do
    begin
      read(l);
      for j:=1 to l do read(q[j]);
      inc(l);
      readln;q[0]:=0;q[l]:=maxn+1;
      for j:=1 to l do push(q[j],q[j-1],i);
    end;
  k:=1;
  fillchar(c,sizeof(c),0);
  fillchar(ans,sizeof(ans),0);
  for i:=1 to maxn+1 do
    begin
      while (k<=n) and (a[k].right<i) do
        begin
          change(maxn-a[k].left+1);
          inc(k);
        end;
      p:=head[i];
      while p<>nil do
        begin
          inc(ans[p^.key],query(maxn-p^.data));
          p:=p^.next;
        end;
    end;
  for i:=1 to m do writeln(n-ans[i]);
end.
