#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string.h>
#include <queue>
#include <vector> 
using namespace std;
const long long M = 100000+10, N = 1e9+7, MAX = 0xffff - 10;
int n, k;
typedef struct Node
{
	int count, father;
}Node;
Node ch[10*M];
void select(int p, int *p1, int *p2)
{
	int i, t1 = MAX, q1, q2, t2 = MAX;
	for (i = 0; i < p; i++)
	{
		if (!ch[i].father && ch[i].count < t1)
		{
			q2 = q1;
			t2 = t1;
			t1 = ch[i].count;
			q1 = i;
		}
		else if (!ch[i].father && ch[i].count < t2)
		{
			t2 = ch[i].count;
			q2 = i;
		}
	}
	*p1 = q1;
	*p2 = q2;
}
void huffman()
{
	int i, j, cnt = 2*n-k, t1, t2, f, c; 
	for (i = 0; i < cnt; i++)
		ch[i].father = 0;
	for(j = n; j < cnt; j++)
	{
		select(j, &t1, &t2);
		ch[t1].father = ch[t2].father = j;
		ch[j].count = ch[t1].count + ch[t2].count;
	}
}
int main()
{
#ifndef   ONLINE_JUDGE
	//freopen("1.txt", "r", stdin);
#endif
	int i, j, ans, m = 0;
	cin >> n >> k;
	for(i = 0; i < n; i++)
	{
		scanf("%d", &ch[i].count);
	}
	huffman();
	for(i = 0; i < 2*n-k; i++)
	{
		if (!ch[i].father)
		{
			m = max(m, ch[i].count);
		}
	}
	cout << m;
	return 0;
}
