#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

pair<int,int> arr[2005], arr2[2005];

bool sorter(pair<int,int> a,pair<int,int> b)
{
    if(a.first == b.first)
        return a.second > b.second;
    return a.first < b.first;
}

int main()
{
    int n,x,t,h,m;
    cin >> n >> x;
    int ii=0,jj=0;
    for(int i=0;i<n;i++)
    {
        scanf("%d%d%d",&t,&h,&m);
        if(!t)
        {
            arr[ii++] = mp(h,m);
        }
        else arr2[jj++] = mp(h,m);
    }
    sort(arr,arr+ii,sorter);
    sort(arr2,arr2+jj,sorter);
    int min1=0,min2=0;
    LL hh = x;
    bool taken1[n],taken2[n];
    memset(taken1,false,sizeof(taken1));
    memset(taken2,false,sizeof(taken2));
    for(int i=0;;i++)
    {
        LL maxh=0;
        if(i<ii && arr[i].first <= hh)
        {
            int temp =i,ind;
            while(temp<ii && arr[temp].first <= hh)
            {
                if(!taken1[temp] && maxh < arr[temp].second)
                    maxh = arr[temp].second,ind = temp;
                temp++;
            }
            min1++;
            hh+=maxh;
            taken1[ind] = true;
        }
        else break;
        maxh=0;
        if(i<jj && arr2[i].first <= hh)
        {
            int temp =i,ind;
            while(temp<jj && arr2[temp].first <= hh)
            {
                if(!taken2[temp] && maxh < arr2[temp].second)
                    maxh = arr2[temp].second,ind = temp;
                temp++;
            }
            min1++;
            hh+=maxh;
            taken2[ind] = true;
        }
        else break;
    }
    hh = x;
    memset(taken1,false,sizeof(taken1));
    memset(taken2,false,sizeof(taken2));
    for(int i=0;;i++)
    {
        LL maxh=0;
        if(i<jj && arr2[i].first <= hh)
        {
            int temp =i,ind;
            while(temp<jj && arr2[temp].first <= hh)
            {
                if(!taken2[temp] && maxh < arr2[temp].second)
                    maxh = arr2[temp].second,ind = temp;
                temp++;
            }
            min2++;
            hh+=maxh;
            taken2[ind] = true;
        }
        else break;
        maxh=0;
        if(i<ii && arr[i].first <= hh)
        {
            int temp =i,ind;
            while(temp<ii && arr[temp].first <= hh)
            {
                if(!taken1[temp] && maxh < arr[temp].second)
                    maxh = arr[temp].second,ind = temp;
                temp++;
            }
            hh+=maxh;
            min2++;
            taken1[ind] = true;
        }
        else break;
    }
    cout << max(min1,min2);
    return 0;
}
