#include <iostream>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); a - массв, n - кол-во эл-тов
#include <iomanip>      // setw()
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> our_iter(cout, " ");
#include <set>
#include <map>
#define SRT srand(int(time(0)))
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
using namespace std;
struct IR
{
    int ind;
    int res;
};
bool operator<(const IR &p1, const IR &p2)
{
    if (p1.ind < p2.ind)
        return true;
    else if (p1.ind == p2.ind && p1.res >= p2.res)
        return true;
    return false;
}
int main()
{
    //ios_base::sync_with_stdio(0);
    typedef map<IR, string> Mapi;
    typedef Mapi::value_type Mapi_t;
    Mapi::iterator it;
    Mapi p;
    string s;
    IR temp;
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; ++i)
    {
        cin >> s >> temp.ind >> temp.res;
        p.insert(Mapi_t(temp, s));
    }
    Mapi::iterator itr;
    for (it = p.begin(); it != p.end(); ++it)
    {
        itr = ++it;
        ++itr;
        if (itr != p.end() && (*it).first.ind == (*itr).first.ind && (*it).first.res == (*itr).first.res)
            printf("?\n");
        else
            cout << (*--it).second << ' ' << (*--itr).second << '\n';
        while (itr != p.end() && (*it).first.ind == (*itr).first.ind)
            it = itr++;
    }
    return 0;
}