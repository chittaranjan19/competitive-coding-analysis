#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 175781251
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int tree[2000002], lazy[2000002];

void update(int i,int L,int R,int x,int y,int val)
{
  if(lazy[i] != 0)
  {
    tree[i] = lazy[i] * (R - L + 1);
    if(L != R)
    {
      lazy[i*2+1] = lazy[i];
      lazy[i*2+2] = lazy[i];
    }
    lazy[i] = 0;
  }
  if(L >= x && R <= y)
  {
    lazy[i] = val;
    tree[i] = lazy[i] * (R - L + 1);
    if(L != R)
    {
      lazy[i*2+1] = lazy[i];
      lazy[i*2+2] = lazy[i];
    }
    lazy[i] = 0;
    return;
  }
  if(L > y || R < x)
    return;
  update(i*2 + 1, L, (L + R) / 2, x, y, val);
  update(i*2 + 2, (L + R) / 2 + 1, R, x, y, val);
  tree[i] = tree[i*2 + 1] + tree[i*2 + 2];
}

int query(int i,int L,int R,int x,int y)
{
  if(lazy[i] != 0)
  {
    tree[i] = lazy[i] * (R - L + 1);
    if(L != R)
    {
      lazy[i*2+1] = lazy[i];
      lazy[i*2+2] = lazy[i];
    }
    lazy[i] = 0;
  }
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return query(i*2+1, L, (L + R) / 2, x, y) + query(i*2+2, (L + R) / 2 + 1, R, x, y);
}

int in[500005], sz[500005], p[500005], c;
vector<int> g[500005];

int dfs(int node, int parent = -1)
{
  p[node] = parent;
  in[node] = c++;
  for(int i=0;i<g[node].size();i++)
  {
    if(g[node][i] == parent) continue;
    sz[node] += dfs(g[node][i], node);
  }
  return ++sz[node];
}

int main()
{
  int n, x, y, q;
  scanf("%d", &n);
  for(int i=0;i<n - 1;i++)
  {
    scanf("%d %d", &x, &y);
    g[x].pb(y);
    g[y].pb(x);
  }
  dfs(1);
  scanf("%d", &q);
  while(q--)
  {
    scanf("%d %d", &x, &y);
    if(x == 1)
    {
      if(query(0, 0, n - 1, in[y], in[y] + sz[y] - 1) != sz[y])
        update(0, 0, n - 1, in[p[y]], in[p[y]], 0);
      update(0, 0, n - 1, in[y], in[y] + sz[y] - 1, 1);
    }
    else if(x == 2) update(0, 0, n - 1, in[y], in[y], 0);
    else if(query(0, 0, n - 1, in[y], in[y] + sz[y] - 1) == sz[y])
      printf("1\n");
    else printf("0\n");
  }
  return 0;
}
