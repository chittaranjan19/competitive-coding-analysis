#include <iostream>
#include <cmath>
#include <cstdio>
#include <vector>
#include <queue>
using namespace std;
int ring[3010];
short visited[3010];
short v_dfs[3010];
int parent[3010];
vector < vector <int> > g(3010);
int flag = 0;
int d[3010];
int n;


void explore(int i){

    //cout << "i" << endl;
    for (int j = 0; j < g[i].size(); j++){
            if (flag){ return;}
        if (parent[i] == g[i][j])
            continue;
        if (visited[g[i][j]]){
            flag = 1;
            ring[i] = 1;
            //cout << flag <<  endl;
            int x = g[i][j];
            int y = parent[i];
            while (y != x){
                ring[y] = 1;
                y = parent[y];
            }
            ring[x] = 1;
            //  cout << "here in ring" << endl;
            return;
            //  cout <<"something" << endl;
        }
        else {
            visited[g[i][j]] = 1;
            parent[g[i][j]] = i;
            explore(g[i][j]);
        }
    }
    return;
}


void dfs(){

    for (int i = 1; i <= n; i++){
        if (flag){//cout << flag <<  endl;
            return;}
        if (!visited[i]){
            visited[i] = 1;
            explore(i);
            //cout << "here" << endl;
        }
    }
    
}

int bfs[3013];

void solve(){
    for(int i = 1; i <= n; i++){
        if (ring[i]){
            for(int k =0; k < g[i].size(); k++){
                g[n+1].push_back(g[i][k]);
            }
        }
    }
    queue <int> q;
    q.push(n+1);
    while (!q.empty()){
        int u = q.front();
        q.pop();
        for(int i = 0; i < g[u].size(); i++){
            if (ring[g[u][i]]|| bfs[g[u][i]])
                continue;
            else{
                bfs[g[u][i]] = 1;
                q.push(g[u][i]);
                d[g[u][i]] = d[u] + 1;
            }
        }
    }
}
                
                    
                 
    
int main(){
    //   int n;
    cin >> n;
    for(int i = 0; i < n; i++){
        int f;
        scanf("%d", &f);
        int t;
        scanf("%d", &t);
        g[f].push_back(t);
        g[t].push_back(f);
    }
    dfs();
//    cout << "here" << endl;
    solve();
    for(int i = 1; i <= n; i++)
        cout << d[i] <<  endl;
}
    
    
    
