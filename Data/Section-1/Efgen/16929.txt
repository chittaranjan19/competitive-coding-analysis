import java.io.*;         
import java.util.*;         
import java.math.*;         
        
public class Main implements Runnable  {   
StreamTokenizer ST;      
PrintWriter out;      
BufferedReader br;   
Scanner in;   
int inf = 1000000000;   
double eps = 1e-8;

int nextInt() throws IOException{      
    ST.nextToken();      
    return (int)ST.nval;      
}      
String next() throws IOException{      
    ST.nextToken();      
    return ST.sval;      
}      
double nextD() throws IOException{      
    ST.nextToken();      
    return ST.nval;      
}      
public static void main(String[] args) throws IOException {       
    new Thread(new Main()).start();      
}      
public void run()  {      
    try {          
        br = new BufferedReader(new InputStreamReader(System.in));        
        out = new PrintWriter(System.out);
        in = new Scanner(br);   
        ST = new StreamTokenizer(br);      
        solve();      
        out.close();              
    }         
    catch (IOException e) {        
    throw new IllegalStateException(e);       
    }      
}

int n;
int[] w, h, ord, d;
int t = 0;
boolean[] f;
void dfs(int v) {
    f[v] = true;
    for (int i=0; i<=n; i++) if (!f[i] && w[i]<w[v] && h[i]<h[v]) dfs(i);
    ord[t++] = v;
}
public void solve() throws IOException {
    n = nextInt();
    w = new int[n+1];
    h = new int[n+1];
    ord = new int[n+1];
    d = new int[n+1];
    Arrays.fill(d, -inf);
    for (int i=0; i<=n; i++) {      
        w[i] = nextInt();
        h[i] = nextInt();
    }
    f = new boolean[n+1];
    int[] pr = new int[n+1];
    Arrays.fill(pr, -1);
    for (int i=0; i<n; i++) if (!f[i]) dfs(i);
    for (int j=0; j<=n; j++) {
        int v = ord[j];
        if (v==0) d[v] = 1; else {
            for (int i=0; i<=n; i++) {
                if (w[i]<w[v] && h[i]<h[v]) { 
                    if (d[v]<d[i]+1) {
                        d[v] = d[i]+1;
                        pr[v] = i;
                    }
                }
            }
        }
    }
    //for (int x: ord) out.print(x+" "); out.println();
    //for (int x: pr) out.print(x+" "); out.println();
    int res = 0;
    for (int x:d) if (x>res) res = x;
    int pos = 0;
    for (int i=1; i<=n; i++) if (d[i]==res) pos = i;
    out.println(res-1);
    Stack<Integer> st = new Stack<Integer>();
    while (pos!=0) {
        st.push(pos); pos = pr[pos];
    }
    while (!st.isEmpty()) out.print(st.pop()+" ");
    /*int n = Integer.parseInt(br.readLine());
    HashMap<String, Integer> map = new HashMap<String, Integer>();
    while (n-->0) {
        String s = br.readLine().trim();
        if (!map.containsKey(s)) {
            out.println("OK");
            map.put(s, 1);
        } else {
            int x = map.get(s);
            out.println(s+""+x);
            map.put(s, x+1);
        }
    }
    */
        
}
}






