#include <iostream>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); a - массв, n - кол-во эл-тов
#include <iomanip>      // setw()
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> our_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#define SRT srand(int(time(0)))
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
using namespace std;
const int S = 100000;
typedef list<int>::iterator list_iter;
list<int> l[S];
bool town[S], is_cycle;
int n, m;
inline void Show();
void bfs(int top, int from, int &f_top);
int main()
{
    cin >> n >> m;
    for (int i = 0, v1, v2; i < m; ++i)
    {
        scanf("%d%d", &v1, &v2);
        l[v1 - 1].push_back(v2 - 1);
        l[v2 - 1].push_back(v1 - 1);
    }
    int amount = 0;
    for (int i = 0; i < n; ++i)
        if (!town[i])
        {
            is_cycle = false;
            bfs(i, i, i);
            if (!is_cycle)
                ++amount;
        }
    printf("%d\n", amount);
    return 0;
}
void bfs(int top, int from, int &f_top)
{
    town[top] = true;
    for (list_iter it = l[top].begin(); it != l[top].end(); ++it)
    {
        if (!town[*it])
            bfs(*it, top, f_top);
        else if (*it != from && *it == f_top)
            is_cycle = true;
    }
}