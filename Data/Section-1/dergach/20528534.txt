#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <fstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
#include <bitset>
using namespace std;

typedef long long ll;
typedef long long ull;
#define pi acos(-1.0)
#define eps 1e-7
#define start 131072
#define LINF 1000000000000000000LL
#define pi acos(-1.0)
#define SHIFT 225000
#define mod 10007

double p[139];
double dp[10009][130];

class matrix
{
public:
	double a[128][128];
	matrix()
	{
		memset(a, 0, sizeof(a));
	}
	matrix operator*(const matrix& m)
	{
		matrix res;
		for(int i = 0; i < 128; i++)
			for(int j = 0; j < 128; j++)
				for(int k = 0; k < 128; k++)
					res.a[i][j] += a[i][k] * m.a[k][j];
		return res;
	}
	matrix pow(int n)
	{
		matrix b;
		for(int i = 0; i < 128; i++)
			b.a[i][i] = 1;
		while(n)
		{
			if(n & 1)
				b = b * (*this);
			*this = *this * *this;
			n >>= 1;
		}
		*this = b;
		return *this;
	}
};
 
int main() {
	int n, x;
	scanf("%d %d", &n, &x);
	for (int i = 0; i <= x; ++i) {
		scanf("%lf", &p[i]);
	}
	for (int j = 0; j <= x; ++j) {
		dp[0][j] = p[j];
	}

	matrix m;
	for(int i = 0; i < 128; i++) 
		for(int j = 0; j < 128; j++) 
	{ 
		m.a[j][i] += p[i^j];
	}
	m.pow(n-1);

	double res = 0.0;
	for(int i = 0; i <= x; i++)
		res += p[i] * m.a[i][0];
	
	printf("%.12lf\n", 1 - res);
	return 0;
}