#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Shark
{
	tint totalNumbers, notDivisibleByP;
};



int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	tint n,p;
	while (cin >> n >> p)
	{
		vector<Shark> shark (n);
		forn(i,n)
		{
			tint l,r;
			cin >> l >> r;
			shark[i].totalNumbers = r - l + 1;
			shark[i].notDivisibleByP = (r-l+1) - (r/p) + ((l-1)/p);
		}
		double ans = 0.0;
		forn(i,n)
		{
			double denom = double(shark[i].totalNumbers*shark[(i+1)%n].totalNumbers);
			double num   = double(shark[i].totalNumbers*shark[(i+1)%n].totalNumbers-(shark[i % n].notDivisibleByP * shark[(i+1) % n].notDivisibleByP));
			double ansi = num/denom;
			ans += 2000.0*ansi;
		}
		printf("%.15f\n",ans);
		
		
	}
	return 0;
}



