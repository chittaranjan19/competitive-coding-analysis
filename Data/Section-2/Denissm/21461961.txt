#include <stdio.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <queue>
#include <functional>
using namespace std;
typedef unsigned long long ull;
typedef long long ll;
typedef unsigned int ui;

struct Pair {
	int index;
	int value;
	Pair(int index, int value) :index(index), value(value) {}
	bool operator<(const Pair &other) const {
		return value < other.value;
	}
	bool operator>(const Pair &other) const {
		return value > other.value;
	}
};

struct Tuple {
	int a;
	int b;
	int c;
	Tuple(int a, int b, int c) : a(a), b(b), c(c) {}
	bool operator<(const Tuple &other) const {
		return c < other.c;
	}
	bool operator>(const Tuple &other) const {
		return c > other.c;
	}
};

struct Wrap {
	int* index;
	Wrap(int* index) : index(index) {}
	bool operator<(const Wrap&other) const {
		return (*index) < (*other.index);
	}
	bool operator>(const Wrap&other) const {
		return (*index) > (*other.index);
	}
};

int in_i() {
	int result;
	scanf("%d", &result);
	return result;
}
ll in_l() {
	ll result;
	scanf("%I64d", &result);
	return result;
}
char in_c() {
	char result;
	scanf(" %c", &result);
	return result;
}
double in_d() {
	double result;
	scanf("%lf", &result);
	return result;
}
int n, m, k, t, u, v, l, r, x;
ll modulo = 1000000007;
char ch;
double d;
ll arr[200002];
ll memo[200002];

ll fib(ll n) {
	if (n <= 2) {
		return 1;
	}
	if (memo[n] != -1)
		return memo[n];
	memo[n] = (fib(n - 1) + fib(n - 2)) % modulo;
	return memo[n];
}
int main() {
	/*n = in_i();
	for (int i = 0; i < n; i++) {
		arr[i] = in_i();
	}
	if (n == 1) {
		printf("-1");
		return 0;
	}
	if (arr[n - 1] < arr[n - 2]) {
		printf(arr[n - 1] == 0 ? "UP" : "DOWN");
	}
	else {
		printf(arr[n - 1] == 15 ? "DOWN" : "UP");
	}*/
	n = in_i();
	m = in_i();
	memset(memo, -1, sizeof(memo));
	for (int i = 0; i < n; i++) {
		arr[i] = in_l();
	}
	int test;
	for (int i = 0; i < m; i++) {
		test = in_i();
		l = in_i();
		r = in_i();
		if (test == 1) {
			x = in_i();
			while (l <= r) {
				arr[l] += x;
				l++;
			}
		}
		else {
			ll result = 0;
			while (l <= r) {
				result = (result + fib(arr[l])) % modulo;
				l++;
			}
			printf("%I64d\n", result);
		}
	}
	return 0;
}