#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<ll, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

int main()
{
    const int S = 2000;
    int x1, y1, x2, y2, n;
    Pair r1[S], r2[S];
    ll ans = 0, x, y;
    cin >> n >> x1 >> y1 >> x2 >> y2;
    int i;
    for (i = 0; i < n; ++i)
    {
        cin >> x >> y;
        r1[i].first = (x - x1)*(x - x1) + (y - y1)*(y - y1), r1[i].second = i;
        r2[i].first = (x - x2)*(x - x2) + (y - y2)*(y - y2), r2[i].second = i;
        ans = ans < r2[i].first ? r2[i].first : ans;
    }
    
    if (n == 1)
    {
        cout << min(r1[0].first, r2[0].first) << '\n';
        return 0;
    }
    
    sort(r1, r1 + n);
    int j;
    ll mx;
    for (i = 0; i < n; ++i)
    {
        mx = 0;
        for (j = i + 1; j < n; ++j)
        {
            if (r2[r1[j].second].first > mx)
                mx = r2[r1[j].second].first;
        }
        ans = min(ans, mx + r1[i].first);
    }
    cout << ans << '\n';
    
    return 0;
}