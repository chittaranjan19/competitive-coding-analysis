#include <iostream>
#include <cstdio>
#include <cstring>
#include <set>

using namespace std;

const int dir[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
const int MAXN = 1000 + 5;

int n, m;
int belong[MAXN][MAXN];
char maze[MAXN][MAXN], maz[MAXN];
int num[MAXN];

bool ok(int x, int y)
{
    return x >= 0 && x < n && y >= 0 && y < m && maze[x][y] == '.';
}

void dfs(int x, int y, int c)
{
    belong[x][y] = c;
    ++num[c];
    for(int i = 0; i < 4; ++i)
    {
        int dx = x + dir[i][0], dy = y + dir[i][1];
        if(ok(dx, dy) && !belong[dx][dy])
        {
            dfs(dx, dy, c);
        }
    }
}

int main()
{
    while(~scanf("%d%d", &n, &m))
    {
        set<int> st;
        memset(belong, 0, sizeof(belong));
        for(int i = 0; i < n; ++i)
        {
            scanf("%s", maze[i]);
        }
        int c = 0;
        for(int i = 0; i < n; ++i)
        {
            for(int j = 0; j < m; ++j)
            {
                if(maze[i][j] == '.' && !belong[i][j])
                {
                    num[++c] = 0;
                    dfs(i, j, c);
                }
            }
        }
        for(int i = 0; i < n; ++i)
        {
            for(int j = 0; j < m; ++j)
            {
                if(maze[i][j] == '.')
                {
                    maz[j] = '.';
                }
                else
                {
                    st.clear();
                    int ans = 1;
                    for(int k = 0; k < 4; ++k)
                    {
                        int dx = i + dir[k][0], dy = j + dir[k][1];
                        if(ok(dx, dy))
                        {
                            st.insert(belong[dx][dy]);
                        }
                    }
                    for(set<int>::iterator p = st.begin(); p != st.end(); ++p)
                    {
                        ans = (ans + num[*p]) % 10;
                    }
                    maz[j] = ans + '0';
                }
            }
            maz[m] = 0;
            puts(maz);
        }
    }
    return 0;
}
