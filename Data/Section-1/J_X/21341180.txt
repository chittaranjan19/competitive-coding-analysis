#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int maxn = 1e5 + 5;
const int offset = 1e5;

int t[maxn], x[maxn], y[maxn];
vector<int> vec1[maxn << 1], vec2[maxn << 1];

int main()
{
    int n, m, k;
    scanf("%d%d%d", &n, &m, &k);
    for(int i = 0; i < k; ++i)
    {
        scanf("%d%d", x + i, y + i);
        vec1[y[i] - x[i] + offset].push_back(i);
        vec2[x[i] + y[i]].push_back(i);
        t[i] = -1;
    }
    int nowx = 0, nowy = 0, dx = 1, dy = 1, now = 0;
    while(true)
    {
        int mn;
        if(dx > 0) mn = n - nowx;
        else mn = nowx;
        if(dy > 0) mn = min(mn, m - nowy);
        else mn = min(mn, nowy);
        int nxtx = nowx + mn * dx, nxty = nowy + mn * dy;
        int l = dx / dy, b = nowy - l * nowx;
        if(l > 0)
        {
            b += offset;
            for(int i = 0; i < vec1[b].size(); ++i)
            {
                int id = vec1[b][i];
                if(t[id] == -1)
                {
                    t[id] = now + dx * (x[id] - nowx);
                }
            }
        }
        else
        {
            for(int i = 0; i < vec2[b].size(); ++i)
            {
                int id = vec2[b][i];
                if(t[id] == -1)
                {
                    t[id] = now + dx * (x[id] - nowx);
                }
            }
        }
        now += mn;
        nowx = nxtx;
        nowy = nxty;
        if(nowx == 0)
        {
            if(nowy == 0 || nowy == m) break;
            dx = 1;
        }
        else if(nowx == n)
        {
            if(nowy == 0 || nowy == m) break;
            dx = -1;
        }
        else
        {
            dy = nowy == m ? -1 : 1;
        }
    }
    for(int i = 0; i < k; ++i) printf("%d\n", t[i]);
    return 0;
}
