// Shortest Path Of The King

#include<iostream>
#include<cmath>
using namespace std;

class position
{
public:
	int x;
	int y;
};

int main()
{
	string s,e;
	cin>>s;
	cin>>e;
	position start;
	position end;
	start.x=s.at(0)-'a'+1;
	start.y=s.at(1);
	end.x=e.at(0)-'a'+1;
	end.y=e.at(1);
	if(start.x==end.x && start.y==end.y)
	{
		cout<<"0"<<endl;
	}
	else
	{
		int xdiff=fabs(start.x-end.x);
		int ydiff=fabs(start.y-end.y);
		if(xdiff>ydiff) cout<<xdiff<<endl;
		else cout<<ydiff<<endl;
		while(1)
		{
			if(start.x<end.x)
			{
				if(start.y<end.y)
				{
					cout<<"RU"<<endl;
					(start.x)++;
					(start.y)++;
				}
				else if(start.y>end.y)
				{
					cout<<"RD"<<endl;
					(start.x)++;
					(start.y)--;
				}
				else
				{
					cout<<"R"<<endl;
					(start.x)++;
				}
			}
			else if(start.x>end.x)
			{
				if(start.y<end.y)
				{
					cout<<"LU"<<endl;
					(start.x)--;
					(start.y)++;
				}
				else if(start.y>end.y)
				{
					cout<<"LD"<<endl;
					(start.x)--;
					(start.y)--;
				}
				else
				{
					cout<<"L"<<endl;
					(start.x)--;
				}
			}
			else
			{
				if(start.y<end.y)
				{
					cout<<"U"<<endl;
					(start.y)++;
				}
				else if(start.y>end.y)
				{
					cout<<"D"<<endl;
					(start.y)--;
				}
				else
				{
					break;
				}	
			}
			
		}
	}
	return 0;
}