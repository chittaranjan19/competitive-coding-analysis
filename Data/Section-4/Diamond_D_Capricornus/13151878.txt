Const Fi='';//'B.INP';
      Fo='';//'B.OUT';
      maxN=100001;
Type  Vv=Record
      m:Longint;
      s:Int64;
      End;
Var   n,d:Longint;
      A:Array[0..maxN]Of vv;
      Sum:Array[0..maxN]Of Int64;
Procedure Enter;
Var i:Longint;
  Begin
    Readln(n,d);
    For i:=1 to n do
      With A[i] do
        Readln(m,s);
  End;
Procedure Sort(l,h:Longint);
Var i,j:Longint;
    Key,Tmp:Vv;
  Begin
    If l>=h then Exit;
    i:=l;j:=h;
    Key:=A[l+Random(h-l+1)];
    Repeat
      While A[i].m<Key.m do Inc(i);
      While A[j].m>Key.m do Dec(j);
      If i<=j then
        Begin
          If i<j then
            Begin
              Tmp:=A[i];
              A[i]:=A[j];
              A[j]:=Tmp;
            End;
          Inc(i);Dec(j);
        End;
    Until i>j;
    Sort(l,j);Sort(i,h);
  End;
Function  Find(k,val:Longint):Longint;
Var Inf,Sup,Res,Mid:Longint;
  Begin
    Inf:=1;Sup:=k;
    While Inf<=Sup do
      Begin
        Mid:=(Inf+sup) Div 2;
        If A[Mid].m>val then
          Begin
            Res:=Mid-1;
            Sup:=Mid-1;
          End
        Else
          Inf:=Mid+1;
      End;
    Exit(Res);
  End;
Procedure Main;
Var i:Longint;
    Tmp,Res:Int64;
  Begin
    Sort(1,n);
    Sum[0]:=0;
    Res:=0;
    For i:=1 to n do
        Sum[i]:=Sum[i-1]+A[i].s;
    For i:=1 to n do
      Begin
        Tmp:=Sum[i]-Sum[Find(i,A[i].m-d)];
        If Tmp>Res then
          Res:=Tmp;
      End;
    Writeln(Res);
  End;
Begin
  Assign(Input,Fi);Reset(Input);
  Assign(Output,Fo);Rewrite(Output);
  Enter;
  Main;
  Close(Input);Close(Output);
End.