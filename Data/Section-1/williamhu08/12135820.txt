#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e6 + 10;

#warning Change scanf

int N, Q;
int nxt[MAXN];
int A[2 * MAXN];

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d %d", &N, &Q);
	ll sum = 0;
	for (int i = 0; i < N; i++) {
		scanf("%d", &A[i]);
		sum += A[i];
	}
	copy_n(A, N, A + N);
	while (Q--) {
		ll x;
		scanf("%I64d", &x);
		//calculate the "next" array please
		if (x >= sum) {
			puts("1");
			continue;
		}
		ll cs = 0;
		for (int i = 0, j = 0; i < N; i++) {
			//try to see if you can go to j + 1. is j valid?
			while (true) {
				ll ncs = cs + A[j];
				if (ncs > x) {
					break;
				}
				cs = ncs;
				j++;
			}
			nxt[i] = j - i;
			// printf("nxt[%d] = %d\n", i, nxt[i]);
			cs -= A[i];
		}
		//note that nxt is actually AFTER the valid one so it is NOT valid.
		int ans = N;
		for (int i = 0; i < N; i++) {
			if (!vis[i]) {
				int lt = i, rt = i, len = 0, use = 0;	//length of the goddamn interval
				while (true) {
					vis[lt] = true;
					while (len < N) {
						//try going back
						len += nxt[rt];
						rt += nxt[rt];
						if (rt > N) {
							rt -= N;
						}
						use++;
					}
					// printf("lt = %d, rt = %d\n", lt, rt);
					ans = min(ans, use);
					//now setting lt
					len -= nxt[lt];
					lt += nxt[lt];
					if (lt > N) {
						lt -= N;
					}
					if (lt == i) {
						break;
					}
					use--;
				}
			}
		}
		printf("%d\n", ans);
	}
}