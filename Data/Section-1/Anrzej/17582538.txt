#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, l = 20;

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

vector<int> g[3333];

int n, m;

int dist[3333][3333];

bool used[3333];

void dfs(int v, int p, int d){
	used[v] = 1;
	dist[p][v] = d;
	for (int i = 0; i < g[v].size(); i++)
	{
		int to = g[v][i];
		if (!used[to])
		dfs(to, p, d + 1);
	}
}

pair<int, pair<int, int> > dd[3333][3333];

int cur_max = 0;
int ans[4];



int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++){
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
	}
	for (int i = 1; i <= n; i++){
		for (int j = 1; j <= n; j++)
			dist[i][j] = -1;
	}
	for (int i = 1; i <= n; i++){
		memset(used, false, sizeof(used));
		dfs(i, i, 0);
	}
	for (int i = 1; i <= n; i++){
		for (int j = 1; j <= n; j++){
			dd[i][j] = mp(-dist[i][j], mp(i, j));
		}
	}
	for (int i = 1; i <= n; i++)
		sort(dd[i] + 1, dd[i] + n + 1);
	for (int i = 1; i <= n; i++){
		for (int j = 1; j <= n; j++){
			if (i == j) continue;
			int f = i, s = j, th = -1, fr = -1;
			int clen = dist[f][s];
			int cur = 1;
			while (1){
				if (dd[s][cur].fs == 1 && dd[s][cur].fs == 0) break;
				pair<int, int> a = dd[s][cur].sc;
				if (a.sc != f && a.fs != f && a.sc != s){
					th = a.sc;
					clen += -dd[s][cur].fs;
					break;
				}
				cur++;
			}
			if (th == -1) continue;
			cur = 1;
			while (1){
				if (dd[th][cur].fs == 1 && dd[th][cur].fs == 0) break;
				pair<int, int> a = dd[th][cur].sc;
				if (a.sc != f && a.sc != s && a.sc != th){
					fr = a.sc;
					clen += -dd[th][cur].fs;
					break;
				}
				cur++;
			}
			if (fr == -1) continue;
			if (clen > cur_max){
				cur_max = clen;
				ans[0] = f, ans[1] = s, ans[2] = th, ans[3] = fr;
			}
		}
	}
	for (int i = 0; i < 4; i++)
		cout << ans[i] << ' ' << endl;
	return 0;
}