//in the name of GOD
//<MohammadJavad Akbari />

#include<bits/stdc++.h>
using namespace std;

#define mp make_pair
#define int long long
#define ld long double
#define all(x) x.begin(),x.end()
#define endl '\n'
#define MohammadJA main

const long long MAXN=1e6;
const long long MAXM=3e3;
const long long MOD=1610612741;
const long long mod=1e9+7;
const long long INF=1e15+5040;
const long long MAX_LOG=19;

const int dx[4]={1,-1,0,0};
const int dy[4]={0,0,-1,1};

//int p[MAXN];
//int root(int x){if(p[x]<0)return x;return p[x]=root(p[x]);}
//inline void merge(int x,int y){x=root(x);y=root(y);p[y]+=p[x];p[x]=y;}




int par[MAXN][MAX_LOG];
int dis[MAXN],size[MAXN];
vector<int>ver[MAXN];


void dfs(int v=1,int pa=0,int d=0){
    par[v][0]=pa;
    dis[v]=d;
    size[v]=1;
    for(auto u:ver[v])
        if(u!=pa)dfs(u,v,d+1);
    for(auto u:ver[v])
        if(u!=pa)size[v]+=size[u];
}

void build(){
	for(int i=1;i<MAX_LOG;i++)
		for(int j=0;j<MAXN;j++)
			par[j][i]=par[par[j][i-1]][i-1];		
}

int ipar(int v,int x){
    for(int i=0;x>0;i++){
        if(x%2)v=par[v][i];
        x/=2;
    }
    return v;
}

int lca(int x,int y){
    if(dis[x]>dis[y])swap(x,y);
    y=ipar(y,dis[y]-dis[x]);
    if(y==x)return x;
    for(int i= MAX_LOG-1;i>=0;i--)
		if(par[x][i]-par[y][i])
			x=par[x][i],y=par[y][i];
	return par[x][0];
}




MohammadJA(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	
	int n;
	cin>>n;
	for(int i=1;i<n;i++){
		int x,y;
		cin>>x>>y;
		ver[x].push_back(y);
		ver[y].push_back(x);
	}
	dfs();
	build();
	
	int q;
	cin>>q;
	while(q--){
		int x,y;
		cin>>x>>y;
		
		if(dis[x]>dis[y])swap(x,y);
		int z=lca(x,y);
		if(x==y){cout<<n<<'\n';continue;}
		if((dis[x]+dis[y])%2){cout<<0<<'\n';continue;}
		if(dis[x]==dis[y]){cout<<n-size[ipar(x,dis[x]-dis[z]-1)]-size[ipar(y,dis[y]-dis[z]-1)]<<'\n';continue;}
		int h=ipar(y,(dis[x]+dis[y])/2-dis[z]);
		cout<<size[h]-size[ipar(y,(dis[x]+dis[y])/2-dis[z]-1)]<<'\n';
	}
}
