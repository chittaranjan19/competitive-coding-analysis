import static java.lang.Math.max;

import java.io.*;         
import java.util.*;         
import java.math.*;         

 
public class Main  implements Runnable {
//public static final String FileName = "test";
StreamTokenizer ST;      
PrintWriter out;      
BufferedReader br;   
Scanner in;
static final int inf = 1000000000+10;
 
int nextInt() throws IOException{      
    ST.nextToken();      
    return (int)ST.nval;      
}
long nextLong() throws IOException{      
    ST.nextToken();      
    return (long)ST.nval;      
}      
String next() throws IOException{      
    ST.nextToken();      
    return ST.sval;      
}      
double nextD() throws IOException{      
    ST.nextToken();      
    return ST.nval;      
}      
public static void main(String[] args) throws IOException {       
   new Thread(new Main()).start();
//  new Main().run();
}
 
public void run()  {      
    try {
        br = new BufferedReader(new InputStreamReader(System.in));
        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));      
        //br = new BufferedReader(new FileReader(new File(FileName+".in")));
        //out = new PrintWriter(new BufferedWriter(new FileWriter(FileName+".out")));
        in = new Scanner(br);
        ST = new StreamTokenizer(br);      
        solve();      
        out.close();
        //in.close();
        br.close();   
    }         
    catch (IOException e) {       
        e.printStackTrace();
        throw new IllegalStateException(e);  
    }      
}


public void solve() throws IOException {
    int n = nextInt();
    for (int i=0; i<n; i++) nextInt();
    int m = nextInt();
    int[][] a = new int[n][n];
    int[] d1 = new int[n];
    int[] d2 = new int[n];
    for (int[] aa:a) Arrays.fill(aa, -1);
    while (m-->0) {
        int x = nextInt()-1;
        int y = nextInt()-1;
        int cost = nextInt();
        if (a[x][y]<0) { 
            a[x][y] = cost; 
            d1[x]++;
            d2[y]++;
        } else a[x][y] = Math.min(a[x][y], cost);       
    }               
    int res = 0, cnt = 0;
    for (int i=0; i<n; i++) {
        int min = inf;
        for (int j=0; j<n; j++)
            if (a[j][i]>=0 && a[j][i]<=min) min = a[j][i];
        if (min==inf) cnt++; else res += min;
    }
    if (cnt==1) out.print(res); else out.print(-1);
    
    
    
}
  
}
















 
 
  