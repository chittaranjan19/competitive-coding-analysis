#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)
#define lc (id << 1)
#define rc (lc + 1)

using namespace std;
struct matrix
{
    int m, n;
    long long a[3][3];

    matrix(int m = 0, int n = 0): m(m), n(n)
    {
        FOR(i, 1, m)
        FOR(j, 1, n)
            a[i][j] = 0;
    }
} z, basix;

matrix mul(matrix a, matrix b)
{
    matrix re = matrix(a.m, b.n);
    FOR(i, 1, re.m)
    FOR(j, 1, re.n)
    FOR(k, 1, a.n)
        re.a[i][j] = (re.a[i][j] + a.a[i][k] * b.a[k][j]) % maxC;
    return re;
}

matrix power(matrix a, int x)
{
    if (x == 1)
        return a;
    matrix re = power(a, x >> 1);
    re = mul(re, re);
    if (x & 1)
        re = mul(re, a);
    return re;
}

int n, m, a[mn];

pair<long long, long long> fibo(long long a, long long b, long long id)
{
    if (id == 1)
        return mp(a, b);
    matrix first = power(basix, id - 1);
    matrix re = matrix(2, 1);
    re.a[1][1] = a;
    re.a[2][1] = b;
    re = mul(first, re);
    return mp(re.a[1][1], re.a[2][1]);
}

struct interval
{
    matrix tree[mn << 2], f[mn << 2];

    void build(int l, int r, int id)
    {
        if (l == r)
        {
            pair<long long, long long> p = fibo(1, 1, a[l]);
            tree[id] = matrix(2, 1);
            tree[id].a[1][1] = p.F;
            tree[id].a[2][1] = p.S;
            return;
        }
        build(l, mid, lc);
        build(mid + 1, r, rc);
        tree[id] = matrix(2, 1);
        tree[id].a[1][1] = (tree[lc].a[1][1] + tree[rc].a[1][1]) % maxC;
        tree[id].a[2][1] = (tree[lc].a[2][1] + tree[rc].a[2][1]) % maxC;
    }

    void apply(int id, matrix x)
    {
        if (f[id].m)
            f[id] = mul(f[id], x);
        else
            f[id] = x;
    }

    void push(int id)
    {
        if (f[id].m == 0)
            return;
        tree[lc] = mul(f[id], tree[lc]);
        tree[rc] = mul(f[id], tree[rc]);
        apply(lc, f[id]);
        apply(rc, f[id]);
        f[id].m = 0;
    }

    void update(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return;
        if (x <= l && r <= y)
        {
            tree[id] = mul(z, tree[id]);
            apply(id, z);
            return;
        }
        push(id);
        update(l, mid, lc, x, y);
        update(mid + 1, r, rc, x, y);
        tree[id].a[1][1] = (tree[lc].a[1][1] + tree[rc].a[1][1]) % maxC;
        tree[id].a[2][1] = (tree[lc].a[2][1] + tree[rc].a[2][1]) % maxC;
    }

    long long get(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return 0;
        if (x <= l && r <= y)
            return tree[id].a[1][1];
        push(id);
        long long a = get(l, mid, lc, x, y);
        long long b = get(mid + 1, r, rc, x, y);
        return (a + b) % maxC;
    }
} t;

void setup()
{
    cin >> n >> m;
    FOR(i, 1, n)
        cin >> a[i];
    basix = matrix(2, 2);
    basix.a[1][1] = 0, basix.a[1][2] = 1;
    basix.a[2][1] = 1, basix.a[2][2] = 1;
    t.build(1, n, 1);
    int ty, l, r, k;
    FOR(i, 1, m)
    {
        cin >> ty >> l >> r;
        if (ty == 1)
        {
            cin >> k;
            z = power(basix, k);
            t.update(1, n, 1, l, r);
        }
        else
            cout << t.get(1, n, 1, l, r) << '\n';
    }
}

void xuly()
{

}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
