
#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}


int a[22][22];
int wrng[22];
set<int> wrong[33];
int n, m;

int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++)
			cin >> a[i][j];
	}
	bool bad = 0;
	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++){
			if (a[i][j] != j + 1){
				wrong[i].insert(j + 1);
			}
			bad |= wrong[i].size() > 3;
		}
	}
	if (bad)
		term_res("NO");
	for (int i = 0; i < n; i++){
		if (wrong[i].size() != 3) continue;
		for (int j = 0; j < n; j++){
			if (wrong[j].size() == 3)
			{
				if (wrong[j] != wrong[i]) term_res("NO");
			}
			if (wrong[j].size() == 2){
				bool ok = 1;
				for (set<int> ::iterator it = wrong[j].begin(); it != wrong[j].end(); it++)
					ok &= wrong[i].count(*it);
				if (!ok)
					term_res("NO");
			}
		}
	}
	cout << "YES";
	return 0;
}