#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
//#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int mod;

const int MAXN = 2;

struct matrix
{
  int arr[MAXN][MAXN];
  int n, m;

  matrix(int x, int y)
  {
    n = x, m = y;
  };

  matrix(int x, int y, int v)
  {
    n = x, m = y;
    for(int i=0;i<n;i++)
      for(int j=0;j<m;j++)
        arr[i][j] = v;
  };

  matrix operator * (const matrix &mat) const
  {
    matrix res(n, mat.m, 0);
    for(int i=0;i<n;i++)
      for(int j=0;j<mat.m;j++)
        for(int k=0;k<m;k++)
          res.arr[i][j] = (arr[i][k] * 1LL * mat.arr[k][j] + res.arr[i][j]) % mod;
    return res;
  }
};

matrix mat_pow(const matrix &base, LL power)
{
  if(power == 1) return base;
  if(power & 1) return base * mat_pow(base, power - 1);
  matrix temp = mat_pow(base, power/2);
  return temp * temp;
}

int power(int a, LL b, int m)
{
  if(b == 0) return 1;
  if(b & 1) return (a * 1LL * power(a, b - 1, m)) % m;
  LL res = power(a, b / 2, m);
  res*=res;
  res%=m;
  return res;
}

int main()
{
  ios_base::sync_with_stdio(0);
  LL n, k;
  int l, m;
  cin >> n >> k >> l >> m;
  mod = m;
  if(l < 63 && (k >= (1LL << l)))
  {
    cout << 0;
    return 0;
  }
  if(l == 0)
  {
    if(k == 0) cout << 1 % mod;
    else cout << 0;
    return 0;
  }
  //1 1
  //1 0
  LL x;
  matrix mat(2, 2, 1), t(2, 1, 1);
  mat.arr[1][1] = 0;
  mat = mat_pow(mat, n);
  t.arr[1][0] = 0;
  t = mat * t;
  x = t.arr[0][0] + t.arr[1][0];
  LL tmp = power(2, n, m) - x, res = 1;
  tmp%=m;
  tmp+=m;
  tmp%=m;
  x%=m;
  for(int i=0;i<l;i++)
  {
    if(i >= 63 || ((1LL << i) & k) == 0)
      res = (res * 1LL * x) % m;
    else res = (res * 1LL * tmp) % m;
  }
  cout << res;
  return 0;
}