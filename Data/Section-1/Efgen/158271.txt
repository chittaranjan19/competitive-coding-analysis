import java.io.*;
import java.util.*;
import java.math.*;

public class Task {
	int k;
	boolean f(int n, int m) {
		if (n>m) {
			int q =n; n = m; m = q;
		}
		if (k==1) {
			if (n>k) { 
				if (n%(k+1)!=0) {
					return (m+n)%2==1;
				} else {
					return true;
				}
			}    		
			else 
				return ((n+m)%2==1);
		}
		
		if (n>k) { 
			if (n%(k+1)!=0) {
				return (m+n)%2!=(n/(k+1))%2;
			} else {
				return true;
			}
		}    		
		else 
			return ((n+m)%2==1);
	}
    void solve() throws IOException {
    	int t = nextInt();
    	k = nextInt();
    	while (t-->0) {
    		int n = nextInt();
    		int m = nextInt();
    		if (f(n, m)) out.println("+"); else out.println("-");
    			
    	} 
    	
    	
    	/*int n = 100, m = 100;
    	for (int kk=1; kk<20; kk++) {
    		k = kk;
    		boolean[][] a = new boolean[n][m];
    		//a[1][1] = true;
    		for (int i=1; i<n; i++)
    			for (int j=1; j<m; j++) {
    				if (i>1) a[i][j] |= !a[i-1][j];
    				if (j>1) a[i][j] |= !a[i][j-1];
    				if (i>k && j>k) a[i][j] |= !a[i-k][j-k];
    			}
    		for (int i=1; i<n; i++) {
    			for (int j=1; j<m; j++)
    				//if (a[i][j]) out.print('*'); else out.print('.');
    				if (i<=j && (a[i][j] ^ f(i,j))) out.println(i+" "+j+" "+k+" "+a[i][j]+" "+f(i, j));
    				//if (i<=j && a[i][j]) out.println(i+" "+j+" "+k);
    			//out.println();
    		}
    		out.println();
    		
    	}*/
    	
    }
    
    


    static final int inf = 1000000000;
    static final double epd = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            //br = new BufferedReader(new InputStreamReader(System.in));
            //out = new PrintWriter(System.out);
            br = new BufferedReader(new FileReader("input.txt"));
            out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
            return Long.parseLong(next());
    }

    public static void main(String[] args) {        
            new Task().run();
    
    }
}