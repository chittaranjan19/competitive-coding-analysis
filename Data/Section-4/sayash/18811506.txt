#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
#include<set>
#include<map>
#include<unordered_map>
#include<stack>
#include<climits>
#include<utility>
#include<string>

using namespace std;

#define pii pair<int, int>
#define S second
#define F first
#define pb push_back
#define mp make_pair
#define boostio ios_base::sync_with_stdio(0);cin.tie(0);

class prioritize{
public: bool operator()(pii &p1, pii &p2){
  return p1.S > p2.S;
}
};

map<int, int> fin;

void primeFactors(int n)
{
  map<int, int>M;
  // Print the number of 2s that divide n
  while (n%2 == 0)
    {
      if(M.count(2) == 0)M[2] = 1;
      else M[2]++;
      n = n/2;
    }
 
  // n must be odd at this point.  So we can skip one element (Note i = i +2)
  for (int i = 3; i <= sqrt(n); i = i+2)
    {
      // While i divides n, print i and divide n
      while (n%i == 0)
        {
	  if(M.count(i) == 0)M[i] = 1;
	  else M[i]++;
	  n = n/i;
        }
    }
 
  // This condition is to handle the case whien n is a prime number
  // greater than 2
  if (n > 2)
    if(M.count(n) == 0)M[n] = 1;
  
  for(map<int, int>::iterator it = M.begin(); it != M.end(); it++){
    if(fin.count(it->first) == 0)fin[it->first] = it->second;
    if(it -> second > fin[it->first])fin[it->first] = it->second;
  }
  //M.clear();
}

map<int, int>N;

void primeFinal(int n)
{
  
  // Print the number of 2s that divide n
  while (n%2 == 0)
    {
      if(N.count(2) == 0)N[2] = 1;
      else N[2]++;
      n = n/2;
    }
 
  // n must be odd at this point.  So we can skip one element (Note i = i +2)
  for (int i = 3; i <= sqrt(n); i = i+2)
    {
      // While i divides n, print i and divide n
      while (n%i == 0)
        {
	  if(N.count(i) == 0)N[i] = 1;
	  else N[i]++;
	  n = n/i;
        }
    }
 
  // This condition is to handle the case whien n is a prime number
  // greater than 2
  if (n > 2)
    if(N.count(n) == 0)N[n] = 1;
}

int main(){

  int n, k, temp, i;
  vector<int> a;
  cin >> n >> k;
  for(i = 0; i < n; i++){
    cin >> temp;
    primeFactors(temp);
  }
  primeFinal(k);

  for(map<int, int>::iterator it = N.begin(); it != N.end(); it++){
    if(fin[it->first] >= N[it->first])continue;
    else{
      cout << "No";
      return 0;
    }
  }
  cout << "Yes";
  return 0;
}
