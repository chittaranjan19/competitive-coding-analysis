#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost() ios_base::sync_with_stdio(false)
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 1000010;

vector<int> adj[maxn], valid[maxn], path;
map<string, int> m1;
map<int, string> m2;
int m, vis[maxn], in[maxn], out[maxn], st[maxn];
stack<int> stk;

string arr[maxn], f, b, ans;

void dfs(int cur)
{
	vis[cur] = 1;
	for(auto it:adj[cur]){
		if(!vis[it])
			dfs(it);
	}
}

void find_euler_path(int cur)
{
	int nxt;
	if(st[cur]>=(int)adj[cur].size()){
		path.pb(cur);
		if(stk.empty())
			return;
		nxt = stk.top();
		stk.pop();
		find_euler_path(nxt);
		return;
	}	
	nxt = adj[cur][st[cur]];
	st[cur]++;
	stk.push(cur);
	find_euler_path(nxt);
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	//boost();
	int n, i, j, c1, c2, src;
	cin >> n;
	for(i=1; i<=n; i++){
		cin >> arr[i];
		f = arr[i].substr(0, 2);
		b = arr[i].substr(1, 2);
		m1[f] = 1, m1[b] = 1;
	}
	j = 1;
	for(auto it=m1.begin(); it!=m1.end(); ++it){
		it->second = j;
		m = j;
		m2[j++] = it->first;
	}
	for(i=1; i<=n; i++){
		f = arr[i].substr(0, 2);
		b = arr[i].substr(1, 2);
		adj[m1[f]].pb(m1[b]);
		out[m1[f]]++;
		in[m1[b]]++;
	}
	/*for(i=1; i<=m; i++){
		cout << i << " " << m2[i] << "\n";
		for(auto it:adj[i])
			cout << "edge " << it << " " << m2[it] << "\n";
	}*/
	dfs(1);
	c1 = c2 = 0;
	src = 1;
	for(i=1; i<=m; i++){
		valid[i].resize((int)adj[i].size(), 1);
		st[i] = 0;
		if(!vis[i]){
			cout << "NO\n";
			return 0;
		}
		if(in[i]==out[i])
			continue;
		else if(abs(in[i]-out[i])>1){
			cout << "NO\n";
			return 0;
		}
		else if(in[i]-out[i]==1)
			c1++;
		else if(out[i]-in[i]==1){
			c2++;
			src = i;
		}
	}
	if(c1!=c2 || c1>1 || c2>1){
		cout << "NO\n";
		return 0;
	}
	find_euler_path(src);
	reverse(all(path));
	ans = m2[path[0]];
	for(i=1; i<path.size(); i++)
		ans+=(m2[path[i]].substr(1, 1));
	cout << "YES\n" << ans << "\n";
	return 0;
}
