//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 200 * 1000 + 100;

int n, q;

set <pii> s;
set <pii>::iterator it1;
set <pii>::iterator it2;
vector <pii> tmp;

int par[N];
int sz[N];

int get_par(int x){
	if(par[x] == -1) return x;
	return x = get_par(par[x]);
}

void merge(int x, int y){	
	x = get_par(x);
	y = get_par(y);
	if(x == y) return;
	if(sz[y] < sz[x]) swap(x, y);
	par[x] = y;
	sz[y] += sz[x];
}						

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	memset(par, -1, sizeof par);
	cin >> n >> q;
	for(int i = 0; i < n; ++i){
		sz[i] = 1;
		s.insert(MP(i, 0));
		s.insert(MP(i, 1));
	}
	for(int i = 0; i < q; ++i){
		int t, x, y, l, r;
		cin >> t >> x >> y;
		if(t == 2){
			x --; y --;
			it1 = s.lower_bound(MP(x, 0));
			if(it1 -> Y == 1) it1 --;
			it2 = s.lower_bound(MP(y, 0));
			if(it2 -> Y == 0) it2 ++;
			l = it1 -> X;
			r = it2 -> X;
			tmp.clear();
			while(it1 != it2){
				tmp.PB(*it1);
				it1 ++;
			}
			tmp.PB(*it2);
			for(int j = 0; j < SZ(tmp); ++j){
				if(tmp[j].Y) merge(tmp[j].X, r);
				s.erase(tmp[j]);
			}
			s.insert(MP(l, 0));
			s.insert(MP(r, 1));
		}
		else if(t == 1){
			x --; y --;
			it1 = s.lower_bound(MP(x, 0));
			if(it1 -> Y == 0) it1 ++;
			it2 = s.lower_bound(MP(y, 0));
			if(it2 -> Y == 0) it2 ++;
			merge(it1 -> X, it2 -> X);	
		}
		else{
			x --; y --;
			x = get_par(x);
			y = get_par(y);
			if(x == y)
				cout << "YES\n";
			else
				cout << "NO\n";
		}
	}
	return 0;
}
