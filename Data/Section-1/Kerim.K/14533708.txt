#include <bits/stdc++.h>/*
#include <ext/pb_ds/assoc_container.hpp> //required
#include <ext/pb_ds/tree_policy.hpp> //required
using namespace __gnu_pbds; //required
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ordered_set <int> s;
or:
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ordered_set s;
cout << s.order_of_key(3) << endl;	// the number of elements in s less than 3 (in this case, 0-based index of element 3)
	cout << *s.find_by_order(1) << endl; // 1-st elemt in s (in sorted order, 0-based)
*/
using namespace std;

#define maxn 100007
#define INF 1 << 30
#define LLINF 10000000000000000009
#define pb push_back
#define mp make_pair
#define ss second
#define ff first
#define pii pair<int,int>


typedef long long ll;
typedef pair<ll,ll> PII;
//priority_queue< PII , vector<PII>, greater<PII> >q;
int arr[1000009];
int rr[1000009];
int rat=-1;
void binsearch(int l, int r, int x)
{
	if(l==r)
	{
		if(arr[l]<=x)
		rat=max(rat,l);
		return;
	}
	int mid=(l+r+1)/2;
	//cout<<l<<" "<<r<<" "<<x<<endl;
	if(arr[mid]<=x)
		binsearch(mid,r,x);
	else
		binsearch(l,mid-1,x);
}

int main()
{
	int n,m;
	cin>>n>>m;
	for(int i=1;i<=n;i++){
		cin>>arr[i];
	}
	for(int i=1;i<=m;i++){
		cin>>rr[i];
	}
	sort(arr+1,arr+n+1);
	for(int i=1;i<=m;i++){
		rat=-1;
		binsearch(1,n,rr[i]);
		if(rat>0)
		cout<<rat<<" ";
		else
		cout<<0<<" ";
	}


return 0;
}