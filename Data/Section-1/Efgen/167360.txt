import java.io.*;
import java.util.*;
import java.math.*;

public class Task {

	class Point implements Comparable<Point>{
		int x, id;
		public Point(int xx, int ii) {
			id = ii; x = xx;
		}
		public int compareTo(Point o) {
			return x-o.x;
		}

	}
	Point[] a;
	String[] res;
	boolean ok = false;
	int n;
	int p;
	void go(String path) {
		if (p==n) {
			ok = true;
			return;
		}
		if (path.length()==a[p].x-1) {
			res[a[p].id] = path+"0";
			p++;
			go(path+"1");
			return;
		}
		if (path.length()==a[p].x && p+1==n) {
			res[a[p].id] = path;
			ok = true;
			return;
		}		
		if (path.length()>=a[p].x) {
			return;
		}
		go(path+"0");
		go(path+"1");
	}
    void solve() throws IOException {
    	n = nextInt();
    	a = new Point[n];
    	for (int i=0; i<n; i++)
    		a[i] = new Point(nextInt(), i);
    	Arrays.sort(a);
    /*	n = 10;
    	a = new Point[n];
    	for (int i=0; i<n; i++) a[i] = new Point(5, i);*/
    	res = new String[n];
    	go("");
    	if (ok) {
    		out.println("YES");
    		for (int i=0; i<n; i++) out.println(res[i]);
    	}
    	else
    		out.println("NO");
    	
    	
    }
    
    


    static final int inf = 1000000000;
    static final double epd = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
            return Long.parseLong(next());
    }

    public static void main(String[] args) {        
            new Task().run();
    
    }
}