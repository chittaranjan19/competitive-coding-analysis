#include <bits/stdc++.h>

#define f       first
#define s       second
#define mp      make_pair
#define rank    something_which_is_supposed_to_be_rank
#define left    something_which_is_supposed_to_be_left
#define right   something_which_is_supposed_to_be_right

using namespace std;

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const int N = 1e5;

int n, m;
bool used[N];
set<pair<int,int>> e[N];
vector<int> topsort;

void dfs(int u, int t) {
    if (used[u]) {
        return;
    }
    used[u] = 1;
    for (auto tmp: e[u]) {
        if (tmp.s < t) {
            dfs(tmp.f, t);
        }
    }
    topsort.push_back(u);
}

bool check(int t) {
    memset(used, 0, sizeof(used));
    topsort.clear();
    for (int i = 0; i < n; ++i) {
        if (!(used[i])) {
            dfs(i, t);
        }
    }
    reverse(topsort.begin(), topsort.end());
    for (int i = 1; i < n; ++i) {
        auto iter = e[topsort[i - 1]].lower_bound({topsort[i], 0});
        if (iter == e[topsort[i - 1]].end() || (*iter).f != topsort[i] || (*iter).s >= t) {
            return false;
        }
    }
    return true;
}

int main() {
    cin.sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 0, u, v; i < m; ++i) {
        cin >> u >> v;
        e[u - 1].insert({v - 1, i});
    }
    int l = 0, r = m + 1;
    for (int mid; l + 1 < r; ) {
        mid = (l + r) >> 1;
        if (check(mid)) {
            r = mid;
        } else {
            l = mid;
        }
    }
    // for (int i = 0; i <= m; ++i) {
    //     cout << i << " " << check(i) << "\n";
    // }
    cout << (r <= m ? r : -1) << "\n";
    cerr << "Time elapsed: " << (ld) clock() / CLOCKS_PER_SEC << "\n";
    return 0;
}