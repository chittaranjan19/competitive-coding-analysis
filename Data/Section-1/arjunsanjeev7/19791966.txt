/*	Arjun Sanjeev
	IIIT-Hyderabad	*/

/*	*************************************************
	*	"Never regret anything in life.		*
	*	 If it's good, it's wonderful.		*
	*	 If it's bad, it's experience."		*
	*************************************************	*/

#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for(let(it,v.begin()); it != v.end(); it++)
#define rtr(v,it) for(let(it,v.rbegin()); it != v.rend(); it++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

int main()
{
	int n;
	cin>>n;
	vector< string > s(n+1,"."),t(n+1,".");
	vector<LL> cost(n+1,0);
	for(int i=1;i<=n;i++) cin>>cost[i];
	for(int i=1;i<=n;i++)
	{
		cin>>s[i];
		t[i]=s[i];
		reverse(all(t[i]));
	}
	vector< vector<LL> > dp(n+1,vector<LL>(2,0));
	for(int i=1;i<=n;i++)
	{
		if(s[i]>=s[i-1] && s[i]>=t[i-1])
		{
			dp[i][0]=min(dp[i-1][0],dp[i-1][1]);
		}
		else if(s[i]>=s[i-1])
		{
			dp[i][0]=dp[i-1][0];
		}
		else if(s[i]>=t[i-1])
		{
			dp[i][0]=dp[i-1][1];
		}

		if(t[i]>=s[i-1] && t[i]>=t[i-1])
		{
			dp[i][1]=cost[i]+min(dp[i-1][0],dp[i-1][1]);
		}
		else if(t[i]>=s[i-1])
		{
			dp[i][1]=cost[i]+dp[i-1][0];
		}
		else if(t[i]>=t[i-1])
		{
			dp[i][1]=cost[i]+dp[i-1][1];
		}
		else
		{
			cout<<"-1"<<endl;
			return 0;
		}
	}
	cout<<min(dp[n][0],dp[n][1])<<endl;
	return 0;
}