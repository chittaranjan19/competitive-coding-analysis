#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define pi acos(-1.0)
#define LINF 1000000000000000000LL

int n;
int pos[10005];
int L[5005], R[5005];
ll dp[2][10005];
pair <ll, int> dist[10005];

int distToLamp(int cur, int L, int R)
{
    if(L <= cur && cur <= R)
        return 0;
    if(cur < L)
        return L - cur;
    return cur - R;
}

int main()
{
    int x;
    scanf("%d %d", &n, &pos[0]);
    x = pos[0];
    for(int i = 0; i < n; i++)
    {
        scanf("%d %d", &L[i], &R[i]);
        pos[2*i+1] = L[i];
        pos[2*i+2] = R[i];
    }
    sort(pos, pos + 2 * n + 1);
    
    for(int j = 0; j < n * 2 + 1; j++)
    {
        dp[0][j] = LINF;
        if(pos[j] == x)
            dp[0][j] = 0;
    }
    for(int i = 1; i < n; i++)
    {
        for(int j = 0; j < n * 2 + 1; j++)
            dp[i%2][j] = LINF;

        for(int j = 0; j < 2 * n + 1; j++)
            dist[j] = make_pair(dp[1-i%2][j] + pos[j] - pos[0], j);
        sort(dist, dist + 2 * n + 1);

        int cur = 0, bestL = 0;
        for(int j = 0; j < 2 * n + 1; j++)
        {
            int bestR = dist[cur].second;
            dp[i%2][j] = min(dp[i%2][j], dp[1-i%2][bestR] + abs(pos[j] - pos[bestR]) + distToLamp(pos[j], L[i], R[i]));
            dp[i%2][j] = min(dp[i%2][j], dp[1-i%2][bestL] + abs(pos[j] - pos[bestL]) + distToLamp(pos[j], L[i], R[i]));
            if(dp[1-i%2][bestL] + abs(pos[j] - pos[bestL]) > dp[1-i%2][j])
                bestL = j;
            while(dist[cur].second < j)
                cur++;
        }

        /*for(int j = 0; j < 2 * n + 1; j++)
        {
            for(int k = 0; k < 2 * n + 1; k++)
                dp[i%2][j] = min(dp[i%2][j], dp[1-i%2][k] + abs(pos[j] - pos[k]) + distToLamp(pos[j], L[i], R[i]));
        }*/
    }
    printf("%I64d\n", *min_element(dp[(n-1)%2], dp[(n-1)%2] + 2 * n + 1));
    return 0;
}