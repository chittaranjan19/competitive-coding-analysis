#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 1003
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)

using namespace std;
int n, m, q;

struct node
{
    int num;
    node* f;
    node* lc;
    node* rc;

    node(int num = 0): num(num)
    {
        f = lc = rc = NULL;
    }
};

node* build(int l, int r)
{
    node* re = new node(0);
    if (l != r)
    {
        re -> lc = build(l, mid);
        re -> rc = build(mid + 1, r);
    }
    return re;
}

void push(int l, int r, node* cur)
{
    if (cur -> f == NULL)
        return;
    if (cur -> lc == NULL)
        cur -> lc = new node();
    if (cur -> rc == NULL)
        cur -> rc = new node();
    cur -> lc -> f = cur -> f -> lc;
    cur -> rc -> f = cur -> f -> rc;
    cur -> lc -> num = (mid - l + 1) - cur -> lc -> f -> num;
    cur -> rc -> num = (r - mid) - cur -> rc -> f -> num;
    cur -> f = NULL;
}

node* update(int l, int r, node* old, int x, int v)
{
    if (l == r)
        return new node(v);
    push(l, r, old);
    node* re = new node();
    if (x <= mid)
    {
        re -> lc = update(l, mid, old -> lc, x, v);
        re -> rc = old -> rc;
    }
    else
    {
        re -> lc = old -> lc;
        re -> rc = update(mid + 1, r, old -> rc, x, v);
    }
    re -> num = re -> lc -> num + re -> rc -> num;
    return re;
}

node* change(int l, int r, node* old, int x, int y)
{
    if (x <= l && r <= y)
    {
        node* re = new node((r - l + 1) - old -> num);
        re -> f = old;
        return re;
    }
    push(l, r, old);
    node* re = new node();
    if (x <= mid)
        re -> lc = change(l, mid, old -> lc, x, y);
    else
        re -> lc = old -> lc;
    if (mid + 1 <= y)
        re -> rc = change(mid + 1, r, old -> rc, x, y);
    else
        re -> rc = old -> rc;
    re -> num = re -> lc -> num + re -> rc -> num;
    return re;
}

vector<node*> root;

void querry12(int v)
{
    int x, y;
    cin >> x >> y;
    int pos = (x - 1) * m + y;
    root.pb(update(1, m * n, root[int(root.size()) - 1], pos, v));
}

void querry3()
{
    int x;
    cin >> x;
    int beg = (x - 1) * m + 1;
    int end = x * m;
    root.pb(change(1, m * n, root[int(root.size()) - 1], beg, end));
}

void querry4()
{
    int x;
    cin >> x;
    root.pb(root[x]);
}

void setup()
{
    cin >> n >> m >> q;
    root.pb(build(1, m * n));
    int t;
    FOR(i, 1, q)
    {
        cin >> t;
        if (t == 1)
            querry12(1);
        if (t == 2)
            querry12(0);
        if (t == 3)
            querry3();
        if (t == 4)
            querry4();
        cout << root[int(root.size()) - 1] -> num << '\n';
    }
}

void xuly()
{

}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
