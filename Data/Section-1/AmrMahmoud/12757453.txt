#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[100005];

int solve(int L, int R, int cnt)
{
  if(L == R) return 1;
  if(L > R) return 0;
  int x = INF_MAX;
  for(int i=L;i<=R;i++)
    x = min(x, arr[i] - cnt);
  if(x == 1)
  {
    int nxt = 0, last = L + 1;
    for(int i=L;i<=R;i++)
    {
      if(arr[i] - cnt == 1)
      {
        nxt = max(nxt, solve(last, i - 1, cnt + 1));
        last = i + 1;
      }
    }
    if(last != R + 1)
      nxt = max(nxt, solve(last, R - 1, cnt + 1));
    return min((R - L + 2) / 2, nxt + 1);
  }
  return min((R - L + 2) / 2, solve(L + (x - 1), R - (x - 1), cnt + x - 1) + x - 1);
}

int main()
{
  //freopen("approximation.in", "r", stdin);
  //freopen("approximation.out", "w", stdout);
  int n;
  scanf("%d", &n);
  for(int i=0;i<n;i++)
    scanf("%d", &arr[i]);
  printf("%d", solve(0, n - 1, 0));
  return 0;
}
