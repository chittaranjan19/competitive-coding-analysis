#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _c(int k, int n){
	int nm = 1, dm = 1;
	while (k){
		nm *= n;
		dm *= k;
		n--, k--;
	}
	return nm / dm;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 2e5 + 10, lg = 20;
ll mod = 1e9 + 7;

vector<int> g[N];

int want[N], may[N], actual[N], top[N];
int ans = 0;
vector<int> _res;
bool ok = 1;

void dfs(int v, int cur = 0){
	if (may[v]) cur = v;
	actual[v] = cur;
	ok &= actual[v] == want[v];
	for (auto to : g[v]){
		dfs(to, cur);
	}
	if (may[v])
	_res.push_back(v);
}

int main()
{
	int n, m;
	cin >> n >> m;
	memset(top, 0, sizeof(top));
	memset(may, 0, sizeof(may));

	for (int i = 0; i < m; i++){
		int u, v;
		cin >> u >> v;
		top[v] = 1;
		g[u].push_back(v);
	}
	for (int i = 0; i < n; i++){
		cin >> want[i+1];
		may[want[i+1]] = 1;
	}

	for (int i = 1; i <= n; i++){
		ans += may[i];
		if (!top[i])
			dfs(i);
	}
	if (ok){
		cout << ans << endl;
		for (auto v : _res)
			cout << v << end;
	}
	else{
		cout << -1;
	}
	return 0;
}