//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <cstring>
#include <iomanip>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 100 * 1000 + 100;
const ll M = 95542721;

int n;
ll a[50][N];
ll sum[50][4 * N];
int lzy[4 * N];

void build(int v, int s, int e){
	if(e - s == 1){
		for(int i = 0; i < 48; ++i)
			sum[i][v] = a[i][s];
		return;
	}
	int mid = (s + e) / 2;
	build(2 * v + 0, s, mid);
	build(2 * v + 1, mid, e);
	for(int i = 0; i < 48; ++i)
		sum[i][v] = (sum[i][2 * v + 0] + sum[i][2 * v + 1]) % M;
}

void shift(int v){
	int L = 2 * v + 0;
	int R = 2 * v + 1;
	for(int j = 0; j < lzy[v]; ++j){
		lzy[L] = (lzy[L] + 1)%M;
		ll tmp = sum[0][L];
		for(int i = 1; i < 48; ++i)
			sum[i - 1][L] = sum[i][L];
		sum[47][L] = tmp;	
		lzy[R] = (lzy[R] + 1)%M;
		tmp = sum[0][R];
		for(int i = 1; i < 48; ++i)
			sum[i - 1][R] = sum[i][R];
		sum[47][R] = tmp;	
	}
	lzy[v] = 0;
}

void update(int v, int s, int e, int l, int r){
	if(r <= s || e <= l) return;
	if(l <= s && e <= r){
		lzy[v] = (lzy[v] + 1)%M;
		ll tmp = sum[0][v];
		for(int i = 1; i < 48; ++i)
			sum[i - 1][v] = sum[i][v];
		sum[47][v] = tmp;
		return;
	}
	int mid = (s + e) / 2;
	shift(v);
	update(2 * v + 0, s, mid, l, r);
	update(2 * v + 1, mid, e, l, r);
	for(int i = 0; i < 48; ++i)
		sum[i][v] = (sum[i][2 * v + 0] + sum[i][2 * v + 1]) % M;
}

ll get(int v, int s, int e, int l, int r){
	if(r <= s || e <= l) return 0;
	if(l <= s && e <= r) return sum[0][v];
	shift(v);
	int mid = (s + e) / 2;
	return (get(2 * v + 0, s, mid, l, r) + get(2 * v + 1, mid, e, l, r)) % M;
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for(int i = 0; i < n; ++i){
		cin >> a[0][i];
		for(int j = 1; j < 48; ++j)
			a[j][i] = a[j - 1][i] * a[j - 1][i] % M * a[j - 1][i] % M;
	}
	build(1, 0, n);
	int q;
	cin >> q;
	for(int i = 0; i < q; ++i){
		int t, l, r;
		cin >> t >> l >> r;
		l --;
		if(t == 2)
			update(1, 0, n, l, r);
		else
			cout << get(1, 0, n, l, r) << "\n";
	}
	return 0;
}
