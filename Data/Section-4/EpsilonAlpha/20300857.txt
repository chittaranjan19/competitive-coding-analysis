import java.io.*;
import java.util.*;
import java.math.*;

/*
 * Created by Epsilon Alpha on 01-Sep-16 at 4:14 AM.
 */

public final class Taxi
{
    public static void main(String[] args) throws Exception
    {
        Parser Reader = new Parser(System.in);
        OutputWriter Writer = new OutputWriter(System.out);
        int n = Reader.nextInt();
        int[] count = new int[5];
        for(int i=0;i<n;i++)
        {
            int s = Reader.nextInt();
            count[s]++;
        }

        /*
         * Combinations:
         * Groups of fours
         * Groups of three's and one's
         * Groups of two's and two's
         * Groups of two's and one's
         */

        //Eliminate pairs of 1's and 3's
        while(count[1]>0 && count[3]>0)
        {
            count[4]++;
            count[3]--;
            count[1]--;
        }
        //Now either 1's remain or 3's

        //Eliminate pairs of 2's
        while(count[2]>1)
        {
            count[2]-=2;
            count[4]++;
        }
        while(count[2]>0 && count[1]>0)
        {
            count[2]--;
            count[1]--;
            count[3]++;
        }
        
        Writer.println(count[1]+count[2]+count[3]+count[4]);

        Writer.close();
    }

    private static class Parser
    {
        final private int BUFFER_SIZE = 1 << 16;

        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Parser(InputStream in)
        {
            din = new DataInputStream(in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public int nextInt() throws Exception
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public long nextLong() throws Exception
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public String next() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c > ' ');
            return ret.toString();
        }

        private void fillBuffer() throws Exception
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) buffer[0] = -1;
        }

        private byte read() throws Exception
        {
            if (bufferPointer == bytesRead) fillBuffer();
            return buffer[bufferPointer++];
        }
    }

    private static class OutputWriter
    {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream)
        {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)), true);
        }

        public OutputWriter(Writer writer)
        {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object... objects)
        {
            for (int i = 0; i < objects.length; i++)
            {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void println(Object... objects)
        {
            print(objects);
            writer.println();
        }

        public void close()
        {
            writer.close();
        }

        public void flush()
        {
            writer.flush();
        }
    }
}