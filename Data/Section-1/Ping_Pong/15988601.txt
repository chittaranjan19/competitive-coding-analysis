#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e8;
const int P = 239;
const int MAX_N = 1000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int graph[MAX_N][MAX_N];
bool used[MAX_N];
int n;

void dfs(int x)
{
    used[x] = true;
    for (int i = 0; i < n; i++)
        if (graph[x][i] && !used[i])
        {
            graph[x][i] = 0;
            graph[i][x] = 0;
            dfs(i);
        }
}

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            graph[i][j] = 0;
    for (int i = 0; i < n - 1; i++)
    {
        int s, f;
        cin >> s >> f;
        graph[s - 1][f - 1] = 1;
        graph[f - 1][s - 1] = 1;
    }
    for (int i = 0; i < n; i++)
        used[i] = false;
    vector<int> comp;
    for (int i = 0; i < n; i++)
        if (!used[i])
        {
            comp.push_back(i);
            dfs(i);
        }
    vector<pair<int, int> > reb;
    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++)
            if (graph[i][j])
                reb.push_back(make_pair(i, j));
    cout << reb.size() << endl;
    for (int i = 0; i < reb.size(); i++)
        cout << reb[i].first + 1 << " " << reb[i].second + 1 << " " << comp[0] + 1 << " " << comp[i + 1] + 1 << endl;
    return 0;
}
