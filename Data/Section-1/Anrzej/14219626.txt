#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

multiset<int> ww, hh;
set<pair<int, int> > sh, sw;
ll w, h, n;

int main()
{
    cin >> w >> h >> n;
    ww.insert(w), hh.insert(h);
    sh.insert(mp(h, 0));
    sw.insert(mp(w, 0));
    for (int i = 0; i < n; i++)
    {
        int v; char tp;
        ll ans;
        cin >> tp >> v;
        if (tp == 'V')
        {
            pair<int, int> g = *sw.upper_bound(mp(v, 0));
            sw.erase(g);
            sw.insert(mp(g.fs, v));
            sw.insert(mp(v, g.sc));
            ww.erase(ww.find(g.fs - g.sc));
            ww.insert((g.fs - v));
            ww.insert((v - g.sc));
        }
        else
        {
            pair<int, int> g = *sh.upper_bound(mp(v, 0));
            sh.erase(g);
            sh.insert(mp(g.fs, v));
            sh.insert(mp(v, g.sc));
            hh.erase(hh.find(g.fs - g.sc));
            hh.insert((g.fs - v));
            hh.insert((v - g.sc));
        }
        multiset<int>::iterator it;
        it = ww.end();
        it--;
        ans = *it;
        it = hh.end();
        it--;
        ans *= *it;
        cout << ans << endl;
    }
    return 0;
}