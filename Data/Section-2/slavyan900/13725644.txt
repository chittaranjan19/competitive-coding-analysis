#include <iostream>
#include <string>
#include <vector>
#include <utility>
#include <algorithm>

using namespace std;

int q[100000][2];
int arr[100000];
int tree[400001];

void build(int v, int left, int right)
{
	if (left == right)
	{
		tree[v] = arr[left];
	}
	else
	{
		int mid = (left + right) / 2;
		build(2 * v, left, mid);
		build(2 * v + 1, mid + 1, right);
		tree[v] = tree[2 * v] + tree[2 * v + 1];
	}
}

int sum(int v, int left, int right, int l, int r)
{
	if (l > r)
		return 0;
	if (l == left && r == right)
		return tree[v];
	int mid = (left + right) / 2;
	return sum(2 * v, left, mid, l, min(r, mid)) + sum(2 * v + 1, mid + 1, right, max(l, mid + 1), r);
}

int main()
{
	string str;
	cin >> str;
	for (int i = 0; i < str.size() - 1; ++i)
	{
		if (str[i] == str[i + 1])
			arr[i] = 1;
	}
	build(1, 0, str.size() - 2);
	int m;
	cin >> m;
	for (int i = 0; i < m; ++i)
	{
		cin >> q[i][0] >> q[i][1];
		cout << sum(1,0,str.size()-2,q[i][0] - 1,q[i][1] - 2) << endl;
	}
	return 0;
}