#include<iostream>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<algorithm>
using namespace std;
int main()
{
    map<int, int> tree;
    int n, in;
    cin >> n;
    map<int, int>::iterator it = tree.begin();
    pair<int, int> p;
    for (int i = 0; i < n; i++)
    {
        cin >> in;
        it = tree.find(in);
        if (it == tree.end())
        {
            p = make_pair(in, 1);
            tree.insert(p);
        }
        else
            (*it).second++;
    }
    it = tree.begin();
    map<int, int>::iterator itt;
    int count = 0;
    while (it != tree.end())
    {
        while ((*it).second != 1)
        {
            int x = (*it).first + 1;
            itt = tree.find(x);
            if (itt != tree.end())
                (*itt).second++;
            else
            {
                p = make_pair(x, 1);
                tree.insert(p);
            }
            (*it).second--;
            count++;
        }
        it++;
    }
    cout << count << endl;
    return 0;
}