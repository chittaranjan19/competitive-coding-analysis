#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
vector<int>adj[MAXN];
int in[MAXN],P[MAXN][28],lvl[MAXN],tim,out[MAXN],n;
vector<int>level[MAXN];
void dfs(int nd,int pr){
	in[nd]=++tim;
	lvl[nd]=(pr==-1?1:lvl[pr]+1);
	level[lvl[nd]].pb(in[nd]);
	P[nd][0]=pr;
	tr(it,adj[nd])
		if(*it!=pr)
			dfs(*it,nd);
	out[nd]=tim;		
}
void build(){
	for(int j=1;j<18;j++)
		for(int i=1;i<=n;i++)
			if(P[i][j-1]!=-1)
				P[i][j]=P[P[i][j-1]][j-1];
}
int atla(int x,int d){
	for(int i=17;i>=0;i--)
		if(P[x][i]!=-1 and d>=(1<<i))
			x=P[x][i],d-=(1<<i);
	return x;		
}
int main(){
	memset(P,-1,sizeof(P));
	scanf("%d",&n);
	vector<int>root,ans;
	for(int i=1;i<=n;i++){
		int z;
		scanf("%d",&z);
		if(z){
			adj[z].pb(i);
			adj[i].pb(z);
		}
		else
			root.pb(i);
	}
	for(int i=0;i<root.size();i++)
		dfs(root[i],-1);
	build();	
	int m;
	scanf("%d",&m);
	while(m--){
		int v,p;
		scanf("%d%d",&v,&p);
		if(lvl[v]-p<=0)
			ans.pb(0);
		else{
			int k=atla(v,p);
			int sev=lvl[v];
			int low=lower_bound(all(level[sev]),in[k])-level[sev].begin();
			int upp=upper_bound(all(level[sev]),out[k])-level[sev].begin();
			ans.pb(upp-low-1);
		}
	}
	for(int i=0;i<ans.size();i++)
		printf("%d ",ans[i]);
	printf("\n");
	return 0;
}
