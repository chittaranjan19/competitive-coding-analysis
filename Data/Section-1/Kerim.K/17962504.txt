#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define lg(x) ceil(log2(x))
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int arr[MAXN],dp[MAXN];
struct MaxSegTree{
	int s[MAXN];
	int cmp(int x,int y){
		if(max(arr[x],arr[y])==0)
			return 0;
		if(arr[x]>=arr[y])
			return x;
		return y;	
	}
	void upd(int p,int nd,int x,int y){
		if(x==y){
			s[nd]=x;
			return;
		}
		int mid=(x+y)>>1;
		if(p<=mid)
			upd(p,nd<<1,x,mid);
		else
			upd(p,nd<<1|1,mid+1,y);
		s[nd]=cmp(s[nd<<1],s[nd<<1|1]);		
	}
	int tap(int l,int r,int nd,int x,int y){
		if(l>y or x>r)
			return 0;
		if(l<=x and y<=r)
			return s[nd];
		int mid=(x+y)>>1;
		int i1=tap(l,r,nd<<1,x,mid);		
		int i2=tap(l,r,nd<<1|1,mid+1,y);
		return cmp(i1,i2);		
	}
}T;
struct MinSegTree{
	int s[MAXN];
	int cmp(int x,int y){
		if(min(dp[x],dp[y])==INF)
			return 0;
		if(dp[x]>=dp[y])
			return y;
		return x;	
	}
	void upd(int p,int nd,int x,int y){
		if(x==y){
			s[nd]=x;
			return;
		}
		int mid=(x+y)>>1;
		if(p<=mid)
			upd(p,nd<<1,x,mid);
		else
			upd(p,nd<<1|1,mid+1,y);
		s[nd]=cmp(s[nd<<1],s[nd<<1|1]);		
	}
	int tap(int l,int r,int nd,int x,int y){
		if(l>y or x>r)
			return 0;
		if(l<=x and y<=r)
			return s[nd];
		int mid=(x+y)>>1;
		int i1=tap(l,r,nd<<1,x,mid);		
		int i2=tap(l,r,nd<<1|1,mid+1,y);
		return cmp(i1,i2);		
	}
}S;
int main(){
	int a;ll ans=0;
	scanf("%d",&a);
	for(int i=1;i<a;i++){
		scanf("%d",arr+i);
		T.upd(i,1,1,a);
	}	
	fill(dp,dp+MAXN,INF);	
	arr[a]=a;dp[a]=0;
	T.upd(a,1,1,a);S.upd(a,1,1,a);	
	for(int i=a-1;i>=1;i--){
		int ind=T.tap(i+1,arr[i],1,1,a);
		dp[i]=dp[ind]+(a-i)-(arr[i]-ind);
		int pos=S.tap(i+1,arr[i],1,1,a);
		umin(dp[i],dp[pos]+(a-i)-(arr[i]-pos));
		S.upd(i,1,1,a);
		ans+=dp[i];
	}
	printf("%lld\n",ans);
	return 0;
}
//Min-10 9 10 8 8 7 8 10 2
//Max-10 9 9 7 7 7 7 7 2