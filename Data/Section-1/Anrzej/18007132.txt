#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 2e6 + 10, lg = 2;

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int n, m, a[N], cnt[N], k, pf[N];
int sz = 320;
ll res = 0;

struct Q{
	int l, r, id;

	bool operator < (Q other) const {
		return r < other.r;
	}

	Q(int _l, int _r, int _id){
		l = _l, r = _r, id = _id;
	}
};

vector<Q> qs[320];
ll ans[N];

void add(int cur){
	res += cnt[cur^k];
	cnt[cur]++;
}

void del(int cur){
	cnt[cur]--;
	res -= cnt[cur^k];
	//cnt[cur]--;
}

int main()
{
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++)
		cin >> a[i], pf[i+1] = pf[i] ^ a[i];

	for (int i = 0; i < m; i++){
		int l, r;
		cin >> l >> r;
		Q _q = Q(l-1, r+1, i);
		qs[l / sz].push_back(_q);
	}
	//cnt[0] = 1;
	for (int i = 0; i < sz; i++){
		
		sort(qs[i].begin(), qs[i].end());

		int l, r; l = r = i*sz;

		for (int _i = 0; _i < qs[i].size(); _i++){
			Q q = qs[i][_i];
			while (r < q.r){
				add(pf[r]);
				r++;
			}
			while (l < q.l){
				del(pf[l]);
				l++;
			}
			while (l > q.l){
				l--;
				add(pf[l]);
			}
			ans[q.id] = res;
		}
		//for (int j = l; j < r; j++)
			//del(pf[j]);
		memset(cnt, 0, sizeof(cnt));
		res = 0;
	}
	for (int i = 0; i < m; i++)
		cout << ans[i] << endl;
	return 0;
}