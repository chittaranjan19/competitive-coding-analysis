#include <cstdio>
#include <algorithm>

using namespace std;

int n,k;
int uni[200000];
int d[200000];
bool eler[200000];
int elso[200000];
int kov[400000];
int hova[400000];

int db[200000];

long long dfs(int p) {
    long long ret(uni[p]*d[p]);
    eler[p] = 1;

    for(int Q=elso[p]; Q>=0; Q = kov[Q]) {
        int q = hova[Q];
        if(eler[q]) continue;

        d[q] = d[p]+1;
        ret += dfs(q);
        uni[p] += uni[q];
    }

    return ret;
}

inline bool cmp(int &a, int &b) {
    return (uni[a]-db[a]) > (uni[b]-db[b]);
}

long long ans;
int ssz[200000],sszv;

void dfs2(int p) {
    eler[p] = 1;
    sszv = 0;
    for(int Q=elso[p]; Q>=0; Q = kov[Q]) {
        int q = hova[Q];
        if(eler[q]) continue;

        ssz[sszv++] = q;
    }

    sort(ssz,ssz+sszv,cmp);

    int D = db[p];
    int i=0;
    int iv = 0;

    while(D>0) {
        while((i<sszv-1) && (!cmp(ssz[i],ssz[i+1]))) i++;
        iv = max(iv,i);

        db[ssz[i]]++;
        if(!i) {
            i = iv;
        } else i--;
        D--;
    }

    int q = ssz[0];

    if((uni[q]-db[q]) <= ((uni[p]-db[p])/2)) {
        ans -= (uni[p]-db[p])*d[p];
    } else {
        ans -= ((uni[p]-db[p]) - (uni[q]-db[q])) * 2 * d[p];
        db[q] += ((uni[p]-db[p]) - (uni[q]-db[q]));
        dfs2(q);
    }
}

int main()
{
    scanf("%d%d",&n,&k);
    for(int i=0; i<2*k; i++) {
        int x; scanf("%d",&x); x--;
        uni[x] = 1;
    }

    for(int i=0; i<n; i++) elso[i] = -1;

    for(int i=0; i<n-1; i++) {
        int x,y; scanf("%d%d",&x,&y); x--; y--;
        kov[2*i] = elso[x];
        hova[2*i] = y;
        elso[x] = 2*i;

        kov[2*i+1] = elso[y];
        hova[2*i+1] = x;
        elso[y] = 2*i+1;
    }

    ans = dfs(0);

    fill(eler,eler+n,0);
    dfs2(0);

    printf("%I64d\n",ans);

    return 0;
}
