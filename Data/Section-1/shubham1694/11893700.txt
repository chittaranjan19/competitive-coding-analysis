#include <bits/stdc++.h>

using namespace std;

const int maxn = 1000000;

int otype[maxn], parent[maxn], deg[maxn], plength[maxn];

int dfs(int src, int clen)
{
    if(parent[src]==0)
        return 1;
    if(deg[parent[src]]>1)
        return 1;
    if(plength[src]!=-1)
        return plength[src];
    plength[src] = dfs(parent[src], 0)+1;
    return plength[src];
}

int main()
{
    int n, i, j, k, se;
    memset(plength, -1, sizeof(plength));
    scanf("%d", &n);
    for(i=1; i<=n; i++)
        scanf("%d", &otype[i]);
    for(i=1; i<=n; i++)
        scanf("%d", &parent[i]), deg[parent[i]]++;
    for(i=1; i<=n; i++){
        if(otype[i]==1){
            if(plength[i]==-1)
                plength[i] = dfs(i, 0);
        }
    }
    k = -1;
    for(i=1; i<=n; i++){
        if(otype[i]){
            if(plength[i]>k){
                k = max(plength[i], k);
                se = i;
            }
        }
    }
    vector<int> v;
    for(i=0; i<k; i++){
        v.push_back(se);
        se = parent[se];
    }
    printf("%d\n", k);
    for(i=v.size()-1; i>=0; i--)
        printf("%d ", v[i]);
    printf("\n");
    return 0;
}