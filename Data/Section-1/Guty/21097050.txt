#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Arista
{
	tint vecino, peso;
	Arista (tint vv, tint pp)
	{
		vecino = vv;
		peso = pp;
	}
};

void dfs (vector<vector<Arista> > &vecinos, vector<tint> &a, vector<tint> &marcado, tint actual, tint recorrido, bool marcar)
{
	
	marcado[actual] = 0;

	if (marcar or recorrido > a[actual])
		marcado[actual] = 1;
	for (auto arista : vecinos[actual])
		if (marcado[arista.vecino] < 0)
			dfs(vecinos,a,marcado,arista.vecino,max(arista.peso,recorrido + arista.peso),marcar or recorrido > a[actual]);
	
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		vector<tint> a (n);
		forn(i,n)
			cin >> a[i];
		vector<vector<Arista> > vecinos(n);
		forn(i,n-1)
		{
			tint v,p;
			cin >> v >> p;
			vecinos[v-1].push_back(Arista(i+1,p));
			vecinos[i+1].push_back(Arista(v-1,p));
		}
		vector<tint> marcado (n,-1);
		dfs(vecinos,a,marcado,0,0,false);
		tint ans = 0;
		forn(i,n)
			ans += (marcado[i] == 1);
		cout << ans << "\n";
	}
	return 0;
}



