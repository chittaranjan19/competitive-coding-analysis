#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}


vector<int> cntt[2222];
int a[2222];
int b[2222];
int good[2222];
bool en[2222];
int main()
{
	int n, m;
	cin >> n >> m;

	for(int i =0 ; i <n; i++){
		cin >> a[i];
		if(a[i] < 2222)
		b[a[i]]+=1, good[a[i]]+=1;
	}
	int need = n/m;
	for(int i = 1; i <= m; i++){
		if(b[i] >= need)
			en[i] = 1, b[i] -= need;
		else b[i] = 0;
	}
	vector<int> can_change;
	for(int i = 0; i < n; i++){
		if(a[i] > m)
			can_change.push_back(i);
		else{
			if(b[a[i]])
				can_change.push_back(i), b[a[i]]-=1;
		}
	}
	vector<int> put;
	int add = 0;
	for(int i = 1; i <= m; i++){
		if(en[i]) continue;
		for(int j = 0; j < need - good[i]; j++)
			put.push_back(i), add++;
	}
	cout << need << ' ' << add << endl;
	for(int i = 0, j = 0; i < can_change.size() && j < put.size() ; i++, j++){
		a[can_change[i]] = put[j];
	}
	for(int i = 0; i < n; i++)
		cout << a[i] << ' ';
	return 0;
}