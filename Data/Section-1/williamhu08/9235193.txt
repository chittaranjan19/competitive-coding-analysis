//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 110;

int M, N;
char str[MAXN];
//state of dp: dp[cur pos in string][current turtle pos][# changed][orientation] = can it be there?
bool dp[MAXN][2 * MAXN][MAXN][2];

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	scanf("%s%d", str + 1, &N);
	M = strlen(str + 1);
	dp[0][MAXN][0][1] = true;
	for (int i = 0; i < M; i++) {
		char c = str[i + 1];
		for (int j = 0; j < 2 * MAXN; j++) {
			for (int k = 0; k <= N; k++) {
				for (int m = 0; m < 2; m++) {
					if (!dp[i][j][k][m]) {
						continue;
					}
					//otherwise go to the next one
					int nochange = j + 2 * m - 1, change = j;
					if (c == 'T') {
						swap(nochange, change);
					}
					//ok now let's do the states
					dp[i + 1][nochange][k][m] = dp[i + 1][change][k + 1][!m] = true;
				}
			}
		}
	}
	int ans = 0;
	for (int j = 0; j < 2 * MAXN; j++) {
		for (int k = 0; k <= N; k++) {
			for (int m = 0; m < 2; m++) {
				if (dp[M][j][k][m]) {
					int dist = abs(j - MAXN);
					if (ans < dist) {
						ans = dist;
						break;
					}
				}
			}
		}
	}
	printf("%d\n", ans);
}