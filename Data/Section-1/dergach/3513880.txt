#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;

int n, k, cnt50, cnt100, minv;

typedef long long ll;
#define mod 1000000007
ll dp[55][55][305];
ll c[55][55];
int mv[55][55][2];

ll solve(int c50, int c100, int n)
{
    if(dp[c50][c100][n] != -1) return dp[c50][c100][n];
    if(n == minv)
        return dp[c50][c100][n] = (c50 == 0 && c100 == 0);
    ll res = 0;
    if(n % 2 == 0)
    {
        for(int i = 0; i <= c50; i++)
            for(int j = 0; j <= c100; j++)
                if(i * 50 + j * 100 <= k && i + j > 0)
                    res = (res + ((solve(c50 - i, c100 - j, n + 1) * c[c50][i]) % mod * c[c100][j]) % mod) % mod;
    }
    else
    {
        int c51 = cnt50 - c50;
        int c101 = cnt100 - c100;
        for(int i = 0; i <= c51; i++)
            for(int j = 0; j <= c101; j++)
                if(i * 50 + j * 100 <= k && i + j > 0)
                    res = (res + ((solve(c50 + i, c100 + j, n + 1) * c[c51][i]) % mod * c[c101][j]) % mod) % mod;
    }
    return dp[c50][c100][n] = res;
}
/*
int solve2(int c51, int c101, int glub)
{
    if(glub > 100) return 1234567890;
    if(mv[c51][c101] != -1) return mv[c51][c101];
    if(c51 == 0 && c101 == 0) return 0;
    int res = 1234567890;
    for(int i = 0; i <= c51; i++)
        for(int j = 0; j <= c101; j++)
            if(i * 50 + j * 100 <= k && i + j > 0)
            {
                if(i == c51 && j == c101)
                    res = min(res, 1 + solve2(c51 - i, c101 - j, glub + 1));
                else
                    if((cnt50 - c51 > 0 || i > 0) && (c51 != c51 - i + 1 || c101 != c101 - j))
                        res = min(res, 2 + solve2(c51 - i + 1, c101 - j, glub + 1));
                    else
                        if((cnt100 - c101 > 0 || j > 0) && (c51 != c51 - i || c101 != c101 - j + 1))
                            res = min(res, 2 + solve2(c51 - i, c101 - j + 1, glub + 1));
            }
    return mv[c51][c101] = res;
}
*/
int main()
{
    for(int i = 0; i < 55; i++)
    {
        c[i][0] = c[i][i] = 1;
        for(int j = 1; j < i; j++)
            c[i][j] = (c[i-1][j-1] + c[i-1][j]) % mod;
    }
    memset(dp, -1, sizeof(dp));
    for(int i = 0; i < 55; i++)
        for(int j = 0; j < 55; j++)
            mv[i][j][0] = mv[i][j][1] = 1234567890;

    scanf("%d %d", &n, &k);
    for(int i = 0; i < n; i++)
    {
        int man;
        scanf("%d", &man);
        if(man == 50)
            cnt50++;
        else
            cnt100++;
    }
    
    queue <int> q;
    q.push(cnt50); q.push(cnt100); q.push(0);
    mv[cnt50][cnt100][0] = 0;
    while(!q.empty())
    {
        int x = q.front(); q.pop();
        int y = q.front(); q.pop();
        int side = q.front(); q.pop();
        if(side == 0)
        {
            for(int i = 0; i <= x; i++)
                for(int j = 0; j <= y; j++)
                    if(i + j > 0 && i * 50 + j * 100 <= k && mv[x-i][y-j][1-side] > 1 + mv[x][y][side])
                    {
                        mv[x-i][y-j][1-side] = 1 + mv[x][y][side];
                        q.push(x-i); q.push(y-j); q.push(1-side);
                    }
        }
        else
        {
            int xx = cnt50 - x, yy = cnt100 - y;
            for(int i = 0; i <= xx; i++)
                for(int j = 0; j <= yy; j++)
                    if(i + j > 0 && i * 50 + j * 100 <= k && mv[x+i][y+j][1-side] > 1 + mv[x][y][side])
                    {
                        mv[x+i][y+j][1-side] = 1 + mv[x][y][side];
                        q.push(x+i); q.push(y+j); q.push(1-side);
                    }
        }
        
    }
    minv = mv[0][0][1];
    if(minv == 1234567890)
        printf("-1\n0\n");
    else
        printf("%d\n%I64d\n", minv, solve(cnt50, cnt100, 0));
    return 0;
}