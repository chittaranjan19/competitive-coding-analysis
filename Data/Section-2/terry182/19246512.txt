#include <iostream>
#include <algorithm>
using namespace std;
int a[105];
int mem[105][3];
int dfs(int n, int x, int move)
{   int ans = 0;

    if (mem[x][move] != -1) return mem[x][move];
    if (x == n) return 0;
    if (a[x] == 0)
        return mem[x][move] = dfs(n, x+1, 0)+1;
    else if (a[x] == 1)
    {
        if (move != 2)
            return mem[x][move] = min(dfs(n, x+1, 2), dfs(n, x+1, 0)+1);
        else return dfs(n, x+1, 0)+1;
    }
    else if (a[x] == 2)
    {
        if (move != 1)
            return mem[x][move] = min(dfs(n, x+1, 1), dfs(n, x+1, 0)+1);
        else return mem[x][move] = dfs(n, x+1, 0)+1;
    }
    else if (move == 1)
    {
        return mem[x][move] = min(dfs(n, x+1, 2), dfs(n, x+1, 0)+1);
    }
    else if (move == 2)
        return mem[x][move] = min(dfs(n, x+1, 1), dfs(n, x+1, 0)+1);
    else if (move == 0)
        return mem[x][move] = min(dfs(n, x+1, 2), min(dfs(n, x+1, 1), dfs(n, x+1, 0)+1));

    return 0;
}
int main()
{   int n;
    cin >> n;
    for (int i = 0; i < n; ++i) cin >> a[i];

    for (int i = 0; i < n; ++i)
    {   mem[i][0] = mem[i][1] = mem[i][2] = -1;
    }

    cout << dfs(n, 0, 0) << endl;

}
