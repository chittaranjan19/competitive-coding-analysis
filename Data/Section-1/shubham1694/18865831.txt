#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 500010;

int n, q, arr[maxn], prime[maxn], pcnt[maxn], present[maxn];
vector<pii> pf[maxn];

void pre()
{
    ll i, j;
    prime[1] = 1;
    for(i=2; i<maxn; i+=2)
        prime[i] = 2;
    for(i=3; i<maxn; i+=2){
        if(!prime[i]){
            for(j=i; j<maxn; j+=i)
                prime[j] = i;
        }
    }
}

void factorize(int x, int ind)
{
    while(x > 1){
        int f = prime[x];
        int c = 0;
        while(!(x%f)){
            x /= f;
            c++;
        }
        pf[ind].pb(mp(f, c));
    }
}

int main()
{
    pre();
    int i, j, x, curn = 0;
    ll change = 0, ans = 0;
    scanf("%d%d", &n, &q);
    for(i=1; i<=n; i++){
        scanf("%d", &arr[i]);
        factorize(arr[i], i); 
    }
    while(q--){
        scanf("%d", &x);
        if(arr[x]==1){
            if(present[x]){
                ans -= (curn-1);
                pcnt[1]--;
                curn--;
            }
            else{
                ans += (curn);
                pcnt[1]++;
                curn++;
            }
            present[x] ^= 1;
            printf("%lld\n", ans);
            continue;
        }
        int npf = (int)pf[x].size();
        change = 0;
        for(i=0; i<(1<<npf); i++){
            int prod = 1;
            for(j=0; j<npf; j++){
                if(i&(1<<j))
                    prod *= pf[x][j].f;
            }
            if(__builtin_popcount(i)&1)
                change -= pcnt[prod];
            else
                change += pcnt[prod];
            if(present[x])
                pcnt[prod]--;
            else
                pcnt[prod]++;
        }
        if(present[x]){
            ans -= change;
            curn--;
        }
        else{
            ans += change;
            curn++;
        }
        present[x] ^= 1;
        printf("%lld\n", ans);
    }
    return 0;
}

