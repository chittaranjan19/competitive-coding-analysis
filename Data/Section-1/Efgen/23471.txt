import java.io.*;         
import java.util.*;         
import java.math.*;         

public class Main implements Runnable  {
StreamTokenizer ST;      
PrintWriter out;      
BufferedReader br;   
Scanner in;
int inf = 1000000000;
double eps = 1e-7;

int nextInt() throws IOException{      
    ST.nextToken();      
    return (int)ST.nval;      
}
long nextLong() throws IOException{      
    ST.nextToken();      
    return (long)ST.nval;      
}      
String next() throws IOException{      
    ST.nextToken();      
    return ST.sval;      
}      
double nextD() throws IOException{      
    ST.nextToken();      
    return ST.nval;      
}      
public static void main(String[] args) throws IOException {       
    new Thread(new Main()).start();      
}

public void run()  {      
    try {
        br = new BufferedReader(new InputStreamReader(System.in));
        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));  
        //in = new Scanner(br);
        ST = new StreamTokenizer(br);      
        solve();      
        out.close();
        //in.close();
        br.close();   
    }         
    catch (IOException e) {        
        throw new IllegalStateException(e);       
    }      
}
double a, v, l, d, w;

public void solve() throws IOException {
    a = nextInt();
    v = nextInt();
    l = nextInt();
    d = nextInt();
    w = nextInt();
    if (w>v) w = v;
    double res1 = 0;
    double v0 = 0;  
    double v1 = Math.sqrt(2*a*d);
    res1 = Math.sqrt(2*d/a);
    if (v1<=w+eps) {
            res1 = Math.sqrt(2*d/a);
            v0 = v1;
    } else {
        double l = w, r = v;
        boolean first = true;
        while (r-l>eps/10 || first) {
            first = false;
            double vr =(l+r)/2;
            double traz0v = vr/a;
            double trazvw = (vr-w)/a;
            double s0v = a*traz0v*traz0v/2;
            double svw = (vr*vr-w*w)/(2*a);
            if (s0v+svw<=d+eps) {
                res1 = traz0v+trazvw+Math.max((d-s0v-svw)/vr, 0);
                l = vr;
            } else r = vr;
        }
        v0 = w;
    }

    
    double tt = (v-v0)/a;
    double len = v0*tt+a*tt*tt/2;
    len = Math.min(len, l-d);
    v1 = Math.sqrt(2*a*len+v0*v0);
    
    double res = (v1-v0)/a+Math.max((l-d-len)/v1, 0);
    res += res1;    
    out.printf(Locale.US, "%1.7f", res);
}
}




