#include<iostream>
#include<cstdio>
#include<map>
#include<string>
#include<cstring>
#include<vector>
#include<algorithm>
#include<queue>
#include<set>
#include<stack>

#define fill(a,val) memset(a, (val), sizeof a)
#define pb push_back
#define scantype int
#define min(a,b) a<b?a:b
#define max(a,b) a>b?a:b
#define lli long long int

lli powermod(lli _a,lli _b,lli _m){lli _r=1;while(_b){if(_b%2==1)_r=(_r*_a)%_m;_b/=2;_a=(_a*_a)%_m;}return _r;}

using namespace std;

void scan(scantype &x);

int big[1000003],vis[1000003],a[1000003],idx;
vector<int> edge[1000003];


pair<int,int> dfs(int s)
{
    vis[s] = true;
    int res = a[s],id=s;
   // cout<<"in: "<<s+1<<endl;
    for(int i=0;i<edge[s].size();i++)
    {
        if(!vis[edge[s][i]])
        {
            pair<int,int> p = dfs(edge[s][i]);
            if(p.second>res)
            {
                id  = p.first;
                res = p.second;
            }
        }
    }
    return {id,res};
}

int main(void)
{
  int n,m;
  cin>>n>>m;

  for(int i=0;i<n;i++)
        scan(a[i]);

  while(m--)
  {
      int x,y;
      scan(x);
      scan(y);
      x--;
      y--;
      if(x>y)
        edge[y].pb(x);
      else
        edge[x].pb(y);
  }

  for(int i=0;i<n;i++)
  {
      fill(vis,false);
      //cout<<"now: "<<i+1<<endl;
      pair<int,int> ans = dfs(i);
      //cout<<endl<<"got: "<<ans.first<<endl<<endl;
      swap(a[i],a[ans.first]);
  }

  for(int i=0;i<n;i++)
   printf("%d ",a[i]);

  return 0;
}









void scan(scantype &x)
{
    /*register int c = getchar(); //for positive
    x = 0;
    for(;(c<48 || c>57);c = getchar());
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}*/

    register int c = getchar(); //for negative/positive
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = getchar());
    if(c=='-') {neg=1;c=getchar();}
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}
