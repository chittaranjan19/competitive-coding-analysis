#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long int64;
const int MAX_n = 200000,MOD = 1000000007;
vector<int> G[MAX_n];

void add_edge(int u,int v)
{
    G[u].push_back(v);
    G[v].push_back(u);
}
int depth[MAX_n];
int dfs(int v,int p,int d)
{
    if(depth[v] != -1)  return d - depth[v];
    depth[v] = d;
    int ret = 0;
    for (int i = 0; i < G[v].size(); ++i)
    {
        int u = G[v][i];
        if( p == u ) continue;
        ret = max(dfs(u, v, d + 1),ret);
    }
    return ret;
}
int power(int64 a,int x)
{
    int64 ret = 1;
    while (x)
    {
        if(x&1) ret = ret*a%MOD;
        a = a*a%MOD;
        x >>= 1;
    }
    return ret;
}
int solve(int n)
{
    
    int64 ret = 1, res = n;
    memset(depth, -1, sizeof depth);
    for(int i = 0; i < n; ++i)
    {
        if(depth[i] != -1)  continue;
        
        int cnt = dfs(i, -1, 0);
        res -= cnt;
        ret = ret*(power(2, cnt) - 2)%MOD;
    }
    return ret*power(2, res)% MOD;
}

int a[MAX_n];
int main()
{
    int n;
    while(scanf("%d",&n) != EOF)
    {
        for(int i = 0; i < n; ++i)
            scanf("%d", a + i);
        
        for(int i = 0; i < n; ++i)  G[i].clear();
        
        for(int i = 0; i < n; ++i)
            add_edge(i,a[i] - 1);
        
        int ans = solve(n);
        printf("%d\n",ans);
        
    }
}