import java.io.*;
import java.util.*;
import java.math.*;

public class Main implements Runnable{
	long sq(int x) {
		return 1l*x*x;
	}
	class Point implements Comparable<Point> {
		int x, y;
		int t;
		double p;
		public Point(int xx, int yy, int tt, double pp) {
			x = xx; y = yy; p = pp; t = tt;
		}
		public int compareTo(Point o) {
			return t-o.t;
		}
		boolean can(Point p) {
			return sq(x-p.x)+sq(y-p.y) <= sq(t-p.t);
		}
		
	}
	void solve() throws IOException {		
		int n = nextInt();
		Point[] a = new Point[n];
		for (int i=0; i<n; i++) a[i] = new Point(nextInt(), nextInt(), nextInt(), nextDouble());
		Arrays.sort(a);
		double[] d = new double[n];
		for (int i=n-1; i>=0; --i) {
			d[i] = a[i].p; 
			for (int j=i+1; j<n; ++j) {
				if (a[i].can(a[j])) d[i] = Math.max(d[i], a[i].p+d[j]);
			}
		}
		double res = 0;
		for (int i=0; i<n; i++) if (d[i]>res) res = d[i];
		out.printf(Locale.US, "%1.10f", res);
	}
	
	
	BufferedReader br;
	StringTokenizer st;
	PrintWriter out;
	
	public void run() {
		try {
			//br = new BufferedReader(new FileReader(FileName+".in"));
			//out = new PrintWriter(FileName+".out");
			br = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);	
			//br = new BufferedReader(new FileReader("input.txt"));
			//out = new PrintWriter("output.txt");
			solve();
			br.close();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(0);
		}
	}

	String next() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			st = new StringTokenizer(s);
		}
		return st.nextToken();
	}
	double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}
	int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	public static void main(String[] args) {
		new Thread(new Main()).start();
	}
}
