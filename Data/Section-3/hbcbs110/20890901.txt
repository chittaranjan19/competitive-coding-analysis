#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#define lson l,m,x<<1
#define rson m+1,r,x<<1|1
using namespace std;
const int mod=1000000007;
struct Matrix
{
    int a[4];
    void init()
    {
        a[0]=1;
        a[1]=0;
        a[2]=0;
        a[3]=1;
    }
    void Finit()
    {
        a[0]=1;
        a[1]=1;
        a[2]=1;
        a[3]=0;
    }
    void clr()
    {
        memset(a,0,sizeof(a));
    }
    bool pss()
    {
        return (a[0]||a[1]||a[2]||a[3]);
    }
    Matrix operator + (const Matrix b)
    {
        Matrix ans={0};
        ans.a[0]=(a[0]+b.a[0])%mod;
        ans.a[1]=(a[1]+b.a[1])%mod;
        ans.a[2]=(a[2]+b.a[2])%mod;
        ans.a[3]=(a[3]+b.a[3])%mod;
        return ans;
    }
    Matrix operator * (const Matrix b)
    {
        Matrix ans;
        ans.init();
        ans.a[0]=(int)((long long)a[0]*b.a[0]%mod+(long long)a[1]*b.a[2]%mod)%mod;
        ans.a[1]=(int)((long long)a[0]*b.a[1]%mod+(long long)a[1]*b.a[3]%mod)%mod;
        ans.a[2]=(int)((long long)a[2]*b.a[0]%mod+(long long)a[3]*b.a[2]%mod)%mod;
        ans.a[3]=(int)((long long)a[2]*b.a[1]%mod+(long long)a[3]*b.a[3]%mod)%mod;
        return ans;
    }
}tr[400040],lazy[400040]={0};
int a[100005];
inline Matrix Mqpow(int n)
{
    Matrix ans,a;
    ans.init();
    a.Finit();
    while(n)
    {
        if(n%2) ans=ans*a;
        a=a*a;
        n>>=1;
    }
    return ans;
}
void buildtree(int l,int r,int x)
{
    if(l==r)
    {
        tr[x]=Mqpow(a[l]);
        return;
    }
    int m=(l+r)/2;
    buildtree(lson);
    buildtree(rson);
    tr[x]=tr[x<<1]+tr[x<<1|1];
}
void pushdown(int x)
{
    if(lazy[x].pss())
    {
        tr[x<<1]=tr[x<<1]*lazy[x];
        tr[x<<1|1]=tr[x<<1|1]*lazy[x];
        if(lazy[x<<1].pss()) lazy[x<<1]=lazy[x<<1]*lazy[x];
        else lazy[x<<1]=lazy[x];
        if(lazy[x<<1|1].pss()) lazy[x<<1|1]=lazy[x<<1|1]*lazy[x];
        else lazy[x<<1|1]=lazy[x];
        lazy[x].clr();
    }
}
void segmod(int L,int R,int val,int l,int r,int x)
{
    if(L==l&&R==r)
    {
        tr[x]=tr[x]*Mqpow(val);
        if(lazy[x].pss()) lazy[x]=lazy[x]*Mqpow(val);
        else lazy[x]=Mqpow(val);
        return;
    }
    pushdown(x);
    int m=(l+r)>>1;
    if(m>=R) segmod(L,R,val,lson);
    else if(m<L) segmod(L,R,val,rson);
    else{
        segmod(L,m,val,lson);
        segmod(m+1,R,val,rson);
    }
    tr[x]=tr[x<<1]+tr[x<<1|1];
}
Matrix query(int L,int R,int l,int r,int x)
{
    if(L==l&&R==r)
    {
        return tr[x];
    }
    pushdown(x);
    int m=(l+r)>>1;
    if(m>=R) return query(L,R,lson);
    else if(m<L) return query(L,R,rson);
    else return query(L,m,lson)+query(m+1,R,rson);
}
int main()
{
    int n,m,i,cc,ll,rr,xx;
    Matrix tmp;
    cin>>n>>m;
    for(i=1;i<=n;i++) scanf("%d",&a[i]);
    buildtree(1,n,1);
    for(i=0;i<m;i++)
    {
        scanf("%d%d%d",&cc,&ll,&rr);
        if(cc==1)
        {
            scanf("%d",&xx);
            segmod(ll,rr,xx,1,n,1);
        }else{
            tmp=query(ll,rr,1,n,1);
            printf("%d\n",tmp.a[1]);
        }
    }
    return 0;
}
