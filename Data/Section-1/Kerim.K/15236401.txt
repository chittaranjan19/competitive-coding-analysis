//~  Inshaallah
/*
ID: omarmuh1
PROG: test
LANG: C++
*/
#include <iostream>
#include <cmath>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <ext/pb_ds/assoc_container.hpp>
#include <queue>
#include <map>
#include <ctime>
#include <iomanip>
#include <string.h>
#include <stdio.h>
#include <set>

using namespace std;
using namespace __gnu_pbds;

#define ll long long
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define pp pop_back
#define pii pair<int ,int>
#define pil pair<int , ll>
#define pli pair<ll , int>
#define pll pair<ll , ll>
#define mid(x , y)	(x+y)/2
#define sz(x) int(x.size())
#define db		cout << "****" << endl;
#define all(x) 	x.begin() , x.end()
#define lgn 	19
#define minn	1009
#define maxn 	100007
#define INF 	1000000009
#define LLINF 	1000000000000000009
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
#define Help_me  ios_base::sync_with_stdio(false);

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> omar;

template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}

//~ ifstream cin("test.in");
//~ ofstream cout("test.out");

ll a , b , c , d[maxn] , n , m , T[maxn*4] , type , rr[maxn] , lz[maxn*4] , p[maxn];

void shift(int l , int r , int v)
{
	if(T[v] != 0)
	{
		int tr = (p[mid(l , r)] - p[l-1]) - lz[v*2];
		
		if(tr >= T[v])
			tr = T[v] , T[v] = 0;
		else
			T[v] -= tr;
		
		T[v*2] += tr;
		lz[v*2] += tr;
		T[v*2+1] += T[v];
		lz[v*2+1] += T[v];
		T[v] = 0;
	}
}

void upd(int x , int y , int l , int r , int v)
{
	if(y < l || r < x)
		return;
	
	if(x <= l && r <= y)
	{
		if(r == y)
		{
			T[v] += b;
			lz[v] += b;
			b = 0;
			return;
		}
		int tr = (p[r] - p[l-1]) - lz[v];
		
		if(tr >= b)
			tr = b , b = 0;
		else
			b -= tr;
		
		T[v] += tr;
		lz[v] += tr;
		return;
	}
	
	shift(l , r , v);
	
	upd(x , y , l , mid(l , r) , v*2);
	upd(x , y , mid(l , r)+1 , r , v*2+1);
}

ll bul(int x , int l , int r , int v)
{
	if(l == r)
		return T[v];
	
	shift(l , r , v);
	
	if(x <= mid(l , r))
		return bul(x , l , mid(l , r) , v*2);
	else
		return bul(x , mid(l , r)+1 , r , v*2+1);
}

int main()
{
	scanf("%lld" , &n);
	
	for(int i = 1 ; i <= n ; i++)	scanf("%lld" , d + i) , rr[i] = -d[i],  p[i] = p[i-1] + d[i];
	
	scanf("%lld" , &m);
	
	while(m--)
	{
		scanf("%lld" , &type);
		
		if(type == 1)
		{
			scanf("%lld%lld" , &a , &b);
			
			upd(a , n , 1 , n , 1);
		}
		else
		{
			scanf("%lld" , &a);
			
			printf("%lld\n" , min(d[a] , bul(a , 1 , n , 1)));
		}
	}
	
	return 0;
}
/*
10
71 59 88 55 18 98 38 73 53 58
20
1 5 93
1 7 69
2 3
1 1 20
2 10
1 6 74
1 7 100
1 9 14
2 3
2 4
2 7
1 3 31
2 4
1 6 64
2 2
2 2
1 3 54
2 9
2 1
1 6 86
*/
/*
0
0
0
0
38
0
0
0
53
20
*/