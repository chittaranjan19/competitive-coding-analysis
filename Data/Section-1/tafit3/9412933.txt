import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemA {
    BufferedReader rd;

    private ProblemA() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        Map<Integer, List<int[]>> m = new TreeMap<>();
        int n = pint();
        int[] dg = new int[n];
        int[] xr = new int[n];
        for(int i=0;i<n;i++) {
            int[] a = intarr();
            if(a[0] != 0) {
                dg[i] = a[0];
                xr[i] = a[1];
            }
        }
        List<int[]> edges = new ArrayList<>();
        boolean[] p = new boolean[n];

        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<n;i++) {
            if(dg[i] == 1) {
                q.add(i);
                p[i] = true;
            }
        }
        while(!q.isEmpty()) {
            int v = q.poll();
            dg[v]--;
            int next = xr[v];
            if(dg[next] > 0) {
                edges.add(new int[] { v, next });
                xr[next] ^= v;
                dg[next]--;
                if(dg[next] == 1 && !p[next]) {
                    p[next] = true;
                    q.add(next);
                }
            }
        }

        out(edges.size());
        for(int[] edge: edges) {
            out(edge[0]+" "+edge[1]);
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        int n = s.length();
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA();
    }
}
