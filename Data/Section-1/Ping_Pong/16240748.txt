#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long P = 239;
const long long MAX_N = 200000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

long long dp[2000][2001];

long long add(long long x, long long val)
{
    x += val;
    if (x >= MOD)
        x -= MOD;
    return x;
}

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("test.txt");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    long long n, m;
    cin >> n >> m;
    string s;
    cin >> s;
    long long bal = 0, min_bal = 0;
    for (long long i = 0; i < m; i++)
    {
        if (s[i] == '(')
            bal++;
        else
            bal--;
        min_bal = min(min_bal, bal);
    }
    long long bal1 = 0, min_bal1 = 0;
    for (long long i = m - 1; i >= 0; i--)
    {
        if (s[i] == ')')
            bal1++;
        else
            bal1--;
        min_bal1 = min(min_bal1, bal1);
    }
    dp[0][1] = 1;
    for (long long i = 0; i < 1999; i++)
        for (long long j = 0; j <= 2000; j++)
        {
            if (j > 0)
                dp[i + 1][j - 1] = add(dp[i + 1][j - 1], dp[i][j]);
            if (j <= 1999)
                dp[i + 1][j + 1] = add(dp[i + 1][j + 1], dp[i][j]);
        }
    /*for (long long i = 0; i < 4; i++)
    {
        for (long long j = 0; j <= 4; j++)
            cout << dp[i][j] << " ";
        cout << endl;
    }*/
    long long ans = 0;
    for (long long i = 0; i < 2000; i++)
        for (long long j = 0; j <= 2000; j++)
            if (m + i + 1 == n)
            {
                if ((j + bal == 0) && (j + min_bal >= 0))
                    ans = add(ans, dp[i][j]);
            }
            else if (m + i + 1 < n)
            {
                if (j + min_bal >= 0)
                {
                    long long len = n - m - i - 1 - 1;
                    long long cnt = j + bal;
                    if (cnt + min_bal1 >= 0 && cnt <= 2000)
                        ans = add(ans, (dp[i][j] * dp[len][cnt]) % MOD);
                }
            }
    if (m < n && bal >= 0 && bal + min_bal1 >= 0)
        ans = add(ans, dp[n - m - 1][bal]);
    cout << ans;
    return 0;
}
