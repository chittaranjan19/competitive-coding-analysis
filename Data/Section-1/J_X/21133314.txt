#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int maxn = 1e5 + 5;

int dp[maxn][3], l[maxn], r[maxn];

int main()
{
    int len, n, p, t;
    scanf("%d%d%d%d", &len, &n, &p, &t);
    for(int i = 1; i <= n; ++i) scanf("%d%d", l + i, r + i);
    for(int i = 1; i <= n; ++i)
    {
        dp[i][0] = *max_element(dp[i - 1], dp[i - 1] + 3);
        int tmp = (r[i] - l[i]) / p;
        int q = l[i] - t, k = lower_bound(r + 1, r + i, q) - r;
        if(k == i || q < l[k] + p) dp[i][1] = *max_element(dp[k - 1], dp[k - 1] + 3) + tmp;
        else dp[i][1] = max(dp[k][0], max(dp[k][1], dp[k][2]) - (r[k] - l[k]) / p + (q - l[k]) / p) + tmp;
        q = l[i] + (r[i] - l[i]) % p - t, k = lower_bound(r + 1, r + i, q) - r;
        if(k == i || q < l[k] + p) dp[i][2] = *max_element(dp[k - 1], dp[k - 1] + 3) + tmp;
        else dp[i][2] = max(dp[k][0], max(dp[k][1], dp[k][2]) - (r[k] - l[k]) / p + (q - l[k]) / p) + tmp;
    }
    printf("%d\n", *max_element(dp[n], dp[n] + 3));
    return 0;
}