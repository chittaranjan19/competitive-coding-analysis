import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int m = a[1];
        boolean[][] e = new boolean[n][n];
        for(int i=0;i<m;i++) {
            a = intarr();
            int u = a[0]-1;
            int v = a[1]-1;
            e[u][v] = true;
            e[v][u] = true;
        }
        boolean[] vis = new boolean[n];
        int[] g = new int[n];
        boolean ok = true;
        free:
        for(int i=0;i<n;i++) {
            if(!vis[i]) {
                boolean found = false;
                for(int j=0;j<n;j++) {
                    if(i != j && !e[i][j]) {
                        found = true;
                        break;
                    }
                }
                if(found) {
                    g[i] = 1;
                    vis[i] = true;
                    Queue<Integer> q = new ArrayDeque<>();
                    q.add(i);
                    while (!q.isEmpty()) {
                        int c = q.poll();
                        for (int j = 0; j < n; j++) {
                            if (c != j && !e[c][j]) {
                                if (!vis[j]) {
                                    vis[j] = true;
                                    q.add(j);
                                    g[j] = 4 - g[c];
                                } else if (g[j] != 4 - g[c]) {
                                    ok = false;
                                    break free;
                                }
                            }
                        }
                    }
                }
            }
        }
        if(ok) {
            vis = new boolean[n];
            free:
            for(int i=0;i<n;i++) {
                if(!vis[i]) {
                    vis[i] = true;
                    if(g[i] == 0) {
                        g[i] = 2;
                    }
                    Queue<Integer> q = new ArrayDeque<>();
                    q.add(i);
                    while(!q.isEmpty()) {
                        int c = q.poll();
                        for(int j=0;j<n;j++) {
                            if(c != j && e[c][j]) {
                                if(g[j] == 0) {
                                    g[j] = 2;
                                }
                                if(Math.abs(g[c] - g[j]) == 2) {
                                    ok = false;
                                    break free;
                                }
                                if(!vis[j]) {
                                    vis[j] = true;
                                    q.add(j);
                                }
                            }
                        }
                    }
                }
            }
        }
        out(ok?"Yes":"No");
        if(ok) {
            StringBuilder buf = new StringBuilder();
            for(int x: g) {
                buf.append((char)('a'+x-1));
            }
            out(buf);
        }
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
