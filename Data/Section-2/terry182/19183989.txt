#include <iostream>
#include <map>
#include <cmath>
using namespace std;
map<  long long int,  long long int > weight; // Cuz we only go up, use the po long long int of starting po long long int as index
 long long int find_route( long long int mode,  long long int u,  long long int v,  long long int w)
{    long long int ans = 0;
    while (u != v)
    {   if (v < u) swap(u, v);
        if (mode == 1) weight[v] += w;
        else ans += weight[v];
        v >>= 1;
    }
    return ans;
}
int main()
{    long long int q;
    cin >> q;
    for ( long long int k = 0; k < q; k++)
    {    long long int mode;
         long long int u, v, w;
        cin >> mode;
        if (mode == 1)
        {   cin >> v >> u >> w;
            find_route(1, u, v, w);
        }
        else if (mode == 2)
        {   cin >> v >> u;
            cout << find_route(2, u, v, 0) << endl;
        }
    }
}
