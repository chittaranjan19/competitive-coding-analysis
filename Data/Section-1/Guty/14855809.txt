#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint t;
	cin >> t;
	tint dp[31][31][51];
	forn(i,31)
	forn(j,31)
		dp[i][j][0] = 0;
	forsn(i,1,31)
	forsn(j,1,31)
	{
		if (i*j <= 50)
			dp[i][j][i*j] = 0;
	}
	forsn(k,1,51)
	forsn(i,1,31)
	forsn(j,1,31)
	{
		tint min1 = 999999999999, min2 = 999999999999;
		forsn(a,1,i)
		{
			if (k >= j*a)
				min1 = min(min1, dp[i-a][j][k-j*a] + j*j);
		}
		forsn(b,1,j)
		{
			if (k >= i*b)
				min2 = min(min2, dp[i][j-b][k-i*b] + i*i);
		}
		if (k == i*j)
			dp[i][j][k] = 0;
		else if (min(i,j) > k)
			dp[i][j][k] = min(i,j)*min(i,j) + 1;
		else if (min(i,j) == k)
			dp[i][j][k] = min(i,j)*min(i,j);
		else if (k == 1 && max(i,j) >= 2 && min(i,j) >= 2)
			dp[i][j][k] = min(i,j)*min(i,j) + 1;
		else if (k == 1)
			dp[i][j][k] = 1;

		else
			dp[i][j][k] = min(min1,min2);
	}
	forn(tt, t)
	{
		tint m,n,k;
		cin >> m >> n >> k;
		cout << dp[n][m][k] << endl;
	}
	
	
	
		
	return 0;
}



