
import java.io.*;
import java.util.List;
import java.util.StringTokenizer;

public class Q3 {
    public static MyScanner in = new MyScanner();
    public static PrintWriter out = in.MyOut();
    public static MyViewer view = new MyViewer();

    static class MyScanner {
        BufferedReader br;
        StringTokenizer st;

        public MyScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        int[] arrayInt(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = in.nextInt();
            }
            return a;
        }

        long[] arrayLong(int n) {
            long[] a = new long[n];
            for (int i = 0; i < n; i++) {
                a[i] = in.nextLong();
            }
            return a;
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        void close() {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        static PrintWriter MyOut() {
            return new PrintWriter(new BufferedOutputStream(System.out), true);
        }
    }

    static class MyViewer {
        static boolean print = false;

        public void on() {
            print = true;
        }

        public void off() {
            print = false;
        }

        public <T extends List> void list(T a) {
            if (!print) return;
            out.print("List: [" + a.get(0));
            for (int i = 1; i < a.size(); i++) {
                out.print(", " + a.get(i));
            }
            out.print("] Len: " + a.size());
        }

        public <T> void array(T[] a) {
            if (!print) return;
            out.print("Array: [" + a[0]);
            for (int i = 1; i < a.length; i++) {
                out.print(", " + a[i]);
            }
            out.print("] Len: " + a.length);
        }

        public void array(int[] a) {
            if (!print) return;
            out.print("int Array: [");
            for (int i = 0; i < a.length; i++) {
                out.print(a[i] + ", ");
            }
            out.print("'] Len: " + a.length);
        }

        public void array(long[] a) {
            if (!print) return;
            out.print("long Array: [");
            for (int i = 0; i < a.length; i++) {
                out.print(a[i] + ", ");
            }
            out.print("'] Len: " + a.length);
        }

        public void matrix(int[][] a, int cutoff) {
            if (cutoff == 0)
                cutoff = Integer.MAX_VALUE;
            for (int i = 0; i < a.length; i++) {
                if (i < cutoff) {
                    printMatrixRow(a[i], cutoff);
                } else {
                    out.println("     ...");
                    printMatrixRow(a[a.length - 1], cutoff);
                    break;
                }
            }
        }

        private void printMatrixRow(int[] a, int cutoff) {
            for (int j = 0; j < a.length; j++) {
                if (j < cutoff) {
                    out.printf("%6d  ", a[j]);
                } else {
                    out.printf(" ... %6d", a[a.length - 1]);
                    break;
                }
            }
            out.println();
        }
    }

    static class Node {
        long count = 0;
        Node odd;
        Node even;

        void add(long n) {
            if (n == 0) {
                count++;
                return;
            }
            if (n % 2 == 0) {
                if (even == null) {
                    even = new Node();
                }
                even.add(n / 10);
            } else {
                if (odd == null) {
                    odd = new Node();
                }
                odd.add(n / 10);
            }
        }

        void remove(long n) {
            if (n == 0) {
                count--;
                return;
            }
            if (n % 2 == 0) {
                if (even == null) {
                    even = new Node();
                }
                even.remove(n / 10);
            } else {
                if (odd == null) {
                    odd = new Node();
                }
                odd.remove(n / 10);
            }
        }

        long query(String q, int idx) {
            if (idx == -1 && even != null)
                return count + even.query(q, -1);
            if( idx == -1 && even == null)
                return count;
            if (q.charAt(idx) == '0') {
                if( even == null)
                    return count;
                return even.query(q, idx - 1);
            } else {
                if( odd == null)
                    return count;
                return (odd.query(q, idx - 1));
            }
        }
    }

    public static void main(String[] args) {

        int test_cases = in.nextInt();

        Node root = new Node();

        while (test_cases-- > 0) {
            String s = in.nextLine();
            String[] sp = s.split(" ");
            if (sp[0].compareTo("+") == 0) {
                root.add(Long.parseLong(sp[1]));
            } else if (sp[0].compareTo("-") == 0) {
                root.remove(Long.parseLong(sp[1]));
            } else {
                long ans = root.query( sp[1], sp[1].length() - 1);
                out.println(ans);
            }
        }

        in.close();
    }
}