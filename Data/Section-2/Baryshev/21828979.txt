/*
        *************        ****************        ***************             ***                 ***
        *************        ****************        ***************            *****              *** ***
        **                   ***           **        ***         ***           ***  ***           ***   ***
        **                   ****************        ***         ***          ***    ***         ***     ***
        *************        ****************        ***         ***         ***      ***       ***       ***
        *************        ********                ***         ***        ***        ***     ***         ***
        **                   ***   *****             ***         ***       ***          ***   ***           ***
        **                   ***      ****           ***************      ***            *** ***             ***
        **                   ***        ****         ***************     ***              ***                 ***


        **************      ****************      **************       **************       ****************
        **************      ****************      **************       **************       ****************
        ***         **      ***          ***      ***         **       **                   ***           **
        ***         **      ***          ***      ***         **       **                   ****************
        **************      ***          ***      **************       **************       ****************
        **************      ***          ***      **************       **************       ********
        ***         **      ***          ***      ***         **       **                   ***   *****
        ***         **      ***          ***      ***         **       **                   ***      ****
        ***         **      ***          ***      ***         **       **                   ***        ****
        **************      ****************      **************       **************       ***         ****
        **************      ****************      **************       **************       ***          ****
*/
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)
#define _ ?

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 1e4 + 2;
const int mod = 1e9 + 7;

int parent[MAX_N];

int find_parent(int n){
    if (parent[n] == n)
        return n;
    return parent[n] = find_parent(parent[n]);
}

int main()
{
    int kol[MAX_N] = {0, };
    int n, m;
    cin >> n >> m;
    for (int i = 0 ; i <= n; i++)
        parent[i] = i;
    pair<int, int> par[MAX_N];
    for (int i = 0; i < m; i++){
        int a, b;
        cin >> a >> b;
        int fi1 = find_parent(a);
        int fi2 = find_parent(b);
        parent[fi1] = parent[fi2];
    }
    ll step[50];
    step[0] = 1;
    for (int i = 1; i < 50; i++)
        step[i] = step[i - 1] * 2;
    vector <int> kek;
    for (int i = 1; i <= n; i++){
        find_parent(i);
        kol[parent[i]]++;
    }
    for (int i = 1 ; i <= n; i++)
        if (kol[i] > 0) kek.pb(kol[i]);
    ll ans = 1;
    sort(kek.rbegin(), kek.rend());
    //cout << kek[0] << endl;
    for (int i = 0; i < kek.size(); i++)
        ans = ans * step[kek[i] - 1];
    cout << ans;
    return 0;
}