#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;

struct cube
{
    ll sum;
    int em;
    cube(ll sum, int em) : sum(sum), em(em) {}
    friend bool operator < (cube a, cube b)
    {
        return a.sum < b.sum;
    }
};
typedef vector<cube>::iterator ite;
ll f[25], n, s, a[30], ans;
int k;
vector<cube> v;

void dfs1(int i, int n, int em, ll sum)
{
    if(i < n)
    {
        ll temp;
        if(sum <= s)
        {
//            v.push_back(cube(sum, em));
            dfs1(i + 1, n, em, sum);
        }
        if((temp = sum + a[i]) <= s)
        {
//            v.push_back(cube(temp, em));
            dfs1(i + 1, n, em, temp);
        }
        if(a[i] < 20 && em <= k && (temp = sum + f[a[i]]) <= s)
        {
//            v.push_back(cube(temp, em + 1));
            dfs1(i + 1, n, em + 1, temp);
        }
    }
    else
        v.push_back(cube(sum, em));
}

void dfs2(int i, int n, int em, ll sum)
{
    if(i < n)
    {
        ll temp;
        if(sum <= s)
        {
//            ite p = lower_bound(v.begin(), v.end(), cube(s - sum, 0));
//            for(; p != v.end() && p->sum == s - sum; p++)
//                if(p->em + em <= k)
//                    {ans++;
//                    cout << p->em << ' ' << em << ' ' << sum << ' ' << p->sum << endl;;}
            dfs2(i + 1, n, em, sum);
        }
        if((temp = sum + a[i]) <= s)
        {
//            ite p = lower_bound(v.begin(), v.end(), cube(s - temp, 0));
//            for(; p != v.end() && p->sum == s - temp; p++)
//                if(p->em + em <= k)
//                    {ans++;
//                    cout << p->em << ' ' << em << ' ' << temp << ' ' << p->sum << endl;;}
            dfs2(i + 1, n, em, temp);
        }
        if(a[i] < 20 && (temp = sum + f[a[i]]) <= s)
        {
//            ite p = lower_bound(v.begin(), v.end(), cube(s - temp, 0));
//            for(; p != v.end() && p->sum == s - temp; p++)
//                if(p->em + em + 1 <= k)
//                    {ans++;
//                    cout << p->em << ' ' << em << ' ' << temp << ' ' << p->sum<< endl;}
            dfs2(i + 1, n, em + 1, temp);
        }
    }
    else
    {
        for(ite p = lower_bound(v.begin(), v.end(), cube(s - sum, 0)); p != v.end() && p->sum == s - sum; p++)
            if(p->em + em <= k)
                ans++;
    }
}

int main()
{
    f[0] = 1;
    for(int i = 1; i < 20; i++)
        f[i] = i * f[i - 1];
    cin >> n >> k >> s;
    for(int i = 0; i < n; i++)
        cin >> a[i];
    sort(a, a + n);
    dfs1(0, n / 2, 0, 0);
    sort(v.begin(), v.end());
    dfs2(n / 2, n, 0, 0);
    cout << ans << endl;
    return 0;
}
