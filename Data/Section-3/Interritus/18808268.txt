/*input
6 18
5 6 1 10 12 2
*/
#include <bits/stdc++.h>
using namespace std;
#define sd(x) scanf("%d",&x);
#define slld(x) scanf("%lld",&x);
#define ss(x) scanf("%s",x);
#define sc(x) scanf("%c",&x);
#define LL long long
#define LD long double
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define bit(x,i) (x&(1<<i))  //select the bit of position i of x
#define lowbit(x) ((x)&((x)^((x)-1))) //get the lowest bit of x
#define pc1(x) cout<<x<<" ";
#define pc2(x,y) cout<<x<<" "<<y<<" "<<endl;
#define pc3(x,y,z) cout<<x<<" "<<y<<" "<<z<<" "<<endl;
#define pc4(w,x,y,z) cout<<w<<" "<<x<<" "<<y<<" "<<z<<" "<<endl;
#define pce(x) cout<<x<<endl;
#define ps0() cout<<endl;
#define ps1(x) cout<<#x<<" ";
#define ps2(x,y) cout<<#x<<" "<<y<<" "<<endl;
#define ps3(x,y,z) cout<<#x<<" "<<y<<" "<<z<<" "<<endl;
#define ps4(w,x,y,z) cout<<#w<<" "<<x<<" "#y<<" "<<z<<" "<<endl;
#define pse(x) cout<<#x<<endl;
#define GET_MACRO(_0, _1, _2, _3, _4, NAME, ...) NAME
#define GET_MACRO1(_1, _2, _3, _4, NAME, ...) NAME
#define ps(...) \
		do{if (DEBUG) GET_MACRO(_0, ##__VA_ARGS__, ps4, ps3, ps2, ps1, ps0)(__VA_ARGS__)} while(0);
#define pc(...) \
 		do{if (DEBUG) GET_MACRO1(__VA_ARGS__, pc4, pc3, pc2, pc1)(__VA_ARGS__)} while(0);
#define SSTR( x ) static_cast< std::ostringstream & >( \
        ( std::ostringstream() << std::dec << x ) ).str()
#define READ(filename)  freopen(filename, "r", stdin);
#define WRITE(filename)  freopen(filename, "w", stdout);

typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI; 

#define MOD 1000000007
#define DEBUG 0

#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0]))
 
static int total_nodes;
int q=0;
VVI z;
// prints subset found
void printSubset(int A[], int size)
{
	VI z1;

    for(int i = 0; i < size; i++)
    {
    	z1.PB(A[i]);
        // printf("%*d", 5, A[i]);
    }
 	z.PB(z1);
    // printf("\n");
}
 
// qsort compare function
int comparator(const void *pLhs, const void *pRhs)
{
    int *lhs = (int *)pLhs;
    int *rhs = (int *)pRhs;
 
    return *lhs > *rhs;
}
 
// inputs
// s            - set vector
// t            - tuplet vector
// s_size       - set size
// t_size       - tuplet size so far
// sum          - sum so far
// ite          - nodes count
// target_sum   - sum to be found
void subset_sum(int s[], int t[],
                int s_size, int t_size,
                int sum, int ite,
                int const target_sum)
{
    total_nodes++;
 
    if( target_sum == sum )
    {
        // We found sum
        printSubset(t, t_size);
 
        // constraint check
        if( ite + 1 < s_size && sum - s[ite] + s[ite+1] <= target_sum )
        {
            // Exclude previous added item and consider next candidate
            subset_sum(s, t, s_size, t_size-1, sum - s[ite], ite + 1, target_sum);
        }
        return;
    }
    else
    {
        // constraint check
        if( ite < s_size && sum + s[ite] <= target_sum )
        {
            // generate nodes along the breadth
            for( int i = ite; i < s_size; i++ )
            {
                t[t_size] = s[i];
 
                if( sum + s[i] <= target_sum )
                {
                    // consider next level node (along depth)
                    subset_sum(s, t, s_size, t_size + 1, sum + s[i], i + 1, target_sum);
                }
            }
        }
    }
}
 
// Wrapper that prints subsets that sum to target_sum
void generateSubsets(int s[], int size, int target_sum)
{
    int *tuplet_vector = (int *)malloc(size * sizeof(int));
 
    int total = 0;
 
    // sort the set
    qsort(s, size, sizeof(int), &comparator);
 
    for( int i = 0; i < size; i++ )
    {
        total += s[i];
    }
 
    if( s[0] <= target_sum && total >= target_sum )
    {
 
        subset_sum(s, tuplet_vector, size, 0, 0, 0, target_sum);
 
    }
 
    free(tuplet_vector);
}





int main()
{
	// int weights[] = {15, 22, 14, 26, 32, 9, 16, 8};
 //    int target = 53;
 
 //    int size = ARRAYSIZE(weights);
 	int n,k;
 	sd(n) sd(k)
 	int a[n];
 	for(int i=0;i<n;i++)
 	{
 		sd(a[i])	
 	}
    generateSubsets(a,n,k);
    // generateSubsets(weights, size, target);
    for(int i=0;i<z.size();i++)
    {
    	for(int j=0;j<z[i].size();j++)
    	{
    		pc(z[i][j])
    	}
    	ps()
    }
 	VVI z2;
	LL s;
 	for(int i=0;i<z.size();i++)
 	{
 		VI z21;
 		z21.PB(z[i][0]);
 		for(int j=1;j<z[i].size();j++)
 		{
 			// pc(z[i][j])
 			// pc(z21.size())
			s=z21.size();
 			for(int k=0;k<s;k++)
 			{
 				z21.PB(z21[k]+z[i][j]);
 			}
			z21.PB(z[i][j]);
 		}
 		z2.PB(z21);
 	}
 	VI za;
    for(int i=0;i<z2.size();i++)
    {
    	for(int j=0;j<z2[i].size();j++)
    	{
    		za.PB(z2[i][j]);
    		// pc(z2[i][j])
    	}
    	// ps()
    }
    sort(za.begin(),za.end());
    LL ma=za.size();
    int az[ma];
    az[0]=1;
    for(LL i=1;i<za.size();i++)
    {
    	if(za[i]==za[i-1])
    		az[i]==0;
    	else
    		az[i]=1;
    }
    int countas=1;
    for(LL i=0;i<za.size();i++)
    {
    	if(az[i]==1)
    		countas++;
    }

    printf("%d\n0 ",countas);
        for(LL i=0;i<za.size();i++)
    {
    	if(az[i]==1)
    		printf("%d ",za[i]);
    }
}
