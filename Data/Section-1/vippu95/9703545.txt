//Coder: Vipin Singh
#include<bits/stdc++.h>
using namespace std;

#define lli long long
#define pb push_back
#define mp make_pair
const int limit = 110;
vector< vector<int> > adj(26);
bool visited[26];
bool posi = true;
stack<int> mystack;
string a[limit];
vector<int> ans;
bool edge[30][30];

void DFS(int i){
    if(visited[i]){
        return;
    }
    visited[i]=true;
    for(int j=0;j<adj[i].size();j++){
        DFS(adj[i][j]);
    }
    mystack.push(i);
}

bool check(){
	int sz=ans.size()-1;
	for(int i=sz;i>=0;i--){
		for(int j=i-1;j>=0;j--){
			if(edge[ans[i]][ans[j]])
				return false;
		}
	}
	return true;
}

int main(){
    int n;
    char c1,c2;
    for(int i=0;i<30;i++){
		for(int j=0;j<30;j++)
			edge[i][j]=false;
	}
    for(int i=0;i<26;i++)
        visited[i]=false;
    scanf("%d",&n);
    string prev,s,nex;
    for(int i=0;i<n;i++){
        cin>>s;
        a[i]=s;
    }
    prev = a[0];
    for(int i=1;i<n;i++){
        nex = a[i];
        c1='#';
        c2='#';
        for(int j=0;j<prev.size() && j<nex.size() ; j++){
            if(prev[j] != nex[j]){
                c1=prev[j];
                c2=nex[j];
                break;
            }
        }
        if(c1==c2){
            if(nex.size() < prev.size() ){
                posi=false;
                break;
            }
            prev=nex;
            continue;
        }
        adj[c1-'a'].pb(c2-'a');
        edge[c1-'a'][c2-'a']=true;
        prev=nex;
    }
    for(int i=0;i<26;i++){
        if(!visited[i]){
            DFS(i);
        }
    }
    while(!mystack.empty()){
        ans.pb(mystack.top());
        mystack.pop();
    }
	if(!posi || !check()){
        cout<<"Impossible\n";
        return 0;
    }
    for(int i=0;i<ans.size();i++)
		cout<<(char)(ans[i]+97);
    cout<<endl;
}
