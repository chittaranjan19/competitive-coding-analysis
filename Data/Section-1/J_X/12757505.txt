#include <iostream>
#include <cstdio>
#include <map>
#include <queue>

using namespace std;

typedef pair<int, int> P;
typedef pair<P, int> PP;

const int maxn = 1e5 + 5;
const int dir[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

map<P, bool> mp, maze;
int h[maxn];

bool check(int x, int y)
{
    return maze[P(x - 1, y)] && maze[P(x, y - 1)] && maze[P(x + 1, y)] && maze[P(x, y + 1)];
}

bool ok(int x, int y)
{
    return maze[P(x, y)] && !mp[P(x, y)];
}

int main()
{
    int n;
    scanf("%d", &n);
    queue<PP> q;
    for(int i = 1; i <= n; ++i)
    {
        maze[P(i, 0)] = true;
        scanf("%d", h + i);
        for(int j = 1; j <= h[i]; ++j)
        {
            maze[P(i, j)] = true;
        }
    }
    for(int i = 1; i <= n; ++i)
    {
        mp[P(i, 0)] = true;
        for(int j = 1; j <= h[i]; ++j)
        {
            if(check(i, j)) continue;
            mp[P(i, j)] = true;
            q.push(PP(P(i, j), 1));
        }
    }
    int ans = 1;
    while(!q.empty())
    {
        PP p = q.front();
        q.pop();
        ans = max(ans, p.second);
        int x = p.first.first, y = p.first.second;
        for(int i = 0; i < 4; ++i)
        {
            int dx = x + dir[i][0], dy = y + dir[i][1];
            if(ok(dx, dy))
            {
                mp[P(dx, dy)] = true;
                q.push(PP(P(dx, dy), p.second + 1));
            }
        }
    }
    printf("%d\n", ans);
    return 0;
}
