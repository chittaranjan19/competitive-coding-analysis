#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<double,ll> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
ll BLOK,s[MAXN],m[MAXN],r[MAXN],bel[MAXN],last[MAXN],vis[MAXN],big[MAXN];
ll st[444][555],start[444];
ll en[444][555],end[444];
vector<PII>v[444];
ll solve(ll x,ll y,ll tm){
	ll res=0;
	for(ll i=x;i<=y;i++){
		res+=min(m[i],s[i]+(tm-last[i])*r[i]);
		s[i]=0;last[i]=tm;
	}
	return res;
}
ll get(ll x,ll tm){
	if(!vis[x]){
		vis[x]=1;big[x]=tm;
		return solve(start[x],end[x],tm);
	}
	ll gir=big[x];
	ll pos=lower_bound(all(v[x]),mp(double(tm-gir),-1LL))-v[x].begin();
	big[x]=tm;
	return st[x][pos-1]+en[x][pos]*(tm-gir);
}
void hopuk(ll x){
	for(ll i=start[x];i<=end[x];i++)
		last[i]=big[x];
	vis[x]=0;	
}
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif
	ll n;
	scanf("%lld",&n);
	BLOK=sqrt(n);
	for(ll i=1;i<=n;i++)
		scanf("%lld%lld%lld",s+i,m+i,r+i);
	ll cur=1,tin=0;
	for(ll i=1;i<=n;i++){
		bel[i]=cur;
		if(i%BLOK==0 or i==n){
			v[cur].pb(mp(-1,-1));
			start[cur]=tin+1;
			end[cur]=i;
			for(ll j=tin+1;j<=i;j++)
				v[cur].pb(mp((r[j]>0?double(double(m[j])/double(r[j])):INF),j));
			sort(all(v[cur]));
			for(ll j=1;j<ll(v[cur].size());j++)
				st[cur][j]=st[cur][j-1]+m[v[cur][j].ss];
			for(ll j=ll(v[cur].size())-1;j>=1;j--)
				en[cur][j]=en[cur][j+1]+r[v[cur][j].ss];
			tin=i;cur++;
		}
	}
	ll q;
	scanf("%lld",&q);
	while(q--){
		ll t,l,rr,flag1=0,flag2=0;
		scanf("%lld%lld%lld",&t,&l,&rr);
		if(bel[l]==bel[rr]){
			if(vis[bel[l]])
				hopuk(bel[l]);
			printf("%lld\n",solve(l,rr,t));
			continue;
		}
		ll ans=0;
		if(l>start[bel[l]]){
			if(vis[bel[l]])
				hopuk(bel[l]);
			ans+=solve(l,end[bel[l]],t);
			flag1=1;
		}
		if(rr<end[bel[rr]]){
			if(vis[bel[rr]])
				hopuk(bel[rr]);
			ans+=solve(start[bel[rr]],rr,t);
			flag2=1;
		}
		for(ll i=bel[l]+flag1;i<=bel[rr]-flag2;i++)
			ans+=get(i,t);
		printf("%lld\n",ans);
	}
	return 0;
}
