#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

int n, m;
char graph[1000][1000];
int dist1[1000][1000];
int dist2[1000][1000];
int dist3[1000][1000];
queue<pair<int, int> > q;

void bfs1()
{
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (graph[i][j] == '1')
            {
                dist1[i][j] = 0;
                q.push({i, j});
            }
    int x, y;
    while (!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        q.pop();
        if (x > 0 && graph[x - 1][y] != '#')
        {
            if (graph[x - 1][y] == '.' && (dist1[x][y] + 1) < dist1[x - 1][y])
            {
                dist1[x - 1][y] = dist1[x][y] + 1;
                q.push(make_pair(x - 1, y));
            }
            else if ((graph[x - 1][y] == '1' || graph[x - 1][y] == '2' || graph[x - 1][y] == '3') && dist1[x][y] < dist1[x - 1][y])
            {
                dist1[x - 1][y] = dist1[x][y];
                q.push(make_pair(x - 1, y));
            }
        }
        if (x < n - 1 && graph[x + 1][y] != '#')
        {
            if (graph[x + 1][y] == '.' && (dist1[x][y] + 1) < dist1[x + 1][y])
            {
                dist1[x + 1][y] = dist1[x][y] + 1;
                q.push(make_pair(x + 1, y));
            }
            else if ((graph[x + 1][y] == '1' || graph[x + 1][y] == '2' || graph[x + 1][y] == '3') && dist1[x][y] < dist1[x + 1][y])
            {
                dist1[x + 1][y] = dist1[x][y];
                q.push(make_pair(x + 1, y));
            }
        }
        if (y > 0 && graph[x][y - 1] != '#')
        {
            if (graph[x][y - 1] == '.' && (dist1[x][y] + 1) < dist1[x][y - 1])
            {
                dist1[x][y - 1] = dist1[x][y] + 1;
                q.push(make_pair(x, y - 1));
            }
            else if ((graph[x][y - 1] == '1' || graph[x][y - 1] == '2' || graph[x][y - 1] == '3') && dist1[x][y] < dist1[x][y - 1])
            {
                dist1[x][y - 1] = dist1[x][y];
                q.push(make_pair(x, y - 1));
            }
        }
        if (y < m - 1 && graph[x][y + 1] != '#')
        {
            if (graph[x][y + 1] == '.' && (dist1[x][y] + 1) < dist1[x][y + 1])
            {
                dist1[x][y + 1] = dist1[x][y] + 1;
                q.push(make_pair(x, y + 1));
            }
            else if ((graph[x][y + 1] == '1' || graph[x][y + 1] == '2' || graph[x][y + 1] == '3') && dist1[x][y] < dist1[x][y + 1])
            {
                dist1[x][y + 1] = dist1[x][y];
                q.push(make_pair(x, y + 1));
            }
        }
    }
}

void bfs2()
{
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (graph[i][j] == '2')
            {
                dist2[i][j] = 0;
                q.push({i, j});
            }
    int x, y;
    while (!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        q.pop();
        if (x > 0 && graph[x - 1][y] != '#')
        {
            if (graph[x - 1][y] == '.' && dist2[x][y] + 1 < dist2[x - 1][y])
            {
                dist2[x - 1][y] = dist2[x][y] + 1;
                q.push(make_pair(x - 1, y));
            }
            else if ((graph[x - 1][y] == '1' || graph[x - 1][y] == '2' || graph[x - 1][y] == '3') && dist2[x][y] < dist2[x - 1][y])
            {
                dist2[x - 1][y] = dist2[x][y];
                q.push(make_pair(x - 1, y));
            }
        }
        if (x < n - 1 && graph[x + 1][y] != '#')
        {
            if (graph[x + 1][y] == '.' && dist2[x][y] + 1 < dist2[x + 1][y])
            {
                dist2[x + 1][y] = dist2[x][y] + 1;
                q.push(make_pair(x + 1, y));
            }
            else if ((graph[x + 1][y] == '1' || graph[x + 1][y] == '2' || graph[x + 1][y] == '3') && dist2[x][y] < dist2[x + 1][y])
            {
                dist2[x + 1][y] = dist2[x][y];
                q.push(make_pair(x + 1, y));
            }
        }
        if (y > 0 && graph[x][y - 1] != '#')
        {
            if (graph[x][y - 1] == '.' && dist2[x][y] + 1 < dist2[x][y - 1])
            {
                dist2[x][y - 1] = dist2[x][y] + 1;
                q.push(make_pair(x, y - 1));
            }
            else if ((graph[x][y - 1] == '1' || graph[x][y - 1] == '2' || graph[x][y - 1] == '3') && dist2[x][y] < dist2[x][y - 1])
            {
                dist2[x][y - 1] = dist2[x][y];
                q.push(make_pair(x, y - 1));
            }
        }
        if (y < m - 1 && graph[x][y + 1] != '#')
        {
            if (graph[x][y + 1] == '.' && dist2[x][y] + 1 < dist2[x][y + 1])
            {
                dist2[x][y + 1] = dist2[x][y] + 1;
                q.push(make_pair(x, y + 1));
            }
            else if ((graph[x][y + 1] == '1' || graph[x][y + 1] == '2' || graph[x][y + 1] == '3') && dist2[x][y] < dist2[x][y + 1])
            {
                dist2[x][y + 1] = dist2[x][y];
                q.push(make_pair(x, y + 1));
            }
        }
    }
}

void bfs3()
{
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (graph[i][j] == '3')
            {
                dist3[i][j] = 0;
                q.push({i, j});
            }
    int x, y;
    while (!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        q.pop();
        if (x > 0 && graph[x - 1][y] != '#')
        {
            if (graph[x - 1][y] == '.' && dist3[x][y] + 1 < dist3[x - 1][y])
            {
                dist3[x - 1][y] = dist3[x][y] + 1;
                q.push(make_pair(x - 1, y));
            }
            else if ((graph[x - 1][y] == '1' || graph[x - 1][y] == '2' || graph[x - 1][y] == '3') && dist3[x][y] < dist3[x - 1][y])
            {
                dist3[x - 1][y] = dist3[x][y];
                q.push(make_pair(x - 1, y));
            }
        }
        if (x < n - 1 && graph[x + 1][y] != '#')
        {
            if (graph[x + 1][y] == '.' && dist3[x][y] + 1 < dist3[x + 1][y])
            {
                dist3[x + 1][y] = dist3[x][y] + 1;
                q.push(make_pair(x + 1, y));
            }
            else if ((graph[x + 1][y] == '1' || graph[x + 1][y] == '2' || graph[x + 1][y] == '3') && dist3[x][y] < dist3[x + 1][y])
            {
                dist3[x + 1][y] = dist3[x][y];
                q.push(make_pair(x + 1, y));
            }
        }
        if (y > 0 && graph[x][y - 1] != '#')
        {
            if (graph[x][y - 1] == '.' && dist3[x][y] + 1 < dist3[x][y - 1])
            {
                dist3[x][y - 1] = dist3[x][y] + 1;
                q.push(make_pair(x, y - 1));
            }
            else if ((graph[x][y - 1] == '1' || graph[x][y - 1] == '2' || graph[x][y - 1] == '3') && dist3[x][y] < dist3[x][y - 1])
            {
                dist3[x][y - 1] = dist3[x][y];
                q.push(make_pair(x, y - 1));
            }
        }
        if (y < m - 1 && graph[x][y + 1] != '#')
        {
            if (graph[x][y + 1] == '.' && dist3[x][y] + 1 < dist3[x][y + 1])
            {
                dist3[x][y + 1] = dist3[x][y] + 1;
                q.push(make_pair(x, y + 1));
            }
            else if ((graph[x][y + 1] == '1' || graph[x][y + 1] == '2' || graph[x][y + 1] == '3') && dist3[x][y] < dist3[x][y + 1])
            {
                dist3[x][y + 1] = dist3[x][y];
                q.push(make_pair(x, y + 1));
            }
        }
    }
}

int main()
{
    for (int i = 0; i < 1000; i++)
        for (int j = 0; j < 1000; j++)
            dist1[i][j] = 1e8;
    for (int i = 0; i < 1000; i++)
        for (int j = 0; j < 1000; j++)
            dist2[i][j] = 1e8;
    for (int i = 0; i < 1000; i++)
        for (int j = 0; j < 1000; j++)
            dist3[i][j] = 1e8;

    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; i++)
    {
        scanf("%c", &graph[i][0]);
        for (int j = 0; j < m; j++)
            scanf("%c", &graph[i][j]);
    }
    bfs1();
    bfs2();
    bfs3();

    /*printf("\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            printf("%d ", dist1[i][j]);
        printf("\n");
    }
    printf("\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            printf("%d ", dist2[i][j]);
        printf("\n");
    }
    printf("\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            printf("%d ", dist3[i][j]);
        printf("\n");
    }
    printf("\n");*/

    int ans = 10000000;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
        {
            if (graph[i][j] == '1' || graph[i][j] == '2' || graph[i][j] == '3')
                ans = min(ans, dist1[i][j] + dist2[i][j] + dist3[i][j]);
            else
                ans = min(ans, dist1[i][j] + dist2[i][j] + dist3[i][j] - 2);
        }
    if (ans == 10000000)
        printf("%d", -1);
    else
        printf("%d", ans);
}
