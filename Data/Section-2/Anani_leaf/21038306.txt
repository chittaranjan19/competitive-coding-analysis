#include<bits/stdc++.h>
#define Max(a,b) (a>b?a:b)
#define Min(a,b) (a>b?b:a)
using namespace std;
int const Max_N = 5000+5;
typedef __int64 ll;
struct Node 
{
	Node ()
	{
		memset(arr,0,sizeof(arr));
		tot = to = cost = 0;
	}
	int to;
	ll cost;
	bool operator < (const Node &a) const{cost < a.cost;}
	int tot;
	int arr[Max_N];
};
struct Node1
{
	
	int to;
	ll cost;
	
};
vector <Node1>head[Max_N];
int N,M;
ll k;
int cnt = 0;
Node ans;
void bfs()
{
	priority_queue<Node>que;
	Node t;
	t.cost = 0;
	t.to = 1;
	que.push(t);
	while(!que.empty())
	{
		t = que.top();
		que.pop();
		int u = t.to;
		for (int i = 0; i < head[u].size(); ++i)
		{
			Node1 tt = head[u][i];
			Node ttt = t;
			int v = tt.to;
			ttt.cost = t.cost + tt.cost;
			ttt.to = v;
			ttt.tot = t.tot + 1;
			ttt.arr[ttt.tot-1] = v;
			if(v == N)
			{
				if(ttt.cost > k) continue;
				if(ttt.tot > ans.tot) ans = ttt;
				break;
			}
			else if(ttt.cost > k) continue;
			que.push(ttt);
		}
	}
}
int main()
{
	cin >> N >> M >> k; 
	Node1 t;
	for (int i = 0; i < M;++i)
	{
		int u,v;
		ll co;
		scanf("%d%d%I64d",&u,&v,&co);
		t.to = v;
		t.cost = co;
		head[u].push_back(t);
	}
	bfs();
	printf("%d\n",ans.tot+1);
	printf("1");
	for (int i = 0; i < ans.tot;++i) printf(" %d",ans.arr[i]);
	printf("\n");
	return 0;
}

