#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <algorithm>
#include <queue>

using namespace std;

typedef long long ll;

const int maxn = 1200000 + 5;

bool check[maxn];
bool used[maxn];
ll sum1[maxn], sum2[maxn];

int fast_pow(int x, int n)
{
    int res = 1;
    while(n)
    {
        if(n & 1)
        {
            res *= x;
        }
        x *= x;
        n >>= 1;
    }
    return res;
}

int main()
{
    for(int i = 2; i < maxn; ++i)
    {
        if(!check[i])
        {
            sum1[i] = 1;
            for(int j = 2 * i; j < maxn; j += i)
            {
                check[j] = true;
            }
        }
    }
    queue<int> q;
    for(int i = 1; i <= 9; ++i)
    {
        sum2[i] = 1;
        sum2[i * 10 + i] = 1;
        sum2[i * 100 + 1] = 1;
        q.push(i);
        q.push(i * 10 + i);
        q.push(i * 100 + i);
    }
    while(!q.empty())
    {
        int u = q.front();
        q.pop();
        int cnt = 0, x = u;
        while(x)
        {
            x /= 10;
            ++cnt;
        }
        for(int i = 1; i <= 9; ++i)
        {
            x = u * 10 + i + i * fast_pow(10, cnt + 1);
            if(x > maxn || used[x]) continue;
            used[x] = true;
            q.push(x);
            sum2[x] = 1;

        }
    }
    for(int i = 1; i < maxn; ++i)
    {
        sum1[i] += sum1[i - 1];
        sum2[i] += sum2[i - 1];
    }
    int pp, qq;
    while(cin >> pp >> qq)
    {
        for(int i = maxn - 1; i >= 0; --i)
        {
            if(i == 0)
            {
                cout << "Palindromic tree is better than splay tree\n";
                break;
            }
            if((ll)qq * sum1[i] <= (ll)pp * sum2[i])
            {
                cout << i << endl;
                break;
            }
        }
    }
    return 0;
}
