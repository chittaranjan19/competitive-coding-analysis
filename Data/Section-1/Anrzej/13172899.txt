#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <ctime>
#include <stdio.h>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

ll n, m, k, a[100];
ll dp[20][(1 << 18) + 10];
ll g[100][100];

int cnt(int mask)
{
    int ans = 0;
    while (mask != 0){
        if (mask & 1)
            ans++;
        mask >>= 1;
    }
    return ans;
}

int main()
{
    //freopen("cranksft.in", "r", stdin);
    //freopen("cranksft.out", "w", stdout);
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    memset(g, 0, sizeof(g));
    memset(dp, 0, sizeof(dp));
    for (int i = 0; i < k; i++)
    {
        int u, v, c;
        cin >> u >> v >> c;
        g[u-1][v-1] = c;
    }
    for (int i = 0; i < n; i++)
        dp[i][1 << i] = a[i];
    for (int mask = 0; mask < (1 << n); mask++)
    {
        for (int i = 0; i < n; i++)
        {
            if (!(mask&(1 << i))) continue;
            for (int j = 0; j < n; j++)
            {
                if (mask&(1 << j)) continue;
                int nmask = mask | (1 << j);
                dp[j][nmask] = max(dp[j][nmask], dp[i][mask] + g[i][j] + a[j]);
            }
        }
    }
    ll ans = -1;
    for (int i = 0; i < (1 << n); i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (cnt(i) == m)
                ans = max(ans, dp[j][i]);
        }
    }
    cout << ans;
    return 0;
}