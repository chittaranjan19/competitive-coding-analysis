#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
const int MAX_n = 50, MAX_m = 50;
const int dir[4][2] = {{0,1},{1,0},{-1,0},{0,-1}};

int n,m;
char maze[MAX_n][MAX_m+1];
int color[MAX_n][MAX_m];
bool in(int a,int b,int x)
{   return a <= x && x < b; }
int dfs(int i,int j,int c)
{
    color[i][j] = c;
    int ret = 1;
    for(int k = 0; k < 4; ++k)
    {
        int x = i + dir[k][0], y = j + dir[k][1];
        if(in(0,n,x) && in(0,m,y) && maze[x][y] == '.' && color[x][y] == -1)
            ret += dfs(x,y,c);
    }
    return ret;
}

typedef pair<int,int>   P;
P choice[MAX_n*MAX_m];
void flood(int i,int j)
{
    maze[i][j] = '*';
    for(int k = 0; k < 4; ++k)
    {
        int x = i + dir[k][0], y = j + dir[k][1];
        if(in(0,n,x) && in(0,m,y) && maze[x][y] == '.')
            flood(x,y);
    }
}

int main()
{
    int k;
    scanf("%d%d%d",&n,&m,&k);
    for(int i = 0; i < n; ++i)
        scanf(" %s",maze[i]);

    memset(color,-1,sizeof color);
    for(int i = 0; i < n; ++i)
    {
        if(maze[i][0] == '.' && color[i][0] == -1)      dfs(i,0,-2);
        if(maze[i][m-1] == '.' && color[i][m-1] == -1)  dfs(i,m-1,-2);
    }
    for(int j = 0; j < m; ++j)
    {
        if(maze[0][j] == '.' && color[0][j] == -1)      dfs(0,j,-2);
        if(maze[n-1][j] == '.' && color[n-1][j] == -1)  dfs(n-1,j,-2);
    }

    int c = 0;
    for(int i = 0; i < n; ++i)
        for(int j = 0; j < m; ++j)
            if(maze[i][j] == '.' && color[i][j] == -1)
            {
                int pos = i*m + j;
                choice[c] = make_pair(dfs(i,j,c),pos);
                ++c;
            }

    sort(choice,choice+c);
    k = c - k;
    int ans = 0;
    for(int i = 0; i < k; ++i)
    {
        ans += choice[i].first;
        int p = choice[i].second;
        flood(p/m,p%m);
    }
    printf("%d\n",ans);
    for(int i = 0; i < n; ++i)
        printf("%s\n",maze[i]);
}
