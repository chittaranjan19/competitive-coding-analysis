#include <iostream>
#include <vector>
#include <string.h>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <math.h>

#define ll long long
#define pb push_back
#define mp make_pair
#define traverse(container, it) \
for(typeof(container.begin()) it = container.begin(); it!= container.end(); it++)
using namespace std;

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

int gcd(int a, int b){ if(b==0) return a; return gcd(b,a%b); }
int lcm(int a, int b) {return a*(b/gcd(a,b));}
void setbool(bool a[], int n, bool x){for(int i=0;i<n;i++){a[i] = x;}}
void setint(int a[], int n, int x){for(int i=0;i<n;i++){a[i] = x;}}

vector< int > graph[100001];
bool vis[100001];
int n, m, u, v;

bool checkCycles(int source, int parent)
{
    vis[source] = true;
    bool ans = false;
    traverse(graph[source], it)
    {
        if(vis[*it])
        {
            if(*it != parent)
            {
                return true;
            }
        }
        else
        {
            ans =  ans || checkCycles(*it, source);
        }
    }
    return ans;
}

vector<int> vect[2];
void dfs(int source, int x)
{
    vis[source] = true;
    if(!graph[source].empty())
    {
        vect[x].pb(source);
        
        traverse(graph[source], it)
        {
            if(!vis[*it])
            {
                dfs(*it, (x+1)%2);
            }
        }
    }
}

int main(int argc, const char * argv[])
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin>>n>>m;
    
    while(m--)
    {
        cin>>u>>v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    setbool(vis, n+1, false);
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            if(checkCycles(i,-1))
            {
                cout<<-1<<endl;
                return 0;
            }
        }
    }
    setbool(vis, n+1, false);
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            dfs(i, 0);
        }
    }
    
    cout<<vect[0].size()<<endl;
    traverse(vect[0], it)
    {
        cout<<*it<<" ";
    }
    cout<<endl;
    
    cout<<vect[1].size()<<endl;
    traverse(vect[1], it)
    {
        cout<<*it<<" ";
    }
    cout<<endl;
    return 0;
}
