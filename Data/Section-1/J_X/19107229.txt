#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const int maxn = 100;
const int mod = 1e9 + 7;

ll a[maxn + 10];
struct mat
{
    int r, c;
    int a[maxn][maxn];

    mat(int r = 0, int c = 0) : r(r), c(c)
    {
        memset(a, 0, sizeof(a));
    }
};

mat mul(const mat &a, const mat &b)
{
    mat c(a.r, b.c);
    for(int i = 0; i < a.r; ++i)
    {
        for(int j = 0; j < b.c; ++j)
        {
            for(int k = 0; k < a.c; ++k) c.a[i][j] = (c.a[i][j] + (ll)a.a[i][k] * b.a[k][j]) % mod;
        }
    }
    return c;
}

mat pow_mod(mat a, ll n)
{
    mat ret(a.r, a.c);
    for(int i = 0; i < a.r; ++i) ret.a[i][i] = 1;
    while(n)
    {
        if(n & 1) ret = mul(ret, a);
        a = mul(a, a);
        n >>= 1;
    }
    return ret;
}

int main()
{
    int n;
    ll m;
    scanf("%d%I64d", &n, &m);
    mat ma(n, n);
    for(int i = 0; i < n; ++i)
    {
        scanf("%I64d", a + i);
        for(int j = 0; j <= i; ++j) if((a[i] ^ a[j]) % 3 == 0) ma.a[i][j] = ma.a[j][i] = 1;
    }
    ma = pow_mod(ma, m - 1);
    int ans = 0;
    for(int i = 0; i < n; ++i)
    {
        for(int j = 0; j < n; ++j)
        {
            ans += ma.a[i][j];
            if(ans >= mod) ans -= mod;
        }
    }
    printf("%d\n", ans);
    return 0;
}
