#include <algorithm>
#include <fstream>
#include <iostream>
#include <queue>
using namespace std;
const int MAX_N = (1 << 16) + 5;
int sum[MAX_N], deg[MAX_N];

int main() {
    //ifstream cin("f.in");
    int n;
    cin >> n;
    queue<int> q;
    vector< pair<int, int> > edges;
    for (int i = 0; i < n; ++ i) {
        cin >> deg[i] >> sum[i];
        if (deg[i] == 1) {
            q.push(i);
        }
    }
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        if (deg[node] == 0) {
            continue;
        }
        int neigh = sum[node];
        edges.push_back(make_pair(node, neigh));
        sum[neigh] ^= node;
        -- deg[neigh];
        if (deg[neigh] == 1) {
            q.push(neigh);
        }
    }
    cout << edges.size() << "\n";
    for (int i = 0; i < static_cast<int>(edges.size()); ++ i) {
        cout << edges[i].first << " " << edges[i].second << "\n";
    }
    return 0;
}
