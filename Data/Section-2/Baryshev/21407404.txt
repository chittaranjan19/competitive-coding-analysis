#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef int ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 2e5;

int st[500][500] = {0, };
int use[500] = {0, };
int min_rast[500];
int n, m;

void bfs1(int j){
    deque <int> kek;
    kek.pb(j);
    min_rast[j] = 0;
    while(kek.size() != 0){
        int now = kek[0];
        kek.pop_front();
        if (use[now]) continue;
        use[now] = 1;
        for (int i = 1; i <= n; i++)
        if (!use[i] && st[now][i] != 1){
            min_rast[i] = min_rast[now] + 1;
            kek.push_back(i);
            use[i] = 1;
        }
    }
}

void bfs2(int j){
    deque <int> kek;
    kek.pb(j);
    min_rast[j] = 0;
    while(kek.size() != 0){
        //cout << "PROV" << endl;
        int now = kek[0];
        kek.pop_front();
        if (use[now]) continue;
        use[now] = 1;
        for (int i = 1; i <= n; i++)
        if (!use[i] && st[now][i] != 0){
            min_rast[i] = min_rast[now] + 1;
            kek.push_back(i);
            use[i] = 1;
        }
    }
}

int main(){
    for (int i = 0 ; i < 500; i++)
        min_rast[i] = 1e9;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++){
        int l, r, v;
        scanf("%d%d", &l, &r);
        st[l][r] = 1;
        st[r][l] = 1;
    }
    if (st[1][n] == 1){
        bfs1(1);
    }
    else bfs2(1);
   if (min_rast[n] == 1e9)
        cout << -1;
   else cout << min_rast[n];
    return 0;
}