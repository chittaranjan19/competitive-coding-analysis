#include<stdio.h>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;
#define pp pair<int,int>
vector<int> G[100005],T;
int p[100005]={0},id=0,cnt=0;
bool visited[100005]={false};
int index[100005]={0};

void dfs(int u)
{
    visited[u]=true;
    cnt++;
    G[id].push_back(u);
    if(!visited[p[u]])
        dfs(p[u]);
}
int main()
{
    int n,i,mx=1000000000,idx;
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
        scanf("%d",&p[i]);
    }
    for(i=1;i<=n;i++)
    {
        if(visited[i]==false)
        {
            cnt=0;
            dfs(i);
            index[id]=cnt;
            if(cnt<mx)
            {
                idx=id;
                mx=cnt;
            }
            T.push_back(cnt);
            id++;
        }
    }
    if(id<=1)
    {
        printf("NO\n");
        return 0;
    }
    sort(T.begin(),T.end());
    //printf("mx=%d\n",mx);
    
    for(i=1;i<T.size();i++)
    {
        if((T[i]%T[0])!=0)
        {
            printf("NO\n");
            return 0;
        }
    }
    if(mx&1 && mx>1)
    {
        printf("NO\n");
        return 0;
    }
    printf("YES\n");
    for(i=1;i<G[idx].size();i++)
    {
        printf("%d %d\n",G[idx][i-1],G[idx][i]);
    }
    for(i=0;i<id;i++)
    {
        if(i==idx)
            continue;
        int j;
        for(j=0;j<G[i].size();j++)
        {
            printf("%d %d\n",G[idx][j%mx],G[i][j]);
        }
    }
    return 0;
}