#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

// CRIBA

//const tint maxN = 1000500;
//int p[maxN + 1] = {1, 1};
//
//map<tint,tint> factorizar (tint n)
//{
//	map<tint,tint> f;
//	while (n > 1) 
//	{ 
//		f[p[n]]++;
//		n /= p[n]; 
//	}
//	return f;
//}
// ESTO VA EN EL MAIN
//	for (int i = 1; i <= maxN; ++i)
//		if (p[i] == 1)
//			for (int j = i; j <= maxN; j += i)
//				p[j] = i;



int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	string s;
	while (cin >> s)
	{
		vector<tint> acc (26);
		tint n = s.size();
		bool sePuede = true;
		forn(i,n)
		{
			if (i < n-1 && s[i] == s[i+1])
				sePuede = false;
			acc[s[i]-'A']++;
		}
		if (sePuede)
		{
			
			tint x = -1;
			forn(i,26)
				if (acc[i] == 2)
					x = i;
			char X = char('A' + char(x));
			
			deque<char> s1,s2,s3;
			tint p = 0;
			forn(i,n)
			{
				p += (s[i] == X);
				if (s[i] != X && p == 0)
					s1.push_front(s[i]);
				else if (s[i] != X && p == 1)
					s2.push_front(s[i]);
				else if (s[i] != X && p == 2)
					s3.push_front(s[i]);
			}
			tint a1 = s1.size(), a2= s2.size(), a3 = s3.size();
			string ss;
			for (auto q : s3)
				ss.push_back(q);
			ss.push_back(X);
			for (auto q : s2)
				ss.push_back(q);
			for (auto q : s1)
				ss.push_back(q);
			tint k = a3-a1 - a2 % 2;
			forn(i,13)
				cout << ss[(i+k+26)%26];
			cout << "\n";
			forn(i,13)
				cout << ss[(52-i-1+k)%26];
			cout << "\n";
				
				
		}
		else
			cout << "Impossible\n";
	}
	return 0;
}



