#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

int main() {
    // freopen("660A.in", "r", stdin);

    // erastotheness
    vb is_prime(10000, true);
    vi primes;
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= 10000; ++i) {
    	primes.pub(i);
    	if (is_prime[i]) {
    		for (int j = i; i*j <= 10000; ++j) {
    			is_prime[i*j] = false;
    		}
    	}
    }
    
    int n;
    scanf("%d", &n);
    vi arr(n);
    loop(it, n)
    	scanf("%d", &arr[it]);

    vi arr_ans;
    loop(idx, n-1) {
    	int &val = arr[idx];
    	int &next_val = arr[idx+1];
    	arr_ans.pub(val);
    	int gcd = __gcd(val, next_val);
    	if (gcd != 1) {
    		iterate(prime_p, primes) {
    			if (__gcd(gcd, *prime_p) == 1) {
    				arr_ans.pub(*prime_p);
    				break;
    			}
    		}
    	}
    }
    arr_ans.pub(arr.back());
    printf("%d\n", (int)(arr_ans.size()-arr.size()));
    loop(idx, arr_ans.size()) {
    	if (idx) {
    		printf(" ");
    	}
    	printf("%d", arr_ans[idx]);
    }

    return 0;
}