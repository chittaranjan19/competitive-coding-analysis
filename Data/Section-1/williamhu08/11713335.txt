#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 2e5 + 10;

int N, A[MAXN];
int ans[MAXN], bit[MAXN];
vector<int> V[MAXN];

void update (int x, int v) {
	for (x++; x < MAXN; x += (x & -x)) {
		bit[x] += v;
	}
}

int query (int x) {
	int s = 0;
	for (x++; x; x &= x - 1) {
		s += bit[x];
	}
	return s;
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d", &N);
	vector<int> vall;
	for (int i = 0; i < N; i++) {
		scanf("%d", &A[i]);
		vall.push_back(A[i]);
	}
	sort(all(vall));
	vall.resize(unique(all(vall)) - vall.begin());
	for (int i = 0; i < N; i++) {
		A[i] = lower_bound(all(vall), A[i]) - vall.begin();
		V[A[i]].push_back(i);
	}
	//tony ho = ohynot
	for (int i = 0; i < vall.size(); i++) {
		//yea let's just calculate that!!! AHAHAHAHA
		for (int p : V[i]) {
			for (int j = 1; j < N; j++) {
				//the interval is mr willy wonka: [j * p + 1, j * p + j]
				int lt = j * p + 1, rt = min(N - 1, j * p + j);
				if (lt > N) {
					break;
				}
				//count the # of 1's in that interval
				ans[j] += query(rt) - query(lt - 1);
			}
		}
		//NOW UPDATE THEM
		for (int p : V[i]) {
			update(p, 1);
		}
	}
	for (int i = 1; i < N; i++) {
		printf("%d ", ans[i]);
	}
}