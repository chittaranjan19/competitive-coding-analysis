#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 2000006
#define base 31
#define maxC 1000000007
#define mp make_pair

using namespace std;
int n, k, sz, g, siz;
string s, gam;
long long hashVal[mn], po[mn];
map<long long, int> game;
map< pair<long long, int> , int > mark;
bool good[mn];

void buildHash()
{
    po[0] = 1;
    FOR(i, 1, sz)
    {
        good[i] = true;
        po[i] = (po[i - 1] * base) % maxC;
        hashVal[i] = (hashVal[i - 1] * base + s[i - 1] - 'a' + 1) % maxC;
    }
}

void getGame(int id)
{
    cin >> gam;
    long long hashVal = 0;
    FOR(i, 0, k - 1)
        hashVal = (hashVal * base + gam[i] - 'a' + 1) % maxC;
    game[hashVal] = id;
}

long long getHash(int l, int r)
{
    long long re = (hashVal[r] - hashVal[l - 1] * po[r - l + 1]) % maxC;
    return (re + maxC) % maxC;
}

void setup()
{
    cin >> n >> k >> s;
    siz = s.size();
    s = s + s;
    sz = s.size();
    buildHash();
    cin >> g;
    FOR(i, 1, g)
        getGame(i);
}

void xuly()
{
    int belong = 0;
    FOR(i, 1, n * k)
    {
        long long has = getHash(i, i + k - 1);
        if (++ belong > k)
            belong = 1;
        if (game[has] == 0 || mark[mp(has, belong)])
            good[belong] = false;
        else
            mark[mp(has, belong)] = 1;
    }
    FOR(i, 1, k)
    if (good[i])
    {
        cout << "YES\n";
        int l = i, r = i + k - 1;
        FOR(p, 0, n - 1)
        {
            cout << game[getHash(l, r)] << ' ';
            l = r + 1;
            r = l + k - 1;
        }
        return;
    }
    cout << "NO";
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
