#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 1000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int a[MAX_N][3];

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int x1, y1, x2, y2;
    cin >> x1 >> y1 >> x2 >> y2;
    int n;
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> a[i][0] >> a[i][1] >> a[i][2];
    if (x2 < x1)
    {
        x1 += x2;
        x2 = x1 - x2;
        x1 -= x2;
    }
    if (y2 < y1)
    {
        y1 += y2;
        y2 = y1 - y2;
        y1 -= y2;
    }
    int ans = 2 * (x2 - x1) + 2 * (y2 - y1);
    for (int i = x1; i <= x2; i++)
        for (int j = 0; j < n; j++)
            if ((a[j][0] - i) * (a[j][0] - i) + (a[j][1] - y1) * (a[j][1] - y1) <= a[j][2] * a[j][2])
            {
                ans--;
                break;
            }
    for (int i = x1; i <= x2; i++)
        for (int j = 0; j < n; j++)
            if ((a[j][0] - i) * (a[j][0] - i) + (a[j][1] - y2) * (a[j][1] - y2) <= a[j][2] * a[j][2])
            {
                ans--;
                break;
            }
    for (int i = y1 + 1; i < y2; i++)
        for (int j = 0; j < n; j++)
            if ((a[j][0] - x1) * (a[j][0] - x1) + (a[j][1] - i) * (a[j][1] - i) <= a[j][2] * a[j][2])
            {
                ans--;
                break;
            }
    for (int i = y1 + 1; i < y2; i++)
        for (int j = 0; j < n; j++)
            if ((a[j][0] - x2) * (a[j][0] - x2) + (a[j][1] - i) * (a[j][1] - i) <= a[j][2] * a[j][2])
            {
                ans--;
                break;
            }
    cout << ans;
    return 0;
}