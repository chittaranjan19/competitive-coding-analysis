/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define set(a,b) fill(all(a),b)
#define let(x,a) __typeof(a) x(a)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define piw(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define all(a) (a).begin(),(a).end()
#define sorti(a) sort(all(a))
#define sortd(a) sort(a.rbegin(),a.rend()) 
#define len(s) s.length()
#define sz(s) s.size()
#define endl '\n'
#define nl printf("\n");
#define present1(c,x) ((c).find(x) != (c).end()) 
#define present2(c,x) (find(all(c),x) != (c).end())
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define PLL pair<LL,LL>
#define VI vector<int>
#define SI set<int>
#define VPII vector< PII >
#define SPII set< PII >
#define mod (int)1e9+7
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}


	VI parent;
	VI rank;
	VI setSize;
	int noOfSets;
	void UnionFind(int n)
	{
		parent.assign(n,0);
		rep1(i,n) parent[i]=i;
		rank.assign(n,0);
		setSize.assign(n,1);
		noOfSets=n;
	}
	int findSet(int n)
	{
		if(n==parent[n]) return n;
		return parent[n]=findSet(parent[n]);	// Path compression
	}
	int setUnion(int a, int b)
	{
		a=findSet(a);
		b=findSet(b);
		if(a==b) return a;
		noOfSets--;
		if(rank[a]>rank[b])
		{
			parent[b]=a;
			setSize[a]+=setSize[b];
			return a;
		}
		else
		{
			parent[a]=b;
			setSize[b]+=setSize[a];
			if(rank[a]==rank[b]) rank[b]++;
			return b;
		}
	}
	int size(int n)
	{
		return setSize[findSet(n)];
	}


int Z;

class SegmentTree
{
public: 
	vector<int> st;
	int left(int p)
	{
		return (p<<1)+1;
	}
	int right(int p)
	{
		return (p<<1)+2;
	}
	void build(int p, int l, int r)
	{
		if(l==r) st[p]=l;
		else
		{
			build(left(p),l,(l+r)/2);
			build(right(p),(l+r)/2+1,r);
			st[p] = -1;
		}
	}
	SegmentTree(int n)
	{
		st.assign(4*n,0);
		build(0,0,n-1);
	}
	void update1(int pos, int l, int r, int j, int k)
	{
		if(k>r || k<l || l>r) return;
		if(l==r)
		{
			if(r!=j && r!=k) return;
			while(1)
			{
				if(pos && st[(pos-1)/2]!=-1) pos=(pos-1)/2;
				else break;
			}
			Z=setUnion(Z,st[pos]);
			return;
		}
		if(k<=(l+r)/2) update1(left(pos),l,(l+r)/2,j,k);
		else update1(right(pos),(l+r)/2+1,r,j,k);
	}
	int update2(int pos, int l, int r, int i, int j)
	{
		if(i>r || j<l || l>r) return inf;
		if(i<=l && r<=j)
		{
			if(st[pos]!=-1) return st[pos]=setUnion(st[pos],Z);
			int a=update2(left(pos),l,(l+r)/2,i,j);
			int b=update2(right(pos),(l+r)/2+1,r,i,j);
			setUnion(Z,a);
			return st[pos]=setUnion(a,b);
		}
		int a=update2(left(pos),l,(l+r)/2,i,j);
		int b=update2(right(pos),(l+r)/2+1,r,i,j);
	}
};

int main()
{
	int n,q,type,a,b;
	cin>>n>>q;
	SegmentTree ST(n);
	UnionFind(n);
	while(q--)
	{
		cin>>type>>a>>b;
		a--; b--;
		if(type==1)
		{
			Z=a;
			ST.update1(0,0,n-1,a,b);
		}
		else if(type==2)
		{
			Z=a;
			ST.update2(0,0,n-1,a,b);
		}
		else
		{
			if(findSet(a)==findSet(b))
			{
				cout<<"YES"<<endl;
			}
			else
			{
				cout<<"NO"<<endl;
			}
		}
	}
	return 0;
}