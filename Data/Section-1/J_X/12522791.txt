#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

const int maxn = 500000 + 5;

int rid[maxn], son[maxn][2], tot, mh, cnt;
struct edge
{
    int to, next;
    edge(int to = 0, int next = 0) : to(to), next(next) {}
} E[maxn];
struct node
{
    int h, x;
    node(int h = 0, int x = 0) : h(h), x(x) {}
    friend bool operator < (const node &a, const node &b)
    {
        if(a.h != b.h) return a.h < b.h;
        return a.x < b.x;
    }
};
bool sum[26][maxn];
vector<node> v;
int head[maxn];
char s[maxn + 1];

void addedge(int u, int v)
{
    E[cnt] = edge(v, head[u]);
    head[u] = cnt++;
}

void dfs(int u, int h)
{
    son[u][0] = ++tot;
    rid[tot] = u;
    mh = max(mh, h);
    v.push_back(node(h, tot));
    for(int i = head[u]; ~i; i = E[i].next)
    {
        dfs(E[i].to, h + 1);
    }
    son[u][1] = tot;
}

bool check(int x, int y)
{
    bool flag = true;
    for(int i = 0; i < 26; ++i)
    {
        bool temp = sum[i][y] ^ sum[i][x];
        if(temp)
        {
            if(!flag) return false;
            flag = false;
        }
    }
    return true;
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    cnt = tot = mh = 0;
    memset(head, -1, sizeof(head));
    for(int i = 2; i <= n; ++i)
    {
        int u;
        scanf("%d", &u);
        addedge(u, i);
    }
    scanf("%s", s + 1);
    dfs(1, 1);
    sort(v.begin(), v.end());
    for(int i = 0; i < 26; ++i)
    {
        sum[i][0] = 0;
        for(int j = 0; j < v.size(); ++j)
        {
            sum[i][j + 1] = s[rid[v[j].x]] - 'a' == i ? !sum[i][j] : sum[i][j];
        }
    }
    while(m--)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        if(y > mh)
        {
            puts("Yes");
            continue;
        }
        int k = lower_bound(v.begin(), v.end(), node(y, son[x][0])) - v.begin();
        int l = upper_bound(v.begin(), v.end(), node(y, son[x][1])) - v.begin();
        if(k == l)
        {
            puts("Yes");
            continue;
        }
        puts(check(k, l) ? "Yes" : "No");
    }
    return 0;
}
