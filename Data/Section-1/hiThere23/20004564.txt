#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 2003
#define maxC 1000000007
#define pb push_back
#define midLR ((l + r) >> 1)
#define midUD ((u + d) >> 1)

using namespace std;
int n, m, k, q, val[mn][mn], mark[mn][mn];
bool in[mn];
string s;

struct node
{
    int l, u, r, d;
    long long num;
    vector<node*> child;

    node(int l = 0, int u = 0, int r = 0, int d = 0): l(l), u(u), r(r), d(d)
    {
        num = 0;
        child.clear();
    }
};

node* build(int l, int u, int r, int d, int x)
{
    node* re = new node(l, u, r, d);
    if (l == r && u == d)
    {
        if (mark[l][u] == x)
            re -> num = val[l][u];
        return re;
    }
    if (l == r)
    {
        re -> child.pb(build(l, u, r, midUD, x));
        re -> child.pb(build(l, midUD + 1, r, d, x));
    }
    if (u == d)
    {
        re -> child.pb(build(l, u, midLR, d, x));
        re -> child.pb(build(midLR + 1, u, r, d, x));
    }
    if (l != r && u != d)
    {
        re -> child.pb(build(l, u, midLR, midUD, x));
        re -> child.pb(build(midLR + 1, u, r, midUD, x));
        re -> child.pb(build(l, midUD + 1, midLR, d, x));
        re -> child.pb(build(midLR + 1, midUD + 1, r, d, x));
    }
    FOR(i, 0, int(re -> child.size()) - 1)
        re -> num += re -> child[i] -> num;
    return re;
}

bool check(int l, int u, int r, int d, node* cur)
{
    return (l <= cur -> l && cur -> r <= r && u <= cur -> u && cur -> d <= d);
}

bool inside(int x, int y, node* cur)
{
    if (cur -> u > x || cur -> d < x)
        return false;
    if (cur -> l > y || cur -> r < y)
        return false;
    return true;
}

bool cover(int l, int u, int r, int d, node* cur)
{
    if (inside(u, l, cur))
        return true;
    if (inside(u, r, cur))
        return true;
    if (inside(d, l, cur))
        return true;
    if (inside(d, r, cur))
        return true;
    return false;
}

long long get(node* cur, int l, int u, int r, int d)
{
    if (!cover(l, u, r, d, cur))
        return 0;
    if (cur -> num == 0)
        return 0;
    if (check(l, u, r, d, cur))
        return cur -> num;
    long long ans = 0;
    FOR(i, 0, int(cur -> child.size()) - 1)
        ans += get(cur -> child[i], l, u, r, d);
    return ans;
}

vector<node*> root;

void setup()
{
    cin >> n >> m >> k;
    int x, y, sz;
    FOR(u, 1, k)
    {
        cin >> sz;
        FOR(i, 1, sz)
        {
            cin >> x >> y;
            cin >> val[x][y];
            mark[x][y] = u;
        }
        root.pb(build(1, 1, m, n, u));
        in[u] = true;
    }
    cin >> q;
}

void xuly()
{
    int l, u, r, d;
    long long ans;
    FOR(i, 1, q)
    {
        cin >> s;
        if (s[0] == 'S')
        {
            cin >> u;
            in[u] ^= 1;
        }
        else
        {
            cin >> u >> l >> d >> r;
            ans = 0;
            FOR(j, 1, k)
            if (in[j])
                ans += get(root[j - 1], l, u, r, d);
            cout << ans << '\n';
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
