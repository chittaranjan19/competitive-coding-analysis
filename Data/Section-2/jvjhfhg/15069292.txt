#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>

template <class T>
void read(T &x) {
    register char ch; register bool nega;
    x = nega = 0;
    for (ch = getchar(); ch < '0' || ch > '9'; ch = getchar()) nega |= (ch == '-');
    for (; ch >= '0' && ch <= '9'; ch = getchar()) x = x * 10 + ch - '0';
    if (nega) x = -x;
}

struct beacon {
    int a, b;
    bool operator < (const beacon &rhs) const {
        return a < rhs.a;
    }
    void input() {
        read(a); read(b);
    }
} bea[100005];

int n, dp[100005], x[100005];

namespace BIT {
    int c[100005];
    #define lowbit(t) (t & -t)
    void update(int a, int x) {
        if (a <= 0) return;
        for (int i = a; i <= n; i += lowbit(i))
            c[i] = std::max(c[i], x);
    }
    int query(int a) {
        if (a <= 0) return 0;
        int ret = 0;
        for (int i = a; i; i -= lowbit(i))
            ret = std::max(ret, c[i]);
        return ret;
    }
}

int hash(int k) {
    return std::lower_bound(x + 1, x + n + 1, k) - x;
}

int main() {
    read(n);
    for (int i = 1; i <= n; i++) bea[i].input();
    std::sort(bea + 1, bea + n + 1);
    for (int i = 1; i <= n; i++) x[i] = bea[i].a;
    
    int ans = 0;
    for (int i = 1; i <= n; i++) {
        dp[i] = BIT::query(hash(bea[i].a - bea[i].b) - 1) + 1;
        ans = std::max(ans, dp[i]);
        BIT::update(i, dp[i]);
    }
    
    printf("%d", n - ans);
    
    return 0;
}