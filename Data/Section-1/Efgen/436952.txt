import java.io.*;
import java.util.*;
import java.math.*;

public class Main implements Runnable {
	int[] p = new int[222];
	boolean[] f=  new boolean[222];
	int find(int x) {
		if (p[x]==x) return x;
		return p[x] = find(p[x]);
	}
	void link(int x, int y) {
		p[x] = y;
	}
	
	void solve() throws IOException {
		int n = nextInt();
		int m = 201;
		int[][] a = new int[m][m];
		for (int i=0; i<n*(n-1)/2; i++) {
			int cnt = nextInt();
			int[] b = new int[cnt];
			for (int j=0; j<cnt; j++) {
				b[j] = nextInt();
				f[b[j]] = true;
			}
			Arrays.sort(b);
			for (int j=0; j<cnt; j++)
				for (int k=j+1; k<cnt; k++)
					a[b[j]][b[k]]++;
		}
		for (int i=0; i<p.length; i++)
			p[i] = i;
		int sz = n-1;
		for (int i=0; i<m; i++)
			for (int j=i+1; j<m; j++)
				if (a[i][j]==sz) {
					int x = find(i);
					int y = find(j);
					if (x!=y) link(x, y);
				}

		HashMap<Integer, TreeSet<Integer>> map = new HashMap<Integer, TreeSet<Integer>>();
		for (int i=0; i<p.length; i++) 
			if (f[i]) {
				int r = find(i);
				if (!map.containsKey(r))
					map.put(r, new TreeSet<Integer>());
				map.get(r).add(i);
			}
		if (map.size()!=n) {
			if (n==2) {
				for (int i=0; i<p.length; i++) {
					if (f[i]) out.println("1 "+i);
				}
				return;
			}
			System.exit(1);
		}
		for (int key:map.keySet()) {
			TreeSet<Integer> t = map.get(key);
			out.print(t.size());
			for (int x:t) out.print(" "+x);
			out.println();
		}
		
				
		
		
		
	}

	BufferedReader br;
	StringTokenizer st;
	PrintWriter out;

	public void run() {
		try {
			// br = new BufferedReader(new FileReader(FileName+".in"));
			// out = new PrintWriter(FileName+".out");
			br = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);
			// br = new BufferedReader(new FileReader("input.txt"));
			// out = new PrintWriter("output.txt");
			solve();
			br.close();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(0);
		}
	}

	String next() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			st = new StringTokenizer(s);
		}
		return st.nextToken();
	}

	double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}

	int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	public static void main(String[] args) {
		new Thread(new Main()).start();
	}
}
