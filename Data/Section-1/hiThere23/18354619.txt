#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define maxC 2000000007
#define mn 100005
#define pb push_back
#define mp make_pair
#define F first
#define S second

using namespace std;
int n, m, num = 0, root[mn];
pair<int, int> h[mn];

struct node
{
    int best, lef, rig, num;

    node()
    {
        best = lef = rig = num = 0;
    }

    node(int dot, int _num)
    {
        best = lef = rig = dot;
        num = _num;
    }
};

node better(node a, node b)
{
    node re;
    re.num = a.num + b.num;
    if (a.lef == a.num)
        re.lef = a.lef + b.lef;
    else
        re.lef = a.lef;
    if (b.rig == b.num)
        re.rig = a.rig + b.rig;
    else
        re.rig = b.rig;
    re.best = max(max(a.best, b.best), a.rig + b.lef);
    return re;
}

struct persistentTree
{
    node tree[mn * 30];
    int lc[mn * 30], rc[mn * 30];

    void build(int l, int r)
    {
        tree[++ num] = node(0, r - l + 1);
        if (l == r)
            return;
        int g = ((l + r) >> 1);
        build(l, g);
        build(g + 1, r);
    }

    int update(int l, int r, int id, int x)
    {
        if (l == r)
        {
            tree[++ num] = node(1, 1);
            return num;
        }
        int g = ((l + r) >> 1);
        int re = ++ num;
        if (x <= g)
        {
            lc[re] = update(l, g, lc[id], x);
            rc[re] = rc[id];
        }
        else
        {
            lc[re] = lc[id];
            rc[re] = update(g + 1, r, rc[id], x);
        }
        tree[re] = better(tree[lc[re]], tree[lc[re]]);
        return re;
    }

    node get(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return node(0, r - l + 1);
        if (x <= l && r <= y)
            return tree[id];
        int g = ((l + r) >> 1);
        node a = get(l, g, lc[id], x, y);
        node b = get(g + 1, r, rc[id], x, y);
        return better(a, b);
    }
} t;

void setup()
{
    cin >> n;
    FOR(i, 1, n)
        cin >> h[i].F, h[i].S = i;
    sort(h + 1, h + n + 1);
    cin >> m;
}

void xuly()
{
    root[n + 1] = 1;
    t.build(1, n);
    FORD(i, n, 1)
        root[i] = t.update(1, n, root[i + 1], h[i].S);
    int l, r, w;
    FOR(i, 1, m)
    {
        cin >> l >> r >> w;
        int lef = 1, rig = n + 1;
        while(rig - lef > 1)
        {
            int g = ((rig + lef) >> 1);
            if (t.get(1, n, root[g], l, r).best >= w)
                lef = g;
            else
                rig = g;
        }
        cout << h[lef].F << '\n';
    }
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
