import java.io.*;
import java.util.*;
import java.math.*;

public class Solution {
	int[] val = new int[4];
	int[] p = new int[4];
	boolean[] f = new boolean[4];
	int X, cnt;
	void gen(int k) {
		if (k==4) {
			int res = X;
			for (int i=0; i<4; i++) {
				res %= val[p[i]];				
			}	
			if (res==X) cnt++;
		}
		for (int i=0; i<4; i++)
			if (!f[i]) {
				f[i] = true;
				p[k] = i;
				gen(k+1);
				f[i] = false;
			}
	}
	boolean ok(int x) {
		X = x;
		cnt = 0;
		gen(0);
		return cnt>=7;
	}
	void solve() throws IOException {
		val[0] = nextInt();
		val[1] = nextInt();
		val[2] = nextInt();
		val[3] = nextInt();
		p = new int[4];
		f = new boolean[4];
		int a = nextInt();
		int b = nextInt();
		int res = 0;
		for (int x=a; x<=b; x++)  {
			if (ok(x)) res++;
		}
		out.println(res);
		
	
	}	
	
	
	
	
	
	
	
	
	
	
	
    static final int inf = 1000000000+10;
    static final long linf = 1l<<62;
    static final double eps = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;    
    
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }
    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }
    long nextLong() throws IOException {
            return Long.parseLong(next());
    }
    public static void main(String[] args) {        
    	new Solution().run();    
    }    
}
