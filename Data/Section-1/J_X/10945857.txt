#include <iostream>
#include <queue>
#include <cstdio>
#include <utility>

using namespace std;

typedef pair<int, int> P;

const int dir[4][2] = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};

int r, c;
bool used[505][505];

bool ok(int x, int y)
{
    return x >= 1 && x <= r && y >= 1 && y <= c;
}

bool bfs(int r1, int c1, int r2, int c2)
{
    queue<P> q;
    q.push(P(r1, c1));
    used[r1][c1] = true;
    while(!q.empty())
    {
        P p = q.front();
        q.pop();
//        if(p.first == r2 && p.second == c2)
//        {
//            return true;
//        }
        for(int i = 0; i < 4; ++i)
        {
            int dx = p.first + dir[i][0];
            int dy = p.second + dir[i][1];
            if(ok(dx, dy))
            {
                if(!used[dx][dy])
                {
                    used[dx][dy] = true;
                    q.push(P(dx, dy));
                }
                else if(dx == r2 && dy == c2)
                {
                    return true;
                }
            }
        }
    }
    return false;
}

int main()
{
    int r1, c1, r2, c2;
    scanf("%d%d", &r, &c);
    char s[505];
    for(int i = 1; i <= r; ++i)
    {
        scanf("%s", s + 1);
        for(int j = 1; j <= c; ++j)
        {
            if(s[j] == 'X')
            {
                used[i][j] = true;
            }
            else if(s[j] == '.')
            {
                used[i][j] = false;
            }
        }
    }
    scanf("%d%d%d%d", &r1, &c1, &r2, &c2);
    if(bfs(r1, c1, r2, c2))
    {
        puts("YES");
    }
    else
    {
        puts("NO");
    }
    return 0;
}
