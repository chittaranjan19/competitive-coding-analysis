#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define INF mod
#define pi acos(-1.0)
#define LINF 1000000000000000000LL
#define eps 1e-10

int n, m;
pair <int, int> edges[100005];
vector <int> sorted;
int used[100005];
vector <set <int> > v;

void dfs(int i)
{
	used[i] = 1;
	for(set <int> :: iterator it = v[i].begin(); it != v[i].end(); ++it)
		if(!used[*it])
			dfs(*it);
	sorted.push_back(i);
}

bool ok()
{
	if(sorted.size() != n)
		return false;
	for(int i = n - 1; i > 0; i--)
		if(v[sorted[i]].find(sorted[i-1]) == v[sorted[i]].end())
			return false;
	return true;
}

int main()
{
	cin >> n >> m;
	for(int i = 0; i < m; i++)
		scanf("%d %d", &edges[i].first, &edges[i].second);
	v.resize(n+1);
	for(int i = 0; i < m; i++)
		v[edges[i].first].insert(edges[i].second);
	for(int i = 1; i <= n; i++)
		if(!used[i])
			dfs(i);
	if(!ok())
	{
		puts("-1");
		return 0;
	}
	int L = 1, R = m;
	while(L < R)
	{
		int C = (L + R) / 2;
		memset(used, 0, sizeof(used));
		sorted.clear();
		v.clear();
		v.resize(n+1);
		for(int i = 0; i < C; i++)
			v[edges[i].first].insert(edges[i].second);
		for(int i = 1; i <= n; i++)
			if(!used[i])
				dfs(i);
		if(ok())
			R = C;
		else
			L = C + 1;
	}
	cout << R << endl;
	return 0;
}