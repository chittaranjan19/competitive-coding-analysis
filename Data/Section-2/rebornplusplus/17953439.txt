#include <bits/stdc++.h>
using namespace std;

struct node {
  int val, par, lc, rc;
  node() { val = par = lc = rc = -1; }
};

int n, cnt=0;
#define M 100000
node bst[M];
int a[M];

/*
inline void makeNode(int i, int pos) {
  if(a[pos] > bst[i].val) {
    if(bst[i].rc) makeNode(bst[i].rc, pos);
    else {
      bst[i].rc = pos;
      bst[pos].par = bst[i].val;
      bst[pos].val = a[pos];
    }
  }
  else {
    if(bst[i].lc) makeNode(bst[i].lc, pos);
    else {
      bst[i].lc = pos;
      bst[pos].par = bst[i].val;
      bst[pos].val = a[pos];
    }
  }
}
*/

inline void TreeInsert(int pos) {
  int y = -1;
  int x = 0;

  while(x != -1) {
    y = x;
    if(a[pos] > bst[x].val) x = bst[x].rc;
    else x = bst[x].lc;
  }

  bst[pos].val = a[pos];
  bst[pos].par = bst[y].val;
  if(bst[pos].val > bst[y].val) bst[y].rc = pos;
  else bst[y].lc = pos;
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  cin >> n;
  cin >> a[0];
  bst[0].val = a[0];

  for(int i=1; i<n; i++) {
    cin >> a[i];
    TreeInsert(i);
  }

  for(int i=1; i<n; i++) {
    if(i > 1) cout << " ";
    cout << bst[i].par;
  } cout << endl;

  return 0;
}

