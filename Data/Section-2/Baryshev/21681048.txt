#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;

const int MAX_N = 1e5 + 5;
const int mod = 1e9 + 7;


int arr[MAX_N];

int main()
{
    string s;
    cin >> s;
    int n = 13;
    for (int i = 1; i < s.size(); i++)
    if (s[i] == s[i - 1]){cout << "Impossible"; return 0;}
    map<char, int> kek;
    char t;
    int ans = 0, left, right;
    for (int i = 0; i < s.size(); i++){
        if (kek[s[i]] != 0){
            t = s[i];
            ans = i - kek[s[i]] - 2;
            right = i; left = kek[s[i]] - 1;
        }
        kek[s[i]] = i + 1;
    }
    //cout << right << " " << left <<" " << t << endl;
    int stop = left;
    int time = ans / 2;
    int time1 = ans / 2 + ans % 2;
    char answ[15][2];
    for (int i = 0; i < 2; i++){
        for (int j = 0; j < n; j++)
        answ[j][i] = '-1';}
    int ykaz = 0;
    int f = 0;
    //cout << time1 << " "  << time << endl;
    answ[n - time - 2][1] = s[left];
    left++;
    for (int i = n - time - 1; i < n; i++){
        answ[i][1] = s[left++];
    }
    int next;
    for (int i = n - 1; i >= 0; i--){
        if (left == right) {next = n - time - 2; break;}
        answ[i][0] = s[left++];
        if (left == (int)s.size()) left = 0;
    }
    for (int i = next; i >= 0; i--){
        answ[i][1] = s[left++];
        if (left == (int)s.size()) left = 0;
    }
    int a = 0;
    while(left != stop){
        answ[a++][0] = s[left++];
        if (left == (int)s.size()) left = 0;
    }
    for (int i = 0; i < 2; i++){
        for (int j = 0; j < n; j++)
        cout << answ[j][i];
    cout << endl;}
    return 0;
}
