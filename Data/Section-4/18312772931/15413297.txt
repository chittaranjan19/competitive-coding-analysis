/*********************************************
    Problem : Codeforces
    Author  : NMfloat
    InkTime (c) NM . All Rights Reserved .
********************************************/

#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>

#define rep(i,a,b)  for(int i = (a) ; i <= (b) ; i ++) //遍历
#define rrep(i,a,b) for(int i = (b) ; i >= (a) ; i --) //反向遍历
#define repS(it,p) for(auto it = p.begin() ; it != p.end() ; it ++) //遍历一个STL容器
#define repE(p,u) for(Edge * p = G[u].first ; p ; p = p -> next) //遍历u所连接的点
#define cls(a,x)   memset(a,x,sizeof(a))
#define eps 1e-8

using namespace std;

const int MOD = 1e9+7;
const int INF = 0x3f3f3f3f;
const int MAXN = 1e5+5;
const int MAXE = 2e5+5;

typedef long long LL;
typedef unsigned long long ULL;

int T,n,m,k;

int fx[] = {0,1,-1,0,0};
int fy[] = {0,0,0,-1,1};

char Map[1005][1005];
int num[1005][1005];//每个点最多连接的点数.
bool vis[1005][1005];
bool vis1[1005][1005];
int belong[1005][1005];
int tot ;
int idx ;

void input() { 
    rep(i,1,n) scanf("%s",&Map[i][1]);
}

void dfs(int x,int y) {
    belong[x][y] = idx;
    tot ++;
    rep(i,1,4) {
        int tmpx = x + fx[i];
        int tmpy = y + fy[i];
        if(tmpx >= 1 && tmpx <= n && tmpy >= 1 && tmpy <= m && !vis[tmpx][tmpy]) {
            vis[tmpx][tmpy] = true;
            if(Map[tmpx][tmpy] == '.') {
                dfs(tmpx,tmpy);
            }
        }
    }
}

void dfs1(int x,int y) {
    num[x][y] = tot;
    rep(i,1,4) {
        int tmpx = x + fx[i];
        int tmpy = y + fy[i];
        if(tmpx >= 1 && tmpx <= n && tmpy >= 1 && tmpy <= m && !vis1[tmpx][tmpy]) {
            vis1[tmpx][tmpy] = true;
            if(Map[tmpx][tmpy] == '.') {
                dfs1(tmpx,tmpy);
            }
        }
    }
}

void solve() {
    cls(num,0); cls(vis,0); cls(vis1,0);
    cls(belong,0);
    idx = 0;
    rep(i,1,n) {
        rep(j,1,m) {
            if(!vis[i][j] && Map[i][j] == '.') {
                idx ++; tot = 0;
                vis[i][j] = true;
                vis1[i][j] = true;
                dfs(i,j);
                dfs1(i,j);
            }
        }
    }
    int x[6],y[6];
    int ans ;
    rep(i,1,n) {
        rep(j,1,m) {
            if(Map[i][j] == '.') printf(".");
            else {
                ans = 0;
                rep(ia,1,4) {
                    x[ia] = i + fx[ia];
                    y[ia] = j + fy[ia];
                }
                rep(ia,1,4) {
                    int ok1 = 0;
                    rep(ib,1,ia-1) {
                        if(belong[x[ia]][y[ia]] == belong[x[ib]][y[ib]]) ok1 = 1;
                    }
                    if(!ok1) ans += num[x[ia]][y[ia]]; 
                }
                printf("%d",(ans+1)%10);
            }
        }
        puts("");
    }
}

int main(void) {
    //freopen("a.in","r",stdin);
    while(~scanf("%d %d",&n,&m)) {
        input();
        solve();
    }
    return 0;
}