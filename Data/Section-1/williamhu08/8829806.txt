//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10;

int N;
char str[MAXN][8];
char buf[13];

void pad0 (char *cur, int k) {
	for (int m = k + 1; m < 8; m++) {
		if (cur[m] == '?') {
			cur[m] = '0';
		}
	}
}

void replace (char *cur, char *prv, int j) {
	for (int k = j - 1; k >= 0; k--) {
		if (cur[k] == '?') {
			if (prv[k] != '9') {
				//then this is the breaking point
				cur[k] = prv[k] + 1;
				//pad the future with 0s and copy the past
				copy(prv, prv + k, cur);
				pad0(cur, k);
				return;
			}
		}
	}
	puts("NO");
	exit(0);
}

void check0 (char *cur) {
	for (int k = 0; k < 8; k++) {
		if (buf[k] == '?') {
			//ok let's do this
			//make sure it's not 0 ok?
			if (cur[k] == '0') {
				cur[k] = '1';
			}
		}
		if (buf[k] != '0') {
			return;
		}
	}
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces490E.in", "r", stdin);
#endif
	//greedy does it
	scanf("%d\n", &N);
	for (int i = 0; i < N; i++) {
		gets(buf);
		// puts(buf);
		int s = strlen(buf);
		fill(str[i], str[i] + (8 - s), '0');
		copy(buf, buf + s, str[i] + (8 - s));
	}
	//special case for 0
	bool can0 = false;
	for (int i = 0; i < 8; i++) {
		char &ref = str[0][i];
		if (ref == '?') {
			ref = '0' + !can0;
		}
		if (ref != '0') {
			can0 = true;
		}
	}
	for (int i = 1; i < N; i++) {
		//now try to fill the rest in
		char *cur = str[i], *prv = str[i - 1];
		copy(cur, cur + 8, buf);
		bool smth = false;
		for (int j = 0; j < 8; j++) {
			if (cur[j] != '?') {
				if (cur[j] == prv[j]) {
					//we have no idea.
					continue;
				}
				smth = true;
				if (cur[j] > prv[j]) {
					//then you can just make those previous ones
					copy(prv, prv + j, cur);
					//check for 0s
					check0(cur);
					pad0(cur, j);
				} else {
					//then curleft > prvleft
					//we have to make it strictly larger
					replace(cur, prv, j);
					//check for 0s
					check0(cur);
				}
				break;
			}
		}
		if (!smth) {
			//then replace everything
			replace(cur, prv, 8);
		}
	}
	puts("YES");
	for (int i = 0; i < N; i++) {
		bool print = false;
		for (int j = 0; j < 8; j++) {
			char c = str[i][j];
			if (c != '0') {
				print = true;
			}
			if (print) {
				putchar(c);
			}
		}
		puts("");
	}
}