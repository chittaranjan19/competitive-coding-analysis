#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>

#define ll long long
#define ull unsigned long long
#define mp make_pair

using namespace std;
int n, k;

string ss[100010], t;
bool win[100010], lose[100010];

struct ch
{
    int next[30];
};

ch m[200010];
int cnt = 1;

ch add_vrtx()
{
    ch temp;
    memset(temp.next, -1, sizeof(temp.next));
    return temp;
}

void add_str(string str)
{
    int num = 0;
    for (int i = 0; i < str.length(); i++)
    {
        if (m[num].next[str[i] - 'a'] != -1)
        {
            num = m[num].next[str[i] - 'a'];
        }
        else
        {
            m[num].next[str[i] - 'a'] = cnt;
            m[cnt] = add_vrtx();
            num = cnt;
            cnt += 1;
        }
    }
}

bool list(int num)
{
    bool is = true;
    for (int i = 0; i < 30; i++)
    if (m[num].next[i] != -1)
        is = false;
    return is;
}

void dfs(int num)
{
    win[num] = false;
    lose[num] = false;
    if (list(num))
    {
        lose[num] = true;
        return;
    }
    else
    {
        for (int i = 0; i < 30; i++)
        {
            if (m[num].next[i] != -1)
            {
                dfs(m[num].next[i]);
                win[num] = win[num] | !win[m[num].next[i]];
                lose[num] = lose[num] | !lose[m[num].next[i]];
            }
        }
    }

}

int poww(int a, int b)
{
    if (b == 0)
        return 1;
    int ans = a;
    for (int i = 1; i < b; i++)
        ans *= a;
    return ans;
}

int main()
{
    string s;
    cin >> s;
    int ans = 0, st = s.length();
    for (int i = 0; i < s.length(); i++)
    {
        if (s[i] == '7')
        {
            ans += poww(2, st);
        }
        else
            ans += poww(2, st - 1);
        st--;
    }
    cout << ans;
    return 0;

}