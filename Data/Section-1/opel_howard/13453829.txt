#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector<int>
#define vb vector<bool>
#define vl vector<long long>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int (i) = 0; (i) < n; ++(i))
#define loop1(i, n) for(int (i) = 1; (i) <= n; ++(i))
#define reverse_iterate(a, b) for(__typeof((b).rend()) (a) = (b).rbegin(); (a) != (b).rend(); ++(a))
#define iterate(a, b) for(__typeof((b).begin()) a = (b).begin(); (a) != (b).end(); ++(a))
#define all(i) (i).begin(), (i).end()

typedef unsigned long long ull;
typedef long long ll;

// end of template
int p[] = {2, 3, 5, 7, 11};

bool fermat_test(long long a, long long p) {
	long long b = p-1;
	long long ans = 1;
	while (b) {
		if (b&1)
			ans = (ans*a)%p;
		a = (a*a)%p;
		b >>= 1;
	}
	if (ans == 1)
		return true;
}

bool check_prime(int val) {
	for (int it = 0; (it < 5) and (p[it] < val); ++it) {
		if (!fermat_test(p[it], val)) {
			return false;
		}
	}
	return true;
}

int main() {
    // freopen("584D.in", "r", stdin);
    
    vb is_prime(100000001, true);
    is_prime[1] = is_prime[2] = false;
    for (int i = 2; i <= 10000; ++i) {
    	if (is_prime[i]) {
    		for (int j = i; i*j <= 100000000; ++j) {
    			is_prime[i*j] = false;
    		}
    	}
    }

    vi primes;
    for (int it = 2; it <= 100000000; ++it) {
    	if (is_prime[it])
    		primes.pub(it);
    }

    int n;
    scanf("%d", &n);
    if (((n <= 100000000) and (is_prime[n])) or (check_prime(n)))  {
    	printf("%d\n", 1);
    	printf("%d\n", n);
    	return 0;
    }
    
    printf("%d\n", 3);
    printf("%d", 3);
    for (int it = 0; it < primes.size(); ++it) {
    	int val = n-3-primes[it];
    	if (((n <= 100000000) and (is_prime[val])) or (check_prime(val))) {
    		printf(" %d %d\n", primes[it], val);
    		return 0;
    	}
    }

    return 0;
}