#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, l = 20;

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

ll a[N];

set<string> bad, good, ans;
bool can[N];

int main()
{
	string s;
	cin >> s;
	memset(can, false, sizeof(can));
	can[s.length()] = 1;
	for (int i = s.length() - 2; i > 4; i--){
		string two, two1, three, three1;
		for (int j = i; j < i + 2; j++)
			two += s[j];
		for (int j = i + 2; j < min(j + 4, (int)s.length()); j++)
			two1 += s[j];
		for (int j = i; j < min(i + 3, (int)s.length()); j++)
			three += s[j];
		for (int j = i + 3; j < min(j + 6, (int)s.length()); j++)
			three1 += s[j];

		if (three1.length() < 3){
			if (!bad.count(three) && three.length() == 3 && can[i+3] == 1)
				ans.insert(three), can[i] = 1;
		}
		else{
			if (three1 != three && bad.count(three) == 0 && three.size() == 3 && can[i+3] == 1)
				ans.insert(three), can[i] = 1;
			else bad.insert(three);
		}
		if (two != two1 && bad.count(two) == 0 && can[i+2] == 1)
			ans.insert(two), can[i] = 1;
		else bad.insert(two);
	}
	cout << ans.size() << endl;
	set<string>::iterator it;
	for (it = ans.begin(); it != ans.end(); it++){
		cout << *it << endl;
	}
	return 0;
}