#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

int n, m, prv[maxn];
vector<pii> adj[maxn];
pii dist[maxn];
set<pii> edges, vis;

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, u, v, k, w, cdist, cv, valid;
	pii temp;
	valid = 0;
	scanf("%d%d", &n, &m);
	for(i=1; i<=m; i++){
		scanf("%d%d%d", &u, &v, &w);
		valid+=w;
		adj[u].pb(mp(v, w));
		adj[v].pb(mp(u, w));
	}
	for(i=2; i<=n; i++)
		dist[i].f = inf, dist[i].s = inf;
	priority_queue<pair<pii, int>, vector<pair<pii, int> >, greater<pair<pii, int> > > q;
	q.push(mp(mp(0, 0), 1));
	dist[1].f = dist[1].s = 0;
	prv[1] = 1;
	while(!q.empty()){
		u = q.top().s;
		temp = q.top().f;
		//cdist = q.top().f;
		//cv = q.top().s;
		q.pop();
		if(dist[u] < temp)
			continue;
		for(auto it:adj[u]){
			v = it.f;
			if(dist[v].f > temp.f + 1){
				prv[v] = u;
				dist[v].f = temp.f + 1;
				dist[v].s = temp.s + (it.s^1);
				q.push(mp(dist[v], v));
			}
			else if(dist[v].f == temp.f + 1 && dist[v].s > (temp.s + (it.s^1))){
				prv[v] = u;
				dist[v].f = temp.f + 1;
				dist[v].s = temp.s + (it.s^1);
				q.push(mp(dist[v], v));
			}
		}
	}
	k = dist[n].s + (valid-(dist[n].f-dist[n].s));
	printf("%d\n", k);
	u = n;
	while(u!=prv[u]){
		edges.insert(mp(u, prv[u]));
		u = prv[u];
	}
	for(i=1; i<=n; i++){
		for(j=0; j<adj[i].size(); j++){
			u = i;
			v = adj[i][j].f;
			w = adj[i][j].s;
			if(vis.find(mp(v, u))!=vis.end())
				continue;
			if(edges.find(mp(v, u))!=edges.end() || edges.find(mp(u, v))!=edges.end()){
				if(!w)
					printf("%d %d 1\n", u, v);
			}
			else{
				if(w)
					printf("%d %d 0\n", u, v);
			}
			vis.insert(mp(u, v));
		}
	}
	return 0;
}
