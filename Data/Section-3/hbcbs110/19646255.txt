#include<iostream>
#include<algorithm>
#include<iomanip>
#include<cstdio>
#include<cmath>
using namespace std;
const long double pi=acos((long double)-1.00);
struct Point
{
    long long x,y;
    Point(){}
    Point(long long _x,long long _y)
    {
        x=_x;y=_y;
    }
    Point operator - (const Point b) const
    {
        return Point(x-b.x,y-b.y);
    }
    long long operator ^ (const Point b) const
    {
        return x*b.y-y*b.x;
    }
}plg[10005],pmn,pmx,vvv;
long double atg2(Point a)
{
    return atan2((long double)a.y,(long double)a.x);
}
int main()
{
    double anx,kmx;
    int n,i,mnn,u,v,w;
    cin>>n>>w>>v>>u;
    scanf("%I64d%I64d",&plg[0].x,&plg[0].y);
    pmn=plg[0];
    pmx=plg[0];
    for(i=1;i<n;i++)
    {
        scanf("%I64d%I64d",&plg[i].x,&plg[i].y);
        if((pmx^plg[i])>0) pmx=plg[i];
        if((pmn^plg[i])<=0)
        {
            pmn=plg[i];
            mnn=i;
        }
    }
    vvv=Point(v,u);
    kmx=1.0*u/(double)v;
    if((vvv^pmx)<=0||(vvv^pmn)>=0)
    {
        printf("%.8lf\n",(double)w/(double)u);
    }else{
        for(i=mnn;;i++)
        {
            if((vvv^(plg[(i+1)%n]-plg[i%n]))>=0)
            {
                anx=1.0*plg[i%n].x+(1.0*w-1.0*plg[i%n].y)/kmx;
                break;
            }
        }
        printf("%.8lf\n",anx/(double)v);
    }
    return 0;
}
