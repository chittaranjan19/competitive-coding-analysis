#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 175781251
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int cnt[10000005];
int pcnt[10000005];

vector<int> primes;

void get_primes(LL MAX)
{
  bool visited[MAX + 10];
  setzero(visited);
  for(LL x = 2; x <= MAX; x++)
    if(!visited[x])
    {
      cnt[x]++;
      primes.push_back(x);
      for(LL j = x*x; j <= MAX; j += x)
        visited[j] = true;
    }
}

int d[11];

inline bool ispal(int x)
{
  int n = 0;
  while(x)
  {
    d[n] = x % 10;
    x/=10;
    n++;
  }
  for(int i=0;i<n/2;i++)
    if(d[i] != d[n - i - 1])
      return false;
  return true;
}

int main()
{
  int p, q;
  scanf("%d %d", &p, &q);
  get_primes(10000005);
  for(int i=1;i<10000005;i++)
    pcnt[i] = pcnt[i - 1] + ispal(i);
  for(int i=1;i<10000005;i++)
    cnt[i]+=cnt[i - 1];
  for(int i=10000004;i>=0;i--)
  {
    if(cnt[i] * 1LL * q <= pcnt[i] * 1LL * p)
    {
      printf("%d", i);
      return 0;
    }
  }
  printf("Palindromic tree is better than splay tree");
  return 0;
}
