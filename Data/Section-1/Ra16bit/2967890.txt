#include <cstdio>#include <algorithm>using namespace std;const long long inf=1000000000000000000LL;int n,m,i,v[100100],c[100100];long long a[100100],l[100100],r[100100],A,B,cur,oth,res;long long find(int le, int ri) {  if (le>ri) return -inf;  long long res=a[le];  int i,ni;  for (i=le; ; i=ni) {    ni=(i<<1)-(i&(i-1));    if (ni>ri) break;    res=max(res,r[i]);  }  res=max(res,a[i]);  for (i=ri; ; i=ni) {    ni=(i&(i-1));    if (ni<le) break;    res=max(res,l[i]);  }  return res;}void upd(int x, long long v) {  if (v<=a[x]) return;  a[x]=v;  res=max(res,v);  for (int i=x; i<=n; i=(i<<1)-(i&(i-1))) l[i]=max(l[i],v);  for (int i=x; i>0; i&=i-1) r[i]=max(r[i],v);}int main() {  scanf("%d%d",&n,&m);  for (i=1; i<=n; i++) scanf("%d",&v[i]);  for (i=1; i<=n; i++) scanf("%d",&c[i]);  while (m--) {    scanf("%I64d%I64d",&A,&B);    res=0;    for (i=1; i<=n; i++) a[i]=l[i]=r[i]=-inf;    for (i=1; i<=n; i++) {      cur=a[c[i]]+v[i]*A;      oth=max(0LL,max(find(1,c[i]-1),find(c[i]+1,n)))+v[i]*B;      upd(c[i],max(cur,oth));    }    printf("%I64d\n",res);  }  return 0;}