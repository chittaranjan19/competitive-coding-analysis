#include<bits/stdc++.h>
using namespace std;
int n,m,c=0;
int lol[1000000];

class Graph
{
    int V;
    list<int> *adj;
    void DFSUtil(int v, bool visited[],int before,int k);
public:
    Graph(int V);
    void addEdge(int v, int w);
    void DFS();
};

Graph::Graph(int V)
{
    this->V=V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
}

void Graph::DFSUtil(int v, bool visited[],int before,int k)
{
    
    visited[v] = true;
    if(before==1&&lol[v]==1)
        {k++;before=1;}
    else if(before==1&&lol[v]==0)
       { k=0;before=0;}
    else if(before==0&&lol[v]==1)
    {
        k++;before=1;
    }
    else
     {k=0;before=0;}   
    if(k>m)
        return;



    
    list<int>::iterator i;
    int count=0;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
    {   count++;
        break;
    }
    if(count==0)
        if(k<=m)
            c++;
    for(i = adj[v].begin(); i != adj[v].end(); ++i)
        if(!visited[*i])
            DFSUtil(*i, visited,lol[*i],k);
}


void Graph::DFS()
{

    bool *visited = new bool[V];
    for (int i = 0; i < V; i++)
        visited[i] = false;

    DFSUtil(0, visited,0,0);
    
}

int main()
{
    scanf("%d%d",&n,&m);
    Graph g(n);
    for(int i=0;i<n;i++)
    	scanf("%d",&lol[i]);
    int x,y;
    for(int i=0;i<n-1;i++)
    {
        scanf("%d%d",&x,&y);
        if(x<=y)
        g.addEdge(x-1,y-1);
        else 
            g.addEdge(y-1,x-1);
    }
    g.DFS();
    printf("%d\n",c);
    return 0;
}
