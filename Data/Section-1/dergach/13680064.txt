#define _SCL_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:500000000") 
#include <functional>
#include <algorithm>
#include <iostream> 
#include <string.h> 
#include <stdlib.h>
#include <complex>
#include <sstream> 
#include <numeric>
#include <ctype.h> 
#include <stdio.h> 
#include <bitset>
#include <vector> 
#include <string> 
#include <math.h> 
#include <time.h> 
#include <queue> 
#include <stack> 
#include <list>
#include <map> 
#include <set> 
#define Int long long 
#define INF 0x3F3F3F3F 
#define eps 1e-9
using namespace std;
typedef pair<int, int> pii;

struct Point 
{
	Int x, y;
};

Int area(Point a, Point b, Point c) 
{
	return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}

int sign(Int a)
{
	if (a == 0)
		return 0;
	return a < 0 ? -1 : 1;
}

bool intersect_1(int a, int b, int c, int d) 
{
	if (a > b)  
		swap(a, b);
	if (c > d)  
		swap(c, d);
	return max(a, c) <= min(b, d);
}

bool intersect(Point a, Point b, Point c, Point d) 
{
	return intersect_1(a.x, b.x, c.x, d.x)
		&& intersect_1(a.y, b.y, c.y, d.y)
		&& sign(area(a, b, c)) * sign(area(a, b, d)) <= 0
		&& sign(area(c, d, a)) * sign(area(c, d, b)) <= 0;
}

int main()
{
	int n, i, j;
	scanf("%d", &n);
	vector<int> t(n), s(n), f(n);
	vector<Point> S(n), T(n);
	for (i = 0; i < n; i++)
	{
		scanf("%d %d %d", &t[i], &s[i], &f[i]);
		S[i] = { t[i], s[i] };
		T[i] = { t[i] + abs(s[i] - f[i]), f[i] };
	}
	for (i = 0; i < n; i++)
	{
		int cnt = 0;
		for (j = 0; j < n; j++)
		{
			cnt += i != j && intersect(S[i], T[i], S[j], T[j]);
		}
		printf("%d%c", cnt, " \n"[i == n - 1]);
	}
}