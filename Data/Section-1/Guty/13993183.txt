#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	ios_base::sync_with_stdio(0);
	vector<string> tablero (8);
	forn(i,8)
		cin >> tablero[i];
	vector<tint> blanco (8,100);
	vector<tint> negro (8,100);
	vector<bool> cruce (8,false);
	forn(j,8)
	{
		forn(i,8)
		{
			if (tablero[i][j] == 'W')
			{
				blanco[j] = i;
				if (negro[j] != 100)
					cruce[j] = true;
			}
			else if (tablero[j][i] == 'B')
			{
				negro[j] = 7 - j;
				if (blanco[j] != 100)
					cruce[j] = true;
			}
		}
	}
	tint miniA = 1000;
	tint miniB = 1000;
	forn(i,8)
	{
		if (!cruce[i])
		{
			miniA = min(miniA,blanco[i]);
			miniB = min(miniB,negro[i]);
		}
		
	}
	if (miniA < miniB)
		cout << "A" << endl;
	else
		cout << "B" << endl;
	return 0;
}



