#include<bits/stdc++.h>
#define ll long long
#define maxn 100005

using namespace std;

typedef struct point point;
struct point
{
	ll x, y;
};

double dist(point a, point b)
{
	ll tmp = ( b.y - a.y ) * ( b.y - a.y ) + ( b.x - a.x ) * ( b.x - a.x );
	return sqrt( (double)tmp );
}

point a, b, t, bott[maxn];

int main()
{	
	int n, i;

	cin >> a.x >> a.y >> b.x >> b.y >> t.x >> t.y;
	
	bool mark[maxn];
	scanf("%d", &n);
	
	double res = (double)0;
	memset(mark, 0, sizeof mark);

	for ( i = 0 ; i < n ; i++ )
	{
		cin >> bott[i].x >> bott[i].y;
		res += dist(t, bott[i]);
	}
	res = res * 2;
	//cout << "res = " << res << endl;
	/*double mini;
	for ( i = 0 ; i < n ; i++ )
	{
		if( i > 0)
			mini = min(mini, min( dist(bott[i], a), dist(bott[i], b) ) - dist(bott[i], t) );
		else
			mini = min( dist(bott[i], a), dist(bott[i], b) ) - dist(bott[i], t);
	}*/
	double dpa[maxn], dpb[maxn];
	for ( i = 0 ; i < n ; i++ )
	{
		dpa[i] = dist(bott[i], a) - dist(bott[i], t);
		dpb[i] = dist(bott[i], b) - dist(bott[i], t);
	}
	int aorb, idx;
	double ans;
	for( i = 0 ; i < n ; i++ )
	{
		if( i == 0 )
		{
			ans = res;
			idx = 0;
			if( dpa[0] < dpb[0] )
			{
				aorb = 1;			
			}
			else
				aorb = 2;
			ans += min( dpa[0], dpb[0] );
		}
		else
		{
			if( res + min( dpa[i], dpb[i] ) < ans )
			{
				idx = i;
				ans = res + min( dpa[i], dpb[i] );
				if( dpa[i] < dpb[i] )
					aorb = 1;
				else
					aorb = 2;
			}
		}
	}
	if( aorb == 1 )
	{
		for( i = 0 ; i < n ; i++ )
		{
			if( i != idx )
			{
				ans = min(ans, ans + dpb[i]);
			}
		}
	}
	else
	{
		for( i = 0 ; i < n ; i++ )
		{
			if( i != idx )
				ans = min(ans, ans + dpa[i]);
		}
	}
	//cout << ans << endl;
	printf("%.7lf\n", ans);
	return 0;
}
