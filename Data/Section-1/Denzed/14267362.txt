#include <fstream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <complex>
#include <map>
#include <set>
#include <cstring>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
const int MN = 2e5 + 100;

int f[MN];
int n, m;

void add(int i, int x)
{
    while (i < m)
    {
        f[i] += x;
        i |= i + 1;
    }
}

int get(int i)
{
    int res = 0;
    while (i >= 0)
    {
        res += f[i];
        i = (i & (i + 1)) - 1;
    }
    return res;
}

ll f2[MN];

void add2(int i, int x)
{
    while (i < m)
    {
        f2[i] += x;
        i |= i + 1;
    }
}

ll get2(int i)
{
    ll res = 0;
    while (i >= 0)
    {
        res += f2[i];
        i = (i & (i + 1)) - 1;
    }
    return res;
}

int t[MN];
pii em[MN];

int emorder[MN];
int torder[MN];
int ans[MN];

bool com1(int a, int b) {
    return t[a] < t[b];
}

bool com2(int a, int b) {
    return em[a].first < em[b].first;
}

bool check(int v, int x)
{
    int nc = x + 1 - get(x);
    ll tmp = get2(x) - em[v].first * nc;
    return tmp >= em[v].second;
}

int bs(int l, int r, int v)
{
    if (l == r)
        return l;
    int m = (l + r) / 2;
    if (check(v, m))
        return bs(l, m, v);
    else
        return bs(m + 1, r, v);
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin >> n >> m;
    for (int i = 0; i < m; ++i)
    {
        cin >> t[i];
        add2(i, t[i]);
        torder[i] = i;
    }
    for (int i = 0; i < n; ++i)
    {
        cin >> em[i].first >> em[i].second;
        emorder[i] = i;
    }
    sort(torder, torder + m, com1);
    sort(emorder, emorder + n, com2);
    int tptr = 0;
    for (int i = 0; i < n; ++i)
    {
        int v = emorder[i];
        for (; tptr < m && t[torder[tptr]] <= em[v].first; ++tptr) {
            add2(torder[tptr], -t[torder[tptr]]);
            add(torder[tptr], 1);
        }
        int nc = m - get(m - 1);
        ll mx = get2(m - 1) - ll(em[v].first) * nc;
        if (mx < em[v].second)
            continue;
        ans[v] = bs(0, m - 1, v) + 1;
    }
    for (int i = 0; i < n; ++i)
    {
        cout << ans[i] << " ";
    }
}