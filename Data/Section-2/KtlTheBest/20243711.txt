#include <iostream>
#include <algorithm>
using namespace std;

typedef long long ll;

#define fr first
#define sc second
#define mkp make_pair
              //
ll n, a[1000][1000], col[1000], row[1000], ok, hyp1, hyp2;
pair <ll, ll> ans1, ans2, ans3, ans4;

int main(){
	cin >> n;
	if(n == 1){
		cout << 1;
		return 0;
	}
	for(int i = 1; i <= n; ++ i){
		for(int j = 1; j <= n; ++ j){
			cin >> a[i][j];
		}
	}
	for(int i = 1; i <= n; ++ i){
		for(int j = 1; j <= n; ++ j){
			row[i] += a[i][j];
		}
	}
	sort(row + 1, row + 1 + n);
	ans1 = mkp(row[1], row[2]);
	for(int j = 1; j <= n; ++ j){
		for(int i = 1; i <= n; ++ i){
			col[j] += a[i][j];
		}
	}
	sort(col + 1, col + 1 + n);
	ans2 = mkp(col[1], col[2]);
	if(ans1 != ans2){
		cout << -1;
		return 0;
	}
	for(int i = 1; i <= n; ++ i){
		if(a[i][i] == 0){
			ok = 1;
		}
		hyp1 += a[i][i];
	}
	if(ok){
		if(hyp1 + ans1.sc - ans1.fr != ans1.sc){
			cout << -1;
			return 0;
		} else {
			ans3 = mkp(hyp1, ans1.sc);
		}
	} else {
		if(hyp1 != ans1.sc){
			cout << -1;
			return 0;
		}
	}
	ok = 0;
	for(int i = 1; i <= n; ++ i){
		if(a[i][n - i + 1] == 0){
			ok = 1;
		}
		hyp2 += a[i][n - i + 1];
	}
	if(ok){
		if(hyp2 + ans1.sc - ans1.fr != ans1.sc){
			cout << -1;
			return 0;
		} else {
			ans4 = mkp(hyp2, ans1.sc);
		}
	} else {
		if(hyp2 != ans1.sc){
			cout << -1;
			return 0;
		}
	}
    cout << ans1.sc - ans1.fr;
	return 0;
}