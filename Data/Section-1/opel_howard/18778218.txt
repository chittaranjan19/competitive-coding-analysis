#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector<int>
#define vl vector<long long>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof((b).rend()) a = (b).rbegin(); a != (b).rend(); ++a)
#define iterate(a, b) for(__typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)
#define all(i) (i).begin(), (i).end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, args)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

#ifdef __WIN32 
	#define gc getchar
#else
	#define gc getchar_unlocked
#endif
#define fsdecimal(type) \
	void fs ##type  (type& inp) { \
		register char c = gc(), prev = '+'; \
		for (; !isdigit(c); c = gc()) prev = c; \
		inp = 0; \
		for (; isdigit(c); c = gc()) { \
			inp = (inp << 3)+(inp << 1)+(c-'0'); \
		} \
		if (prev == '-') \
			inp = -inp; \
	}
fsdecimal(int)
fsdecimal(ll)

int main() {
    // freopen("680B.in", "r", stdin);
    
    int n, a;
    fsint(n);
    fsint(a);
    vi arr(n);
    iterate(e, arr) {
    	fsint(*e);
    }
    --a;
    int i = a, j = a;
    int ans = 0;
    while ((0 <= i) or (j < n)) {
    	bool left = true, right = true;
    	if (0 <= i)
    		left = (arr[i] > 0);
    	if (j < n)
    		right = (arr[j] > 0);
    	if (left and right) {
    		debug("(%d, %d)\n", i, j);
    		if (0 <= i)
    			ans++;
    		if (j < n)
    			ans++;
    		if (i == j)
    			ans--;
    	}
    	--i, ++j;
    }
    printf("%d\n", ans);

    return 0;
}