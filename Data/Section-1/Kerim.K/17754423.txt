#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int>PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
struct dsu{
	int ata[MAXN],rank[MAXN];
	void init(int x){
		for(int i=1;i<=x;i++)
			ata[i]=i,rank[i]=1;
	}
	int tap(int x){
		if(x==ata[x])
			return x;
		return ata[x]=tap(ata[x]);	
	}
	void merge(int x,int y){
		if((x=tap(x))==(y=tap(y)))
			return;
		if(rank[y]<=rank[x]){
			rank[x]+=rank[y];
			ata[y]=x;
		}
		else{
			rank[y]+=rank[x];
			ata[x]=y;
		}
	}
}d;
int vis[MAXN];
vector<pair<PII,int> >adj[MAXN];
vector<PII>way[MAXN];
int T,fup[MAXN],tin[MAXN];
string ss[]={"none","at least one","any"};
int ans[MAXN];
void dfs(int nd,int pr){
	tin[nd]=fup[nd]=++T;vis[nd]=1;
	tr(it,way[nd]){
		int to=it->ff;
		if(it->ss==pr)
			continue;
		if(!vis[to]){
			dfs(to,it->ss);
			if(tin[nd]<fup[to])
				ans[it->ss]=2;
			umin(fup[nd],fup[to]);
		}
		else
			umin(fup[nd],tin[to]);
	}
}
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++){
		int u,v,w;
		scanf("%d%d%d",&u,&v,&w);
		adj[w].pb(mp(mp(v,u),i));
		adj[w].pb(mp(mp(u,v),i));
	}
	d.init(n);
	for(int i=1;i<MAXN;i++){
		if(adj[i].size()==0)
			continue;
		vector<int>s;
		tr(it,adj[i]){
			int u=it->ff.ff;
			int v=it->ff.ss;
			if((u=d.tap(u))!=(v=d.tap(v))){
				way[u].pb(mp(v,it->ss));
				s.pb(u);
				ans[it->ss]=1;
			}
		}
	//	for(int j=1;j<10;j++){
	///		if(way[j].size()>0)
	///			cout<<j<<"->";
	///		tr(it,way[j])
	///			cout<<it->ff<<" ";
	//					if(way[j].size()>0)	
	//		cout<<endl;
	//	}
		tr(it,s)
			vis[*it]=0;
		tr(it,s)
			if(!vis[*it])
				dfs(*it,-1);
		tr(it,adj[i]){
			way[it->ff.ff].resize(0);
			way[it->ff.ss].resize(0);
			d.merge(it->ff.ff,it->ff.ss);	
		}
	}
	for(int i=1;i<=m;i++)
		cout<<ss[ans[i]]<<endl;
	return 0;
}
//LooK aT mY COde ONlinE +_+
