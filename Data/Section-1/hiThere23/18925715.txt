#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 200005
#define maxC 1000000007
#define base 100007
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;
int n, dp[mn];
vector<int> g[mn];

struct tree
{
    int tree[mn << 2], f[mn << 2];

    void push(int id)
    {
        tree[id << 1] += f[id];
        tree[(id << 1) | 1] += f[id];
        f[id << 1] += f[id];
        f[(id << 1) | 1] += f[id];
        f[id] = 0;
    }

    void update(int l, int r, int id, int x, int y, int v)
    {
        if (l > y || r < x)
            return;
        if (x <= l && r <= y)
        {
            tree[id] += v;
            f[id] ++;
            return;
        }
        push(id);
        int g = ((l + r) >> 1);
        update(l, g, id << 1, x, y, v);
        update(g + 1, r, (id << 1) | 1, x, y, v);
        tree[id] = min(tree[id << 1], tree[(id << 1) | 1]);
    }

    int get(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return maxC;
        if (x <= l && r <= y)
            return tree[id];
        push(id);
        int g = ((l + r) >> 1);
        return min(get(l, g, id << 1, x, y), get(g + 1, r, (id << 1) | 1, x, y));
    }
} t;

void setup()
{
    cin >> n;
    int x;
    FOR(i, 1, n)
    {
        cin >> x;
        if (x != i)
            g[x].pb(i);
    }
}

void xuly()
{
    dp[1] = 0;
    FOR(i, 2, n)
    {
        t.update(1, n, 1, 1, i - 1, 1);
        dp[i] = t.get(1, n, 1, 1, i - 1);
        FOR(j, 0, int(g[i].size()) - 1)
            dp[i] = min(dp[i], dp[g[i][j]] + 1);
        t.update(1, n, 1, i, i, dp[i]);
    }
    FOR(i, 1, n)
        cout << dp[i] << ' ';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
