#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
//freopen("file.in","r",stdin);
//freopen("file.out","w",stdout);
char ss[11];
int arr[MAXN],next[MAXN];
class node{
	public:
	int cnt,lazy,mn,val;
	node(){cnt=0;lazy=0;mn=INF;val=0;}
	void art(int x){
		lazy+=x;
		mn-=x;
		val+=x;
	}
}s[MAXN<<2];
int ans=0;
node merge(node x,node y){
	node z;
	z.mn=min(x.mn,y.mn);
	if(y.mn==z.mn)
		z.cnt+=y.cnt;
	if(x.mn==z.mn)
		z.cnt+=x.cnt;	
	return z;	
}
int lucky(int x){
	while(x>=1){
		if(x%10!=4 and x%10!=7)
			return 0;
		x/=10;		
	}
	return 1;
}
void push(int nd){
	int &ret=s[nd].lazy;
	if(!ret)
		return;
	s[nd<<1].art(ret);	
	s[nd<<1|1].art(ret);
	ret=0;	
}
void upd(int p,int nd,int x,int y){
	if(x==y){
		s[nd].cnt=1;
		s[nd].mn=next[arr[x]]-arr[x];
		s[nd].val=arr[x];
		return;
	}
	int mid=(x+y)>>1;
	if(p<=mid)
		upd(p,nd<<1,x,mid);
	else	
		upd(p,nd<<1|1,mid+1,y);
	s[nd]=merge(s[nd<<1],s[nd<<1|1]);
}
int tap(int l,int r,int nd,int x,int y){
	if(l>y or x>r)
		return INF;
	if(l<=x and y<=r){
		if(!s[nd].mn)
			ans+=s[nd].cnt;
		return s[nd].mn;
	}
	push(nd);	
	int mid=(x+y)>>1;
	int i1=tap(l,r,nd<<1,x,mid);
	int i2=tap(l,r,nd<<1|1,mid+1,y);
	return min(i1,i2);	
}
void inc(int l,int r,int v,int nd,int x,int y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r and s[nd].mn>=v){
		s[nd].mn-=v;
		s[nd].lazy+=v;
		return;
	}	
	if(x==y){
		s[nd].val+=v;
		int res=s[nd].val;
		s[nd].mn=next[res]-res;
		return;
	}
	push(nd);
	int mid=(x+y)>>1;
	inc(l,r,v,nd<<1,x,mid);
	inc(l,r,v,nd<<1|1,mid+1,y);
	s[nd]=merge(s[nd<<1],s[nd<<1|1]);
}
int main(){vector<int>v;
	for(int i=1;i<=44444;i++)
		if(lucky(i))
			v.pb(i);		
	for(int i=1;i<=44444;i++){
		int p=lower_bound(all(v),i)-v.begin();
		assert(p<int(v.size()));
		next[i]=v[p];
	}
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++){
		scanf("%d",arr+i);
		upd(i,1,1,n);
	}
	while(m--){
		int l,r,d;
		scanf("%s%d%d",ss,&l,&r);
		if(ss[0]=='c'){
			ans=0;
			int cost=tap(l,r,1,1,n);
			if(!cost)
				printf("%d\n",ans);
			else
				printf("0\n");
		}
		else{
			scanf("%d",&d);
			inc(l,r,d,1,1,n);
		}
	}		
	return 0;
}
