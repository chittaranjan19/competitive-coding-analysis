#include<stdio.h>
int Partition(int r[],int low,int high)/*升序*/
/*返回支点最终位置*/
{
    int x;/*类型具体*/
    if(low>high) return 0;
    if(low==high) return low;
    x=r[low];
    while(low<high)
    {
        while(low<high&&r[high]>=x) high--; /*<*/
        if(low<high){r[low]=r[high];low++;}
        while(low<high&&r[low]<x) low++;        /*>*/
        if(low<high){r[high]=r[low];high--;}
    }
    r[low]=x;
    return low;
}
void Quick_sort(int r[],int m,int n) /*排序从r[m]到r[n]*/
{
    int i;
    if(m>=n) return;
    i=Partition(r,m,n);
    Quick_sort(r,m,i-1);
    Quick_sort(r,i+1,n);
}

int main()
{
    long long sum,qt[1005],mp,zl[1005];
    int i,n,m;
    while(scanf("%d%d",&n,&m)!=EOF)
    {
        sum=0;
        for(i=0;i<n;i++)
        {
            scanf("%I64d",&qt[i]);
            sum+=qt[i];
        }
        for(i=0;i<m;i++)
        {
            scanf("%I64d",&mp);
            sum-=qt[mp-1];
            zl[i]=qt[mp-1];
        }
        //printf("%d\n",sum);
        Quick_sort(zl,0,m-1);
        for(i=m-1;i>=0;i--)
        {
            if(zl[i]>=sum)sum+=zl[i];
            else sum+=sum;
        }
        printf("%I64d\n",sum);
    }
    return 0;
}
