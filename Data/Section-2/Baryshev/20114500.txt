#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>
#include <time.h>
#include <stdlib.h>
#include <stdio.h>

using namespace std;

#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<long long, long long> pt;

const int MAX_N = 10010;
const long long mod = 1e9 + 7;

int main(){
    int n, a;
    cin >> n >> a;
    vector <int> st;
    for (int i = 0; i < n; i++){
        int e;
        cin >> e;
        st.pb(e);
    }
    if (n == 1)
    {
        cout << 0;
        return 0;
    }
    sort(st.begin(), st.end());
    long long dist;
    if (a < st[0]){
        cout << abs(st[n - 2] - a);
        return 0;
    }
    if (a > st[n - 1]){
        cout << abs(a - st[1]);
        return 0;
    }
    int e = -1;
    for (int i = 0; i < n; i++){
        if (st[i] > a && e == -1)
            e = i;
    }
    if (e == n - 1){
        dist = min(abs(a - st[0]), abs(st[n - 1] - a) + abs(st[n - 1] - st[1]));
        cout << dist;
        return 0;
    }
    if (e == 1){
        dist = min(abs(st[n - 1] - a), abs(a - st[0]) + abs(st[n - 2] - st[0]));
    cout << dist;
    return 0;
    }
    if (e != 1){
        dist = min(abs(a - st[1]) + abs(st[n - 1] - st[1]),abs(a - st[0]) + abs(st[n - 2] - st[1]));
        cout << dist;
        return 0;
    }
return 0;
}