#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


int recorrer (vector<tint> &aIt, tint t, tint lastPosition)
{
	t -= lastPosition;
	tint n = aIt.size();
	forsn(i,lastPosition,n)
	{
		if (t > 0)
		{
			if (aIt[i] > 0)
			{
				if (t >= aIt[i])
				{
					t -= aIt[i];
					aIt[i] = 0;
				}
				else
				{
					aIt[i] -= t;
					t = 0;
				}
			}
			t--;
		}
		else
		{
			lastPosition = i-1;
			break;
		}
	}
	return lastPosition;
}

int main()
{
	tint n, m;
	cin >> n >> m;
	tint suma = 0;
	vector<tint> a (n+1,0);
	forsn(i,1,n+1)
	{
		cin >> a[i];
		suma += a[i];
	}
	
	while (a.back() == 0)
		a.pop_back();
	n = a.size();
	tint cinf = 0;
	tint csup = 2*(suma + n);
	while (csup - cinf > 1)
	{
		vector<tint> aIt = a;
		tint t = (csup + cinf)/2;
		tint last = 0;
		forn(i,m)
			last = recorrer(aIt,t,last);
		if (*max_element(aIt.begin(),aIt.end()) == 0)
			csup = t;
		else
			cinf = t;
	}
	
	cout << csup << endl;
	
	
	return 0;
}



