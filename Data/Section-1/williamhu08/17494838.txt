#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define rwfile(f) freopen(f".in", "r", stdin); freopen(f".out", "w", stdout)
#define pb push_back
#define mpair make_pair
#define fi first
#define se second
#define dri(x) scanf("%d", &x)
#define drii(x, y) scanf("%d %d", &x, &y)
#define driii(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define driiii(x, y, z, w) scanf("%d %d %d %d", &x, &y, &z, &w)
#define drl(x) scanf("%lld", &x)
#define drll(x, y) scanf("%lld %lld", &x, &y)
#define drlll(x, y, z) scanf("%lld %lld %lld", &x, &y, &z)
#define drllll(x, y, z, w) scanf("%lld %lld %lld %lld", &x, &y, &z, &w)

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int MAXN = 1e5 + 10;
const int INF = 1e9 + 20;

struct segtree {
	int tsz;
	vector<int> tree;
	vector<int> lazy;

	int resize (int sz) {
		//also clears.
		while (sz & (sz - 1)) {
			sz++;
		}
		tree.resize(2 * sz);
		fill(all(tree), 0);
		lazy.resize(2 * sz);
		fill(all(lazy), 0);
		tsz = sz;
		return sz;
	}

	void put (int cur, int lt, int rt, int v) {
		tree[cur] += (rt - lt) * v;
		lazy[cur] += v;
	}

	void down (int cur, int lt, int rt) {
		if (lazy[cur]) {
			int mid = (lt + rt) / 2;
			put(2 * cur, lt, mid, lazy[cur]);
			put(2 * cur + 1, mid, rt, lazy[cur]);
			lazy[cur] = 0;
		}
	}

	int query (int a, int b, int cur, int lt, int rt) {
		if (rt <= a || b <= lt) {
			return 0;
		}
		if (a <= lt && rt <= b) {
			return tree[cur];
		}
		down(cur, lt, rt);
		int mid = (lt + rt) / 2;
		return query(a, b, 2 * cur, lt, mid) + query(a, b, 2 * cur + 1, mid, rt);
	}

	int query (int a, int b) {
		return query(a, b, 1, 0, tsz);
	}

	void update (int a, int b, int v, int cur, int lt, int rt) {
		if (rt <= a || b <= lt) {
			return;
		}
		if (a <= lt && rt <= b) {
			put(cur, lt, rt, v);
			return;
		}

		down(cur, lt, rt);
		int mid = (lt + rt) / 2;
		update(a, b, v, 2 * cur, lt, mid);
		update(a, b, v, 2 * cur + 1, mid, rt);
		tree[cur] = tree[2 * cur] + tree[2 * cur + 1];
	}

	void update (int a, int b, int v) {
		update(a, b, v, 1, 0, tsz);
	}
} seg;

int N;
int A[MAXN], T[MAXN], X[MAXN];
vector<int> allx;
vector<int> quer[MAXN];
int ans[MAXN];

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	dri(N);
	for (int i = 0; i < N; i++) {
		driii(A[i], T[i], X[i]);
		allx.pb(X[i]);
	}

	sort(all(allx));
	allx.resize(unique(all(allx)) - allx.begin());
	for (int i = 0; i < N; i++) {
		X[i] = lower_bound(all(allx), X[i]) - allx.begin();
		quer[X[i]].pb(i);
	}

	fillchar(ans, -1);

	for (int i = 0; i < allx.size(); i++) {
		vector<int> allt;
		for (int qi : quer[i]) {
			allt.pb(T[qi]);
		}
		allt.pb(INF);
		sort(all(allt));
		allt.resize(unique(all(allt)) - allt.begin());
		int sz = seg.resize(allt.size() + 2);

		for (int qi : quer[i]) {
			T[qi] = lower_bound(all(allt), T[i]) - allt.begin();
			if (A[qi] == 1) {
				seg.update(T[qi], sz, 1);
			} else if (A[qi] == 2) {
				seg.update(T[qi], sz, -1);
			} else {
				ans[qi] = seg.query(T[qi], T[qi] + 1);
			}
		}

		//up till it's 0
	}

	for (int i = 0; i < N; i++) {
		if (A[i] == 3) {
			printf("%d\n", ans[i]);
		}
	}
}