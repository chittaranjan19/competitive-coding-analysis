uses math;
var
  i,j : longint;
  first : boolean;
  n,m,a1,a2,x2,x1,y1,y2,t1,t2,k1,k2,x,y,d,x0,y0 : int64;
  h1, h2 : array[0..2000001] of int64;


procedure gcd(a,b : int64; var x,y,d : int64);
var
  x1, y1 : int64;
begin
  if (a = 0) then begin
    x := 0;
    y := 1;
    d := b;
  end
  else begin
    gcd(b mod a, a, x1,y1,d);
    x := y1 - (b div a) * x1;
    y := x1;
  end;
end;



begin
  readln(m);
  readln(h1[0],a1);
  readln(x1, y1);
  readln(h2[0], a2);
  readln(x2,y2);

  for i := 1 to 2*m+1 do begin
    h1[i] := (x1*h1[i-1] + y1) mod m;
    h2[i] := (x2*h2[i-1] + y2) mod m;
    //writeln(h1[i],' ',h2[i]);
  end;
  t1 := -1;
  t2 := -1;
  for i := 1 to 2*m + 1 do
    if h1[i] = a1 then begin
      t1 := i;
      break;
    end;
  if h1[0] = a1 then t1 := 0;
  if t1 = -1 then begin
    writeln(-1);
    halt;
  end;

  for i := t1 + 1 to 2*m + 1 do
    if h1[i] = a1 then begin
      k1 := i - t1;
      break;
    end;

  for i := 1 to 2*m + 1 do
    if h2[i] = a2 then begin
      t2 := i;
      break;
    end;
  if t2 = -1 then begin
     writeln(-1);
      halt;
  end;
  if h2[0] = a2 then t2 := 0;
  for i := t2 + 1 to 2*m + 1 do
    if h2[i] = a2 then begin
      k2 := i - t1;
      break;
    end;
  gcd(k1,k2,x,y,d);
  if t1= t2 then begin
    writeln(t1);
    halt;
  end;
  if (t2-t1) mod d <> 0 then begin
    writeln(-1);
    halt;
  end;
  //if (y < 0) then y := -y
  //else x := -x;
  x := x * (t2 - t1) div d;
  y := y * (t2 - t1) div d;
  writeln(t1 + abs(x*k1));
  //writeln(t2 + abs(y*k2));

end.
