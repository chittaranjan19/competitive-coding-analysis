#include<bits/stdc++.h>
#define MAXN 1000009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<ll,ll> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
ll imp[MAXN],arr[MAXN],pos[MAXN],s[MAXN<<2];
ll tap(ll l,ll r,ll nd,ll x,ll y){
	if(l>y or x>r)
		return 0;
	if(l<=x and y<=r)
		return s[nd];
	ll mid=(x+y)>>1;
	ll i1=tap(l,r,nd<<1,x,mid);
	ll i2=tap(l,r,nd<<1|1,mid+1,y);
	return i1+i2;		
}
void upd(ll p,ll nd,ll x,ll y){
	if(x==y){
		s[nd]++;
		return;
	}
	ll mid=(x+y)>>1;
	if(p<=mid)
		upd(p,nd<<1,x,mid);
	else
		upd(p,nd<<1|1,mid+1,y);
	s[nd]=s[nd<<1]+s[nd<<1|1];		
}
ll n,k,xx;
ll LOG[MAXN],M[MAXN][21];
ll query(ll l,ll r){
	ll k=LOG[r-l+1];
	return min(M[l][k],M[r-(1<<k)+1][k]);
}
void build(){
	for(ll j=1;j<21;j++)
		for(ll i=1;i<=n;i++)
			M[i][j]=min(M[i][j-1],(i+(1<<j-1)<=n?M[i+(1<<j-1)][j-1]:INF));
}
ll gg(ll st,ll en,ll val){
	while(st+1<en){
		ll mid=(st+en)>>1;
		if(query(mid,pos[val])>=val)
			en=mid;
		else
			st=mid;	
	}
	for(ll i=st;i<=en;i++)
		if(query(i,pos[val])>=val)
			return i;
}
ll ff(ll st,ll en,ll val){
	while(st+1<en){
		ll mid=(st+en)>>1;
		if(query(pos[val],mid)>=val)
			st=mid;
		else
			en=mid;	
	}
	for(ll i=en;i>=st;i--)
		if(query(pos[val],i)>=val)
			return i;
}
int main(){
	scanf("%lld%lld",&n,&k);
	for(ll i=1;i<=n;i++){
		scanf("%lld",&arr[i]);
		M[i][0]=arr[i];
		pos[arr[i]]=i;
		LOG[i]=log2(i);
	}
	for(ll i=1;i<=k;i++)
		scanf("%lld",&xx),imp[xx]=1;
	for(ll i=1;i<=n;i++)
		if(!imp[i])
			M[pos[i]][0]=INF;	
	build();
	ll ans=0;	
	for(ll i=1;i<=n;i++){
		if(imp[i])
			continue;
		ll left=gg(1,pos[i],i);
		ll right=ff(pos[i],n,i);
		ans+=(right-left+1LL)-tap(left,right,1,1,n);
		upd(pos[i],1,1,n);	
	}
	printf("%lld\n",ans);
	return 0;
}
