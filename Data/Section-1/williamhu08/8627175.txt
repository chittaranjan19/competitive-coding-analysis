//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1 << 19, MAXLG = 19;

int N = 4;
int diam[2] = {2, 3};
int ans = 2;
int depth[MAXN];	//k now this is something
int par[MAXN][MAXLG];

int lca (int x, int y) {
	if (depth[x] < depth[y]) {
		swap(x, y);
	}
	//advance "x" up
	for (int i = 0, d = depth[x] - depth[y]; d; i++, d >>= 1) {
		if (d & 1) {
			x = par[x][i];
		}
	}
	if (x == y) {
		return x;
	}
	//advance them up so long as they are not equal
	for (int i = MAXLG - 1; i >= 0; i--) {
		if (par[x][i] != par[y][i]) {
			x = par[x][i];
			y = par[y][i];
		}
	}
	return par[x][0];
}

void add (int x, int y) {
	//x -> y
	depth[y] = depth[x] + 1;
	par[y][0] = x;
	for (int i = 1, p = x; i < MAXLG; i++) {
		int up = par[p][i - 1];
		par[y][i] = p = up;
	}
	//update distances with diam[0], diam[1]
	int orig[2] = {diam[0], diam[1]};
	for (int i = 0; i < 2; i++) {
		int g = orig[i];
		int d = depth[y] + depth[g] - 2 * depth[lca(y, g)];
		if (ans < d) {
			ans = d;
			diam[0] = y;
			diam[1] = g;
		}
	}
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces379F.in", "r", stdin);
#endif
	//initialization
	par[2][0] = par[3][0] = par[4][0] = 1;
	depth[2] = depth[3] = depth[4] = 1;
	int q, v;
	for (scanf("%d", &q); q--; ) {
		scanf("%d", &v);
		//k now update it properly
		add(v, ++N);
		add(v, ++N);
		printf("%d\n", ans);
	}
}