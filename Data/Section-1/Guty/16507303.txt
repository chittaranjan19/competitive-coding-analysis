#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Person
{
	tint a,b;
	bool male;
	Person(tint aa, tint bb, bool mm)
	{
		a = aa;
		b = bb;
		male = mm;
	}
};

tint canCome (tint d, vector<Person> &friends)
{
	tint m = 0,w = 0;
	for (auto f : friends)
		if (f.a <= d && d <= f.b && f.male)
			m++;
		else if (f.a <= d && d <= f.b)
			w++;
	return 2*min(m,w);
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	tint n;
	while (cin >> n)
	{
		vector<Person> friends (n,Person(0,0,0));
		forn(i,n)
		{
			char sex;
			tint aa,bb;
			cin >> sex >> aa >> bb;
			friends[i] = Person(aa, bb,sex == 'M');
		}
		tint bestDay = -1;
		forsn(d,1,367)
			bestDay = max(bestDay, canCome(d,friends));
		cout << bestDay << endl;
		
		
	}
	return 0;
}



