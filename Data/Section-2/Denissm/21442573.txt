#include <stdio.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <queue>
#include <functional>
using namespace std;
typedef unsigned long long ull;

struct Pair {
	int index;
	int value;
	Pair(int index, int value) :index(index), value(value) {}
	bool operator<(const Pair &other) const {
		return value < other.value;
	}
	bool operator>(const Pair &other) const {
		return value > other.value;
	}
};

struct Wrap {
	int* index;
	Wrap(int* index) : index(index) {}
	bool operator<(const Wrap&other) const {
		return (*index) < (*other.index);
	}
	bool operator>(const Wrap&other) const {
		return (*index) > (*other.index);
	}
};
int arr[2002];
int count1[2002];
vector<int*> not_liked;
int n, m;
int main() {
	scanf("%d %d", &n, &m);
	memset(count1, 0, sizeof(count1));
	for (int i = 0; i < n; i++) {
		scanf("%d", arr + i);
		if (arr[i] <= m) {
			count1[arr[i]]++;
		}
		else {
			not_liked.push_back(arr + i);
		}
	}
	priority_queue<Pair, vector<Pair>, greater<Pair> > q;
	for (int i = 1; i <= m; i++) {
		q.push(Pair(i, count1[i]));
	}
	int changes = 0;
	while (!not_liked.empty()) {
		Pair p = q.top();
		if (p.value == n / m) {
			break;
		}
		q.pop();
		p.value++;
		count1[p.index]++;
		(*not_liked.back()) = p.index;
		not_liked.pop_back();
		q.push(p);
		changes++;
	}
	priority_queue<Pair> q1;
	for (int i = 1; i <= m; i++) {
		q1.push(Pair(i, count1[i]));
	}
	while (true) {
		Pair p = q.top();
		if (p.value == n / m) {
			break;
		}
		q.pop();
		Pair p1 = q1.top();
		q1.pop();
		p1.value--;
		p.value++;
		for (int i = 0; i < n; i++) {
			if (arr[i] == p1.index) {
				arr[i] = p.index;
				changes++;
				break;
			}
		}
		q.push(p);
		q1.push(p1);
	}
	printf("%d %d\n", q.top().value, changes);
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	return 0;
}