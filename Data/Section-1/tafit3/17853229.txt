import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] q = intarr();
        double ax = q[0];
        double ay = q[1];
        double bx = q[2];
        double by = q[3];
        double tx = q[4];
        double ty = q[5];
        int n = intarr()[0];
        double res = 0;
        NavigableMap<Double, Set<Integer>> a = new TreeMap<>(Collections.reverseOrder());
        NavigableMap<Double, Set<Integer>> b = new TreeMap<>(Collections.reverseOrder());
        for(int i=0;i<n;i++) {
            q = intarr();
            double cx = q[0];
            double cy = q[1];
            double u = d(cx,cy,tx,ty);
            res += u*2;
            a.computeIfAbsent(u - d(ax,ay,cx,cy), k -> new HashSet<>()).add(i);
            b.computeIfAbsent(u - d(bx,by,cx,cy), k -> new HashSet<>()).add(i);
        }
        List<Node> n1 = get(a);
        List<Node> n2 = get(b);
        double best = -Long.MAX_VALUE;
        for(Node x: n1) {
            best = Math.max(best, x.len);
        }
        for(Node x: n2) {
            best = Math.max(best, x.len);
        }
        for(Node x: n1) {
            for(Node y: n2) {
                if(x.x != y.x) {
                    best = Math.max(best, x.len + y.len);
                }
            }
        }
        res -= best;
        out(res);
    }

    private List<Node> get(NavigableMap<Double, Set<Integer>> s) {
        List<Node> res = new ArrayList<>();
        Iterator<Map.Entry<Double, Set<Integer>>> it = s.entrySet().iterator();
        for(int i=0;i<3;i++) {
            if(it.hasNext()) {
                Map.Entry<Double, Set<Integer>> e = it.next();
                Iterator<Integer> it2 = e.getValue().iterator();
                for(int j=0;j<3;j++) {
                    if(it2.hasNext()) {
                        res.add(new Node(e.getKey(), it2.next()));
                    }
                }
            }
        }
        return res;
    }

    private class Node {
        double len;
        int x;

        public Node(double len, int x) {
            this.len = len;
            this.x = x;
        }

    }

    private double d(double x1,double y1, double x2, double y2) {
        double dx = x1-x2;
        double dy = y1-y2;
        return Math.sqrt(dx*dx+dy*dy);
    }



    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
