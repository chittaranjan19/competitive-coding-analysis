#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int arr[1000005];

class trie
{
    trie* child[2];
    bool isLeaf;

    public :trie()
    {
        memset( child , 0 , sizeof(child) );
        isLeaf = false;
    };

    void insert(int num, int h)
    {
        if((1 << h) > num)
            isLeaf = 1;
        else
        {
            int bit = ((num & (1 << h)) != 0);
            if(child[bit] == 0)
                child[bit] = new trie();
            child[bit]->insert(num, h + 1);
        }
    }

    int get(int num, int h)
    {
        if(isLeaf) return 0;
        int res = -1;
        if(child[0] != 0)
            res = child[0]->get(num, h + 1);
        if((num & (1 << h)) == 0 && res == -1)
        {
            if(child[1] != 0)
            {
                res = child[1]->get(num, h + 1);
                if(res != -1) res+=1<<h;
            }
        }
        return res;
    }
};

int main()
{
    ios_base::sync_with_stdio(0);
    int n;
    trie temp;
    cin >> n;
    for(int i=0;i<n;i++)
    {
        cin >> arr[i];
        temp.insert(arr[i], 0);
    }
    for(int i=0;i<n;i++)
        cout << temp.get(arr[i], 0) << " ";
    return 0;
}