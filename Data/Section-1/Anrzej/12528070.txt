#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>
#include <unordered_map>

#define ll long long
#define ull unsigned long long
#define mp make_pair
#define x first
#define y second

using namespace std;

int n, m;


vector<pair<int, int> > hg[600000];

int lf, rt;

int in[600000], out[600000], t = 0;
vector<int> g[600000];
pair<int, char> a[600000];

void dfs(int v, int h = 0)
{
    if (hg[h].size() != 0)
    {
        int sdv = a[v].y - 'a';
        int t1 = hg[h][hg[h].size() - 1].y, t2 = (1 << sdv);
        t1 ^= t2;
        hg[h].push_back(mp(t, t1));
    }
    in[v] = t++;
    for (int i = 0; i < g[v].size(); i++)
    {
        dfs(g[v][i], h + 1);
    }
    out[v] = t++;
}

int main() 
{
    cin >> n >> m;
    for (int i = 1; i < n; i++)
        cin >> a[i].x;
    for (int i = 0; i < n; i++)
        cin >> a[i].y;
    for (int i = 1; i < n; i++)
        g[a[i].x-1].push_back(i);
    for (int i = 0; i < n; i++)
        hg[i].push_back(mp(-1, 0));
    dfs(0);
    while (m--)
    {
        int v, h;
        scanf("%d%d", &v, &h);
        v--; h--;
        int l = in[v], r = out[v];
        lf = lower_bound(hg[h].begin(), hg[h].end(), mp(l, -1)) - hg[h].begin() - 1;
        rt = lower_bound(hg[h].begin(), hg[h].end(), mp(r, -1)) - hg[h].begin() - 1;
        int tmp = hg[h][rt].y;
        tmp ^= hg[h][lf].y;
        int check = 0;
        while (tmp != 0)
        {
            if (tmp & 1)
                check++;
            tmp >>= 1;
        }
        if (check > 1)
            printf("No\n");
        else printf("Yes\n");
    }
    return 0;
}