#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

char s[111][111];
int n, m, k;
bool used[111][111];
vector<pair<int, int> > lakes[2222];
bool is_not_lake[2222];
int cur_lake = 0;
int alllakes = 0;
int dx[] = {0, 0, -1, 1}, dy[] = {-1, 1, 0, 0};

int main()
{
	cin >> n >> m >> k;
	for(int i = 0; i <= n+1; i++){
		for(int j = 0; j <= m+1; j++){
			if(i == 0 || i == n+1)
				s[i][j] = '.';
			if(j == 0 || j == m+1)
				s[i][j] = '.';
		}
	}
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++)
			cin >> s[i][j];
	}
	queue<pair<int, int> > q;
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			if(used[i][j]) continue;
			if(s[i][j] == '*') continue;
			q.push(mp(i,j));
			while(!q.empty()){
				pair<int, int> cur = q.front();
				int x = cur.fs, y = cur.sc;
				used[x][y] = 1;
				if(x == 0 || x == n+1 || y == 0 || y == m+1){
					is_not_lake[cur_lake] = 1;
					//break;
				}
				lakes[cur_lake].push_back(cur);
				q.pop();
				for(int l = 0; l < 4; l++){
					int nx = x+dx[l], ny = y+dy[l];
					if(s[nx][ny] == '.' && !used[nx][ny])
						q.push(mp(nx, ny));
				}
			}
			if(!is_not_lake[cur_lake])
				alllakes += 1;
			cur_lake += 1;
		}
	}
	int ans = 0;
	while(alllakes > k){
		int mn_i = -1, sz = 1e9;
		for(int i = 0; i < cur_lake; i++){
			if(!is_not_lake[i]){
				if(lakes[i].size() < sz)
					sz = lakes[i].size(), mn_i = i;
			}
		}
		ans += sz;
		is_not_lake[mn_i] = 1;
		for(int i = 0; i < lakes[mn_i].size(); i++){
			int x = lakes[mn_i][i].fs, y = lakes[mn_i][i].sc;
			s[x][y] = '*';
		}
		alllakes -= 1;
	}
	cout << ans << endl;
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= m; j++){
			cout << s[i][j];
		}
		cout << '\n';
	}
	return 0;
}