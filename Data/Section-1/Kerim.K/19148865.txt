#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<ll,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
//freopen("file.in","r",stdin);
//freopen("file.out","w",stdout);
vector<int>adj[MAXN];
int ata[MAXN],P[MAXN][20];
int sub[MAXN],no=1;
int chain[MAXN],lvl[MAXN];
int pos[MAXN],c[MAXN];
int st[MAXN],fn[MAXN],TIM;
class best{
	public:
	ll weight;
	int node,index;
	best(){weight=INF;node=0;index=0;}
	void make(ll _weight,int _node,int _index){
		weight=_weight;
		node=_node;
		index=_index;
	}
	bool operator < (best z) const{
		if(weight!=z.weight)
			return (weight<z.weight);
		return (node<z.node);	
	}
}s[MAXN<<2],emp;
void dfs(int nd,int pr){
	P[nd][0]=pr;sub[nd]=1;
	lvl[nd]=(pr!=-1?lvl[pr]+1:1);
	tr(it,adj[nd])
		if(*it!=pr){
			dfs(*it,nd);
			sub[nd]+=sub[*it];
		}
}
void HLD(int nd,int pr){
	st[nd]=++TIM;
	if(ata[no]==-1)
		ata[no]=nd;
	pos[nd]=TIM;
	chain[nd]=no;	
	int mx=-1,pos;
	for(int i=0;i<int(adj[nd].size());i++){
		int to=adj[nd][i];
		if(to==pr)
			continue;
		if(umax(mx,sub[to]))
			pos=i;
	}
	if(~mx)
		HLD(adj[nd][pos],nd);
	for(int i=0;i<int(adj[nd].size());i++){
		int to=adj[nd][i];
		if(to==pr or i==pos)
			continue;
		no++;HLD(to,nd);	
	}	
	fn[nd]=TIM;
}
set<PII>T[MAXN<<2];ll lazy[MAXN<<2];
void upd(int p,int w,int v,int nd,int x,int y){
	if(x==y){
		T[nd].insert(mp(w,v));
		PII ret=*T[nd].begin();
		s[nd].make(ret.ff,ret.ss,ret.ff); 
		return;
	}
	int mid=(x+y)>>1;
	if(p<=mid)
		upd(p,w,v,nd<<1,x,mid);
	else
		upd(p,w,v,nd<<1|1,mid+1,y);	
	s[nd]=min(s[nd<<1],s[nd<<1|1]);	
}
void push(int nd){
	ll &ret=lazy[nd];
	if(!ret)
		return;
	lazy[nd<<1]+=ret;	
	lazy[nd<<1|1]+=ret;	
	s[nd<<1].weight+=ret;	
	s[nd<<1|1].weight+=ret;
	ret=0LL;	
}
void inc(int l,int r,int v,int nd,int x,int y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r){
		s[nd].weight+=v;
		lazy[nd]+=v;
		return;
	}	
	push(nd);
	int mid=(x+y)>>1;
	inc(l,r,v,nd<<1,x,mid);
	inc(l,r,v,nd<<1|1,mid+1,y);
	s[nd]=min(s[nd<<1],s[nd<<1|1]);
}
void poz(int p,int nd,int x,int y){
	if(x==y){
		s[nd].make(INF,0,0);
		T[nd].erase(T[nd].begin());
		if(T[nd].size()==0)
			return;
		PII ret=*T[nd].begin();
		s[nd].make(ret.ff+lazy[nd],ret.ss,ret.ff);	
		return;
	}
	push(nd);
	int mid=(x+y)>>1;
	if(p<=mid)
		poz(p,nd<<1,x,mid);
	else
		poz(p,nd<<1|1,mid+1,y);	
	s[nd]=min(s[nd<<1],s[nd<<1|1]);	
}
int n,m,q;
void build(){
	for(int j=1;j<=18;j++)
		for(int i=1;i<=n;i++)
			if(~P[i][j-1])
				P[i][j]=P[P[i][j-1]][j-1];
}
int LCA(int x,int y){
	if(lvl[x]<lvl[y])
		swap(x,y);
	for(int i=17;i>=0;i--)
		if(lvl[x]-(1<<i)>=lvl[y])
			x=P[x][i];
	if(x==y)
		return x;
	for(int i=17;i>=0;i--)
		if(~P[x][i] and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];
	return P[x][0];		
}
best tap(int l,int r,int nd,int x,int y){
	if(l>y or x>r)
		return emp;
	if(l<=x and y<=r)
		return s[nd];
	push(nd);int mid=(x+y)>>1;
	best i1=tap(l,r,nd<<1,x,mid);
	best i2=tap(l,r,nd<<1|1,mid+1,y);
	return min(i1,i2);
}
best bul(int x,int y){
	best res;
	while(1){
		if(chain[x]==chain[y]){
			res=min(res,tap(pos[y],pos[x],1,1,n));
			return res;
		}
		res=min(res,tap(pos[ata[chain[x]]],pos[x],1,1,n));
		x=ata[chain[x]];
		x=P[x][0];
	}
	return res;
}
int main(){
	memset(P,-1,sizeof(P));
	memset(ata,-1,sizeof(ata));
	scanf("%d%d%d",&n,&m,&q);
	for(int i=1;i<n;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1,-1);
	HLD(1,-1);
	build();
	for(int i=1;i<=m;i++){
		scanf("%d",c+i);
		upd(st[c[i]],i,c[i],1,1,n);
	}
	while(q--){
		int type,u,v,k;
		scanf("%d%d%d",&type,&u,&v);
		if(type==1){
			scanf("%d",&k);
			vector<int>q;
			int z=LCA(u,v);
			while(k--){
				best ans=min(bul(u,z),bul(v,z));
				if(!ans.index)
					break;
				poz(st[c[ans.index]],1,1,n);	
				q.pb(ans.index);	
			}
			printf("%d ",int(q.size()));
			tr(it,q)
				printf("%d ",*it);
			printf("\n");	
			continue;
		}
		inc(st[u],fn[u],v,1,1,n);
	}	
	return 0;
}
