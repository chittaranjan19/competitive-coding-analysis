#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const int maxn = 2e5 + 5;

int a[maxn][20], b[maxn][20], mm[maxn];

void init(int n)
{
    mm[0] = -1;
    for(int i = 1; i <= n; ++i) mm[i] = i & (i - 1) ? mm[i - 1] : mm[i - 1] + 1;
    for(int j = 1; (1 << j) <= n; ++j)
    {
        for(int i = 0; i + (1 << j) <= n; ++i)
        {
            a[i][j] = max(a[i][j - 1], a[i + (1 << (j - 1))][j - 1]);
            b[i][j] = min(b[i][j - 1], b[i + (1 << (j - 1))][j - 1]);
        }
    }
}

int querymax(int l, int r)
{
    int k = mm[r - l + 1];
    return max(a[l][k], a[r - (1 << k) + 1][k]);
}

int querymin(int l, int r)
{
    int k = mm[r - l + 1];
    return min(b[l][k], b[r - (1 << k) + 1][k]);
}

int lb(int p, int n)
{
    int l = p, r = n;
    while(l < r)
    {
        int m = (l + r) >> 1;
        if(querymax(p, m) >= querymin(p, m)) r = m;
        else l = m + 1;
    }
    return l;
}

int ub(int p, int n)
{
    int l = p, r = n;
    while(l < r)
    {
        int m = (l + r) >> 1;
        if(querymax(p, m) > querymin(p, m)) r = m;
        else l = m + 1;
    }
    return r;
}

int main()
{
    int n;
    scanf("%d", &n);
    for(int i = 0; i < n; ++i) scanf("%d", &a[i][0]);
    for(int i = 0; i < n; ++i) scanf("%d", &b[i][0]);
    init(n);
    ll ans = 0;
    for(int i = 0; i < n; ++i)
    {
        ans += ub(i, n) - lb(i, n);
    }
    printf("%I64d\n", ans);
    return 0;
}
