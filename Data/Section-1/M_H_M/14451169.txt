//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <cstring>
#include <ctime>
#include <iomanip>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<pii, int> piii;

const int N = 100 * 1000 + 100;

int n, m;
ll a[N];
ll b[N];

vector <pii> mx;
vector <ll> L;
vector <ll> R;

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	for(int i = 0; i < n; ++i)
		cin >> a[i];
	for(int i = 0; i < n - 1; ++i)
		b[i] = abs(a[i] - a[i + 1]);
	for(int i = 0; i < m; ++i){
		int l, r;
		cin >> l >> r;
		l --; r --;
		mx.clear();
		L.clear();
		R.clear();
		for(int j = l; j < r; ++j){
			while(SZ(mx) && mx.back().X <= b[j])
				mx.pop_back();
			if(SZ(mx)) L.PB(j - mx.back().Y);
			else L.PB(j - l + 1);
			mx.PB(MP(b[j], j));
		}
		mx.clear();
		for(int j = r - 1; j >= l; --j){
			while(SZ(mx) && mx.back().X < b[j])
				mx.pop_back();
			if(SZ(mx)) R.PB(mx.back().Y - j);
			else R.PB(r - j);
			mx.PB(MP(b[j], j));
		}
		reverse(R.begin(), R.end());
		ll ans = 0;
		for(int j = 0; j < SZ(L); ++j){
//			cerr << b[j + l] << " " << L[j] << " " << R[j] << "\n";
			ans += L[j] * R[j] * b[j + l];
		}
		cout << ans << "\n";
	}
	return 0;
}
