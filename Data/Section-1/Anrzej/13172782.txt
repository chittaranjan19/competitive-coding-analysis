#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <ctime>
#include <stdio.h>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

ll n, m, k, a[100];
pair<int, int> p[10000];
ll dp[20][(1 << 18) + 10];
map<pair<int, int>, ll > s;

int cnt(int mask)
{
    int ans = 0;
    while (mask != 0){
        if (mask & 1)
            ans++;
        mask >>= 1;
    }
    return ans;
}

int main()
{
    //freopen("cranksft.in", "r", stdin);
    //freopen("cranksft.out", "w", stdout);
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    for (int i = 0; i < n+1; i++)
    {
        for (int j = 0; j < n+1; j++)
            s[mp(i, j)] = 0;
    }
    for (int i = 0; i < k; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        p[i] = mp(a, b);
        s[mp(a, b)] = c;
    }
    memset(dp, -1, sizeof(dp));
    for (int i = 0; i < n; i++)
        dp[i][1 << i] = a[i];
    for (int i = 0; i < (1 << n); i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (!(i & (1 << j))) continue;
            for (int k = 0; k < n; k++)
            {
                if ((i & (1 << k))) continue;
                int next = i | (1 << k);
                dp[k][next] = max(dp[k][next], dp[j][i] + a[k] + s[mp(j+1, k+1)]);
            }
        }
    }
    ll ans = 0;
    for (int i = 0; i < (1 << n); i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (cnt(i) == m)
                ans = max(ans, dp[j][i]);
        }
    }
    cout << ans;
    return 0;
}