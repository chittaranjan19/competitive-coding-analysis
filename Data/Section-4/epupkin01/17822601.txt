#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); a - массв, n - кол-во эл-тов
#include <iomanip>      // setw()
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> our_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#define SRT srand(int(time(0)))

using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323;

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<const int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef list<int> List;
typedef List::iterator lIter;

const int S = 100001;
int n, m, a[S], passed[S], ans = 0;
List l[S];

void dfs(int rib, int cats);

int main()
{
    // entrance
    cin >> n >> m;
    for (int i = 1; i <= n; ++i)
        scanf("%d", a + i);
    for (int i = 1, r1, r2; i < n; ++i)
    {
        scanf("%d%d", &r1, &r2);
        l[r1].push_back(r2);
        l[r2].push_back(r1);
    }
    
    // solving
    dfs(1, 0);
    
    cout << ans << '\n';
    return 0;
}

bool is_last;

void dfs(int r, int c)
{
    passed[r] = 1;
    lIter it = l[r].begin();
    
    if (a[r])
        ++c;
    else
        c = 0;
    
    if (c > m)
        return;
    
    is_last = true;
    while (it != l[r].end())
    {
        if (!passed[*it])
        {
            dfs(*it, c);
            is_last = false;
        }
        ++it;
    }
    
    if (is_last)
        ++ans;
}