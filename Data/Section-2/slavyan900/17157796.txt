#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int p[2001];

int dfs(int start, vector<vector<int> > graph, int depth)
{
	int res = depth;
	for(int i = 0; i < graph[start].size(); ++i)
	{
		res = max(res, dfs(graph[start][i], graph, depth + 1));
	}
	return res;
}

int main()
{
	int n;
	cin >> n;
	vector<vector<int> > graph(n + 1);
	int res = 0;
	for(int i = 1; i <= n; ++i)
	{
		cin >> p[i];
		if(p[i] != -1)
		{
			graph[p[i]].push_back(i);
		}
	}
	for(int i = 1; i <= n; ++i)
	{
		if(p[i] == -1)
		{
			res = max(res, dfs(i, graph, 1));
		}
	}
	cout << res << endl;
	return 0;
}