#include "bits/stdc++.h"
#define MAXN 300009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
class node{
	public:
	int lazy,pre,suf,mx,bir,nol;
	node(){
		lazy=-1;pre=0;suf=0;mx=0;bir=0;nol=0;
	}
	void init(){
		pre=suf=mx=nol=1;
	}
}s[MAXN<<2];
node merge(node x,node y){
	node z;
	if(x.bir==0)
		z.pre=(x.nol+y.pre);
	else
		z.pre=x.pre;
	if(y.bir==0)
		z.suf=y.nol+x.suf;
	else
		z.suf=y.suf;
	z.nol=x.nol+y.nol;
	z.nol=x.bir+y.bir;
	z.mx=max(max(x.mx,y.mx),x.suf+y.pre);
	return z;
}
void build(int nd,int x,int y){
	if(x==y){
		s[nd].init();
		return;
	}
	int mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);
	s[nd]=merge(s[nd<<1],s[nd<<1|1]);
}
void plant(int nd,int x,int y,int v){
	if(v==0){
		s[nd].bir=0;
		s[nd].mx=s[nd].pre=s[nd].suf=s[nd].nol=(y-x+1);
		s[nd].lazy=0;
	}	
	else{
		s[nd].bir=(y-x+1);
		s[nd].mx=s[nd].pre=s[nd].suf=s[nd].nol=0;
		s[nd].lazy=1;
	}
}
void shift(int nd,int x,int y){
	int &ret=s[nd].lazy;
	if(ret==-1)
		return;
	int mid=(x+y)>>1;	
	plant(nd<<1,x,mid,ret);		
	plant(nd<<1|1,mid+1,y,ret);
	ret=-1;		
}
int tap(int p,int nd,int x,int y){
	if(x==y)
		return x;
	shift(nd,x,y);
	int mid=(x+y)>>1;	
	if(s[nd<<1].mx>=p)  
		return tap(p,nd<<1,x,mid);
	if(s[nd<<1].suf+s[nd<<1|1].pre>=p)
		return tap(s[nd<<1].suf,nd<<1,x,mid);
	return tap(p,nd<<1|1,mid+1,y);	
}
int upd(int l,int r,int v,int nd,int x,int y){
	if(l>y or x>r)
		return 0;
	if(l<=x and y<=r){
		int val=s[nd].bir;
		plant(nd,x,y,v);
		return val;
	}	
	shift(nd,x,y);
	int mid=(x+y)>>1;
	int i1=upd(l,r,v,nd<<1,x,mid);
	int i2=upd(l,r,v,nd<<1|1,mid+1,y);
	s[nd]=merge(s[nd<<1],s[nd<<1|1]);
	return i1+i2;
}
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	int n,q;
	scanf("%d%d",&n,&q);
	build(1,1,n);
	while(q--){
		int type,x,l,pos;
		scanf("%d",&type);
		if(type==1){
			scanf("%d",&l);
			if(s[1].mx<l)
				printf("-1\n");
			else{
				pos=tap(l,1,1,n);
				printf("%d\n",pos-1);
			}	
			upd(pos,pos+l-1,1,1,1,n);	
			continue;
		} 
		scanf("%d%d",&x,&l);x++;
		printf("%d\n",upd(x,x+l-1,0,1,1,n));
	}
	return 0;
}
