#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 200010;

string s, t;
int n, z[maxn], dp[maxn][2], pref[maxn][2];
set<int> cuts;

void compute_z()
{
	int L = 0, R = 0;
	for(int i=1; i<n; i++){
        	if(i>R){
          		L = R = i;
          		while(R<n && s[R-L]==s[R]) 
          			R++;
          		z[i] = R-L; 
          		R--;
        	} 
        	else{
          	      int k = i-L;
          	      if(z[k]<R-i+1) 
          		      z[i] = z[k];
          	      else{
      		      L = i;
      		      while(R<n && s[R-L]==s[R]) 
      			      R++;
      		      z[i] = R-L; 
      		      R--;
          	      }
  	      }
	}
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	cin >> s >> t;
	s = t + s;
	n = s.size();
	compute_z();	
	for(int i=t.size(); i<n; i++){
		if(z[i] >= t.size())
			cuts.insert(i+t.size()-1);
	}
	int ans = 0;
	pref[n][1] = dp[n][1] = 1;
	for(int i=n-1; i>=t.size(); i--){
		set<int> :: iterator it = cuts.lower_bound(i+t.size()-1);
		dp[i][0] = (dp[i+1][0] + ((it!=cuts.end())?pref[*it + 1][1]:0))%mod;
		dp[i][1] = (dp[i+1][1] + ((it!=cuts.end())?pref[*it + 1][1]:0))%mod;
		pref[i][0] = (pref[i+1][0] + dp[i][0])%mod;
		pref[i][1] = (pref[i+1][1] + dp[i][1])%mod;
	}
	printf("%d\n", dp[t.size()][0]);
	return 0;
}
