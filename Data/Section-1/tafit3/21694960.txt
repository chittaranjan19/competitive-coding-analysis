import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

import static java.util.Collections.reverseOrder;

public class ProblemD3 {
    private Integer ZERO = 0;
    private long INF = Long.MAX_VALUE / 3;
    BufferedReader rd;

    ProblemD3() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        long[][] c = new long[n][];
        for(int i=0;i<n;i++) {
            c[i] = longarr();
        }

        PriorityQueue<Pair> higher = new PriorityQueue<>();
        PriorityQueue<Pair> lower = new PriorityQueue<>(reverseOrder());
        long lim = c[0][0];
        int better = 0;
        for(int i=1;i<n;i++) {
            long[] d = c[i];
            if(d[0] > lim) {
                higher.add(new Pair(d[1] - d[0] + 1, i));
                better++;
            } else {
                lower.add(new Pair(d[0], i));
            }
        }

        long best = better;
        while(!higher.isEmpty()) {
            Pair p = higher.poll();
            if(lim - p.x >= 0) {
                better--;
                long newLim = lim - p.x;
                while(!lower.isEmpty()) {
                    Pair lo = lower.peek();
                    if(lo.x > newLim) {
                        lo = lower.poll();
                        long[] d = c[lo.ix];
                        higher.add(new Pair(d[1] - d[0] + 1, lo.ix));
                        better++;
                    } else {
                        break;
                    }
                }
                lim = newLim;
                best = Math.min(best, better);
            } else {
                break;
            }
        }
        out(best + 1);
    }

    private class Pair implements Comparable<Pair> {
        final long x;
        final int ix;

        public Pair(long x, int ix) {
            this.x = x;
            this.ix = ix;
        }

        @Override
        public int compareTo(Pair other) {
            return Long.compare(x, other.x);
        }
    }


    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD3();
    }
}
