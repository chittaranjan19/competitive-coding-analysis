#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const int MAX_N = 500005;

long long a[MAX_N];

inline int cb(const int &value, const vector<int> &v) {
    int left = 0, right = static_cast<int>(v.size() - 1);
    int last = -1;
    while (left <= right) {
        int middle = (left + right) / 2;
        if (v[middle] > value + 1) {
            last = middle;
            right = middle - 1;
        } else {
            left = middle + 1;
        }
    }
    if (last == -1) {
        return 0;
    }
    return v.size() - last;
}

int main() {
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++ i) {
        cin >> a[i];
        a[i] += a[i - 1];
    }
    if (a[n] % 3) {
        cout << "0\n";
        return 0;
    }
    vector<int> prefix, sufix;
    for (int i = 1; i <= n; ++ i) {
        if (a[i] == a[n] / 3) {
            prefix.push_back(i);
        }
        if(a[n] - a[i - 1] == a[n] / 3) {
            sufix.push_back(i);
        }
    }
    long long sum = 0;
    for (vector<int> :: iterator it = prefix.begin(); it != prefix.end(); ++ it) {
        sum += cb(*it, sufix);
    }
    cout << sum << "\n";
    return 0;
}
