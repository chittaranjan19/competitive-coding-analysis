#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

vector<int> tree[100005];

bool dfs(int node, int parent = -1, int cnt = -1)
{
  if(cnt == 2 && tree[node].size() - 1 > 2) return false;
  if(cnt == 1 && tree[node].size() - 1 > 1) return false;
  int x = 1;
  if(parent == -1)
    x = 2;
  if(cnt != -1)
  {
    for(int i=0;i<tree[node].size();i++)
    {
      if(tree[node][i] == parent) continue;
      if(!dfs(tree[node][i], node, 1))
        return false;
    }
    return true;
  }
  for(int i=0;i<tree[node].size();i++)
  {
    if(tree[node][i] == parent) continue;
    if(x && !dfs(tree[node][i], node, -1))
      return false;
    if(!x && !dfs(tree[node][i], node, 2))
      return false;
    if(x) x--;
  }
  return true;
}

bool sorter(int a, int b)
{
  return tree[a].size() > tree[b].size();
}

int main()
{
  //freopen("approximation.in", "r", stdin);
  //freopen("approximation.out", "w", stdout);
  int n, x, y;
  scanf("%d", &n);
  for(int i=0;i<n-1;i++)
  {
    scanf("%d %d", &x, &y);
    tree[x].pb(y);
    tree[y].pb(x);
  }
  int ch = 1;
  for(int i=1;i<=n;i++)
  {
    int cnt = 0;
    sort(tree[i].begin(), tree[i].end(), sorter);
    for(int j=0;j<tree[i].size();j++)
    {
      cnt += ((tree[tree[i][j]].size() - 1) > 2);
    }
    if(cnt >= 2)
      ch = i;
  }
  if(dfs(ch))
    printf("Yes");
  else printf("No");
  return 0;
}
