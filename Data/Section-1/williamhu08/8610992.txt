//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e6 + 10;

int N;
char str[MAXN];
char ts[MAXN];
int arr[MAXN];	//don't listen!!
int perm[MAXN];
int temp[MAXN];	//temporary array to store the result
int curpow[MAXN];

void compose (int *a, int *b) {
	//something like a *= b;
	for (int i = 0; i < N; i++) {
		temp[i] = a[b[i]];
	}
	copy(temp, temp + N, a);
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces484C.in", "r", stdin);
#endif
	gets(str);
	N = strlen(str);
	for (int m, d, k = scanf("%d", &m); m--; ) {
		scanf("%d %d", &k, &d);
		//calc the permutation
		//on first k elements, do a d-sort
		for (int i = 0, ptr = 0; i < d; i++) {
			for (int j = i; j < k; j += d) {
				perm[ptr++] = j;
			}
		}
		//shift it by one
		for (int i = k; i < N; i++) {
			perm[i] = i;
		}
		rotate(perm, perm + 1, perm + N);
		//ok now it is applied: n - k + 1 times
		//initialize!
		for (int i = 0; i < N; i++) {
			arr[i] = i;
		}
		copy(perm, perm + N, curpow);
		for (int i = N - k + 1; i; i >>= 1) {
			//i is the curpow
			//multiply if ok
			if (i & 1) {
				compose(arr, curpow);
			}
			compose(curpow, curpow);
		}
		//don't forget to rotate back RIGHT n - k + 1 times, or it is same as k - 1 left
		rotate(arr, arr + (k - 1), arr + N);
		//now adjust the string
		for (int i = 0; i < N; i++) {
			//arr[i]'th element goes at str[i]
			ts[i] = str[arr[i]];
		}
		copy(ts, ts + N, str);
		//print result
		puts(str);	
	}
}