#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>

using namespace std;
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
const int maxn = 222222;
int MAX[maxn<<2];
int MIN[maxn<<2];
int SUM[maxn<<2];
int max(int a,int b){if(a>b)return a;else return b;}
int min(int a,int b){if(a<b)return a;else return b;}


struct node
{
    int x;
    int y;
    int id;
}data[10005];


int cmp(node a, node b)
{
    if(a.x>b.x)
        return 1;
    else if(a.x==b.x)
    {
        return a.y>b.y;
    }
    return 0;
}



void PushUP(int rt)
{
  MAX[rt] = max(MAX[rt<<1] , MAX[rt<<1|1]);
  MIN[rt] = min(MIN[rt<<1] , MIN[rt<<1|1]);
  SUM[rt] = SUM[rt<<1] + SUM[rt<<1|1];
}

void build(int l,int r,int rt) {
  if (l == r)
    {
    MAX[rt]=0;
    MIN[rt] = MAX[rt];
    SUM[rt] = MAX[rt];
    //printf("mi = %d\n",MIN[rt]);
  //	printf("ma = %d\n",MAX[rt]);
    return ;
  }
  int m = (l + r) >> 1;
  build(lson);
  build(rson);
  PushUP(rt);
}
void update1(int p,int add,int l,int r,int rt)
{
  if (l == r) {
    MAX[rt] = SUM[rt]+add;
    MIN[rt] = SUM[rt]+add;
    SUM[rt] = SUM[rt] + add;
    return ;
  }
  int m = (l + r) >> 1;
  if (p <= m) update1(p , add ,lson);
  else update1(p , add , rson);
  PushUP(rt);
}

int queryhe(int L,int R,int l,int r,int rt)
{
  if (L <= l && r <= R)
  {
    return SUM[rt];
  }
  int m = (l + r) >> 1;
  int ret = 0;
  if (L <= m) ret += queryhe(L , R , lson);
  if (R > m)  ret +=  queryhe(L , R , rson);
  return ret;
}


int ans[200005];


int main()
{
    int n;
    while(scanf("%d",&n)!=EOF)
    {
        int i;
        int maxn=0;
        int minn=9999999999;
        for(i=1;i<=n;i++)
        {
            scanf("%d%d",&data[i].x,&data[i].y);
            data[i].id=i;
            if(data[i].y>maxn)
                maxn=data[i].y;
            if(data[i].y<minn)
                minn=data[i].y;
        }

        build(minn-5, maxn+5, 1);
        sort(data+1,data+1+n,cmp);


        for(i=1;i<=n;i++)
        {
           int xu=data[i].id;
           ans[xu]=queryhe(minn,data[i].y,minn,maxn,minn);
           update1(data[i].y,1,minn,maxn,minn);
        }

        for(i=1;i<=n;i++)
            printf("%d\n",ans[i]);

    }
    return 0;
}
