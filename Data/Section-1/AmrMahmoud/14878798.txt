#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[100005];

int main()
{
  int n, m, x;
  scanf("%d", &n);
  LL sum = 0;
  for(int i=0;i<n;i++)
  {
    scanf("%d", &arr[i]);
    sum += arr[i];
  }
  LL rem = sum % n;
  sum /= n;
  sort(arr, arr + n);
  LL res = 0;
  int L = 0, R = n - 1;
  while(R > L)
  {
    if(rem)
    {
      LL tmp = arr[R] - (sum + 1);
      if(arr[L] + tmp < sum)
      {
        R--;
        rem--;
        arr[L] += tmp;
        res += tmp;
      }
      else if(arr[L] + tmp == sum)
      {
        R--;
        rem--;
        L++;
        res += tmp;
      }
      else
      {
        L++;
        tmp = sum - arr[L];
        arr[R] -= tmp;
        res += tmp;
      }
    }
    else
    {
      LL tmp = arr[R] - sum;
      if(arr[L] + tmp < sum)
      {
        R--;
        arr[L] += tmp;
        res += tmp;
      }
      else if(arr[L] + tmp == sum)
      {
        R--;
        L++;
        res += tmp;
      }
      else
      {
        L++;
        tmp = sum - arr[L];
        arr[R] -= tmp;
        res += tmp;
      }
    }
  }
  cout << res;
  return 0;
}
