#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

int main() {
    // freopen("611C.in", "r", stdin);
    
    int h, w;
    scanf("%d %d", &h, &w);
    string grid[h];

    loop(it, h)
    	cin >> grid[it];

    int dp_ver[h+1][w+1], dp_hor[h+1][w+1];
    memset(dp_ver, 0, (h+1)*(w+1)*4);
    memset(dp_hor, 0, (h+1)*(w+1)*4);

    loop(i, h) {
    	loop(j, w) {
    		if (grid[i][j] == '.') {
    			if ((i != h-1) and (grid[i+1][j] == '.')) {
    				dp_ver[i+1][j+1]++;
    			}
    			if ((j != w-1) and (grid[i][j+1] == '.')) {
    				dp_hor[i+1][j+1]++;
    			}
    		}
    	}
    }

    loop(i, h+1) {
    	loop(j, w+1) {
    		if (j) {
    			dp_ver[i][j] += dp_ver[i][j-1];
    			dp_hor[i][j] += dp_hor[i][j-1];
    		}
    		if (i) {
    			dp_ver[i][j] += dp_ver[i-1][j];
    			dp_hor[i][j] += dp_hor[i-1][j];
    		}
    		if ((i) and (j)) {
    			dp_ver[i][j] -= dp_ver[i-1][j-1];
    			dp_hor[i][j] -= dp_hor[i-1][j-1];
    		}
    	}
    }

    int q;
    scanf("%d", &q);
    while (q--) {
    	int r1, c1, r2, c2;
    	scanf("%d %d %d %d", &r1, &c1, &r2, &c2);

    	int count_ver = dp_ver[r2-1][c2];
    	int count_hor = dp_hor[r2][c2-1];
    	if (r1) {
    		count_ver -= dp_ver[r1-1][c2];
    		count_hor -= dp_hor[r1-1][c2-1];
    	}
    	if (c1) {
    		count_ver -= dp_ver[r2-1][c1-1];
    		count_hor -= dp_hor[r2][c1-1];
    	}
    	if ((r1) and (c1)) {
    		count_ver += dp_ver[r1-1][c1-1];
    		count_hor += dp_hor[r1-1][c1-1];
    	}
    	printf("%d\n", count_ver+count_hor);
    }

    return 0;
}