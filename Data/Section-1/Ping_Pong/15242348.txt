#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int main()
{
    //ios_base::sync_with_stdio(false);
    //cin.tie(NULL);
    long long n, m, s, f;
    scanf("%I64d %I64d", &n, &m);
    long long ig[n], hv[n];
    for (long long i = 0; i < n; i++)
        ig[i] = 0;
    set<long long> val[n];
    vector<long long> graph[n];
    for (long long i = 0; i <m; i++)
    {
        scanf("%I64d %I64d", &s, &f);
        ig[s - 1]++;
        ig[f - 1]++;
        graph[s - 1].push_back(f - 1);
        graph[f - 1].push_back(s - 1);
    }
    for (long long i = 0; i < n; i++)
    {
        if (val[i].size() == 0)
            hv[i] = 1;
        else
            hv[i] = *(--val[i].end()) + 1;
        for (long long j = 0; j < graph[i].size(); j++)
            if (graph[i][j] > i)
                val[graph[i][j]].insert(hv[i]);
    }
    long long ans = 0;
    for (long long i = 0; i < n; i++)
        ans = max(ans, hv[i] * ig[i]);
    printf("%I64d", ans);
    return 0;
}
