#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
typedef long long int64;
typedef pair<int64, int> P;
const int MAX_n = 200000;
priority_queue<P,vector<P>,greater<P> > que;
int64 a[MAX_n];
int abs(int x)
{   return x > 0? x:-x;}
int main()
{
    int n,k,x;
    scanf("%d%d%d",&n,&k,&x);
    for(int i = 0; i < n; ++i)
        scanf("%I64d",a+i);
    
    
    int cntn = 0,cntp = 0,cntz = 0;
    for(int i = 0; i < n; ++i)
    {
        if(a[i] > 0)    ++cntp;
        if(a[i] == 0)   ++cntz;
        if(a[i] < 0)    ++cntn;
        
    }
    
    if(cntz > k)
    {
        for(int i = 0; i < n; ++i)
            printf("%lld%c",a[i]," \n"[i == n-1]);
        return 0;
    }
    
    for(int i = 0; i < n; ++i)
        que.push(make_pair(abs(a[i]), i));
    
    if(cntn & 1)
    {
        for(int i = 0; i < k; ++i)
        {
            P p = que.top();   que.pop();
            int t = p.second;
            if(a[t] >= 0)   a[t] += x;
            else            a[t] -= x;
            que.push(make_pair(abs(a[t]), t));
        }
    }
    else
    {
        if(que.top().first > (int64)k*x)
        {
            for(int i = 0; i < k; ++i)
            {
                P p =que.top();    que.pop();
                int t = p.second;
                if(a[t] > 0)    a[t] -= x;
                else            a[t] += x;
                que.push(make_pair(abs(a[t]), t));
            }
        }
        else if(que.top().first == (int64)k * x)
        {
            P p = que.top();   que.pop();
            int t = p.second;
            a[t] = 0;
            que.push(make_pair(a[t], t));
        }
        else if(que.top().first < (int64)k * x)
        {
            int change = que.top().second;  que.pop();
            if(a[change] >= 0)
                while(a[change] >= 0)
                    a[change] -= x, --k;
            else
                while(a[change] <= 0)
                    a[change] += x, --k;
            que.push(make_pair(abs(a[change]), change));
            for(int i = 0; i < k; ++i)
            {
                P p = que.top();   que.pop();
                int t = p.second;
                if(a[t] >= 0)   a[t] += x;
                else            a[t] -= x;
                que.push(make_pair(abs(a[t]), t));
            }
        }
    }
    for(int i = 0; i < n; ++i)
        printf("%I64d%c",a[i]," \n"[i == n-1]);
    
}
