import java.io.BufferedInputStream;
import java.util.Scanner;

/**
 * Created by leen on 8/29/16.
 */
public class _711C {
    public static void main(String[] args) {
        Scanner scan = new Scanner(new BufferedInputStream(System.in, 64 * 1024));
        int n = scan.nextInt(), m = scan.nextInt(), k = scan.nextInt();
        int[] c = new int[n];
        for(int i = 0; i < n; i++)
            c[i] = scan.nextInt();

        int[][] p = new int[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                p[i][j] = scan.nextInt();
                if(c[i] != 0)
                    p[i][j] = 0;
            }
        }

        long[][][] dp = new long[n+1][m+1][k+1];

        for(int i = 0; i <= n; i++) {
            for(int j = 0; j <= m; j++) {
                for (int l = 0; l <= k; l++) {
                    if(i == 0 || j == 0 || l == 0)
                        dp[i][j][l] = -1;
                }
            }
        }

        dp[0][0][0] = 0;

        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                for(int l = 1; l <= k; l++) {
                    if(c[i-1] != 0 && j != c[i-1])
                        dp[i][j][l] = -1l;
                    else {
                        long cost = Long.MAX_VALUE;
                        if(dp[i-1][j][l] != -1)
                            cost = dp[i-1][j][l] + p[i-1][j-1];

                        for(int x = 0; x <= m; x++) {
                            if(x != j && dp[i-1][x][l-1] != -1)
                                cost = Math.min(cost, dp[i-1][x][l-1] + p[i-1][j-1]);
                        }

                        if(cost == Long.MAX_VALUE)
                            cost = -1;
                        dp[i][j][l] = cost;
                    }
                }
            }
        }

        long min = Integer.MAX_VALUE;
        for(int i = 1; i <= m; i++) {
            if(dp[n][i][k] != -1 && dp[n][i][k] < min)
                min = dp[n][i][k];
        }
        if(min == Long.MAX_VALUE)
            min = -1;
        System.out.println(min);
    }
}
