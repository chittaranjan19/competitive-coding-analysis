#include <iostream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <functional>
#include <algorithm>
#include <climits>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <stack>
#include <queue>
#include <vector>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define ll long long
#define f first
#define s second

typedef pair<int, int> pii;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

int row[1010], col[1010];
int dp[4010][4010];

int solve(int l, int r)
{
    if(l>r)
        return 0;
    if(l==r){
        if(!col[l] || !row[l])
            return 1;
        return 0;
    }
    if(dp[l][r]!=-1)
        return dp[l][r];
    int ret, x;
    ret = 0;
    if(col[l] && !col[r]){
        if(row[l] && !row[r])
            ret = solve(l+1, r-1)+2;
        else if(row[l] && row[r])
            ret = solve(l+1, r-1)+1;
        else if(!row[l] && !row[r])
            ret = solve(l+1, r-1)+3;
        else
            ret = solve(l+1, r-1)+2;
    }
    else if(col[l] && col[r]){
        if(row[l] && !row[r])
            ret = solve(l+1, r-1)+1;
        else if(row[l] && row[r])
            ret = solve(l+1, r-1);
        else if(!row[l] && !row[r])
            ret = solve(l+1, r-1)+2;
        else
            ret = solve(l+1, r-1)+1;
    }
    else if(!col[l] && !col[r]){
        if(row[l] && !row[r])
            ret = solve(l+1, r-1)+3;
        else if(row[l] && row[r])
            ret = solve(l+1, r-1)+2;
        else if(!row[l] && !row[r])
            ret = solve(l+1, r-1)+4;
        else
            ret = solve(l+1, r-1)+3;
    }
    else{
        if(row[l] && !row[r])
            ret = solve(l+1, r-1)+2;
        else if(row[l] && row[r])
            ret = solve(l+1, r-1)+1;
        else if(!row[l] && !row[r])
            ret = solve(l+1, r-1)+3;
        else
            ret = solve(l+1, r-1)+2;
    }
    return dp[l][r] = ret;
}

int main()
{
    //freopen("i.txt", "r", stdin);
    //freopen("o.txt", "w", stdout);
    int t, i, j, n, m, x, y;
    memset(dp, -1, sizeof(dp));
    sd(n), sd(m);
    for(i=0; i<m; i++){
        sd(x), sd(y);
        row[x] = col[y] = 1;
    }
    int ans = solve(2, n-1);
    printf("%d\n", ans);
    return 0;
}
