/*
    ━━━━━┒
    ┓┏┓┏┓┃让老子先跳！
    ┛┗┛┗┛┃＼○／
    ┓┏┓┏┓┃ //
    ┛┗┛┗┛┃ノ)
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┛┗┛┗┛┃
    ┓┏┓┏┓┃
    ┃┃┃┃┃┃
    ┻┻┻┻┻┻
*/
#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <algorithm>
#include <cctype>
#include <stack>
#include <map>
#include <set>
#include <iomanip>
#include <cstdlib>
#include <queue>
#include <ctime>
#include <cmath>
using namespace std;
const int maxn=1005;
int a[maxn];
int now,n;
struct hehe
{
    int s,to;
    hehe(int a=0):s(a){};
}dp[maxn][maxn];
void dfs(int i,int j)
{
    if(dp[i][j].s) now++,dfs(j,dp[i][j].to);
    else return ;
}
int main()
{
    while(cin>>n)
    {
        for(int i=1;i<=n;i++) scanf("%d",&a[i]);
        sort(a+1,a+n+1);
        for(int i=1;i<=n;i++)
            for(int j=i+1;j<=n;j++)
            {
                int x=a[i]+a[j];
                int l=lower_bound(a+1,a+n+1,x)-a;
                if(a[l]==x) dp[i][j].s=dp[j][i].s=1,dp[i][j].to=dp[j][i].to=l;
            }
        int ans=2;
        for(int i=1;i<=n;i++)
            for(int j=1;j<=n;j++)
            {
                now=2;
                if(dp[i][j].s)
                {
                    now=3;
                    dfs(j,dp[i][j].to);
                }
                ans=max(ans,now);
            }
        cout<<ans<<endl;
    }
}
