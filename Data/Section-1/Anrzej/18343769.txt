#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int c(int k, int n){
	int nm = 1, dm = 1;
	while (k){
		nm *= n;
		dm *= k;
		n--, k--;
	}
	return nm / dm;
}

/*
struct item {
int y, x, cnt;
item *l, *r;
};

item*t;

int cnt(item *it){
return it ? it->cnt : 0;
}

void upd_cnt(item * it){
if (it) it->cnt = 1 + cnt(it->l) + cnt(it->r);
}

void merge(item *(&t), item *l, item *r){
if (!l || !r)
t = l ? l : r;
else if (l->y > r->y)
merge(l->r, l->r, r), t = l;
else merge(r->l, l, r->l), t = r;
upd_cnt(t);
}

void split(item *t, item *(&l), item *(&r), int k, int add = 0){
if (!t)	{
l = r = NULL;
return;
}
int cur_k = add + cnt(t->l);
if (k <= cur_k)
split(t->l, l, t->l, k, add), r = t;
else split(t->r, t->r, r, k, add + 1 + cnt(t->l)), l = t;
upd_cnt(t);
}

int sz = 0;

void insert(item *(&t), item *add){
if (!t)
t = add;
else if (add->y > t->y)
split(t, add->l, add->r, add->cnt), t = add;
else insert((add->cnt < t->cnt) ? t->l : t->r, add);
item *l, *r;
split(t, l, r, add->cnt);
merge(l, l, add);
merge(t, l, r);
upd_cnt(t);
}

int cur = 0;
void set_value(item* n){
if (n->l)
set_value(n->l);
n->x = cur++;
if (n->r)
set_value(n->r);
}

void print(item* n){
if (!n) return;
if (n->l)
print(n->l);
cout << n->x + 1<< ' ';
if (n->r)
print(n->r);
}

void print_tree(item *n){
print(n);
cout << endl;
}*/

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 2e5 + 10, lg = 2;
ll mod = 1e9 + 7;

int main()
{
	bool a[111];
	memset(a, 1, sizeof(a));
	for (int i = 2; i <= 100; i++){
		for (int j = 2 * i; j <= 100; j += i)
			a[j] = 0;
	}
	vector<int> primes;
	for (int i = 2; i <= 100; i++)
	{
		if (a[i])
			primes.push_back(i);
	}
	int first = 0;
	for (auto p : primes){
		if (p > 50) continue;
		cout << p << endl;
		fflush(stdout);
		string ans;
		cin >> ans;
		if (ans == "yes"){
			first = p;
			break;
		}
	}
	if (first == 0){
		cout << "prime";
	}
	int second = 0;
	for (auto p : primes){
		if (p > 50) continue;
		if (p*first <= 100 && p > first){
			cout << p << endl;
			fflush(stdout);
			string ans;
			cin >> ans;
			if (ans == "yes"){
				second = 1;
				break;
			}
		}
	}
	if (second == 0 && first*first <= 100){
		cout << first * first << endl;
		fflush(stdout);
		string ans;
		cin >> ans;
		if (ans == "yes"){
			second = 1;
		}
	}
	if (second)
		cout << "composite";
	else
		cout << "prime";
	return 0;
}