import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

/**
 * Date: 02.05.14
 * Time: 20:07
 */
public class MatchCatch {

    public MatchCatch() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String a = rd.readLine();
        String b = rd.readLine();

        Bag bag = new Bag();
        bag.apos = new HashSet<Integer>();
        for(int i=0;i<a.length();i++) {
            bag.apos.add(i);
        }
        bag.bpos = new HashSet<Integer>();
        for(int i=0;i<b.length();i++) {
            bag.bpos.add(i);
        }
        Queue<Bag> bags = new LinkedList<>();
        bags.add(bag);
        int[] p2 = new int[30];
        p2[0] = 1;
        for(int i=1;i<30;i++) {
            p2[i] = p2[i-1]*2;
        }
        while(!bags.isEmpty()) {
            bag = bags.poll();

            Map<Integer, Set<Integer>> aMap = new HashMap<>();
            for(Integer pos: bag.apos) {
                if(pos < a.length()) {
                    int ch = a.charAt(pos)-'a';
                    Set<Integer> cs = aMap.get(ch);
                    if(cs == null) {
                        cs = new HashSet<>();
                        aMap.put(ch, cs);
                    }
                    cs.add(pos);
                }
            }
            Map<Integer, Set<Integer>> bMap = new HashMap<>();
            for(Integer pos: bag.bpos) {
                if(pos < b.length()) {
                    int ch = b.charAt(pos)-'a';
                    Set<Integer> cs = bMap.get(ch);
                    if(cs == null) {
                        cs = new HashSet<>();
                        bMap.put(ch, cs);
                    }
                    cs.add(pos);
                }
            }
            Set<Integer> chars = new HashSet<>(aMap.keySet());
            chars.retainAll(bMap.keySet());

            if(!chars.isEmpty()) {
                for(int ch: chars) {
                    Set<Integer> nextA = aMap.get(ch);
                    Set<Integer> nextB = bMap.get(ch);
                    Set<Integer> incA = inc(nextA);
                    Set<Integer> incB = inc(nextB);
                    if(incA.size() > 0 && incB.size() > 0) {
                        if(incA.size() == 1 && incB.size() == 1) {
                            out(bag.len+1);
                            return;
                        }
                        Bag bag2 = new Bag();
                        bag2.apos = incA;
                        bag2.bpos = incB;
                        bag2.len = bag.len+1;
                        bags.add(bag2);
                    }
                }
            }
        }
        out("-1");
    }

    private Set<Integer> inc(Set<Integer> x) {
        Set<Integer> incremented = new HashSet<>();
        for(Integer pos: x) {
            incremented.add(pos+1);
        }
        return incremented;
    }

    class Bag {
        Set<Integer> apos;
        Set<Integer> bpos;
        int len;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new MatchCatch();
    }
}
