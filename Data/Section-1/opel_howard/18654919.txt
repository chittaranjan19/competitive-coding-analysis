#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

#ifdef __WIN32 
	#define gc getchar
#else
	#define gc getchar_unlocked
#endif
#define fsdecimal(type) \
	void fs ##type  (type& inp) { \
		register char c = gc(), prev = '+'; \
		for (; !isdigit(c); c = gc()) prev = c; \
		inp = 0; \
		for (; isdigit(c); c = gc()) { \
			inp = (inp << 3)+(inp << 1)+(c-'0'); \
		} \
		if (prev == '-') \
			inp *= -1; \
	}
fsdecimal(int)
fsdecimal(ll)

struct Node {
	vi children;
};

int main() {
    // freopen("115A.in", "r", stdin);
    
    int n;
    fsint(n);

    vector<Node> tree(n+1);

    loop1(idx, n) {
    	int par = 0;
    	fsint(par);
    	par = max(par, 0);
    	tree[par].children.pub(idx);
    }

    que<Node*> q;
    q.pu(&tree[0]);
    int ans = -1;
    while (!q.empty()) {
    	ans++;
    	int qs = q.size();
    	while (qs-- > 0) {
    		Node &node = *q.front();
    		q.po();
    		iterate(child_p, node.children) {
    			q.pu(&tree[*child_p]);
    		}
    	}
    }
    printf("%d\n", ans);

    return 0;
}