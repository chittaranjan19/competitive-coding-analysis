#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-10
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> arr[100005];
const int magic = 50;
vector<int> fi[1000005];
vector<int> se[1000005];
vector<pair<int, int> > ch1, ch2;

int main()
{
  //freopen("seaport.in", "r", stdin);
  //freopen("seaport.out", "w", stdout);
  int n, p, q, xx = 0, y = 0;
  scanf("%d %d %d", &n, &p, &q);
  double res = 1e15;
  for(int i=0;i<n;i++)
  {
    scanf("%d %d", &arr[i].f, &arr[i].s);
    fi[arr[i].f].pb(arr[i].s);
    se[arr[i].s].pb(arr[i].f);
    res = min(res, max(p * 1.0 / arr[i].f, q * 1.0 / arr[i].s));
  }
  for(int i = 1000000;i>=0 && ch1.size() < magic;i--)
  {
    sort(fi[i].begin(), fi[i].end());
    for(int j=fi[i].size()-1;j>=0 && ch1.size() < magic;j--)
      ch1.pb(mp(i, fi[i][j]));
  }
  for(int i = 1000000;i>=0 && ch2.size() < magic;i--)
  {
    sort(se[i].begin(), se[i].end());
    for(int j=se[i].size()-1;j>=0 && ch2.size() < magic;j--)
      ch2.pb(mp(i, se[i][j]));
  }
  for(int k=0;k<ch1.size();k++)
  {
    xx = ch1[k].f, y = ch1[k].s;
    for(int i=0;i<n;i++)
    {
      double L = 0, R = res;
      for(int _=0;_<50;_++)
      {
        double mid = L + (R - L) / 2;
        bool test = false;
        double L1 = 0, R1 = mid;
        for(int __=0;__<50 && !test;__++)
        {
          double m1 = L1 + (R1 - L1) / 2;
          double a = m1 * xx + (mid - m1) * arr[i].f;
          double b = m1 * y + (mid - m1) * arr[i].s;
          if(a > p || fabs(a - p) < EPS)
          {
            if(b > q || fabs(b - q) < EPS) test = true;
            else R1 = m1;
          }
          else L1 = m1;
        }
        if(test) R = mid;
        else L = mid;
      }
      res = min(res, R);
    }
  }
  for(int i=0;i<n;i++)
    swap(arr[i].f, arr[i].s);
  for(int k=0;k<ch2.size();k++)
  {
    xx = ch2[k].f, y = ch2[k].s;
    for(int i=0;i<n;i++)
    {
      double L = 0, R = res;
      for(int _=0;_<50;_++)
      {
        double mid = L + (R - L) / 2;
        bool test = false;
        double L1 = 0, R1 = mid;
        for(int __=0;__<50 && !test;__++)
        {
          double m1 = L1 + (R1 - L1) / 2;
          double a = m1 * xx + (mid - m1) * arr[i].f;
          double b = m1 * y + (mid - m1) * arr[i].s;
          if(a > p || fabs(a - p) < EPS)
          {
            if(b > q || fabs(b - q) < EPS) test = true;
            else R1 = m1;
          }
          else L1 = m1;
        }
        if(test) R = mid;
        else L = mid;
      }
      res = min(res, R);
    }
  }
  printf("%.15lf", res);
  return 0;
}
