#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 400500
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int a, b, k, t, cur = 1, pre = 0, lowest, highest;
long long dp[2][mn], pr[mn], sf[mn], sumP[mn], sumS[mn];

int p(int v)
{
    return v - lowest + 1;
}

long long sumUp(int l, int r)
{
    long long re = pr[r] - pr[l - 1] - (sumP[r] - sumP[l - 1]) * (l - 1);
    return ((re % maxC) + maxC) % maxC;
}

long long sumDown(int l, int r)
{
    long long re = sf[l] - sf[r + 1] - (sumS[l] - sumS[r + 1]) * (p(highest) - r);
    return ((re % maxC) + maxC) % maxC;
}

long long calc(int x)
{
    int a1 = p(x - 1);
    int ak = p(max(x - (k << 1), lowest));
    int b1 = p(x + 1);
    int bk = p(min(x + (k << 1), highest));
    long long re = (sumUp(ak, a1) + sumDown(b1, bk) + dp[pre][p(x)] * ((k << 1) + 1)) % maxC;
    return (re + maxC) % maxC;
}

void setup()
{
    cin >> a >> b >> k >> t;
    lowest = a - b - (k << 1) * t;
    highest = a - b + (k << 1) * t;
    dp[cur][p(a - b)] = 1;
    FOR(q, 1, t)
    {
        swap(cur, pre);
        FOR(i, 1, p(highest))
        {
            sumP[i] = (sumP[i - 1] + dp[pre][i]) % maxC;
            pr[i] = (pr[i - 1] + dp[pre][i] * i) % maxC;
        }
        FORD(i, p(highest), 1)
        {
            sumS[i] = (sumS[i + 1] + dp[pre][i]) % maxC;
            sf[i] = (sf[i + 1] + dp[pre][i] * (p(highest) - i + 1)) % maxC;
        }
        FOR(i, lowest, highest)
            dp[cur][p(i)] = calc(i);
    }
    long long ans = 0;
    FOR(i, 1, highest)
        ans += dp[cur][p(i)];
    cout << ans % maxC;
}

void xuly()
{

}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
