#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 500010;

vector<int> adj[maxn];
int n, centroid, sub[maxn], ans[maxn], T[maxn];

void dfs(int cur, int parent, int p)
{
	sub[cur] = 1;
	T[cur] = p;
	for(int it : adj[cur]){
		if(it != parent){
			if(p==-1 && cur!=centroid)
				dfs(it, cur, cur);
			else
				dfs(it, cur, p);
			sub[cur] += sub[it]; 
		}
	}
}

int findCentroid(int cur, int parent)
{
	for(int it : adj[cur]){
		if(it != parent && sub[it] > n/2)
			return findCentroid(it, cur);
	}
	return cur;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, u, v;
	scanf("%d", &n);
	for(i=1; i<n; i++){
		scanf("%d%d", &u, &v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1, 0, -1);
	centroid = findCentroid(1, 0);
	dfs(centroid, 0, -1);
	vector<pii> trees;
	for(int it : adj[centroid]){
		T[it] = it;
		trees.pb(mp(sub[it], it));
	}
	sort(all(trees));
	for(i=1; i<=n; i++){
		if(i==centroid){
			ans[i] = 1;
			continue;
		}
		int p = T[i];
		if(n - sub[p] <= n/2){
			ans[i] = 1;
			continue;
		}
		if(trees[trees.size()-1].s != p){
			if(n - trees[trees.size()-1].f - sub[i] <= n/2)
				ans[i] = 1;
		}	
		else{
			if(trees.size() >= 2){
				if(n - trees[trees.size()-2].f - sub[i] <= n/2)
					ans[i] = 1;
			}
		}
	}
	for(i=1; i<=n; i++)
		printf("%d ", ans[i]);
	printf("\n");
	return 0;
}
