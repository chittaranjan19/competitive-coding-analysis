#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

#define ll long long

using namespace std;

const int inf = (int)2 * 1e9;

int n, m, k;
int a[100][100][100], b[100][100][100];

void dfs1(int x, int y, int z, int c)
{
    if (c == 2)
        return;
    if (c == 0)
        b[x][y][z] = 1;
    if (x < n - 1 && a[x + 1][y][z])
        b[x + 1][y][z] += b[x][y][z];
    if (y < m - 1 && a[x][y + 1][z])
        b[x][y + 1][z] += b[x][y][z];
    if (z < k - 1 && a[x][y][z + 1])
        b[x][y][z + 1] += b[x][y][z];
    if (x < n - 1 && a[x + 1][y][z])
        dfs1(x + 1, y, z, c + 1);
    if (y < m - 1 && a[x][y + 1][z])
        dfs1(x, y + 1, z, c + 1);
    if (z < k - 1 && a[x][y][z + 1])
        dfs1(x, y, z + 1, c + 1);
}

void dfs0(int x, int y, int z, int c)
{
    b[x][y][z] = 0;
    if (c == 2)
        return;
    if (x < n - 1 && a[x + 1][y][z])
        dfs0(x + 1, y, z, c + 1);
    if (y < m - 1 && a[x][y + 1][z])
        dfs0(x, y + 1, z, c + 1);
    if (z < k - 1 && a[x][y][z + 1])
        dfs0(x, y, z + 1, c + 1);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            for (int l = 0; l < k; l++)
            {
                char p;
                cin >> p;
                a[i][j][l] = p - '0';
            }
    int ans = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            for (int l = 0; l < k; l++)
                if (a[i][j][l])
                {
                    bool ok = false;
                    if (i > 0 && a[i - 1][j][l])
                    {
                        dfs1(i - 1, j, l, 0);
                        if (i < n - 1 && a[i + 1][j][l] && b[i + 1][j][l] == 1)
                            ok = true;
                        if (j < m - 1 && a[i][j + 1][l] && b[i][j + 1][l] == 1)
                            ok = true;
                        if (l < k - 1 && a[i][j][l + 1] && b[i][j][l + 1] == 1)
                            ok = true;
                        dfs0(i - 1, j, l, 0);
                    }
                    if (j > 0 && a[i][j - 1][l])
                    {
                        dfs1(i, j - 1, l, 0);
                        if (i < n - 1 && a[i + 1][j][l] && b[i + 1][j][l] == 1)
                            ok = true;
                        if (j < m - 1 && a[i][j + 1][l] && b[i][j + 1][l] == 1)
                            ok = true;
                        if (l < k - 1 && a[i][j][l + 1] && b[i][j][l + 1] == 1)
                            ok = true;
                        dfs0(i, j - 1, l, 0);
                    }
                    if (l > 0 && a[i][j][l - 1])
                    {
                        dfs1(i, j, l - 1, 0);
                        if (i < n - 1 && a[i + 1][j][l] && b[i + 1][j][l] == 1)
                            ok = true;
                        if (j < m - 1 && a[i][j + 1][l] && b[i][j + 1][l] == 1)
                            ok = true;
                        if (l < k - 1 && a[i][j][l + 1] && b[i][j][l + 1] == 1)
                            ok = true;
                        dfs0(i, j, l - 1, 0);
                    }
                    if (ok)
                        ans++;
                }
    cout << ans;
    return 0;
}
