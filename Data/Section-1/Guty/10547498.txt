#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl 

typedef long long tint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

void bfs (vector<int> &d, map<int, vector<int> > &g, vector<int> v, int c)
{
	int l = v.size();
	vector<int> vNew;
	forn(i,l)
	{
		if (d[v[i]] == -1)
		{
			d[v[i]] = c;
			int li = g[v[i]].size();
			forn(j,li)
				vNew.push_back(g[v[i]][j]);
		}
	}
	if (!vNew.empty())
		bfs(d,g,vNew,c+1);
}

void bfs2 (vector<int> &d, map<int, vector<int> > &g, vector<int> v, int c)
{
	while (!v.empty())
	{
		int l = v.size();
		vector<int> vNew;
		forn(i,l)
		{
			if (d[v[i]] == -1)
			{
				d[v[i]] = c;
				int li = g[v[i]].size();
				forn(j,li)
					vNew.push_back(g[v[i]][j]);
			}
		}
		c++;
		v = vNew;
	}
}

int main()
{
	tint n,m;
	cin >> n >> m;
	if (n >= m)
	{
		cout << n-m << endl;
		return 0;	
	}
	map<int,vector<int> > g;
	vector<int> vaux (1,2);
	g[1] = vaux;
	forsn(i,2,m)
	{
		vector<int> vaux2 (2,i-1);
		vaux2[1] = 2*i;
		g[i] = vaux2;
	}
	forsn(i,m+1,2*m+1)
	{
		vector<int> vaux2 (1,i-1);
		g[i] = vaux2;
	}
	vector<int> d (2*m+1,-1);
	int c  = 0;
	vaux[0] = n;
	bfs2(d,g,vaux,c);
	cout << d[m] << endl;
	return 0;
}
