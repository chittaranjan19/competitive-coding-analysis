#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) find((v).begin(),(v).end(),(x)) - (v).begin()
#define debug(x) cout << #x << " = "  << x << endl 

typedef long long tint;

using namespace std;

struct character
{
	int hp,atk,def,score;
};

bool operator < (character a, character b)
{
	return a.score < b.score;
}

bool ganaYang(character yang, character monster)
{
	int counter = 0;
	while (counter < 100 && yang.hp > 0 && monster.hp > 0)
	{
		monster.hp -= max(0, yang.atk - monster.def);
		yang.hp -= max(0,monster.atk - yang.def);
	}
	if (monster.hp <= 0 && yang.hp > 0)
		return true;
	else
		return false;
}

int main()
{
	character yang;
	character monster;
	int h,a,d;
	cin >> yang.hp >> yang.atk >> yang.def;
	cin >> monster.hp >> monster.atk >> monster.def;
	cin >> h >> a >> d;
	yang.score = 0;
	int minScore = 2147483548; // 2^31 - 100;
	forn(ih,10000)
	forsn(ja,max(0,monster.def - yang.atk + 1),max(1,monster.def + monster.hp - yang.atk + 1))
	forn(kd,max(1,monster.atk-yang.def + 1))
	{
		character yangClone;
		yangClone.score = h * ih + a * ja + d * kd;
		yangClone.hp = yang.hp + ih;
		yangClone.atk = yang.atk + ja;
		yangClone.def = yang.def + kd;
		if (yangClone.score < minScore && ganaYang(yangClone,monster))
			minScore = yangClone.score;
	}
	cout << minScore << endl;
	return 0;

}
