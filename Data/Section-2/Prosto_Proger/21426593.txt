#include <iostream>
#include <stdio.h>

using namespace std;

const int MAXN = 1e3 + 10, MAXPOW = 10;
int a[MAXN][MAXN], dp[MAXN][MAXN], T[MAXN][MAXN][MAXPOW][MAXPOW], top[MAXN];

int get(int x1, int y1, int x2, int y2) {
	int k = top[x2 - x1 + 1], k1 = top[y2 - y1 + 1];
	int s1 = T[x1][y1][k][k1];
	int s2 = T[x2 - (1 << k) + 1][y1][k][k1];
	int s3 = T[x1][y2 - (1 << k1) + 1][k][k1];
	int s4 = T[x2 - (1 << k) + 1][y2 - (1 << k1) + 1][k][k1];
	return max(max(s1, s2), max(s3, s4));
}

bool check(int x, int x1, int y1, int x2, int y2) {
	return get(x1, y1, x2 - (x - 1), y2 - (x - 1)) >= x;
}

int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 1, j = 0; i <= max(n, m); ++i) {
		if (1 << (j + 1) <= i) ++j;
		top[i] = j;
	}
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j)
			scanf("%d", &a[i][j]);
	}
	for (int i = n - 1; i >= 0; --i) {
		for (int j = m - 1; j >= 0; --j) {
			if (a[i][j]) {
				dp[i][j] = min(min( dp[i + 1][j], dp[i][j + 1] ), dp[i + 1][j + 1]) + 1;
				T[i][j][0][0] = dp[i][j];
			}
		}
	}
	for (int k = 1; k < MAXPOW; ++k) {
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				if (j + 1 << (k) <= m)
					T[i][j][0][k] = max(T[i][j][0][k - 1], 
										T[i][j + 1 << (k - 1) ][0][k - 1] );
				
				if (i + 1 << (k) <= n)
					T[i][j][k][0] = max(T[i][j][k - 1][0], 
										T[i + 1 << (k - 1)][j][k - 1][0]);
			}
		}
	}
	for (int k = 1; k < MAXPOW; ++k) {
		for (int k1 = 1; k1 < MAXPOW; ++k1) {
			for (int i = 0; i + (1 << k) <= n; ++i) {
				for (int j = 0; j + (1 << k1) <= m; ++j) {
					T[i][j][k][k1] = T[i][j][k - 1][k1 - 1];
					T[i][j][k][k1] = max(T[i][j][k][k1], T[i + 1 << (k - 1)][j][k - 1][k1 - 1]);
					T[i][j][k][k1] = max(T[i][j][k][k1], T[i][j + 1 << (k1 - 1)][k - 1][k1 - 1]);
					T[i][j][k][k1] = max(T[i][j][k][k1], T[i + 1 << (k - 1)][j + 1 << (k1 - 1)][k - 1][k1 - 1]);
				}
			}
		}
	}
	int q;
	scanf("%d", &q);
	for (int i = 0, x1, y1, x2, y2; i < q; ++i) {
		scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
		--x1, --y1, --x2, --y2;
		int l = 0, r = min(x2 - x1, y2 - y1) + 2;
		while (l + 1 < r) {
			int mid = (l + r) >> 1;
			(check(mid, x1, y1, x2, y2) ? l : r) = mid;
		}
		printf("%d\n", l);
	}		
	return 0;
}
