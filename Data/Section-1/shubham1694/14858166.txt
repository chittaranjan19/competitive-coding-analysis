#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define ll long long
#define f first
#define s second

typedef pair<int, int> pii;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

ll modpow(ll a, ll b)
{
    ll x=1ll, y=a;
    while(b){
        if(b%2)
            x=(x*y)%mod;
        y=(y*y)%mod;
        b/=2;
    }
    return x;
}

ll mem[12][12];

ll dig_dp(int len, int req)
{
    //cout << len << " " << req << "\n";
    if(req<0)
        return 0;
    if(len==0){
        if(req==0)
            return 1;
        return 0;
    }
    if(mem[len][req]!=-1)
        return mem[len][req];
    int i;
    ll ret=0;
    for(i=0; i<=9; i++){
        if(i==4 || i==7)
            ret+=dig_dp(len-1, req-1);
        else
            ret+=dig_dp(len-1, req);
    }
    return mem[len][req] = ret;
}
    
ll solve(int n, int req)
{
    char str[12];
    sprintf(str, "%d", n);
    int len, cur, i, j, d, cnt;
    ll ret=0;
    len = strlen(str);
    cur = len;
    cnt = 0;
    for(i=0; i<len; i++){
        if(i-1>=0 && (str[i-1]=='4' || str[i-1]=='7'))
            cnt++;
        cur--;
        d = str[i]-'0';
        //cout << "d " << d << "\n";
        for(j=0; j<d; j++){
            if(j==4 || j==7)
                ret+=dig_dp(cur, req-cnt-1);
            else
                ret+=dig_dp(cur, req-cnt);
        }
    }
    return ret;
}

ll arr[10], dp[10][10][10];

ll comb(ll n, int r)
{   
    ll den=1ll, num=1ll;
    int i, j;
    for(i=1; i<=r; i++)
        den = (den*i)%mod;
    i = r;
    while(i>0){
        num = (num*n)%mod;
        n--;
        i--;
    }
    ll ret = (num*modpow(den, mod-2))%mod;
    return ret;
}

ll solve2(int cur, int left, int lim)
{
    if(cur==0){
        return comb(arr[0], left);
    }   
    if(dp[cur][left][lim]!=-1)
        return dp[cur][left][lim];
    ll ret = 0;
    int i;
    for(i=0; i<=left; i++){
        if(i*cur < lim)
            ret = (ret+solve2(cur-1, left-i, lim-i*cur))%mod;
    }
    return dp[cur][left][lim] = ret;
}

int main()
{
    //freopen("i.txt", "r", stdin);
    //freopen("o.txt", "w", stdout);
    int t, i, j, n, m;
    memset(mem, -1, sizeof(mem));
    memset(dp, -1, sizeof(dp));
    sd(m);
    //cout << solve(m+1, 1) << "\n";
    for(i=0; i<=9; i++){
        arr[i] = solve(m+1, i);
        //cout << arr[i] << "\n";
    }
    arr[0] = (arr[0]-1ll+mod)%mod;
    ll ans = 0, x, y;
    for(i=1; i<=9; i++){
        if(!arr[i])
            continue;
        x = arr[i];
        y = (solve2(i-1, 6, i)*1ll*720)%mod;
        ans = (ans + (x*y)%mod)%mod;
    }
    cout << ans << "\n";
    return 0;
}
