#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 2e5 + 5;

int n;
vector <pii> g[N];
bool dead[N];
int sz[N];
ll dp_down[N];
ll dp_up[N];
ll dis[N];
int root[N];
queue <int> q;
vector <int> cycle;
vector <int> weight;
ll sumw;
ll sumd;
ll sumr;
ll suml;
ll L = 0;
ll R = 0;
ll ans[N];

void find_cycle(){
	int cnt = 0;
	for(int i = 0; i < n; ++i){
		sz[i] = SZ(g[i]);
		if(sz[i] == 1) q.push(i);
	}
	while(SZ(q) && sz[q.front()] == 1){
		int v = q.front();
		q.pop();
		dead[v] = true;
		cnt ++;
		for(auto nei: g[v]){
			int u = nei.X;
			if(!dead[u]){
				sz[v] --;
				sz[u] --;
				if(sz[u] == 1) q.push(u);
				break;
			}	
		}
	}
	int v = 0;
	for(int i = 0; i < n; ++i){
		if(!dead[i]){
			v = i;
			break;
		}
	}
	while(sz[v]){
		for(auto nei: g[v]){
			int u = nei.X;
			int w = nei.Y;
			if((cnt < n - 1 && !dead[u]) || (cnt == n - 1 && sz[u] == sz[v])){
				cycle.PB(u);
				weight.PB(w);
				sumw += w;
				sz[v] --;
				sz[u] --;
				dead[v] = true;
				cnt ++;
				v = u;
				break;
			}
		}
	}
	for(int v : cycle)
		dead[v] = false;
}

void dfs_down(int v, int p){
	root[v] = root[p];
	sz[v] = 1;
	for(pii nei : g[v]){
		int u = nei.X;
		int w = nei.Y;
		if(u == p || !dead[u]) continue;
		dis[u] = dis[v] + w;
		dfs_down(u, v);
		dp_down[v] = dp_down[u] + 1LL * sz[u] * w;
		sz[v] += sz[u];
	}
}

void dfs_up(int v, int p){
	ll sum = 0;
	for(pii nei : g[v]){
		int u = nei.X;
		int w = nei.Y;
		if(u == p || !dead[u]) continue;
		sum += dp_down[u] + 1LL * sz[u] * w;
	}
	
	for(pii nei : g[v]){
		int u = nei.X;
		int w = nei.Y;
		if(u == p || !dead[u]) continue;
		dp_up[u] = dp_up[v] + (sum - (dp_down[u] + 1LL * sz[u] * w)) + 1LL * (sz[root[u]] - sz[u]) * w;
		dfs_up(u, v);
	}
}

inline int st(int x){
	x %= SZ(cycle);
	x += SZ(cycle);
	x %= SZ(cycle);
	return x;
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	srand(time(NULL));
	cin >> n;
	for(int i = 0; i < n; ++i){
		int u, v, w;
		cin >> u >> v >> w;
		u --, v --;
		g[u].PB({v, w});
		g[v].PB({u, w});
	}
	find_cycle();
	for(int v : cycle) root[v] = v, dfs_down(v, v), sumd += dp_down[v];
	for(int v : cycle) dfs_up(v, v);
	int x = rand() % SZ(cycle);
	rotate(cycle.begin(), cycle.begin() + x, cycle.end());
	rotate(weight.begin(), weight.begin() + x, weight.end());

	int kr = 1;
	int kl = 0;
	int szr = 0;
	int szl = sz[cycle[0]];
	while(R + weight[kr] <= sumw - R - weight[kr]){
		R += weight[kr];
		szr += sz[cycle[kr]];
		sumr += R * sz[cycle[kr]];
		kr = st(kr + 1);
	}
	while(L + weight[kl] < sumw - L - weight[kl]){
		L += weight[kl];
		kl = st(kl - 1);
		szl += sz[cycle[kr]];
		suml += L * sz[cycle[kl]];
	}
	ans[cycle[0]] = suml + sumr + sumd; 
//	for(int v : cycle) cerr << v + 1 << " ";
//	cerr << "\n";
	
//		cerr << cycle[0] + 1 << " " << ans[cycle[0]] << " " << L << " " << suml << " " << R << " " << sumr << "\n";

	for(int i = 1; i < SZ(cycle); ++i){
		if(szr != 0){
			sumr -= szr * weight[i]; 
			R -= weight[i];
			szr -= sz[cycle[i]];

			suml += szl * weight[i];
			L += weight[i];
			szl += sz[cycle[i]];
		}
		else{
//			cerr << "bug : " << L << " " << suml << " " << szl  << " " << R << " " << sumr << " " << szr << "\n";	
			suml -= L;
			suml += szl * weight[i];
			L += weight[i];
			L -= weight[st(i + 1)];
			szl += sz[cycle[i]];
			kr ++;
			kl ++;
		}	
//		cerr << "start : " << L << " " << suml << " " << szl  << " " << R << " " << sumr << " " << szr << "\n";	
		
		while(R + weight[kr] <= sumw - R - weight[kr]){
			R += weight[kr];
			szr += sz[cycle[kr]];
			sumr += R * sz[cycle[kr]];
			kr = st(kr + 1);


			suml -= L * sz[cycle[kl]];
			szl -= sz[cycle[kl]];
			kl = st(kl + 1);
		//	cerr << weight[kl] << " " << cycle[kl] + 1 << "\n";
			L -= weight[kl];
		}
//		cerr << "end : " << L << " " << suml << " " << szl  << " " << R << " " << sumr << " " << szr << "\n";	
		ans[cycle[i]] = suml + sumr + sumd;
	}
	for(int i = 0; i < n; ++i){
		if(dead[i]) ans[i] = ans[root[i]] - dp_down[root[i]] + dp_down[i] + dp_up[i] + dis[i] * (n - sz[root[i]]);
		cout << ans[i] << " ";
	}
	cout << "\n";
	return 0;
}
