#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e6 * 3;
const int INF = 1e9 + 7;

using namespace std;
int S;
struct data{
    int l, r, cs;
    bool operator<(const data&x) const
    {
        if (l / S != x.l/ S) return l / S < x.l / S;
        else return r < x.r;
    }
};
data q[MAXN];
int n, a[MAXN], b[MAXN],k, c[MAXN];
int dd[MAXN], ans[MAXN];
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("D.inp", "r", stdin);
    freopen("D.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n;
    S = sqrt(n);
    FORE(i, 1, n) cin >> a[i], c[i] = a[i], b[i] = a[i];
    cin >> k;
    FORE(i, 1, k){
        cin >> q[i].l >> q[i].r; q[i].cs = i;
    }
    sort(q + 1, q + k + 1);
    sort(c + 1, c + n + 1);
    FORE(i, 1, n) b[i] = lower_bound(c + 1, c + n + 1, b[i]) - c;
    //
   // FORE(i, 1, n) cout << a[i]<< " ";cout<<endl;
   // FORE(i, 1, n) cout << b[i]<<" ";cout << endl;
    int val = 0;
    FORE(i, q[1].l, q[1].r){
        dd[b[i]]++;
        if (dd[b[i]] % 2 == 0) val ^= a[i];
        else if (dd[b[i]] > 2) val ^= a[i];
    }
    ans[q[1].cs] = val;
    FORE(z, 2, k){
        if (q[z - 1].l < q[z].l) // del
            FOR(i, q[z - 1].l, q[z].l){
                dd[b[i]]--;
                if (dd[b[i]] % 2 == 1) val ^= a[i];
                else
                    if (dd[b[i]] > 0 && dd[b[i]] % 2 == 0) val ^= a[i];
            }
        if (q[z - 1].l > q[z].l) // add
            FOR(i, q[z].l, q[z - 1].l){
                dd[b[i]]++;
                if (dd[b[i]] % 2 == 0) val ^= a[i];
                else
                    if (dd[b[i]] > 2) val^= a[i];
            }
        if (q[z - 1].r < q[z].r) // add
            FORE(i, q[z - 1].r + 1, q[z].r){
                dd[b[i]]++;
                if (dd[b[i]] % 2 == 0) val ^= a[i];
                else
                    if (dd[b[i]] > 2) val^= a[i];
            }
        if (q[z - 1].r > q[z].r) // del
            FORE(i, q[z].r + 1, q[z - 1].r){
                dd[b[i]]--;
                if (dd[b[i]] % 2 == 1) val ^= a[i];
                else
                    if (dd[b[i]] > 0 && dd[b[i]] % 2 == 0) val ^= a[i];
            }
        ans[q[z].cs] = val;
    }
    FORE(i, 1, k) cout << ans[i]<<endl;
    //cout << ans;
    return 0;
}
