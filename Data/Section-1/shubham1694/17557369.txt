#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

vector<int> adj[maxn];
vector<pii> q[maxn];
map<int, int> freq;
int ft[maxn], siz[maxn], ans[maxn], col[maxn], sc[maxn], n, m;

void update(int idx, int val)
{
	while(idx<maxn){
		ft[idx] += val;
		idx+=(idx&(-idx));
	}
}

int read(int idx)
{
	int ret = 0;
	while(idx>0){
		ret+=ft[idx];
		idx-=(idx&(-idx));
	}
	return ret;
}

void dfs(int cur, int p)
{
	siz[cur] = 1;
	for(int it:adj[cur]){
		if(it!=p){
			dfs(it, cur);
			siz[cur]+=siz[it];
		}
	}
}

void add(int cur, int p, int x)
{
	if(freq.find(col[cur])!=freq.end())
		update(freq[col[cur]], -1);
	freq[col[cur]]+=x;
	if(freq[col[cur]]==0)
		freq.erase(col[cur]);
	if(freq.find(col[cur])!=freq.end())
		update(freq[col[cur]], 1);
	for(int it:adj[cur]){
		if(!sc[it] && it!=p)
			add(it, cur, x);
	}
}

void solve(int cur, int p, int keep)
{
	int mxsize = -1, special_child = -1;
	for(int it:adj[cur]){
		if(it!=p && siz[it]>mxsize){
			mxsize = siz[it];
			special_child = it;
		}
	}
	for(int it:adj[cur]){
		if(it!=special_child && it!=p)
			solve(it, cur, 0);
	}
	if(special_child!=-1){
		sc[special_child] = 1;
		solve(special_child, cur, 1);
	}
	add(cur, p, 1);
	for(pii it:q[cur])
		ans[it.f] = read(maxn-1)-read(it.s-1);
	if(special_child!=-1)
		sc[special_child] = 0;
	if(!keep)
		add(cur, p, -1);
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int u, v, i;
	scanf("%d%d", &n, &m);
	for(i=1; i<=n; i++)
		scanf("%d", &col[i]);
	for(i=1; i<n; i++){
		scanf("%d%d", &u, &v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	for(i=1; i<=m; i++){
		scanf("%d%d", &u, &v);
		q[u].pb(mp(i, v));
	}
	solve(1, 0, 0);
	for(i=1; i<=m; i++)
		printf("%d\n", ans[i]);
	return 0;
}
