#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<ll,ll> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
map<ll,ll>pm;
ll a[MAXN],t[MAXN],sz[MAXN],ID[MAXN];
vector<ll>adj[MAXN];
ll par[309][309];
ll dp[309][309];
const ll B=1e15;
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	ll sum=0;
	ll n,m,d;
	scanf("%lld%lld%lld",&n,&m,&d);
	for(ll i=1;i<=m;i++){
		ll b;
		scanf("%lld%lld%lld",a+i,&b,t+i);
		pm[t[i]]=1;
		sum+=b;
	}ll c=0;
	tr(it,pm){
		it->ss=++c;
		ID[c]=it->ff;
	}
	for(ll i=1;i<=m;i++)
		adj[pm[t[i]]].pb(a[i]);
	for(ll i=1;i<=c;i++){
		adj[i].pb(-1);
		sort(all(adj[i]));
		sz[i]=adj[i].size();
		for(ll j=1;j<sz[i];j++)
			par[i][j]=par[i][j-1]+adj[i][j];
	}		
	for(ll i=1;i<=n;i++){
		ll pos=lower_bound(all(adj[1]),i)-adj[1].begin();
		if(pos>=sz[1])
			dp[1][i]=(sz[1]-1)*i-par[1][sz[1]-1];
		else if(pos==1)
			dp[1][i]=par[1][sz[1]-1]-(sz[1]-1)*i;
		else{
			ll kici=pos-1;
			ll kicisum=par[1][pos-1];
			ll uly=(sz[1]-1)-kici;
			ll ulysum=par[1][sz[1]-1]-kicisum;
			dp[1][i]=kici*kicisum+uly*ulysum;
		}
	}	
	for(ll i=2;i<=c;i++){
		ll time=ID[i]-ID[i-1];
		time*=d;//there is delta x destination formula :@
		for(ll j=1;j<=n;j++){
			ll low=max(1LL,j-time);
			ll high=min(n,j+time);
			ll mn=B;
			for(ll k=low;k<=high;k++)
				umin(mn,dp[i-1][k]);
			ll pos=lower_bound(all(adj[i]),j)-adj[i].begin();
			if(pos>=sz[i])
				dp[i][j]=(sz[i]-1)*j-par[i][sz[i]-1]+mn;
			else if(pos==1)
				dp[i][j]=par[i][sz[i]-1]-(sz[i]-1)*j+mn;
			else{		
				ll kici=pos;
				ll kicisum=par[i][pos-1];
				ll uly=(sz[i]-1)-kici;
				ll ulysum=par[i][sz[i]-1]-kicisum;
				dp[i][j]=kici*kicisum+uly*ulysum+mn;
			}
		}
	}ll ans=B;
	for(ll i=1;i<=n;i++)
		umin(ans,dp[c][i]);
	printf("%lld\n",sum-ans);	
	return 0;
}
