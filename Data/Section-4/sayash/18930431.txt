#include<iostream>
#include<vector>
#include<algorithm>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<cstdio>
#include<cstdlib>
#include<cstring>

#define NMAX 200005
using namespace std;
int main(){
  int i;

  //Adjacency list to store graph
  vector<int> adjlist[NMAX];
  //Arrays
  char visited[NMAX];
  int distance[NMAX];
  //Read Graph
  //First read number of vertices (N) and edges (M)
  //Then read the (undirected) edges
  //Note that vertices are zero-indexed
  int N;
  scanf("%d", &N);
  for(int i=1;i<=N;i++)
    {
      int a;
      cin >> a;
      adjlist[i].push_back(a);
      if(i != N)adjlist[i].push_back(i+1);
      if(i != 1)adjlist[i].push_back(i - 1);
    }
  //Now do the BFS from vertex 0 to find distances to all vertices
  //Start by initialising all visited values as 0 and distances as -1
  memset(visited,0,sizeof visited);
  memset(distance,-1,sizeof distance);
  //Create the BFS queue and put the start vertex in
  distance[1]=0;
  visited[1]=1;
  queue<int> bfsq;
  bfsq.push(1);
  //BFS
  while(!bfsq.empty())
    {
      int u=bfsq.front();
      bfsq.pop();
      //Now look at all neighbours of u
      for(int i=0;i<adjlist[u].size();i++)
	{
	  int v=adjlist[u][i];
	  //If v has not been processed yet, do that now
	  if(!visited[v])
	    {
	      visited[v]=1;
	      distance[v]=distance[u]+1;
	      bfsq.push(v);
	    }
	}
    }

  for(i = 1; i <= N; i++)cout << distance[i] << ' ';
  
  return 0;
}
