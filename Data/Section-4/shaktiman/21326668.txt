//Diplav
#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(a) (int)(a.size())
#define all(c) (c).begin(),(c).end()
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define dout(n) printf("%d\n",n)
#define REP(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
//Works for forward as well as backward iteration
#define TRvi(c,it) for(vi::iterator it = (c).begin();it! = (c).end();it++)
#define MOD 1000000007
#define PI 3.14159265359
#define endl '\n'

#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

typedef long long int ll;
typedef vector<int> vi;
typedef pair<int,int > ii;
typedef vector<ii> vii;
typedef pair<int,ii > ip;
typedef pair< ii,ii > pp;
typedef map<string, int> msi;
typedef vector< vi > vvi;
typedef long long ll;
typedef pair<long long,long long> pll;
typedef vector<long long> vll;
typedef vector<pll> vpll;
typedef vector<vll> vvll;
typedef pair<pll,pll>  ppll;
typedef priority_queue < ll , vector < ll > , greater < ll > > minheap;
typedef priority_queue < ll , vector < ll > , less < ll > > maxheap;
struct sort_pred {
    bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) 
    { 
        
            return left.second < right.second; 
    }
};
//sort(v.begin(),v.begin()+n,sort_pred())

struct Comp {
    // important: we need two overloads, because the comparison
    // needs to be done both ways to check for equality

    bool operator()(pair<long long int,long long int> p, long long int s) const
    { return p.first < s; }
         bool operator()(long long int s, pair<long long int,long long int> p) const
         { return s < p.first; }
 };
 struct Comp2 {
    // important: we need two overloads, because the comparison
    // needs to be done both ways to check for equality

    bool operator()(pair<long long int,long long int> p, long long int s) const
    { return p.second < s; }
         bool operator()(long long int s, pair<long long int,long long int> p) const
         { return s < p.second; }
 };
void optimise()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
long long int gcd(long long int m, long long int n)
{
    if(n == 0)
        return m;
    return gcd(n, m % n);
}
ll powmod(ll a,ll b)
{
    if(b==0)return 1;
    ll x=powmod(a,b/2);
    ll y=(x*x)%MOD;
    if(b%2)
        return (a*y)%MOD;
    return y%MOD;
}
int main()
{
    int n,k,state1=0,state2=0,nu_lw,nu_up,foo;
    cin >> n >> k;
    std::vector<int> v(n);
    std::vector<pair<int,int> > a;
    vector<pair<int,int> >::iterator l1,l2,u1,u2,a1,a2;
    ll ln1,ln2,un1,un2;    
  //  bool po[MOD],ne[MOD];
    ll up,dw;
    for(int i=0;i<n;i++)
    {
        cin >> v[i];
        a.push_back(make_pair(v[i],i));
    }
    sort(a.begin(),a.end());
    //binary_search(a.begin(),a.end(),6, Comp());
    ll ans=0;
    for(int i=1;i<a.size();i++)
    {
        if((a[i].first%k)==0)
            {
                dw=a[i].first/k;
                up=a[i].first*k;
             //   trace2(dw,up);
                u1=upper_bound(a.begin(),a.end(),dw,Comp());
                 un1=u1-a.begin();
               //  trace1(un1);
                 l1=lower_bound(a.begin(),a.end(),dw,Comp());
                 ln1=l1-a.begin();
              //   trace1(ln1);
               //  l1=lower_bound(a.begin()+ln1,a.begin()+un1,a[i].second,Comp2());
                // l1=lower_bound(a.begin()+ln1,a.begin()+un1,a[i].second,Comp2());
               //  foo=l1-a.begin();
              //   trace1(a[i].second);
                 nu_lw=0;
                 for(a1=a.begin()+ln1;a1<a.begin()+un1;a1++)
                 {
                    if((*a1).second < a[i].second)
                        nu_lw++;
                    else
                        break;
                 }
               //  nu_lw=un1-foo;
               //  trace1(nu_lw);
                 u1=upper_bound(a.begin(),a.end(),up,Comp());
                 un1=u1-a.begin();
                 l1=lower_bound(a.begin(),a.end(),up,Comp());
                 ln1=l1-a.begin();
                 u1=upper_bound(a.begin()+ln1,a.begin()+un1,a[i].second,Comp2());
             //    l1=lower_bound(a.begin()+ln1,a.begin()+un1,a[i].second,Comp2());
                 foo=u1-a.begin();
                 nu_up=un1-foo;
             //    trace1(nu_up);
                 ans+=nu_up*nu_lw;
            }
    }
    cout << ans << endl;
    return 0;
}