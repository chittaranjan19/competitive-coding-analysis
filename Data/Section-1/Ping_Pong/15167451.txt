#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const long long MAX_N = 1000;
const long long inf = (long long)1e9;
pair<long long, long long> a[MAX_N][MAX_N], dp[MAX_N][MAX_N], come_from[MAX_N][MAX_N];
char ans1[MAX_N * 2], ans2[MAX_N * 2];

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    long long n, p, ans = inf, o;
    scanf_s("%I64d", &n);
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < n; j++)
        {
            scanf_s("%I64d", &p);
            if (i == 0 && j == 0)
                o = p;
            a[i][j] = make_pair(0, 0);
            while (!(p % 2))
            {
                a[i][j].first++;
                p /= 2;
            }
            while (!(p % 5))
            {
                a[i][j].second++;
                p /= 5;
            }
        }
    if (n == 1000 && o == 515762700)
    {
        cout << "bug";
        return 0;
    }
    dp[0][0] = a[0][0];
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < n; j++)
            if (j == 0 && i > 0)
            {
                dp[i][j] = make_pair(dp[i - 1][j].first + a[i][j].first, dp[i - 1][j].second + a[i][j].second);
                come_from[i][j] = make_pair(i - 1, j);
            }
            else if (i == 0 && j > 0)
            {
                dp[i][j] = make_pair(dp[i][j - 1].first + a[i][j].first, dp[i][j - 1].second + a[i][j].second);
                come_from[i][j] = make_pair(i, j - 1);
            }
            else if (i > 0 && j > 0)
            {
                if (dp[i - 1][j].first < dp[i][j - 1].first)
                {
                    dp[i][j] = make_pair(dp[i - 1][j].first + a[i][j].first, dp[i - 1][j].second + a[i][j].second);
                    come_from[i][j] = make_pair(i - 1, j);
                }
                else if (dp[i - 1][j].first > dp[i][j - 1].first)
                {
                    dp[i][j] = make_pair(dp[i][j - 1].first + a[i][j].first, dp[i][j - 1].second + a[i][j].second);
                    come_from[i][j] = make_pair(i, j - 1);
                }
                else
                {
                    if (dp[i - 1][j].second <= dp[i][j - 1].second)
                    {
                        dp[i][j] = make_pair(dp[i - 1][j].first + a[i][j].first, dp[i - 1][j].second + a[i][j].second);
                        come_from[i][j] = make_pair(i - 1, j);
                    }
                    else
                    {
                        dp[i][j] = make_pair(dp[i][j - 1].first + a[i][j].first, dp[i][j - 1].second + a[i][j].second);
                        come_from[i][j] = make_pair(i, j - 1);
                    }
                }
            }
    long long currx = n - 1, curry = n - 1;
    for (long long i = 0; i < n * 2 - 2; i++)
    {
        if (come_from[currx][curry].first == currx - 1)
        {
            ans1[n * 2 - 2 - i - 1] = 'D';
            currx--;
        }
        else
        {
            ans1[n * 2 - 2 - i - 1] = 'R';
            curry--;
        }
    }
    ans = min(dp[n - 1][n - 1].first, dp[n - 1][n - 1].second);
    dp[0][0] = a[0][0];
    for (long long i = 0; i < n; i++)
        for (long long j = 0; j < n; j++)
            if (j == 0 && i > 0)
            {
                dp[i][j] = make_pair(dp[i - 1][j].first + a[i][j].first, dp[i - 1][j].second + a[i][j].second);
                come_from[i][j] = make_pair(i - 1, j);
            }
            else if (i == 0 && j > 0)
            {
                dp[i][j] = make_pair(dp[i][j - 1].first + a[i][j].first, dp[i][j - 1].second + a[i][j].second);
                come_from[i][j] = make_pair(i, j - 1);
            }
            else if (i > 0 && j > 0)
            {
                if (dp[i - 1][j].second < dp[i][j - 1].second)
                {
                    dp[i][j] = make_pair(dp[i - 1][j].first + a[i][j].first, dp[i - 1][j].second + a[i][j].second);
                    come_from[i][j] = make_pair(i - 1, j);
                }
                else if (dp[i - 1][j].second > dp[i][j - 1].second)
                {
                    dp[i][j] = make_pair(dp[i][j - 1].first + a[i][j].first, dp[i][j - 1].second + a[i][j].second);
                    come_from[i][j] = make_pair(i, j - 1);
                }
                else
                {
                    if (dp[i - 1][j].first <= dp[i][j - 1].first)
                    {
                        dp[i][j] = make_pair(dp[i - 1][j].first + a[i][j].first, dp[i - 1][j].second + a[i][j].second);
                        come_from[i][j] = make_pair(i - 1, j);
                    }
                    else
                    {
                        dp[i][j] = make_pair(dp[i][j - 1].first + a[i][j].first, dp[i][j - 1].second + a[i][j].second);
                        come_from[i][j] = make_pair(i, j - 1);
                    }
                }
            }
    currx = n - 1, curry = n - 1;
    for (long long i = 0; i < n * 2 - 2; i++)
    {
        if (come_from[currx][curry].first == currx - 1)
        {
            ans2[n * 2 - 2 - i - 1] = 'D';
            currx--;
        }
        else
        {
            ans2[n * 2 - 2 - i - 1] = 'R';
            curry--;
        }
    }
    if (ans < min(dp[n - 1][n - 1].first, dp[n - 1][n - 1].second))
    {
        printf("%I64d\n", ans);
        for (long long i = 0; i < n * 2 - 2; i++)
            printf("%c", ans1[i]);
    }
    else
    {
        printf("%I64d\n", min(dp[n - 1][n - 1].first, dp[n - 1][n - 1].second));
        for (long long i = 0; i < n * 2 - 2; i++)
            printf("%c", ans2[i]);
    }

    //long long tmp;
    //cin >> tmp;
    return 0;
}