#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	string s;
	vector<tint> v;
	tint qMas = 0, qMenos = 0;
	bool mas = true;
	while (cin >> s && s != "=")
	{
		if (s == "?")
		{
			if (mas)
				v.push_back(1);
			else
				v.push_back(-1);
			qMas += mas;
			qMenos += (1-mas);
		}
		else
			mas = ("+" == s);
	}
	tint n;
	cin >> n;
	if ( (qMas - n*qMenos) <= n && n <= (n*qMas - qMenos))
	{
		
		cout << "Possible" << endl;
		tint m = v.size();
		tint r = (n+qMenos) % qMas;
		forn(i,m)
		{
			if (v[i] > 0)
				v[i] = (n+qMenos)/qMas;
			if ((v[i] > 0 && r-- > 0) or (v[i] == 0 && r > 0))
				v[i]++;
		}
		cout << v[0] << " ";
		forsn(i,1,m)
		{
			if (v[i] > 0)
				cout << "+ ";
			else
				cout << "- ";
			cout << abs(v[i]) << " ";
		} 
		cout << "= " << n << endl;
		
			
	}
	else
		cout << "Impossible" << endl;
	

	return 0;
}
