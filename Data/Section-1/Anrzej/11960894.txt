#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>

#define ll long long
#define ull unsigned long long
#define mp make_pair
#define x first
#define y second

using namespace std;

const int N = 100100;

vector<pair<int, int> > g[N];
bool used[1000];
set<int> ss;
vector<int> vrtx;

void dfs(int v)
{
    for (int i = 0; i < g[v].size(); i++)
    {
        if (vrtx[g[v][i].y] != -1)
        {
            ss.erase(v);
            vrtx[g[v][i].y] = -1;
            dfs(g[v][i].x);
        }
    }
}

int main()
{
    int n, m;
    cin >> m >> n;
    string h, v;
    cin >> h >> v;
    int nvrtx = 0;
    for (int i = 0; i < h.length(); i++)
    {
        if (h[i] == '<')
        {
            for (int j = i*n + 1; j < i*n + n; j++)
            {
                g[j].push_back(mp(j - 1, nvrtx));
                vrtx.push_back(nvrtx);
                nvrtx++;
            }
        }
        else
        {
            for (int j = i*n; j < i*n + n - 1; j++)
            {
                g[j].push_back(mp(j + 1, nvrtx));
                vrtx.push_back(nvrtx);
                nvrtx++;
            }
        }
    }
    for (int i = 0; i < v.length(); i++)
    {
        if (v[i] == 'v')
        {
            for (int j = i; j < n*(m - 1) + i; j += n)
            {
                g[j].push_back(mp(j + n, nvrtx));
                vrtx.push_back(nvrtx);
                nvrtx++;
            }
        }
        else
        {
            for (int j = i + n; j <= n*(m - 1) + i; j += n)
            {
                g[j].push_back(mp(j - n, nvrtx));
                vrtx.push_back(nvrtx);
                nvrtx++;
            }
        }
    }
    for (int i = 0; i < n*m; i++) ss.insert(i);
    memset(used, n*m, false);
    dfs(0);
    if (ss.size() == 0)
        cout << "YES";
    else cout << "NO";
    return 0;
}
