import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemC3 {
    BufferedReader rd;

    ProblemC3() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int p = a[1];
        int[][] c = new int[n][];
        for(int i=0;i<n;i++) {
            c[i] = intarr();
        }
        final double w = 1000;
        double sum = 0;
        for(int i=0;i<n;i++) {
            double suc1 = p(c[0], p);
            double suc2 = p(c[(i+1)%n], p);
            sum += 2*w*(1-(1-suc1)*(1-suc2));
        }
        out(sum);
    }

    private double p(int[] g, int p) {
        int y = g[0] % p;
        int low;
        if(y == 0) {
            low = g[0];
        } else {
            low = g[0] + (p - y);
        }
        double resSuc;
        if(low <= g[1]) {
            y = g[1] % p;
            int hi;
            if(y == 0) {
                hi = g[1];
            } else {
                hi = g[1] - y;
            }
            double all = (hi-low)/p + 1;
            resSuc = all / (g[1] - g[0] + 1);
        } else {
            resSuc = 0;
        }
        return resSuc;
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }



    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }



    private long plong() throws IOException {
        return plong(rd.readLine());
    }

    private long plong(String s) {
        return Long.parseLong(s);
    }



    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }



    private double[] doublearr() throws IOException {
        return doublearr(rd.readLine());
    }

    private double[] doublearr(String s) {
        String[] q = split(s);
        int n = q.length;
        double[] a = new double[n];
        for(int i=0;i<n;i++) {
            a[i] = Double.parseDouble(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC3();
    }
}
