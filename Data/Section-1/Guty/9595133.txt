# include <iostream>
# include <vector>

#define forn(i,n) for(int i = 0; i < (int)(n); i++)
#define upLeft (t[x-1][y-1] and t[x-1][y] and t[x][y-1])
#define upRight (t[x-1][y] and t[x-1][y+1] and t[x][y+1])
#define downLeft (t[x][y-1] and t[x+1][y-1] and t[x+1][y])
#define downRight (t[x][y+1] and t[x+1][y+1] and t[x+1][y])

using namespace std;



int main()
{
	int n,m,k;
	cin >> n >> m >> k;
	vector<vector<bool> > t(n,vector<bool> (m,false));
	bool flag = false;
	if (n == 1 || m == 1)
	{
		flag = true;
		cout << 0;
	}
	else
	{
		forn(i,k)
		{
			int x;
			int y;
			cin >> x >> y;
			x -= 1;
			y -= 1;
			t[x][y] = true;
			if (x == 0)
			{
				if (y == 0)
				{
					if downRight
					{
						cout << i+1;
						flag = true;
						break;
					}
				}
				else if (y == m-1)
				{
					if downLeft
					{
						cout << i+1;
						flag = true;
						break;
					}
				}
				else
				{
					if (downRight or downLeft)
					{
						cout << i+1;
						flag = true;
						break;
					}
				}
			}	
			else if (x == n-1)
			{
				if (y == 0)
				{
					if upRight
					{
						cout << i+1;
						flag = true;
						break;
					}
				}
				else if (y == m-1)
				{
					if upLeft
					{
						cout << i+1;
						flag = true;
						break;
					}
				}
				else
				{
					if (upRight or upLeft)
					{
						cout << i+1;
						flag = true;
						break;
					}
				}
			}
			else if (y == 0)
			{
				if (upRight or downRight)
				{
					cout << i+1;
					flag = true;
					break;
				}
			}		
			else if (y == m-1)
			{
				if (upLeft or downLeft)
				{
					cout << i+1;
					flag = true;
					break;
				}
			}	
			else
			{
				if ( upLeft or downLeft or upRight or downRight)
				{
					cout << i+1;
					flag = true;
					break;
				}
			}
		}	
		
	}
	if (not flag)
		cout << 0;
	return 0;
}
