#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 5010;

void setmin (int &a, int b) {
	if (a > b) {
		a = b;
	}
}

int N;
vector<int> adj[MAXN];
int dp[MAXN][MAXN];
int sub[MAXN];

void dfs (int x, int p) {
	if (adj[x].size() == 1) {
		sub[x] = 1;
		dp[x][1] = 1;
		return;
	}
	dp[x][0] = 0;
	for (int t : adj[x]) {
		if (t == p) {
			continue;
		}
		dfs(t, x);
		for (int i = sub[x]; i >= 0; i--) {
			//oops do it backward
			for (int j = 0; j <= sub[t]; j++) {
				//take j, or take sub[t] - j of opposite color
				setmin(dp[x][i + j], dp[x][i] + min(dp[t][j], dp[t][sub[t] - j] + 1));
			}
		}
		sub[x] += sub[t];
	}
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d", &N);
	if (N == 2) {
		puts("1");
		return 0;
	}
	for (int i = 1, x, y; i < N; i++) {
		scanf("%d %d", &x, &y);
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	int root = 1;
	while (adj[root].size() == 1) {
		root++;
	}
	fillchar(dp, 1);
	dfs(root, 0);
	assert(sub[root] % 2 == 0);
	printf("%d\n", dp[root][sub[root] / 2]);
}