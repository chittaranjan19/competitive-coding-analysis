#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>
#include <unordered_map>
#include <iostream>
#include <algorithm>
#include <vector>
#include <ctime>

using namespace std;
#define ll long long
#define db double
#define fs first
#define sc second
#define mp make_pair

vector<int> g[400000];
ll n;
int chld[400000];
bool ok = 1;

void dfs(int v, int max)
{
    int cnt = 0, mcnt = 0;
    for (int i = 0; i < g[v].size(); i++)
    {
        if (chld[g[v][i]] >= max)
            cnt++;
        if (chld[g[v][i]] > max)
            mcnt++;
    }
    if (max == 3 && cnt >= 3)
        ok = 0;
    if (max == 2 && mcnt > 2)
        ok = 0;
    if (max == 1 && cnt > 1)
        ok = 0;
    int nmax;
    if (max == 3){
        for (int i = 0; i < g[v].size(); i++)
        {
            if (chld[g[v][i]] < 3)
                dfs(g[v][i], 2);
            else dfs(g[v][i], 3);
        }
    }
    if (max == 2)
    {
        for (int i = 0; i < g[v].size(); i++)
            dfs(g[v][i], 1);
    }
    if (max == 1)
    {
        for (int i = 0; i < g[v].size(); i++)
            dfs(g[v][i], 1);
    }
}

void ddfs(int v)
{
    for (int i = 0; i < g[v].size(); i++)
    {
        ddfs(g[v][i]);
        chld[v] = max(chld[v], chld[g[v][i]]);
    }
}

int main()
{
    memset(chld, 0, sizeof(chld));
    //ios::sync_with_stdio(false);
    cin >> n;
    for (int i = 1; i < n; i++)
    {
        int v, u;
        cin >> v >> u;
        g[v].push_back(u);
        chld[v]++;
    }
    ddfs(1);
    dfs(1,3);
    if (ok)
        cout << "YES";
    else cout << "NO";
    return 0;
}