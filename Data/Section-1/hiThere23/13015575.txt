#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100001
#define maxC 1000000007
#define mp make_pair
#define F first
#define S second
#define pb push_back

using namespace std;
int n, m, d[mn], trace[mn];
vector < pair<int, int > > g[mn];
vector< pair< pair<int, int>, int > > ans, shortest, check, edge;
bool mark[mn];
int minWay = maxC, maxGood = -1;

void setup ()
{
    int a, b, c;
    cin >> n >> m;
    FOR(i, 1, m)
    {
        cin >> a >> b >> c;
        g[a].pb(mp(b, c));
        g[b].pb(mp(a, c));
        edge.pb(mp(mp(a, b), c));
    }
    memset(mark, 0, sizeof(mark));
    memset(trace, -1, sizeof(trace));
}

void bfs()
{
    queue<int> que;
    que.push(1);
    while(!que.empty())
    {
        int u = que.front();
        que.pop();
        if (u == n)
        {
            minWay = d[n];
            return;
        }
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int v = g[u][i].F;
            if (mark[v])
                continue;
            d[v] = d[u] + 1;
            que.push(v);
        }
    }
}

void dfs2(int u, int dis, int dem1)
{
    if (dis > minWay)
        return;
    if (u == n)
    {
        if (dem1 > maxGood)
        {
            maxGood = dem1;
            shortest = check;
        }
        return;
    }

    mark[u] = true;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        int w = g[u][i].S;
        if (mark[v])
            continue;
        int d1 = dem1 + w;
        check.pb(mp(mp(u, v), w));
        dfs2(v, dis + 1, d1);
        check.pop_back();
    }
    mark[u] = false;
}

void xuly ()
{
    d[1] = 0;
    bfs();
    memset(mark, 0, sizeof(mark));
    dfs2(1, 0, 0);
    FOR(i, 0, int(shortest.size()) - 1)
    {
        int u = shortest[i].F.F;
        int v = shortest[i].F.S;
        int w = shortest[i].S;
        trace[u] = v;
        trace[v] = u;
        if (!w)
            ans.pb(mp(mp(u, v), 1));
    }
    FOR(i, 0, m - 1)
    {
        int u = edge[i].F.F;
        int v = edge[i].F.S;
        int w = edge[i].S;
        if (trace[u] != v && trace[v] != u && w)
            ans.pb(mp(mp(u, v), 0));
    }
    cout << ans.size() << "\n";
    FOR(i, 0, int(ans.size()) - 1)
    cout << ans[i].F.F << " " << ans[i].F.S << " " << ans[i].S << "\n";
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
