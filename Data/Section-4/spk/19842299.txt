#include<iostream>
#include<cstdio>
#include<map>
#include<string>
#include<cstring>
#include<vector>
#include<algorithm>
#include<queue>
#include<set>
#include<stack>

#define fill(a,val) memset(a, (val), sizeof a)
#define pb push_back
#define scantype int
#define min(a,b) a<b?a:b
#define max(a,b) a>b?a:b
#define lli long long int
#define N 100003

lli powermod(lli _a,lli _b){lli _r=1;while(_b){if(_b%2==1)_r=(_r*_a);_b/=2;_a=(_a*_a);}return _r;}

using namespace std;

void scan(scantype &x);

int n;

vector<pair<int,int> > adj[2*N];

struct node {
	lli x, cst;
	node(lli x, lli cst) :
			x(x), cst(cst) {
	}
	bool operator<(const node &a) const {
		return a.cst < cst;
	}
};

int dijk(int src, int des, int p) {

	vector<lli> cost(p + 1, 1e15);
	priority_queue<node> que;
	que.push(node(src, 0));
	cost[src] = 0;
	while (que.size()) {
		lli x = que.top().x, cst = que.top().cst;
		que.pop();
		if (x == des) {
			return cst;
		}
		for (int i = 0, ln = adj[x].size(); i < ln; ++i) {
			int y = adj[x][i].first, _cst = adj[x][i].second;
			if (cst + _cst < cost[y]) {
				cost[y] = cst + _cst;
				que.push(node(y, cost[y]));
			}
		}
	}
	return 1e16;
}


int main(void)
{
  cin>>n;

  int cost[n];
  for(int i=0;i<n;i++)scan(cost[i]);

  int last_a=0,last_b=0;
  string last_fo,last_bo;

  for(int i=0;i<n;i++)
  {
        string fo,bo;

        cin>>fo;
        bo=fo;
        reverse(bo.begin(),bo.end());

        if(i==0)
        {
             adj[0].pb({1,0});
             adj[0].pb({2,cost[0]});
             last_fo = fo;
             last_bo = bo;
             last_a = 1;
             last_b = 2;
             continue;
        }

        if(last_fo<fo)
              adj[last_a].pb({last_a+2,0});
        if(last_fo<bo)
              adj[last_a].pb({last_a+3,cost[i]});
        if(last_bo<fo)
              adj[last_b].pb({last_a+2,0});
        if(last_bo<bo)
              adj[last_b].pb({last_a+3,cost[i]});

        last_a += 2;
        last_b += 2;
        last_fo = fo;
        last_bo = bo;
  }

  lli dist = (min(dijk(0,last_a,last_a+2),dijk(0,last_a+1,last_a+2)));

  if(dist==1e16)cout<<"-1";
  else cout<<dist;
  return 0;
}









void scan(scantype &x)
{
    /*register int c = getchar(); //for positive
    x = 0;
    for(;(c<48 || c>57);c = getchar());
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}*/

    register int c = getchar(); //for negative/positive
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = getchar());
    if(c=='-') {neg=1;c=getchar();}
    for(;c>47 && c<58;c = getchar()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}
