#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define inf 1000000000
#define maxn 1000000

#define ll long long
#define pii pair<int, int>
#define pb push_back
#define sin scanint
#define bitcount(x) __builtin_popcount(x)
#define fill(s, p) memset(s, p, sizeof(s));

#ifdef ONLINE_JUDGE
#define gc getchar
#endif

#ifndef ONLINE_JUDGE
#define gc getchar
//freopen("input.txt", "r", stdin)
//freopen("output.txt", "w", stdout)
#endif

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

int arr[maxn];
int segtree[maxn];

void init(int ss, int se, int ht, int curht, int node_num)
{
    if(ss==se){
        segtree[node_num] = arr[ss];
        return;
    }
    int mid, lc, rc;
    mid = (ss+se)>>1;
    lc = 2*node_num+1;
    rc = lc+1;
    init(ss, mid, ht, curht+1, lc);
    init(mid+1, se, ht, curht+1, rc);
    if((ht-curht)%2)
        segtree[node_num] = (segtree[lc]|segtree[rc]);
    else
        segtree[node_num] = (segtree[lc]^segtree[rc]);
}

void update(int ss, int se, int q, int curht, int ht, int nval, int node_num)
{
    if(ss>se || ss>q || se<q)
        return;
    if(ss==se && ss==q){
        segtree[node_num] = nval;
        return;
    }
    int mid, lc, rc;
    mid = (ss+se)>>1;
    lc = 2*node_num+1;
    rc = lc+1;
    update(ss, mid, q, curht+1, ht, nval, lc);
    update(mid+1, se, q, curht+1, ht, nval, rc);
    
    if((ht-curht)%2)
        segtree[node_num] = (segtree[lc]|segtree[rc]);
    else
        segtree[node_num] = (segtree[lc]^segtree[rc]);
}

int main()
{
    int n, m, i, j, p, b, siz;
    sin(n);
    siz = (1<<n);
    sin(m);
    for(i=0; i<siz; i++)
        sin(arr[i]);
    init(0, siz-1, n, 0, 0);
    while(m--){
        sin(p);
        sin(b);
        update(0, siz-1, p-1, 0, n, b, 0);
        printf("%d\n", segtree[0]);
    }
    return 0;
}