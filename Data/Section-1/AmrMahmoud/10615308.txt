#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <fstream>
#include <numeric>
#include <stdexcept>
#include <cassert>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

map<string, int> m;
bool like[10][10];
LL a, b, c;
LL res = INF_LL, sol = -1;
vector<int> aa,bb,cc;

void solve(int ind)
{
  if(ind == 7)
  {
    if(aa.size() == 0 || bb.size() == 0 || cc.size() == 0) return ;
    vector<LL> temp;
    temp.pb(a / (aa.size()));
    temp.pb(b / (bb.size()));
    temp.pb(c / (cc.size()));
    sort(temp.begin(), temp.end());
    LL x = temp[2] - temp[0];
    if(x <= res)
    {
      int cnt = 0;
      bool test = 0;
      if(x == res)
        test = true;
      res = x;
      for(int i=0;i<aa.size();i++)
        for(int j=0;j<aa.size();j++)
          if(like[aa[i]][aa[j]])
            cnt++;
      for(int i=0;i<bb.size();i++)
        for(int j=0;j<bb.size();j++)
          if(like[bb[i]][bb[j]])
            cnt++;
      for(int i=0;i<cc.size();i++)
        for(int j=0;j<cc.size();j++)
          if(like[cc[i]][cc[j]])
            cnt++;
      if(!test)
        sol = cnt;
      else sol = max(sol, 1LL * cnt);
    }
    return ;
  }
  aa.pb(ind);
  solve(ind + 1);
  aa.pop_back();
  bb.pb(ind);
  solve(ind + 1);
  bb.pop_back();
  cc.pb(ind);
  solve(ind + 1);
  cc.pop_back();
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("suffix.in", "r", stdin);
  //freopen("suffix.out", "w", stdout);
  int n;
  m["Anka"] = 0;
  m["Chapay"] = 1;
  m["Cleo"] = 2;
  m["Troll"] = 3;
  m["Dracul"] = 4;
  m["Snowy"] = 5;
  m["Hexadecimal"] = 6;
  cin >> n;
  string in;
  int x, y;
  for(int i=0;i<n;i++)
  {
    cin >> in;
    x = m[in];
    cin >> in;
    cin >> in;
    y = m[in];
    like[x][y] = true;
  }
  cin >> a >> b >> c;
  solve(0);
  cout << res << " " << sol;
  return 0;
}
