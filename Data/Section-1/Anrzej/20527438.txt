#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second
#define PB push_back
#define MP make_pair

typedef signed long long    ll;
typedef unsigned long long  ull;
typedef double              lf;
typedef long double         llf;

#if (defined(WIN32) || !defined(__GNUC__))
	#define __F_LL "%I64"
#else
	#define __F_LL "%ll"
#endif

struct FastReader {
	FastReader &operator,(int &x) { scanf("%d", &x); return *this; }
	FastReader &operator,(ll &x) { scanf(__F_LL"d", &x); return *this; }
	FastReader &operator,(double &x) { scanf("%lf", &x); return *this; }
	FastReader &operator,(char &x) { do x = getchar(); while (x == ' ' || x == '\n'); return *this; }
	FastReader &operator,(char *x) { scanf("%s", x); return *this; }
} in;

struct FastWriter {
	FastWriter &operator,(const int x) { printf("%d", x); return *this; }
	FastWriter &operator,(const ll x) { printf(__F_LL"d", x); return *this; }
	FastWriter &operator,(const double x) { printf("%lf", x); return *this; }
	FastWriter &operator,(const char x) { putchar(x); return *this; }
	FastWriter &operator,(const char *x) { printf("%s", x); return *this; }
	FastWriter &operator,(const string x) { return operator,(x.c_str()); }
} out;

#undef __F_LL

template<class T>
T sqr(T x) { return x * x; }

/* Main code */
static const int N = (int)2e5 + 111;

int n;
int c[N];
vector<int> g[N];
vector<int> ans;

void dfs(int a, int p) {
	c[a] = c[a] == 1 ? -1 : 1;
	ans.push_back(a);

	for (int i = 0; i < g[a].size(); i++) {
		int b = g[a][i];

		if (b == p)
            continue;

		dfs(b, a);

		c[a] = c[a] == 1 ? -1 : 1;
		ans.push_back(a);
	}

	if (c[a] == -1) {
        if (p == -1)
			ans.pop_back();
        else {
			c[p] = c[p] == 1 ? -1 : 1;
			ans.push_back(p);
			c[a] = c[a] == 1 ? -1 : 1;
			ans.push_back(a);
        }
	}
}

int main() {
	#ifdef __DEBUG
	//	freopen("input.txt", "rt", stdin);
	#endif

	// Start here...
	// ...
	in, n;

	for (int i = 0; i < n; i++)
		in, c[i];

	c[0] = c[0] == 1 ? -1 : 1;

	for (int i = 1; i < n; i++) {
		int x, y; in, x, y;
		x--, y--;
		g[x].PB(y), g[y].PB(x);
	}

    dfs(0, -1);

    for (int i = 0; i < ans.size(); i++)
		out, (ans[i] + 1), ' ';

	return 0;
}
