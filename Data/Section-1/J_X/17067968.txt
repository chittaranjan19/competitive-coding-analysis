#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int maxn = 1000 + 5;
const int dir[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

int a[maxn][maxn], tot, n, m, posx, posy;
int par[maxn * maxn], num[maxn * maxn], b[maxn * maxn];
vector<int> vec[maxn * maxn];

int findp(int x)
{
    return par[x] != x ? par[x] = findp(par[x]) : x;
}

void unite(int x, int y)
{
    x = findp(x), y = findp(y);
    if(x != y)
    {
        par[y] = x;
        num[x] += num[y];
    }
}

int myhash(int x, int y)
{
    return x * m + y;
}

bool ok(int x, int y)
{
    return x >= 0 && x < n && y >= 0 && y < m;
}

bool setcolor(int x, int y, int q)
{
    a[x][y] = -q;
    if((x != posx || y != posy) && --tot == 0) return true;
    for(int i = 0; i < 4; ++i)
    {
        int dx = x + dir[i][0], dy = y + dir[i][1];
        if(ok(dx, dy) && a[dx][dy] >= q && setcolor(dx, dy, q)) return true;
    }
    return false;
}

int solve(int cnt, ll k)
{
    for(int i = 0; i < cnt; ++i)
    {
        par[i] = i;
        num[i] = 1;
    }
    sort(b, b + cnt);
    cnt = unique(b, b + cnt) - b;
    for(int i = 0; i < n; ++i)
    {
        for(int j = 0; j < m; ++j)
        {
            int p = lower_bound(b, b + cnt, a[i][j]) - b;
            vec[p].push_back(myhash(i, j));
        }
    }
    for(int i = cnt - 1; i >= 0; --i)
    {
        for(int j = 0; j < vec[i].size(); ++j)
        {
            int x = vec[i][j] / m, y = vec[i][j] % m;
            for(int l = 0; l < 4; ++l)
            {
                int dx = x + dir[l][0], dy = y + dir[l][1];
                if(ok(dx, dy) && a[dx][dy] >= b[i])
                {
                    unite(myhash(x, y), myhash(dx, dy));
                }
            }
            if(1LL * num[findp(vec[i][j])] * b[i] >= k && k % b[i] == 0)
            {
                posx = x, posy = y;
                return b[i];
            }
        }
    }
    return -1;
}

int main()
{
    ll k;
    int cnt = 0;
    scanf("%d%d%I64d", &n, &m, &k);
    for(int i = 0; i < n; ++i)
    {
        for(int j = 0; j < m; ++j)
        {
            scanf("%d", &a[i][j]);
            b[cnt++] = a[i][j];
        }
    }
    int ans = solve(cnt, k);
    if(~ans)
    {
        puts("YES");
        tot = k / ans;
        setcolor(posx, posy, ans);
        for(int i = 0; i < n; ++i)
        {
            for(int j = 0; j < m; ++j)
            {
                if(a[i][j] < 0) printf("%d ", -a[i][j]);
                else printf("0 ");
            }
            puts("");
        }
    }
    else puts("NO");
    return 0;
}
