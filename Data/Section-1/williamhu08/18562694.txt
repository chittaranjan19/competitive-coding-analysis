#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef complex<ll> point;
const int MAXN = 5010;

ll cross (point p1, point p2) {
	return p1.real() * p2.imag() - p1.imag() * p2.real();
}

ll cross (point p, point p1, point p2) {
	return cross(p1 - p, p2 - p);
}

int N;
ll S;
point A[MAXN], cmpt;
vector<point> chull;

bool comp (point p1, point p2) {
	ll c = cross(p1 - cmpt, p2 - cmpt);
	return (c > 0 || (c == 0 && norm(p1 - cmpt) < norm(p2 - cmpt)));
}

ll area (int i, int j, int k) {
	return llabs(cross(chull[i], chull[j], chull[k]));
}

int main() {
	scanf("%d %lld", &N, &S);
	for (int i = 0; i < N; i++) {
		ll x, y;
		scanf("%lld %lld", &x, &y);
		A[i] = point(x, y);
	}
	iter_swap(A, min_element(A, A + N, [] (point a, point b) {
		return make_pair(a.real(), a.imag()) < make_pair(b.real(), b.imag());
	}));

	cmpt = A[0];
	chull.push_back(A[0]);
    sort(A + 1, A + N, comp);
	for (int i = 1; i < N; i++) {
		while (chull.size() >= 2 && cross(chull.back(), chull[chull.size() - 2], A[i]) >= 0) {
			chull.pop_back();
		}
		chull.push_back(A[i]);
	}

	N = chull.size();

	int ai = 0, aj = 0, ak = 0;

	for (int i = 0; i < N; i++) {
		int ptr = (i + 1) % N;
		for (int j = (i + 2) % N; j != i; j = (j + 1) % N) {
			while (area(i, ptr, j) < area(i, (ptr + 1) % N, j)) {
				ptr = (ptr + 1) % N;
			}

			if (area(i, ptr, j) > area(ai, aj, ak)) {
				ai = i;
				aj = ptr;
				ak = j;
			}
		}
	}

	point pi = chull[ai], pj = chull[aj], pk = chull[ak];
	point arr[] = {pi + pj - pk, pi - pj + pk, -pi + pj + pk};
//	assert(llabs(cross(arr[0], arr[1], arr[2])) <= 8 * S);
	for (point p : arr) {
		printf("%lld %lld\n", p.real(), p.imag());
	}
}
