import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class ProblemB {
    BufferedReader rd;

    ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int k = a[1];
        a = intarr();
        List<Integer> v = new ArrayList<>();
        List<Integer> u = new ArrayList<>();
        if(n != 4 && k >= n+1) {
            List<Integer> top = new ArrayList<>();
            for(int i=1;i<=n;i++) {
                boolean found = false;
                for(int j: a) {
                    if(i == j) {
                        found = true;
                        break;
                    }
                }
                if(!found) {
                    top.add(i);
                }
            }
            v.add(a[0]);
            v.add(a[2]);
            v.addAll(top);
            v.add(a[3]);
            v.add(a[1]);

            u.add(a[2]);
            u.add(a[0]);
            u.addAll(top);
            u.add(a[1]);
            u.add(a[3]);
        }
        if(v.isEmpty()) {
            out(-1);
        } else {
            StringBuilder buf = new StringBuilder();
            for(Integer x: v) {
                if(buf.length() > 0) {
                    buf.append(' ');
                }
                buf.append(x);
            }
            out(buf);
            buf = new StringBuilder();
            for(Integer x: u) {
                if(buf.length() > 0) {
                    buf.append(' ');
                }
                buf.append(x);
            }
            out(buf);
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }



    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }



    private long plong() throws IOException {
        return plong(rd.readLine());
    }

    private long plong(String s) {
        return Long.parseLong(s);
    }



    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }



    private double[] doublearr() throws IOException {
        return doublearr(rd.readLine());
    }

    private double[] doublearr(String s) {
        String[] q = split(s);
        int n = q.length;
        double[] a = new double[n];
        for(int i=0;i<n;i++) {
            a[i] = Double.parseDouble(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
