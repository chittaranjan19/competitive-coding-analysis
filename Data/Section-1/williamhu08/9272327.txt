//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
#include <iomanip>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1 << 20;

int N;
vector<int> adj[MAXN];
int par[MAXN], in[MAXN], out[MAXN], curv;
bool tree[2 * MAXN];
int lazy[2 * MAXN];

//preorder dfs.

void dfs (int x, int p) {
	par[x] = p;
	in[x] = curv++;
	for (int t : adj[x]) {
		if (t != p) {
			dfs(t, x);
		}
	}
	out[x] = curv++;
}

//segment tree operations.

void add (int cur, int v) {
	lazy[cur] = tree[cur] = v;
}

void down (int cur, int l, int r) {
	int &ref = lazy[cur];
	if (ref != -1) {
		if (r - l != -1) {
			for (int i = 0; i < 2; i++) {
				add(2 * cur + i, ref);
			}
		}
		ref = -1;
	}
}

void update (int a, int b, bool v, int cur = 1, int l = 0, int r = MAXN) {
	if (r <= a || b <= l) {
		return;
	}
	if (a <= l && r <= b) {
		add(cur, v);
		return;
	}
	down(cur, l, r);
	int mid = (l + r) / 2;
	update(a, b, v, 2 * cur, l, mid);
	update(a, b, v, 2 * cur + 1, mid, r);
	tree[cur] = tree[2 * cur] || tree[2 * cur + 1];
}

bool query (int a, int b, int cur = 1, int l = 0, int r = MAXN) {
	if (r <= a || b <= l) {
		return false;
	}
	if (a <= l && r <= b) {
		return tree[cur];
	}
	down(cur, l, r);
	int mid = (l + r) / 2;
	return query(a, b, 2 * cur, l, mid) || query(a, b, 2 * cur + 1, mid, r);
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	cin >> N;
	int q, a, b;
	for (int i = 1; i < N; i++) {
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	dfs(1, -1);
	fillchar(tree, true);
	fillchar(lazy, -1);
	for (cin >> q; q--; ) {
		cin >> a >> b;
		if (a == 1) {
			int p = par[b];
			if (p != -1 && query(in[b], out[b] + 1)) {
				update(in[p], in[p] + 1, true);
			}
			update(in[b], out[b] + 1, false);
		} else if (a == 2) {
			update(in[b], in[b] + 1, true);
		} else {
			cout << !query(in[b], out[b] + 1) << '\n';
		}
	}
}