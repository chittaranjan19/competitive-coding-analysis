#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
 
using namespace std;
 
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef long double real;
 
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR(v) memset(v, 0, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define MOD 1000000007
#define INCMOD(a,b) a = (a+b)%MOD
#define DECMOD(a,b) a = (a+MOD-b)%mod
#define ROUNDINT(a) (int)((double)a + 0.5)
#define INF 2000000000
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S)) //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1 //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
//scanf(" %d ", &t);

map<ii, int> m;

void calc(){
	int x = 0, y = 0, lim, ad = 1, inc, aux = 0;
	bool adx = true;
	m[mp(x,y)] = 0;
	while(abs(x) < 110 && abs(y) < 110){
		inc = (ad<0)? -1: 1;
		if(adx){
			lim = x+ad;
			//cout << " LIM X EH " << lim << endl;
			while(x != lim){
				x += inc;
				//cout << "NO WHILE X " << x << " Y " << y << endl;
				m[mp(x,y)] = aux;
			}
		}
		else{
			lim = y+ad;
			//cout << " LIM X EH " << lim << endl;
			while(y != lim){
				y += inc;
				//cout << "NO WHILE X " << x << " Y " << y << endl;
				m[mp(x,y)] = aux;
			}
			ad *= -1;
			if(ad < 0) ad--;
			else ad++;
		}
		adx = !adx;
		aux++;
	}
}

int main(){
	calc();
	int x, y;
	while(scanf(" %d %d ", &x, &y) != EOF){
		printf("%d\n", m[mp(x,y)]);	
	}
}

























