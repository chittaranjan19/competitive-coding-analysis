#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define PI acos(-1.0)
#define LL long long
#define EPS 1e-9
#define PL printf("\n")
#define PS printf(" ")
#define PInt(n) printf("%d",n)
#define SI(n) scanf("%d",&n)
#define pb push_back
#define mp make_pair

using namespace std;

struct row
{
    int columns[101];
    int counter;
};

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n,m,counter,bigcounter=0;
    char input[155];
    SI(n);
    SI(m);
    row rows[n];
    for(int i=0;i<n;i++)
    {
        scanf("%s",input);
        counter=0;
        for(int j=0;j<m;j++)
            if(input[j] == 'W')
            {
                bigcounter++;
                rows[i].columns[counter++]=j;
            }
        rows[i].counter=counter;
    }
    int moves=0,pos=0;
    bool faceright=true;
    for(int i=0;i<n && bigcounter;i++)
    {
        if(rows[i].counter)
        {
            if(faceright)
            {
                moves+=rows[i].columns[rows[i].counter-1]-pos;
                pos=rows[i].columns[rows[i].counter-1];
                bigcounter-=rows[i].counter;
            }
            else
            {
                moves+=pos-rows[i].columns[0];
                pos=rows[i].columns[0];
                bigcounter-=rows[i].counter;
            }
        }
        if(i != n-1 && rows[i+1].counter)
        {
            if(faceright)
            {
                if(pos < rows[i+1].columns[rows[i+1].counter-1])
                {
                    moves+=rows[i+1].columns[rows[i+1].counter-1]-pos;
                    pos=rows[i+1].columns[rows[i+1].counter-1];
                }
            }
            else
            {
                if(pos > rows[i+1].columns[0])
                {
                    moves+=pos-rows[i+1].columns[0];
                    pos=rows[i+1].columns[0];
                }
            }
        }
        if(i!=n-1 && bigcounter)
            moves++;
        faceright= !faceright;
    }
    PInt(moves);
    return 0;
}