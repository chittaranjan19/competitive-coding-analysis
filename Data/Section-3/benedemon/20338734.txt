#include <iostream>
#include <vector>
#include <string.h>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <math.h>

#define ll long long
#define pb push_back
#define mp make_pair
#define traverse(container, it) \
for(typeof(container.begin()) it = container.begin(); it!= container.end(); it++)
using namespace std;

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

int gcd(int a, int b){ if(b==0) return a; return gcd(b,a%b); }
int lcm(int a, int b) {return a*(b/gcd(a,b));}
void setbool(bool a[], int n, bool x){for(int i=0;i<n;i++){a[i] = x;}}
void setint(int a[], int n, int x){for(int i=0;i<n;i++){a[i] = x;}}

ll a[500001], sfront[500001], sback[500001], n, req, temp[1000001];
vector<ll> last;
int main(int argc, const char * argv[]) 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin>>n;
    
    cin>>a[1];
    sfront[1] = a[1];
    
    for(ll i=2;i<=n;i++)
    {
        cin>>a[i];
        sfront[i] = sfront[i-1] + a[i];
    }
    
    sback[n] = a[n];
    for(ll i = n-1;i>0;i--)
    {
        sback[i] = sback[i+1] + a[i];
    }
    
    vector<ll> v;
    
    if(sfront[n]%3 != 0)
    {
        cout<<0;
        return 0;
    }
    else
    {
        req = sfront[n] / 3;
    }
    
    for(ll i=1;i<=n;i++)
    {
        if(sfront[i] == req )
            v.pb(i);
        if(sback[i] == req)
            v.pb(-1*i);
    }
    
    ll sum = 0;
    ll count = 0;
    for ( ll i = 0; i<v.size();i++)
    {
        if(v[i] < 0)
        {
            if(last.size() == 0)
                continue;
            if(last[last.size()-1] + 1 < abs(v[i]))
                temp[i+1] = count;
            else if(last.size() > 1)
            {
                if(last[last.size()-2] + 1 < abs(v[i]))
                {
                    temp[i+1] = count-1;
                }
                else if(last.size() > 2)
                {
                    if(last[last.size()-3] + 1 < abs(v[i]))
                    {
                        temp[i+1] = count-2;
                    }
                }
            }
        }
        else
        {
            count++;
            last.pb(v[i]);
        }
    }
    
//    for(ll i=0;i < v.size();i++)
//        cout<<v[i]<<" ";
//    cout<<endl;
//    
    for(ll i=0;i<v.size();i++)
    {
        sum += temp[i+1];
    }
    
    cout<<sum<<endl;
    
    return 0;
}
