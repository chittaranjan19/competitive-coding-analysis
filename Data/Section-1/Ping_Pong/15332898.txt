#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 300000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int tree[MAX_N * 4];
int cnt = 1, curr = 0;

void print_tree()
{
    int j = 0, c = (cnt * 2 - 1) / 2, c1 = 1;
    for (int i = 0; i < curr + 1; i++)
    {
        for (int k = 0; k < c; k++)
            cout << " ";
        for (int i = 0; i < c1; i++)
        {
            if (tree[j] >= 0)
                cout << " ";
            cout << (tree[j] >= 0 ? tree[j] + 1 : -1);
            j++;
            for (int r = 0; r < c * 2 + 1; r++)
                cout << " ";
        }
        cout << endl << endl;
        c1 *= 2;
        c /= 2;
    }
}

void push(int x, int lx, int rx, int v)
{
    if (lx == rx)
    {
        if (tree[x] == -1 && (x - cnt + 1) != v)
            tree[x] = v;
    }
    else if (tree[x] == -1)
        tree[x] = v;
    else
    {
        if (v != tree[x] && tree[cnt - 1 + tree[x]] == -1 && (tree[x] + cnt - 1 >= lx) && (tree[x] + cnt - 1 <= rx))
            tree[cnt - 1 + tree[x]] = v;
    }
}

void update(int x, int lx, int rx, int l, int r, int v)
{
    if (r < lx || l > rx)
        return;
    else if (lx >= l && rx <= r)
        push(x, lx, rx, v);
    else
    {
        push(x, lx, rx, -1);
        update(x * 2 + 1, lx, (lx + rx) / 2, l, r, v);
        update(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r, v);
    }
}

void make_tree(int n)
{
    while (cnt < n)
    {
        cnt *= 2;
        curr++;
    }
    for (int i = 0; i < cnt * 2 - 1; i++)
        tree[i] = -1;
}

void push1(int x, int lx, int rx, int v)
{
    if (lx == rx)
    {
        if (tree[x] == -1 && (x - cnt + 1) != v)
            tree[x] = v;
        return;
    }
    else if (tree[x] == -1)
        tree[x] = v;
    else
    {
        if (v == -1)
        {
            push1(x * 2 + 1, lx, (lx + rx) / 2, tree[x]);
            push1(x * 2 + 2, (lx + rx) / 2 + 1, rx, tree[x]);
            tree[x] = -1;
        }
        else
        {
            if (v != tree[x] && tree[cnt - 1 + tree[x]] == -1 && (tree[x] + cnt - 1 >= lx) && (tree[x] + cnt - 1 <= rx))
                tree[cnt - 1 + tree[x]] = v;
        }
    }
    //print_tree();
    push1(x * 2 + 1, lx, (lx + rx) / 2, -1);
    push1(x * 2 + 2, (lx + rx) / 2 + 1, rx, -1);
}

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m, l, r, x;
    scanf_s("%d %d", &n, &m);
    make_tree(n);
    for (int i = 0; i < m; i++)
    {
        scanf_s("%d %d %d", &l, &r, &x);
        update(0, cnt - 1, cnt * 2 - 2, cnt - 1 + l - 1, cnt - 1 + r - 1, x - 1);
        //print_tree();
    }
    push1(0, cnt - 1, cnt * 2 - 2, -1);
    for (int i = 0; i < n; i++)
        printf("%d ", tree[cnt - 1 + i] + 1);
    //int tmp;
    //cin >> tmp;
    return 0;
}