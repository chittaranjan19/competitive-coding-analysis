//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
#include <iomanip>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<double, bool> pdb;
const int MAXN = 100010;

int N, M;
int X[MAXN], H[MAXN];
double L[MAXN], R[MAXN];
pii arr[MAXN];
vector<pdb> events[MAXN];

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		cin >> X[i] >> H[i] >> L[i] >> R[i];
		L[i] /= 100;
		R[i] /= 100;
	}
	for (int i = 0; i < M; i++) {
		cin >> arr[i].first >> arr[i].second;
	}
	sort(arr, arr + M);
	for (int i = 0; i < N; i++) {
		int lt = lower_bound(arr, arr + M, pii(X[i] - H[i], 0)) - arr;
		int rt = lower_bound(arr, arr + M, pii(X[i], 0)) - arr;
		if (lt != rt) {
			events[lt].push_back(pdb(1 - L[i], true));
			events[rt].push_back(pdb(1 - L[i], false));
		}
		lt = upper_bound(arr, arr + M, pii(X[i], 1000)) - arr;
		rt = upper_bound(arr, arr + M, pii(X[i] + H[i], 1000)) - arr;
		if (lt != rt) {
			events[lt].push_back(pdb(1 - R[i], true));
			events[rt].push_back(pdb(1 - R[i], false));		
		}
	}
	double ans = 0, cur = 0;	//make sure there are no issues with rounding
	int numzero = 0;	//number of zeroes
	for (int i = 0; i < M; i++) {
		for (pdb p : events[i]) {
			if (p.second) {
				//new beginnig
				if (p.first) {
					cur += log(p.first);
				} else {
					numzero++;
				}
			} else {
				if (p.first) {
					cur -= log(p.first);
				} else {
					numzero--;
				}
			}
		}
		if (!numzero) {
			ans += exp(cur) * arr[i].second;
		}
	}
	cout << setprecision(10) << ans << endl;
}