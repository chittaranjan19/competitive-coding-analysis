#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
typedef  long long int LL;

using namespace std;
int n,k;
const int N = 10000+5;
const int INF = ~0U>>1;
struct P
{
    LL x,y;
    LL m;
    P(int x,int y ): x(x),y(y){}
    P(){}
    bool  operator < (const P & b) const
    {
        if(x*y != b.x * b.y) return x*y < b.x*b.y;
        return x < b.x;
    }

    LL area()
    {
        return x*y;
    }
}a[N];
bool cmp1(P a,P b)
{
    return a.x*a.y < b.x*b.y;
}
bool cmp2(P a, P b )
{
    return a.y < b.y;
}
int main()
{
    while(scanf("%d",&n)==1)
    {
        for(int i = 0 ; i < n ; i++)
        {
            LL x,y;
            scanf("%I64d%I64d",&x,&y);
            if(x > y)    swap(x,y);
            a[i] = P(x,y);
        }
        sort(a,a+n,cmp2);
        //sort(a,a+n,cmp1);
        LL res = -INF;
        P p=a[n-1];
        for(int i = n - 1 ; i >= 0 ; i-- )
        {
            p.x = min(p.x,a[i].x);
            p.y = min(p.y,a[i].y);
            p.m = p.area()*(n-i);
            a[i] = p;
        }

        int pos = -1;
        for(int i = n - 1 ; i >= 0 ; i--)
        {
                if(a[i].m > res)
                {
                   res = a[i].m;
                   pos = i;
                }
//        p = a[pos];
//        printf("%I64d\n%I64d %I64d\n",p.m,p.x,p.y);
        }
        p = a[pos];
        printf("%I64d\n%I64d %I64d\n",p.m,p.x,p.y);
    }

    return 0;
}
