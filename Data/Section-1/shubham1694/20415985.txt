#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 1000010;
const int block = 500;
const int logn = 20;

struct query{
	int l, r, lb, ind;
	bool operator<(const query&q) const{
		if(lb!=q.lb)
			return lb<q.lb;
		return r<q.r;
	}
};

int n, m, k, arr[maxn];
ll ans[maxn], cnt[maxn];
vector<query> q;

int findPairs(int x)
{
	int r = x^k;
	return cnt[r];
}

void insert(int x)
{
	++cnt[x];
}

void remove(int x)
{
	--cnt[x];
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, a, b;
	scanf("%d%d%d", &n, &m, &k);
	for(i=1; i<=n; i++){
		scanf("%d", &arr[i]);
		arr[i] ^= arr[i-1];
	}
	q.resize(m);
	for(i=0; i<m; i++){
		scanf("%d%d", &q[i].l, &q[i].r);
		--q[i].l;
		q[i].lb = q[i].l/block;
		q[i].ind = i;
	}
	sort(all(q));
	int curl = 0, curr = 0;
	ll cur_ans = 0;
	for(query it : q){
		a = it.l;
		b = it.r;
		while(curr<=b){
			cur_ans += findPairs(arr[curr]);
			insert(arr[curr]);
			++curr;
		}
		while(curl-1>=a){
			cur_ans += findPairs(arr[curl-1]);
			insert(arr[curl-1]);
			--curl;
		}
		while(curl<a){
			remove(arr[curl]);
			cur_ans -= findPairs(arr[curl]);
			++curl;
		}
		while(curr-1>b){
			remove(arr[curr-1]);
			cur_ans -= findPairs(arr[curr-1]);
			--curr;
		}
		ans[it.ind] = cur_ans;
	}
	for(i=0; i<m; i++)
		printf("%lld\n", ans[i]);
	return 0;
}
