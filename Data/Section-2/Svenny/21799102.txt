#include <iostream>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <memory>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <string>
#include <memory.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned uint;

const ll posinf = 1000000000000000001;
const ll neginf = -1000000000000000001;

ll n, sum, i, j;
vector<ll> a;
vector<ll> z;

vector<ll> otrez;

void build (ll v = 1, ll tl = 1, ll tr = n)
{
	if (tl == tr)
		otrez[v] = a[tl];
	else
	{
		ll tm = (tl + tr) / 2;
		build (v * 2, tl, tm);
		build (v * 2 + 1, tm + 1, tr);
		otrez[v] = otrez[v * 2] + otrez[v * 2 + 1];
	}
}

ll getsum (ll v, ll tl, ll tr, ll l, ll r)
{
	if (l > r)
		return 0;
	if (l == tl && r == tr)
		return otrez[v];
	ll tm = (tl + tr) / 2;
	return getsum (v * 2, tl, tm, l, min (r, tm))
		+ getsum (v * 2 + 1, tm + 1, tr, max (l, tm + 1), r);
}

vector<ll> snm;
vector<ll> rnk;
vector<pair<ll, ll> > mmx;
set<ll> leaders;

inline void mkset (ll v)
{
	snm[v] = v;
	rnk[v] = 0;
	mmx[v].first = v;
	mmx[v].second = v;
	leaders.insert (v);
}

ll fset (ll v)
{
	if (!snm[v])
		return 0;
	if (v == snm[v])
		return v;
	return snm[v] = fset (snm[v]);
}

inline void usets (ll a, ll b)
{
	a = fset (a);
	b = fset (b);
	if (!a || !b)
		return;
	if (a != b)
	{
		if (rnk[a] < rnk[b])
			swap (a, b);
		snm[b] = a;
		if (rnk[a] == rnk[b])
			++rnk[a];
		mmx[a].first = max (mmx[a].first, mmx[b].first);
		mmx[a].second = min (mmx[a].second, mmx[b].second);
		leaders.erase (b);
	}
}

inline ll getmax (ll v)
{
	return mmx[fset (v)].first;
}

inline ll getmin (ll v)
{
	return mmx[fset (v)].second;
}

int main ()
{
#ifdef CONTEST_ONME
	freopen ("input.txt", "r", stdin);
	freopen ("output.txt", "w", stdout);
#endif
	
	cin >> n;
	a.resize (n + 1);
	z.resize (n + 1);
	otrez.resize (4 * n + 5);
	snm.resize (n + 2);
	rnk.resize (n + 2);
	mmx.resize (n + 2);
	for (i = 1; i <= n; i++)
		cin >> a[i];
	build (1, 1, n);
	for (i = 0; i < n; i++)
		cin >> a[n - i];
	list<ll> otv;
	otv.push_front (0);
	for (i = 1; i < n; i++)
	{
		mkset (a[i]);
		usets (a[i] - 1, a[i]);
		usets (a[i] + 1, a[i]);
		sum = 0;
		for (auto it = leaders.begin (); it != leaders.end (); it++)
		{
			ll sm = getsum (1, 1, n, getmin ((*it)), getmax ((*it)));
			if (sm > sum)
				sum = sm;
		}
		otv.push_front (sum);
	}
	for (const auto &kvp : otv)
		cout << kvp << ' ';
	cout << endl;

#ifdef CONTEST_ONME
	//system ("pause");
#endif
	return 0;
}