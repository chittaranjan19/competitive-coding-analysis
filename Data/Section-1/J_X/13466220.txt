#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <queue>

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

const int maxn = 2e6 + 5;

int a[maxn], b[maxn], c[maxn], d[maxn];
priority_queue<P, vector<P>, greater<P> > q;
bool vis[maxn];
vector<P> vec;

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        ll ans = 0;
//        memset(vis, 0, sizeof(vis));
        vec.clear();
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", c + i);
            a[c[i]] = i;
        }
        for(int i = 1; i <= n; ++i)
        {
            int x;
            scanf("%d", &x);
            b[x] = i;
        }
        for(int i = 1; i <= n; ++i)
        {
            if(a[i] == b[i]) continue;
            d[i] = abs(a[i] - b[i]);
            q.push(P(d[i], i));
        }
//        for(int i = 1; i <= n; ++i)
//        {
//            if(vis[i]) continue;
//            for(int j = i; !vis[j]; j = b[j])
//            {
//                vis[j] = true;
//                if(!vis[b[j]])
//                {
//                    v.push_back(P(j, b[j]));
//                    ans += abs(b[j] - j);
//                }
//            }
//        }
        while(!q.empty())
        {
            P p = q.top();
            q.pop();
            int v = p.second;
            if(p.first != d[v] || a[v] == b[v]) continue;
            ans += d[v];
            vec.push_back(P(a[v], b[v]));
            int u = c[b[v]];
            c[a[v]] = u;
            c[b[v]] = v;
            a[u] = a[v];
//            vis[v] = true;
            a[v] = b[v];
            d[u] = abs(a[u] - b[u]);
            q.push(P(d[u], u));
        }
        printf("%I64d\n%d\n", ans, vec.size());
        for(int i = 0; i < vec.size(); ++i)
        {
            printf("%d %d\n", vec[i].first, vec[i].second);
        }
    }
    return 0;
}
