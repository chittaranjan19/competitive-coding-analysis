#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>
#include <cassert>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 120;
const int oo = 1e9;

int g[4][N];

int mex(vector <int> v){
	v.PB(-1);
	v.PB(oo);
	sort(v.begin(), v.end());
	v.resize(unique(v.begin(), v.end()) - v.begin());
	for(int i = 1; i < SZ(v); ++i)
		if(v[i] - v[i - 1] > 1)
			return (v[i - 1] + 1);
	assert(false);
}

void memoize(int k, int x){
	if(g[k][x] != -1) return;
	vector <int> t;
	if(k == 0){
		for(int i = 0; i < x; ++i){
			memoize(1, i);	
			memoize(1, x - i - 1);	
			t.PB(g[1][i] ^ g[1][x - i - 1]);
		}
		g[k][x] = mex(t);
	}
	else if(k == 1){
		for(int i = 0; i < x; ++i){
			memoize(1, i);
			memoize(2, x - i - 1);
			t.PB(g[1][i] ^ g[2][x - i - 1]);
		}
		for(int i = 0; i < x - 1; ++i){	
			memoize(1, i);
			memoize(3, x - 1 - i - 1);
			t.PB(g[1][i] ^ g[3][x - 1 - i - 1]);
		}
		g[k][x] = mex(t);
	}	
	else if(k == 2){
		for(int i = 0; i < x; ++i){
			memoize(2, i);	
			memoize(2, x - i - 1);	
			t.PB(g[2][i] ^ g[2][x - i - 1]);
		}
		for(int i = 0; i < x - 2; ++i){
			memoize(3, i);	
			memoize(3, x - 2 - i - 1);	
			t.PB(g[3][i] ^ g[3][x - 2 - i - 1]);
		}
		g[k][x] = mex(t);
	}
	else{
		for(int i = 0; i < x; ++i){
			memoize(3, i);	
			memoize(2, x - i - 1);	
			t.PB(g[3][i] ^ g[2][x - i - 1]);
		}
		g[k][x] = mex(t);
	}
}

int r, n;
pii b[N];

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	memset(g, -1, sizeof g);
	g[0][0] = 0;
	g[1][0] = 0;
	g[2][0] = 0;
	g[3][0] = 0;
	cin >> r >> n;
	for(int i = 0; i < n; ++i){
		cin >> b[i].X >> b[i].Y;
		b[i].X --; b[i].Y --;
	}
	sort(b, b + n);
	vector <pii> t;
	if (n == 0)
		t.push_back({0, r});
	else
	{
		t.push_back({1, b[0].X});
		for (int i = 0; i + 1 < n; i++)
			if (b[i].Y == b[i + 1].Y)
				t.push_back({2, b[i + 1].X - b[i].X - 1});
			else
				t.push_back({3, b[i + 1].X - b[i].X - 2});
		t.push_back({1, r - b[n - 1].X - 1});
	}
	if(SZ(t) == 0){
		if(g[0][r] && !n)
			cout << "WIN\n";
		else
			cout << "LOSE\n";
		return 0;
	}
	for(int i = 0; i < SZ(t); ++i)
		memoize(t[i].X, t[i].Y);

	int ans = 0;
	for(int i = 0; i < SZ(t); ++i)
		ans ^= g[t[i].X][t[i].Y];
	
	if(ans)
		cout << "WIN\n";
	else
		cout << "LOSE\n";
	return 0;
}
