#include <bits/stdc++.h>

#define fr for(i=0;i<n;i++)
#define st first
#define nd second
#define pb push_back
#define PB pop_back()
#define sqr(a) (((a) * (a)))
#define mp make_pair
#define pii pair<int,int>

typedef long long ll;

using namespace std;

ll n,m,i,j=0,k,l,T,t,c=1,u,v;
bool b[70]={0};

void multiply(ll F[2][2], ll M[2][2]);

void power(ll F[2][2], ll n1);

/* function that returns nth Fibonacci number */
ll fib(ll n1)
{
  ll F[2][2] = {{1,1},{1,0}};
  if (n1 == 0)
    return 0;
  power(F, n1-1);
  return F[0][0];
}

void pwr(ll *m1,ll n1);

ll modpow(ll n1)
{
    ll m1=2;
    if(n1==0)return (1%m);
    pwr(&m1,n1);
    return m1;
}

void pwr(ll *m1,ll n1)
{
    if( n1 == 0 || n1 == 1)
      return;
      ll m2=2;
      pwr(m1,n1/2);
      *m1=(*m1)*(*m1)%m;
      if (n1%2 != 0) *m1=((*m1)*2)%m;
}

/* Optimized version of power() in method 4 */
void power(ll F[2][2], ll n1)
{
  if( n1 == 0 || n1 == 1)
      return;
  ll M[2][2] = {{1,1},{1,0}};

  power(F, n1/2);
  multiply(F, F);

  if (n1%2 != 0)
     multiply(F, M);
}

void multiply(ll F[2][2], ll M[2][2])
{
  ll x =  (F[0][0]*M[0][0] + F[0][1]*M[1][0])%m;
  ll y =  (F[0][0]*M[0][1] + F[0][1]*M[1][1])%m;
  ll z =  (F[1][0]*M[0][0] + F[1][1]*M[1][0])%m;
  ll w =  (F[1][0]*M[0][1] + F[1][1]*M[1][1])%m;

  F[0][0] = x;
  F[0][1] = y;
  F[1][0] = z;
  F[1][1] = w;
}

int main ()
{
    cin>>n>>k>>l>>m;i=0;
    while(k>0)
    {
        b[i]=k%2;if(b[i]==1){j++;}
        k=k/2;
        i++;
    }

    if(i>l){cout<<0;return 0;}

    t=fib(n+2);
    u=modpow(n);
    u=(u-t)%m;
    if(u<0){u+=m;}

    for(i=0;i<l-j;i++)
    {
        c=(c*t)%m;
    }

    for(i=l-j;i<l;i++)
    {
        c=(c*u)%m;
    }
    cout<<c;


}
