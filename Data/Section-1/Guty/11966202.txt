#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int maxConsEyes (vector<int> r)
{
	int p = r.size();
	int memory = 0;
	int maxi = 0;
	{
		forn(i,p)
		{
			if (r[i] == 1)
			{
				maxi++;
				while(i+1 < p and r[i+1] == 1)
				{
					maxi++;
					i++;
				}
				memory = max(memory, maxi);
				maxi = 0;
			}
		}
	}
	return max(memory, maxi);
}

int main()
{
	int n,m,q;
	cin >> n >> m >> q;
	vector<vector<int> > bear (n,vector<int> (m));
	vector<int> maxRow (n);
	forn(i,n)
	{
		forn(j,m)
			cin >> bear[i][j];
		maxRow[i] = maxConsEyes(bear[i]);
		
	}
	forn(t,q)
	{
		int i,j;
		cin >> i >> j;
		i--;
		j--;
		bear[i][j] = 1 - bear[i][j];
		maxRow[i] = maxConsEyes(bear[i]);
		cout << *max_element(maxRow.begin(),maxRow.end()) << endl;
	}
		
	
	return 0;
}
