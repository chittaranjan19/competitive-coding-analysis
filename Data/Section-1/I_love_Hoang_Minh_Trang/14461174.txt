#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e7 + 1;
const int INF = 1e7 + 1;

using namespace std;
int nt[INF], Era[INF], top = 0;
bool c[INF];
int n, a[INF], q, l, r;
int dd[INF], s[INF];
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("PRIME.inp", "r", stdin);
    freopen("PRIME.out", "w", stdout);
    #endif //MIKELHPDATKE
    FORE(i, 2, INF - 1) if (!c[i]){
        nt[++top] = i;
        Era[i] = top;
        int j = i + i;
        while (j <= INF - 1){
            c[j] = 1;
            Era[j] = top;
            j += i;
        }
    }
    cin >> n;
    FORE(i, 1, n) cin >> a[i];
    FORE(i, 1, n){
        int tmp = a[i];
        while (tmp > 1){
            int prime = Era[tmp];
            dd[prime]++;
            while (tmp % nt[prime] == 0) tmp /= nt[prime];
        }
    }
    FORE(i, 1, top) dd[i] = dd[i - 1] + dd[i];

    cin >> q;
    int max_a = *max_element(a + 1, a + n + 1);
    while (q--){
        cin >> l >> r;
        if (l > max_a){
            cout<<0<<endl;
            continue;
        }
        if (r > max_a) r = max_a;
        int d = lower_bound(nt + 1, nt + top + 1, l) - nt;
        int c = upper_bound(nt + 1, nt + top + 1, r) - nt - 1;
        if (d > c) cout<<0<<endl;
        else
        cout<<dd[c] - dd[d - 1] << endl;
    }
    //cout<<dd[Era[3]]<<"wtf"<<dd[Era[3] - 1]<<endl;
    return 0;
}

