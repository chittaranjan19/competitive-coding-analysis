#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const int maxn = 300 + 5;
const int INF = 1 << 30;

int a[maxn * maxn], num[maxn], d1[maxn * maxn], d2[maxn * maxn], m[maxn * maxn];

int C(int l, int r, int x)
{
    while(l < r)
    {
        int mid = (l + r) >> 1;
        m[mid] >= x ? l = mid + 1 : r = mid;
    }
    return l;
}

int main()
{
    int n, t;
    while(~scanf("%d%d", &n, &t))
    {
        memset(num, 0, sizeof(num));
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", a + i);
            ++num[a[i]];
        }
        ll ans = 0;
        for(int k = 1; k <= min(n, t); ++k)
        {
            for(int i = 1; i <=n; ++i)
            {
                a[i + (k - 1) * n] = a[i];
            }
            int e = k * n + 1;
//            a[e] = INF;
//            memset(m, 0, sizeof(m));
            memset(d1, 0, sizeof(d1));
            memset(d2, 0, sizeof(d2));
            m[0] = 0;
            int len = 0;
            for(int i = 1; i < e; ++i)
            {
//                for(int j = 1; j <= a[i]; ++j)
//                {
//                    d1[i] = max(d1[i], m[j] + 1);
//                }
                int l = upper_bound(m, m + len + 1, a[i]) - m;
                d1[i] = l;
                m[l] = a[i];
                len = max(l, len);
            }
//            memset(m, 0, sizeof(m));
            m[0] = INF;
            len = 0;
            for(int i = e - 1; i; --i)
            {
//                for(int j = 300; j >= a[i]; --j)
//                {
//                    d2[i] = max(d2[i], m[j] + 1);
//                }
//                m[a[i]] = d2[i];
                int l = C(0, len + 1, a[i]);
                d2[i] = l;
                m[l] = a[i];
                len = max(l, len);
            }
            for(int i = 1; i < e; ++i)
            {
                ans = max(ans, (ll)(d1[i] + d2[i] - 1) + (ll)(t - k) * num[a[i]]);
            }
        }
        printf("%I64d\n", ans);
    }
    return 0;
}
