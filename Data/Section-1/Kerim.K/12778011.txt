/*

PROG:kerim
LANG:C++
*/
#include<bits/stdc++.h>
#define MAXN 2000009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<ll,int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int arr[MAXN],rr[MAXN],vis[MAXN];
void rub()
{
	for(int i=1;i<MAXN;i++){
		int l=i,d=0;
		while(l>=1)
		{
			d=(d*10)+(l%10);
			l/=10;
		}
		if(i==d)
		rr[i]=1;		
	}
	for(int i=1;i<MAXN;i++)
		rr[i]+=rr[i-1];
}
void prime()
{
	arr[2]=1;
	for(int i=3;i<=2000000;i=i+2){
		if(!vis[i]){
			for(int j=i*3;j<=2000000;j+=i*2)
				vis[j]=1;
			arr[i]=1;		
		}
	}
	for(int i=2;i<MAXN;i++)
		arr[i]+=arr[i-1];
}
int main()
{
	int ans=0;
	double p,q;
	cin>>p>>q;
	prime();rub();
	for(int i=1;i<MAXN;i++)
		if(arr[i]<=double(p/q)*rr[i])
			ans=i;
	if(!ans)
		cout<<"Palindromic tree is better than splay tree"<<endl;
	else
		cout<<ans<<endl;		
	return 0;
}
