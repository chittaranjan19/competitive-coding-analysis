#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Friend
{
	Friend (tint mm, tint ss)
	{
		money = mm;
		friendship = ss;
	}
	tint money, friendship;
};

bool operator < (Friend f1, Friend f2)
{
	return f1.money < f2.money;
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint n, d;
	cin >> n >> d;
	vector<Friend> f (n,Friend(0,0));
	forn(i,n)
	{
		tint m,s;
		cin >> m >> s;
		f[i] = Friend(m,s);
	}
	sort(f.begin(),f.end());
	tint minMoney = f[0].money;
	tint minIndex = 0;
	tint sum = f[0].friendship;
	vector<tint> ans;
	forsn(i,1,n)
	{
		if(f[i].money - minMoney >= d)
		{
			ans.push_back(sum);
			while (minIndex <= i && f[i].money - minMoney >= d)
			{
				sum -= f[minIndex].friendship;
				minIndex++;
				minMoney = f[minIndex].money;
			}
		}
		sum += f[i].friendship;
			
	}
	ans.push_back(sum);
	cout << *max_element(ans.begin(),ans.end()) << endl;
	return 0;
}



