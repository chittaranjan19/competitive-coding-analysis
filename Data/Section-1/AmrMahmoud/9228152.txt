#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

struct edge
{
    int from, to, cost, index;

    edge(int x,int y,int z,int i)
    {
        from = x, to = y, cost = z, index = i;
    }

    bool operator < (const edge &e) const
    {
        return e.cost > cost;
    }
};

struct disjointset
{
    vector<int> rank, parent;
    int subtrees;

    disjointset(int n)
    {
        subtrees = n;
        for(int i=0;i<n;i++)
            rank.pb(1),parent.pb(i);
    }

    int find_set(int x)
    {
        if(x == parent[x])
            return x;
        return parent[x] = find_set(parent[x]);
    }

    void link(int x,int y)
    {
        if(rank[x] > rank[y])
            swap(x, y);
        parent[x] = y;
        if(rank[x] == rank[y])
            rank[y]++;
    }

    bool union_sets(int x,int y)
    {
        x = find_set(x),y = find_set(y);
        if(x != y)
        {
            link(x,y);
            subtrees--;
        }
        return x != y;
    }

    bool same_set(int x,int y)
    {
        return find_set(x) == find_set(y);
    }
};

vector<edge> edges;
int sol[100005];

int main()
{
    ios_base::sync_with_stdio(0);
    int n, m, x, y, z;
    cin >> n >> m;
    disjointset dset(n + 1);
    for(int i=0;i<m;i++)
    {
        cin >> x >> y >> z;
        edges.push_back(edge(x, y, z, i));
    }
    sort(edges.begin(), edges.end());
    for(int i=0;i<m;i++)
    {
        int k = i;
        while(1)
        {
            edge temp = edges[k];
            if(dset.same_set(temp.from, temp.to))
                sol[temp.index] = 2;
            if(k < m - 1 && edges[k + 1].cost == temp.cost)
                k++;
            else break;
        }
        vector<int> tbd;
        for(int j=i;j<=k;j++)
        {
            edge temp = edges[j];
            if(sol[temp.index] == 2) continue;
            if(!dset.union_sets(temp.from, temp.to))
                tbd.push_back(dset.find_set(temp.from));
        }
        sort(tbd.begin(), tbd.end());
        for(int j=i;j<=k;j++)
        {
            edge temp = edges[j];
            if(sol[temp.index] == 2) continue;
            if(binary_search(tbd.begin(), tbd.end(), dset.find_set(temp.from)))
                sol[temp.index] = 1;
        }
        i = k;
    }
    for(int i=0;i<m;i++)
    {
        if(sol[i] == 0) cout << "any";
        else if(sol[i] == 1) cout << "at least one";
        else cout << "none";
        cout << "\n";
    }
    return 0;
}