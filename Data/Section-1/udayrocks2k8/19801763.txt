#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
using namespace std;

#define INF (1 << 30)
#define INFL (1LL << 50)
#define pb push_back
#define loop_it(it, elements) for(auto it = elements.begin(); it != elements.end(); it++)
#define loop(i, l, r) for(int i = l; i < r; i++)
#define loop_r(i, r, l) for(int i = r; i >= l; i--)
#define loop_k(i, l, r, k) for(int i = l; i < r; i+=k)
#define test_cases int test_cases;scanf("%d", &test_cases);while (test_cases--)

typedef long long i64;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<i64> vi64;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef map<pii, vi> mpiivi;
typedef map<int, int> mii;
typedef map<int, vi> mivi;

i64 gcd(i64 a, i64 b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}
 
i64 lcm(i64 a, i64 b) {
    return (a * b) / gcd(a, b);
}

i64 power(i64 a, i64 b) {
	if (b == 0) return 1;
	int ans = power(a, b >> 1);
	ans = (ans * (i64) ans);
	if (b & 1) ans = (ans * (i64) a);
	return ans;
} 

struct node {
	node* left;
	node* right;	
};

node* root;

void insert(int num) {
	node* cur = root;
	loop_r(i, 30, 0) {
		if ((num & (1 << i)) == 0) {
			if (cur->left == NULL) {
				cur->left = new node();
			}
			cur = cur->left;
		} else {
			if (cur->right == NULL) {
				cur->right = new node();
			}
			cur = cur->right;
		}
	}
}
void remove(int num) {
	node* cur = root;
	vector<node*> v;
	v.pb(root);
	loop_r(i, 30, 0) {
		if ((num & (1 << i)) == 0) {
			cur = cur->left;
		} else {
			cur = cur->right;
		}
		v.pb(cur);
	}
	loop_r(i, v.size() - 1, 1) {
		if (v[i]->left == NULL && v[i]->right == NULL) {
			if ((num & (1 << (i - 1))) == 0) {
				v[i - 1]->left = NULL;
			} else {
				v[i - 1]->right = NULL;
			}
		}
	}
}

int maxor(int num) {
	int ans = 0;
	node* cur = root;
	loop_r(i, 30, 0) {
		if ((num & (1 << i)) == 0) {
			if (cur->right != NULL) {
				ans |= (1 << i);
				cur = cur->right;
			} else {
				cur = cur->left;
			}
		} else {
			if (cur->left != NULL) {
				ans |= (1 << i);
				cur = cur->left;
			} else {
				cur = cur->right;
			}
		}
	}	
	return ans;
}

int main() {
	root = new node();
	si nums;
	mii counts;
	int q;
	cin >> q;
	while (q--) {
		char ch;
		int num;
		cin >> ch >> num;
		if (ch == '+') {
			if (counts[num] != 0) counts[num]++;
			else {
				counts[num]++;
				insert(num);
			}
		} else if (ch == '-') {
			if (counts[num] > 1) counts[num]--;
			else {
				counts[num]--;
				remove(num);
			}	
		} else if (ch == '?') {
			cout << maxor(num) << endl;
		}
	}
	return 0;
}