// This amazing code is by Eric Sunli Chen.
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;
template<typename T> void get_int(T &x)
{
	char t=getchar();
	bool neg=false;
	x=0;
	for(; (t>'9'||t<'0')&&t!='-'; t=getchar());
	if(t=='-')neg=true,t=getchar();
	for(; t<='9'&&t>='0'; t=getchar())x=x*10+t-'0';
	if(neg)x=-x;
}
template<typename T> void print_int(T x)
{
	if(x<0)putchar('-'),x=-x;
	short a[20]= {},sz=0;
	while(x>0)a[sz++]=x%10,x/=10;
	if(sz==0)putchar('0');
	for(int i=sz-1; i>=0; i--)putchar('0'+a[i]);
}
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define get1(a) get_int(a)
#define get2(a,b) get1(a),get1(b)
#define get3(a,b,c) get1(a),get2(b,c)
#define printendl(a) print_int(a),puts("")
typedef long long LL;
typedef unsigned long long uLL;
typedef pair<int,int> pii;
const int inf=0x3f3f3f3f;
const LL Linf=1ll<<61;
const double pi=acos(-1.0);

template<typename T> inline void updmax(T &x,const T y){if(x<y)x=y;}
template<typename T> inline void updmin(T &x,const T y){if(x>y)x=y;}

int n,k,x;
LL a[200111],b[200111];
void go()
{
	priority_queue<pii> q;
	for(int i=1;i<=n;i++)q.push(mp(abs(b[i]),i));
	for(int i=1;i<=k;i++)
	{
		int t=q.top().ss;
		q.pop();
		if(b[t]>0)b[t]+=x;
		else b[t]-=x;
	}
	for(int i=1;i<=n;i++)printf("%I64d ",b[i]);
}
vector<int> zeros;
int main()
{
	get3(n,k,x);
	bool neg=0;
	int zero=0;
	for(int i=1;i<=n;i++)
	{
		get1(a[i]);
		if(a[i]<0)neg^=1;
		if(a[i]==0)
		{
			zero++;
			zeros.pb(i);
		}
	}
	if(neg&&!zero)
	{
		priority_queue<pii> q;
		for(int i=1;i<=n;i++)q.push(mp(-abs(a[i]),i));
		for(int i=1;i<=k;i++)
		{
			int t=q.top().ss;
			q.pop();
			if(a[t]>0)a[t]+=x;
			else a[t]-=x;
			q.push(mp(-abs(a[t]),t));
		}
		for(int i=1;i<=n;i++)printf("%I64d ",a[i]);
	}
	else if(zero>k)
	{
		for(int i=1;i<=n;i++)printf("%I64d ",a[i]);
	}
	else
	{
		if(neg==0&&zero)
		{
			a[zeros[0]]=-x-x;
			neg=1;
		}
		for(int i=0;i<(int)zeros.size();i++)
			a[zeros[i]]=x;
		int mn=1;for(int i=2;i<=n;i++)if(abs(a[i])<abs(a[mn]))mn=i;
		if(neg)
		{
			priority_queue<pii> q;
			for(int i=1;i<=n;i++)q.push(mp(-abs(a[i]),i));
			for(int i=1;i<=k-zero;i++)
			{
				int t=q.top().ss;
				q.pop();
				if(a[t]>0)a[t]+=x;
				else a[t]-=x;
				q.push(mp(-abs(a[t]),t));
			}
			for(int i=1;i<=n;i++)printf("%I64d ",a[i]);
		}
		else
		{
			int mn=1;for(int i=2;i<=n;i++)if(abs(a[i])<abs(a[mn]))mn=i;
			if(abs(a[mn])>=k*1ll*x)
			{
				priority_queue<pii> q;
				for(int i=1;i<=n;i++)q.push(mp(-abs(a[i]),i));
				for(int i=1;i<=k;i++)
				{
					int t=q.top().ss;
					q.pop();
					if(a[t]>0)a[t]-=x;
					else a[t]+=x;
					q.push(mp(-abs(a[t]),t));
				}
				for(int i=1;i<=n;i++)printf("%I64d ",a[i]);
			}
			else
			{
				int t=abs(a[mn])/x+1;
				if(a[mn]>0)a[mn]-=1ll*t*x;
				else a[mn]+=1ll*t*x;
				priority_queue<pii> q;
				for(int i=1;i<=n;i++)q.push(mp(-abs(a[i]),i));
				for(int i=1;i<=k-t;i++)
				{
					int t=q.top().ss;
					q.pop();
					if(a[t]>0)a[t]+=x;
					else a[t]-=x;
					q.push(mp(-abs(a[t]),t));
				}
				for(int i=1;i<=n;i++)printf("%I64d ",a[i]);
			}
		}
	}
	return 0;
}