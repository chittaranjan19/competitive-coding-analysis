#include <bits/stdc++.h>

using namespace std;

typedef long long int LL;

int arr[1000][1000][2],ans=1000000000,n;
string path;

int T(int n)
{
	int ret=0;
	while(n%2==0) {ret++; n/=2;}
	return ret;
}

int F(int n)
{
	int ret=0;
	while(n%5==0) {ret++; n/=5;}
	return ret;
}

void recurse(int r, int c, int two, int five, string p)
{
	int x;
	two+=arr[r][c][0]; five+=arr[r][c][1];
	if(r==0 && c==0) 
	{
		x=min(two,five);
		if(x<ans) {ans=x; path=p;}
		return;
	}
	if(r!=0 && c!=0) 
	{
		if(min(two+arr[r-1][c][0],five+arr[r-1][c][1])<min(two+arr[r][c-1][0],five+arr[r][c-1][1]))
			recurse(r-1,c,two,five,p+'D');
		else if(min(two+arr[r-1][c][0],five+arr[r-1][c][1])>min(two+arr[r][c-1][0],five+arr[r][c-1][1]))
			recurse(r,c-1,two,five,p+'R');
		else
		{
			recurse(r-1,c,two,five,p+'D');
			recurse(r,c-1,two,five,p+'R');
		}
	}
	else if(r==0) recurse(r,c-1,two,five,p+'R');
	else recurse(r-1,c,two,five,p+'D');
}

int main()
{
	int i,j,num,x;
	cin>>n;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			cin>>num;
			arr[i][j][0]=T(num);
			arr[i][j][1]=F(num);
		}
	}
	recurse(n-1,n-1,0,0,"");
	reverse(path.begin(),path.end());
	cout<<ans<<endl<<path<<endl;
	return 0;
}