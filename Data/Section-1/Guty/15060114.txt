#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Segmento
{
	tint inicio,fin,coordenada;
	Segmento(tint ii, tint ff, tint cc)
	{
		inicio = ii;
		fin = ff;
		coordenada = cc;
	}
};

bool operator < (Segmento s1, Segmento s2)
{
	return make_tuple(s1.inicio, s1.fin) < make_tuple(s2.inicio,s2.fin);
}

bool porCierre (Segmento s1, Segmento s2)
{
	return make_tuple(s1.fin, s1.inicio) < make_tuple(s2.fin,s2.inicio);
}

int main()
{
	#ifdef ACMTUYO
		if (!freopen("Dnew.in", "r", stdin)) return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint n;
	while(cin >> n)
	{
		tint ans = 0;
		map<tint, vector<Segmento> > h;
		map<tint, vector<Segmento> > v;
		forn(i,n)
		{
			tint x1,y1,x2,y2;
			cin >> x1 >> y1 >> x2 >> y2;
			if (x1 == x2) // Vertical
				v[x1].push_back(Segmento(min(y1,y2),max(y1,y2), x1));
			else // Horizontal
				h[y1].push_back(Segmento(min(x1,x2),max(x1,x2), y1));
		}
		
		vector<Segmento> hUnited;
		vector<Segmento> vUnited;
		if (!h.empty())
		{
			for(auto c : h)
			{
				sort(c.second.begin(),c.second.end());
				Segmento f = c.second[0];
				tint inicio = f.inicio,fin = f.fin, l = c.second.size();
				forsn(i,1,l)
				{
					Segmento s = c.second[i];
					if (s.inicio <= fin)
						fin = s.fin;
					else
					{
						hUnited.push_back(Segmento(inicio,fin,c.first));
						ans += fin - inicio + 1;
						inicio = s.inicio;
						fin = s.fin;
					}
				}
				hUnited.push_back(Segmento(inicio,fin,c.first));
				ans += fin - inicio + 1;
			}
		}
		if (v.empty())
		{
			cout << ans << endl;
			return 0;
		}
		for(auto c : v)  
		{
			sort(c.second.begin(),c.second.end());
			Segmento f = c.second[0];
			tint inicio = f.inicio,fin = f.fin, l = c.second.size();
			forsn(i,1,l)
			{
				Segmento s = c.second[i];
				if (s.inicio <= fin)
					fin = s.fin;
				else
				{
					vUnited.push_back(Segmento(inicio,fin,c.first));
					ans += fin - inicio + 1;
					inicio = s.inicio;
					fin = s.fin;
				}
			}
			vUnited.push_back(Segmento(inicio,fin,c.first));
			ans += fin - inicio + 1;
		}
		for(auto sh : hUnited)
			for(auto sv : vUnited)
				if (sh.inicio <= sv.coordenada && sv.coordenada <= sh.fin && sv.inicio <= sh.coordenada && sv.fin >= sh.coordenada)
					ans--;
		
	
		cout << ans << endl;
	}
	
	return 0;
}




