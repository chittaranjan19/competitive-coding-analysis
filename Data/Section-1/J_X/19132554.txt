#include <iostream>
#include <cstdio>
#include <queue>
#include <cstring>

using namespace std;

typedef long long ll;

const int maxn = 10000 + 5;
const int maxm = 5000 + 5;
const int INF = 1 << 29;

char s[maxm];
int a[maxm];
struct trie
{
    int ch[maxn][26], val[maxn], tot, fail[maxn];
    int dp[maxm][maxn], sum[maxm];

    void init()
    {
        tot = 0;
        memset(ch[0], 0, sizeof(ch[0]));
    }

    void insert(char *s, int a)
    {
        int u = 0;
        for(int i = 0; s[i]; ++i)
        {
            int c = s[i] - 'a';
            if(!ch[u][c])
            {
                ch[u][c] = ++tot;
                memset(ch[tot], 0, sizeof(ch[tot]));
                val[tot] = 0;
            }
            u = ch[u][c];
        }
        val[u] += a;
    }

    void getfail()
    {
        queue<int> que;
        for(int i = 0; i < 26; ++i)
        {
            if(ch[0][i])
            {
                que.push(ch[0][i]);
                fail[ch[0][i]] = 0;
            }
        }
        while(!que.empty())
        {
            int u = que.front();
            que.pop();
            int f = fail[u];
            for(int i = 0; i < 26; ++i)
            {
                int v = ch[u][i];
                if(v)
                {
                    fail[v] = ch[f][i];
                    val[v] += val[fail[v]];
                    que.push(v);
                }
                else ch[u][i] = ch[f][i];
            }
        }
    }

    ll solve(ll m)
    {
        getfail();
        int upp = min((ll)maxm - 1, m);
        fill(dp[0], dp[0] + tot + 1, -INF);
        dp[0][0] = 0;
        ll ret = 0;
        for(int i = 0; i <= upp; ++i)
        {
            fill(dp[i + 1], dp[i + 1] + tot + 1, -INF);
            for(int s = 0; s <= tot; ++s)
            {
                sum[i] = max(sum[i], dp[i][s]);
                for(int j = 0; j < 26; ++j)
                {
                    int t = ch[s][j];
                    dp[i + 1][t] = max(dp[i + 1][t], dp[i][s] + val[t]);
                }
            }
//            cout << sum[i] << endl;
        }
        for(int i = 1; i <= upp; ++i)
        {
            ret = max(ret, sum[i] * m / i + sum[m % i]);
        }
        return ret;
    }
} ac;

int main()
{
    int n;
    ll m;
    scanf("%d%I64d", &n, &m);
    ac.init();
    for(int i = 0; i < n; ++i)
    {
        scanf("%d", a + i);
    }
    for(int i = 0; i < n; ++i)
    {
        scanf("%s", s);
        ac.insert(s, a[i]);
    }
    printf("%I64d\n", ac.solve(m));
    return 0;
}
