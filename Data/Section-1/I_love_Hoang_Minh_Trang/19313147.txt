#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
int n, a[MAXN], b[MAXN], Ra[MAXN][30], Rb[MAXN][30], c[MAXN];
int Geta(int l, int r)
{
    int k = log2(r - l + 1);
    return max(Ra[l][k], Ra[r - (1 << k) + 1][k]);
}

int Getb(int l, int r)
{
    int k = log2(r - l + 1);
    return min(Rb[l][k], Rb[r - (1 << k) + 1][k]);
}
typedef pair<int, int> ii;
vector< int > pos[MAXN];
int L[MAXN], top, R[MAXN];
vector< ii > Lista[MAXN], Listb[MAXN];
bool Selected[MAXN];

long long Leech(ii x, ii y)
{
    if (x > y) swap(x, y);
    if (x.second < y.first) return 0;
    if (y.second < x.second) return 1ll*(y.second - y.first) * (y.second - y.first + 1) / 2;
    return 1ll * abs(y.first - x.second) * (x.second - y.first + 1) / 2;
}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("D.inp", "r", stdin);
    freopen("D.out", "w", stdout);
    #endif //MIKELHPDATKE

    cin >> n;
    FORE(i, 1, n) cin >> a[i];
    FORE(j, 1, n) cin >> b[j];
    FORE(i, 1, n) c[i] = a[i], c[i + n] = b[i];
    sort(c + 1, c + n + n + 1);
    FORE(i, 1, n) a[i] = lower_bound(c + 1, c + n * 2 + 1, a[i]) - c;

    FORE(i, 1, n) b[i] = lower_bound(c + 1, c + n * 2 + 1, b[i]) - c;
    top = *max_element(a + 1, a + n + 1);
    top = max(top, *max_element(b + 1, b + n + 1));

    FORE(i, 1, n) Ra[i][0] = a[i], Rb[i][0] = b[i];
    int t = log2(n);
    FORE(j, 1, t)
        FORE(i, 1, n) Ra[i][j] = max(Ra[i][j - 1], Ra[i + (1 << (j - 1))][j - 1]),
                      Rb[i][j] = min(Rb[i][j - 1], Rb[i + (1 << (j - 1))][j - 1]);
    //
    FORE(i, 1, n) pos[a[i]].push_back(i);
    FORE(i, 1, n){
            L[i] = i;
            while ( (L[i] - 1) && a[L[i] - 1] <= a[i]) L[i] = L[L[i] - 1];
    }
    FORD(i, n, 1){
            R[i] = i;
            while (R[i] + 1 <= n && a[R[i] + 1] <= a[i]) R[i] = R[R[i] + 1];
    }

    FORE(i, 1, n){
        int sz = Lista[a[i]].size();
        if (sz && Lista[a[i]][sz - 1].second >= L[i]) continue;
        //cout << a[i]<<": "<<" "<<L[i]<<" "<<R[i]<<" "<<endl;
        Lista[a[i]].push_back(ii(L[i], R[i]));
    }
    ///////////////////
    FORE(i, 1, n){
            L[i] = i;
            while ( (L[i] - 1) && b[L[i] - 1] >= b[i]) L[i] = L[L[i] - 1];
    }
    FORD(i, n, 1){
            R[i] = i;
            while (R[i] + 1 <= n && b[R[i] + 1] >= b[i]) R[i] = R[R[i] + 1];
    }

    FORE(i, 1, n){
        int sz = Listb[b[i]].size();
        if (sz && Listb[b[i]][sz - 1].second >= L[i]) continue;
        //cout << a[i]<<": "<<" "<<L[i]<<" "<<R[i]<<" "<<endl;
        Listb[b[i]].push_back(ii(L[i], R[i]));
    }
    ///////////////////////
    long long ans = 0;
    int topa = *max_element(a + 1, a + n + 1);
    int topb = *max_element(b + 1, b + n + 1);
    //cout << Listb[b[4]][0].first << " "<<Listb[b[4]][0].second<<"wtf"<<endl;
    //cout << Lista[a[4]][1].first << " "<<Lista[a[4]][1].second<<"wtf"<<endl;
    FORE(i, 1, topa){
        FOR(j, 0, Lista[i].size()){
          //  if (i == 4) cout<<"wtf"<<Lista[i][j].first<<" "<<Lista[i][j].second<<endl;
            int k = lower_bound(Listb[i].begin(), Listb[i].end(), Lista[i][j]) - Listb[i].begin();
          //  if (i == 4) cout <<k<<"clgt"<< Listb[i][0].first << " "<<Listb[i][0].second <<endl;
            //if (i == 4) cout << (Lista[i][j] < Listb[i][0]) <<endl;
            if (k < Listb[i].size())
                ans += Leech(Lista[i][j], Listb[i][k]);
            if (k + 1 < Listb[i].size()) ans += Leech(Lista[i][j], Listb[i][k + 1]);
            if (k - 1 >= 0) ans += Leech(Lista[i][j], Listb[i][k - 1]);
            if (k - 2 >= 0) ans += Leech(Lista[i][j], Listb[i][k - 2]);
        }
    }
    //cout<<ans<<endl;
    FORE(i, 1, n) ans += (a[i] == b[i]);
    cout << ans;
    return 0;
}
