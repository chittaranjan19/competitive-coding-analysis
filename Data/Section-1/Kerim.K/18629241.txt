#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
typedef tree<PII, null_type, less<PII>, rb_tree_tag, tree_order_statistics_node_update> op;
op s;
int arr[MAXN];
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++)
		scanf("%d",arr+i);
	s.insert(mp(-INF,-INF));	
	for(int i=1;i<=n;i++){
		int type;
		scanf("%d",&type);
		if(type>=0)
			s.insert(mp(i,type));
		else{	
			int p=upper_bound(arr+1,arr+m+1,int(s.size()-1))-arr;
			stack<PII>sz;
			for(int j=1;j<p;j++){
				PII k=*s.find_by_order(arr[j]);
				sz.push(k);
			}
			while(!sz.empty()){
				s.erase(sz.top());
				sz.pop();
			}
		}
	}int d=0;
	tr(it,s){
		if(it->ff<0)
			continue;
		printf("%d",it->ss);
		d=1;
	}
	if(!d)
		printf("Poor stack!\n");
	return 0;
}
