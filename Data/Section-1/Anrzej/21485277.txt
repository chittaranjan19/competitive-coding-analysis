#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 5e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

int t[N], _n = 2e5;

int sum(int r)
{
	int result = 0;
	for (; r >= 0; r = (r & (r + 1)) - 1)
		result += t[r];
	return result;
}

void inc(int i, int delta)
{
	for (; i <= _n; i = (i | (i + 1)))
		t[i] += delta;
}

int sum(int l, int r)
{
	return sum(r) - sum(l - 1);
}

int a[N];

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < n; i++){
		int t;
		scanf("%d", &t);
		a[t] += 1;
	}
	for (int i = 0; i <= _n; i++){
		inc(i, a[i]);
	}
	ll cur_ans = 0;
	for (int op = 1; op <= _n; op++){
		if (a[op] == 0) continue;
		ll tans = 0;
		for (int i = op * 2; i <= _n; i += op){
			tans += (i - op)*sum(i - op, i - 1);
		}
		if (tans > cur_ans)
			cur_ans = tans;
	}
	cout << cur_ans;
	return 0;
}