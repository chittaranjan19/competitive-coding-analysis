#include <iostream>
#include <cmath>
#include <algorithm>
using namespace std;
class node
{
public:
    int x, y;
    double dis;
};
inline bool mycom(node& a, node& b)
{
    if (a.dis == b.dis)
    {
        if (a.x == b.x)
            return a.y < b.y;
        else
            return a.x < b.x;
    }
    else
        return a.dis < b.dis;

}
int main(int argc, char const *argv[])
{
    int ax, ay, bx, by, tx, ty;
    cin >> ax >> ay >> bx >> by >> tx >> ty;
    int n;
    cin >> n;
    vector<pair<long long, long long>> points(n);
    vector<node> adis(n);
    vector<node> bdis(n);
    for (int i = 0; i < n; ++i)
    {
        cin >> points[i].first >> points[i].second;
        adis[i].dis = - sqrt((points[i].first - tx) * (points[i].first - tx) + (points[i].second - ty) * (points[i].second - ty))
                      + sqrt((ax - points[i].first) * (ax - points[i].first) + (ay - points[i].second) * (ay - points[i].second));
        bdis[i].dis = - sqrt((points[i].first - tx) * (points[i].first - tx) + (points[i].second - ty) * (points[i].second - ty))
                      + sqrt((bx - points[i].first) * (bx - points[i].first) + (by - points[i].second) * (by - points[i].second));
        adis[i].x = points[i].first;
        adis[i].y = points[i].second;
        bdis[i].x = points[i].first;
        bdis[i].y = points[i].second;
    }
    sort(adis.begin(), adis.end(), mycom);
    sort(bdis.begin(), bdis.end(), mycom);
    double x;
    if (adis[0].x == bdis[0].x && adis[0].y == bdis[0].y)
    {
        x = min((adis[0].dis) + (bdis[1].dis), (adis[1].dis) + (bdis[0].dis));
    }
    else
        x = (adis[0].dis) + (bdis[0].dis);
    for (int i = 0; i < n; ++i)
        x += 2 * (sqrt((points[i].first - tx) * (points[i].first - tx) + (points[i].second - ty) * (points[i].second - ty)));

        printf("%lf\n", x);
    return 0;
}