#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)

typedef unsigned long long ull;
typedef long long ll;

class Fenwick {
private:
	vector<int> arr;
	const int size;
public:
	Fenwick(int n) : arr(n+1), size(n) {
		for (int it = 0; it < arr.size(); ++it)
			arr[it] = 0;
	}
	void add(int v, int k) {
		for (;k <= size; k += lsone(k)) {
			arr[k] += v;
		}
	}
	int get(int k) {
		int total = 0;
		for (;k > 0; k -= lsone(k))  {
			total += arr[k];
		}
		return total;
	}
};

template <typename U> class Comparator {
public:
    bool operator() (const U lhs, const U rhs) {
        // implement
        return true;
    }
};
// end of template

int main() {
	// freopen("535E.in", "r", stdin);
	int n;
	scanf("%d", &n);

	vii points(n);

	ii topLeft(10005, 0), bottomRight(0, 10005);
	for (int it = 0; it < n; ++it) {
		int s, r;
		scanf("%d %d", &s, &r);
		ii point = make_pair(s, r);
		points[it] = point;

		if (point.a < topLeft.a) {
			topLeft = point;
		}
		else if ((point.a == topLeft.a) and (point.b > topLeft.b)) {
			topLeft = point;
		}

		if (point.a > bottomRight.a) {
			bottomRight = point;
		}
		else if ((point.a == bottomRight.a) and (point.b < bottomRight.b)) {
			bottomRight = point;
		}
	}

	bool first = true;

	for (int it = 0; it < n; ++it) {
		ii &point = points[it];

		bool ans = false;

		if (!ans)
		if ((topLeft.a < point.a) and (topLeft.b > point.b)) {
			if (!first)
				printf(" ");
			first = false;
			ans = true;
			printf("%d", it+1);
		}

		if (!ans)
		if ((bottomRight.a > point.a) and (point.b > bottomRight.b)) {
			if (!first)
				printf(" ");
			first = false;
			ans = true;
			printf("%d", it+1);
		}
	}
	printf("\n");
    return 0;
}