#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

map<int, int> m, idx;
vector<pair<int, int> > v;
vector<int> temp;

int MaxVal = 200005, tree[200005];

void update(LL idx, int val)
{
  if(idx <= 0) return;
  while (idx <= MaxVal && idx > 0){
    tree[idx] = tree[idx] + val;
    idx = idx + (idx & -idx);
  }
}

int read(LL idx)
{
  if(idx <= 0) return 0;
  int sum = 0;
  while (idx > 0 && idx <= MaxVal){
    sum = sum + tree[idx];
    idx = idx - (idx & -idx);
  }
  return sum;
}

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("3.txt", "r", stdin);
  //freopen("out.out", "w", stdout);
  int q, x, y;
  cin >> q;
  while(q--)
  {
    cin >> x >> y;
    if(m.find(x) == m.end()) m[x] = x;
    if(m.find(y) == m.end()) m[y] = y;
    swap(m[x], m[y]);
    if(m[x] == x) m.erase(x);
    if(m[y] == y) m.erase(y);
  }
  LL res = 0;
  for(map<int, int>::iterator it = m.begin(); it != m.end(); it++)
  {
    v.pb(mp(it->s, it->f));
    temp.pb(it->f);
  }
  sort(v.begin(), v.end());
  for(int i=0;i<temp.size();i++)
    idx[temp[i]] = i + 1;
  for(int i=0;i<v.size();i++)
  {
    x = idx[v[i].s];
    res+=read(x);
    update(1, 1);
    update(x + 1, -1);
    if(v[i].f < v[i].s) swap(v[i].f,  v[i].s);
    res+=v[i].f - v[i].s - 1;
    int L = 0, R = temp.size() - 1;
    if(temp[R] <= v[i].s) continue;
    while(R > L)
    {
      int mid = L + (R - L) / 2;
      if(temp[mid] > v[i].s) R = mid;
      else L = mid + 1;
    }
    x = R;
    L = 0, R = temp.size() - 1;
    while(R > L)
    {
      int mid = L + (R - L + 1) / 2;
      if(temp[mid] >= v[i].f) R = mid - 1;
      else L = mid;
    }
    if(L >= x && temp[L] < v[i].f) res-=L-x+1;
  }
  cout << res;
  return 0;
}
