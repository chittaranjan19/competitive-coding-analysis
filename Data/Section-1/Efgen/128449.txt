import java.io.*;
import java.util.*;
import java.math.*;

public class Main implements Runnable{
	int[] md = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	int val(String s) {
		return (s.charAt(0)-'0')*10+(s.charAt(1)-'0');
	}
	boolean good(int d, int m, int y) {
		if (y==0) return false;
		if (m==2 && y%4==0) d--;
		return m<=12 && m>0 && d<=md[m-1];
	}
	boolean test(int d, int m, int y, int d1, int m1, int y1) {
		if (!good(d, m, y)) return false;
		if (y1-y>18) return true;
		if (y1-y==18) {
			if (m1-m>0) return true; 
			if (m1==m) return d<=d1;
		}
		return false;
	}
	void solve() throws IOException {		
		int d1 = val(next());
		int m1 = val(next());
		int y1 = val(next());
		
		int d2 = val(next());
		int m2 = val(next());
		int y2 = val(next());
		if (    test(d2, m2, y2, d1, m1, y1) ||
				test(d2, y2, m2, d1, m1, y1) ||
				test(m2, d2, y2, d1, m1, y1) ||
				test(m2, y2, d2, d1, m1, y1) ||
				test(y2, m2, d2, d1, m1, y1) ||
				test(y2, d2, m2, d1, m1, y1)) out.println("YES"); else out.println("NO");
	}
	
	
	BufferedReader br;
	StringTokenizer st;
	PrintWriter out;
	
	public void run() {
		try {
			//br = new BufferedReader(new FileReader(FileName+".in"));
			//out = new PrintWriter(FileName+".out");
			br = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);	
			//br = new BufferedReader(new FileReader("input.txt"));
			//out = new PrintWriter("output.txt");
			solve();
			br.close();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(0);
		}
	}

	String next() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			String s = br.readLine();
			if (s == null)
				return null;
			st = new StringTokenizer(s,". ");
		}
		return st.nextToken();
	}
	double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}
	int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	public static void main(String[] args) {
		new Thread(new Main()).start();
	}
}
