#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;

int dem = 0, n, k;
int a[MAXN];
int b[MAXN], sl[MAXN], m = 0;
int gt[MAXN];
bool ok(int x)
{
    while (x){
        if (x % 10 != 4 && x % 10 != 7) return 0;
        x /= 10;
    }
    return 1;
}
map<int, int> M;
int mul(int x, int y)
{
    return 1LL * x * y % INF;
}
void add(int &a, int b)
{
    a += b;
    if (a >= INF) a  -= INF;
}
int dp[2][MAXN], s[2][MAXN];

int power(int a, int x)
{
    int ans = 1;
    while (x){
        if (x & 1) ans = mul(ans, a);
        a = mul(a, a);
        x >>= 1;
    }
    return ans;
}

int C(int n, int k)
{
    if (k > n) return 0;
    return mul(mul(gt[n], power(gt[k], INF - 2)), power(gt[n - k], INF - 2));
}

int cur, prev;
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("145C.inp", "r", stdin);
    freopen("145C.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n >> k;
    FORE(i, 1, n) cin >> a[i];
    FORE(i, 1, n) if (!ok(a[i])) dem++; else M[a[i]]++;
    int ans = 0;

    gt[0] = 1;
    FORE(i, 1, n) gt[i] = mul(gt[i - 1], i);
    for(map<int, int> :: iterator it = M.begin(); it != M.end(); it++){
        b[++m] = it-> first;
        sl[m] = it->second;
    }
    if (m == 0){
        cout << C(dem, k) << endl;
        return 0;
    }
    add(ans, C(dem, k));
    cur = 0; prev = 1;
    FORE(i, 1, m){
        dp[0][i] = sl[i];
        add(ans, mul(C(dem, k - 1), dp[0][i]));
        //cout << C(dem, k - 1)<<" "<<dp[0][i]<<"::"<<dem<<" "<<k - 1<<endl;
    }
    FORE(i, 1, m) s[0][i] = s[0][i - 1] + dp[0][i];
    //cout << ans<<endl;
    FORE(len, 2, min(k, m)){
        cur ^= 1; prev ^= 1;
        FORE(i, 0, m) dp[cur][i] = 0, s[cur][i] = 0;
        FORE(i, 1, m){
            add(dp[cur][i], mul(s[prev][i - 1], sl[i]));
            s[cur][i] = s[cur][i - 1] + dp[cur][i];
            add(ans, mul(C(dem, k - len), dp[cur][i]));
        }
    }
    cout << ans;
    return 0;
}

