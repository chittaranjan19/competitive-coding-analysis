#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 20000007
#define maxC 1000000007
#define maxx 1000000000000000018
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)

using namespace std;
int n, x, y;
struct node
{
    pair<long long, int> v;
    node* lc;
    node* rc;

    node()
    {
        v = mp(maxx, maxC);
        lc = rc = NULL;
    }

    void update(int l, int r, int x, long long val)
    {
        if (l == r)
        {
            v = mp(val, x);
            return;
        }
        if (x <= mid)
        {
            if (lc == NULL)
                lc = new node;
            lc -> update(l, mid, x, val);
        }
        else
        {
            if (rc == NULL)
                rc = new node;
            rc -> update(mid + 1, r, x, val);
        }
        pair<long long, int> lv = (lc == NULL? mp(maxx, maxC) : lc -> v);
        pair<long long, int> rv = (rc == NULL? mp(maxx, maxC) : rc -> v);
        v = min(lv, rv);
    }
} t;
long long d[mn];

void setup()
{
    cin >> n >> x >> y;
    memset(d, 62, sizeof(long long) * ((n << 1) + 1));
    d[1] = x;
    t.update(1, n << 1, 1, x);
    while(true)
    {
        int u = t.v.S;
        long long w = t.v.F;
        if (u == n)
        {
            cout << w;
            return;
        }
        t.update(1, n << 1, u, maxx);
        if (u - 1 && d[u - 1] > w + x)
        {
            d[u - 1] = w + x;
            t.update(1, n << 1, u - 1, d[u - 1]);
        }
        if (u + 1 <= n && d[u + 1] > w + x)
        {
            d[u + 1] = w + x;
            t.update(1, n << 1, u + 1, d[u + 1]);
        }
        if (u <= n)
        {
            if (d[u << 1] <= w + y)
                continue;
            d[u << 1] = w + y;
            t.update(1, n << 1, u << 1, d[u << 1]);
        }
    }
}

void xuly()
{

}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
