#include <iostream>
#include <vector>
#include <string.h>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <math.h>

#define ll long long
#define pb push_back
#define mp make_pair
#define traverse(container, it) \
for(typeof(container.begin()) it = container.begin(); it!= container.end(); it++)
using namespace std;

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

int gcd(int a, int b){ if(b==0) return a; return gcd(b,a%b); }
int lcm(int a, int b) {return a*(b/gcd(a,b));}
void setbool(bool a[], int n, bool x){for(int i=0;i<n;i++){a[i] = x;}}
void setint(ll a[], int n, ll x){for(int i=0;i<n;i++){a[i] = x;}}

int main(int argc, const char * argv[]) 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    ll dp[100001][2], freq[100001], temp, n;
    cin>>n;
    
    setint(freq, 100001, 0);
    
    while(n--)
    {
        cin>>temp;
        freq[temp]++;
    }
    
    vector<ll> v;
    for(ll i=1;i<100001;i++)
    {
        if(freq[i] > 0)
        {
            v.pb(i);
        }
    }
    
    dp[0][1] = freq[v[0]];
    dp[0][0] = 0;
    for(ll i=1;i<v.size();i++)
    {
        if(v[i] - v[i-1] > 1)
        {
            dp[i][1] = max(dp[i-1][0], dp[i-1][1]) + freq[v[i]]*v[i];
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]);
        }
        else if(v[i] - v[i-1] == 1)
        {
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]);
            dp[i][1] = dp[i-1][0] + freq[v[i]]*v[i];
        }
    }
    
    cout<<max(dp[v.size()-1][0], dp[v.size()-1][1]);
    return 0;
}
