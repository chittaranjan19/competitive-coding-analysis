#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define debug(...) fprintf(stderr, __VA_ARGS__)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 5010, MOD = 1e9 + 7;

int add (int x, int y) {
	return (x + y) % MOD;
}

int subtr (int x, int y) {
	return (x -= y) < 0 ? x + MOD : x;
}

int N, K, A, B;
int dp1[MAXN], dp2[MAXN];
int psum[MAXN];
int *cur = dp2, *prv = dp1;

void calcpsum() {
	for (int i = 1; i <= N; i++) {
		psum[i] = add(psum[i - 1], cur[i]);
	}
}

int getpsum (int a, int b) {
	if (a > N) {
		return 0;
	}
	if (a <= 0) {
		a = 1;
	}
	if (b > N) {
		b = N;
	}
	return psum[b] - psum[a - 1];
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces480C.in", "r", stdin);
#endif
	cin >> N >> A >> B >> K;
	cur[A] = 1;
	calcpsum();
	while (K--) {
		swap(cur, prv);
		// puts("AHA");
		for (int j = 1; j <= N; j++) {
			cur[j] = 0;
			if (j == B) {
				continue;
			}
			// printf("j = %d, B = %d\n", j, B);
			if (j < B) {
				cur[j] = subtr(getpsum(1, (j + B - 1) / 2), prv[j]);
				// printf("%d is psum from %d -> %d\n", j, 1, (j + B - 1) / 2);
			} else {
				cur[j] = subtr(getpsum((j + B) / 2 + 1, N), prv[j]);
				// printf("%d is psum from %d -> %d\n", j, (j + B) / 2 + 1, N);
			}
			// printf("cur[%d] = %d\n", j, cur[j]);
		}
		calcpsum();
	}
	int ans = 0;
	for (int i = 1; i <= N; i++) {
		ans = add(ans, cur[i]);
	}
	printf("%d\n", ans);
}