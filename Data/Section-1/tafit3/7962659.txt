import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemB {
    BufferedReader rd;

    private ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        rd.readLine();
        int[] a = intarr(rd.readLine());
        int n = a.length;
        SortedMap<Integer, Set<Integer>> m = new TreeMap<>();
        for(int i=0;i<n;i++) {
            Set<Integer> q = m.get(a[i]);
            if(q == null) {
                q = new HashSet<>();
                m.put(a[i], q);
            }
            q.add(i+1);
        }
        int c2 = 0;
        int c3 = 0;
        int t3 = 0;
        int[] d3 = null;
        int[] r3 = null;
        int[] t2 = new int[2];
        int[][] d2 = new int[2][2];
        int av = 0;
        for(Map.Entry<Integer, Set<Integer>> e: m.entrySet()) {
            if(e.getValue().size() == 2) {
                c2++;
                if(av < 2) {
                    t2[av] = e.getKey();
                    int pos = 0;
                    for(Integer t: e.getValue()) {
                        d2[av][pos++] = t;
                    }
                    av++;
                }
            } if(e.getValue().size() >= 3) {
                c3++;
                if(d3 == null) {
                    t3 = e.getKey();
                    d3 = new int[3];
                    r3 = new int[e.getValue().size()-3];
                    int pos = 0;
                    boolean r = false;
                    for(Integer t: e.getValue()) {
                        if(!r) {
                            if(pos < 3) {
                                d3[pos++] = t;
                                if(pos == 3) {
                                    r = true;
                                    pos = 0;
                                }
                            }
                        } else {
                            r3[pos++] = t;
                        }
                    }
                }
            }
        }
        if((c2 == 0 && c3 == 0) || (c2 == 1 && c3 == 0)) {
            out("NO");
        } else {
            out("YES");
            for(int i=0;i<3;i++) {
                StringBuilder buf = new StringBuilder();
                for(Map.Entry<Integer, Set<Integer>> e: m.entrySet()) {
                    if(c3 > 0 && e.getKey() == t3) {
                        if(i == 0) {
                            append(buf, d3[0]);
                            append(buf, d3[1]);
                            append(buf, d3[2]);
                        } else if(i == 1) {
                            append(buf, d3[0]);
                            append(buf, d3[2]);
                            append(buf, d3[1]);
                        } else if(i == 2) {
                            append(buf, d3[1]);
                            append(buf, d3[0]);
                            append(buf, d3[2]);
                        }
                        for(int v: r3) {
                            append(buf, v);
                        }
                    } else if(c2 > 0 && e.getKey() == t2[0]) {
                        if(i == 0) {
                            append(buf, d2[0][0]);
                            append(buf, d2[0][1]);
                        } else {
                            append(buf, d2[0][1]);
                            append(buf, d2[0][0]);
                        }
                    } else if(c2 > 0 && e.getKey() == t2[1]) {
                        if(i == 2) {
                            append(buf, d2[1][0]);
                            append(buf, d2[1][1]);
                        } else {
                            append(buf, d2[1][1]);
                            append(buf, d2[1][0]);
                        }
                    } else {
                        for(Integer v: e.getValue()) {
                            append(buf, v);
                        }
                    }
                }
                out(buf);
            }
        }
    }

    private void append(StringBuilder buf, Integer v) {
        if(buf.length() > 0) {
            buf.append(' ');
        }
        buf.append(v);
    }

    private int[] intarr(String s) {
        String[] q = s.split(" ");
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
