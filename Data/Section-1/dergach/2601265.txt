#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

typedef long long ll;
#define eps 1e-8
/*
char a[5005];
int i, j, k, n;
int b[5005][5005];

int main()
{
    gets(a);
    n = strlen(a);
    for(i = 0; a[i]; i++)
    {
        for(j = 0; i - j >= 0 && i + j < n && a[i-j] == a[i+j]; j++)
            b[i-j][2*j+1]++;
        for(j = 0; i - j >= 0 && i + j + 1 < n && a[i-j] == a[i+j+1]; j++)
            b[i-j][2*j+2]++;
    }

    for(i = n - 1; i > 0; i--)
        for(j = n - 1; j >= 0; j--)
            b[i-1][j+1] += b[i][j];

    for(i = 0; i < n; i++)
        for(j = 1; j <= n; j++)
            b[i][j] += b[i][j-1];

    scanf("%d", &n);
    while(n--)
    {
        scanf("%d %d", &i, &j);
        printf("%d\n", b[i-1][j-i+1]);
    }
    return 0;
}
*/
int b[5005];
set <int> a[5005];
map <string, set <string> > :: iterator it;
int m, n, i, j, k;
string s1, s2;
set <int> s;
set <int> :: iterator jt, kt;
int n1;

map <string, int> name;
string nm[5005];

int main()
{
    scanf("%d", &m);
    for(i = 0; i < m; i++)
    {
        cin >> s1 >> s2;
        if(name[s1] == 0)
            name[s1] = ++j, nm[j] = s1;
        if(name[s2] == 0)
            name[s2] = ++j, nm[j] = s2;
        a[name[s1]].insert(name[s2]);
        a[name[s2]].insert(name[s1]); 
    }

    printf("%d\n", j);

    for(i = 1; i <= j; i++)
    {
        memset(b, 0, sizeof(b));
        s = a[i];
        for(jt = s.begin(); jt != s.end(); jt++)
        {
            n1 = *jt;
            for(kt = a[n1].begin(); kt != a[n1].end(); kt++)
            {
                if(s.find(*kt) == s.end() && *kt != i)
                {
                    b[*kt]++;
                }
            }
        }
        int maxv = -1, cnt = 0;
        for(k = 1; k <= j; k++)
        {
            if(maxv < b[k])
            {
                maxv = b[k];
                cnt = 0;
            }
            if(maxv > 0 && maxv == b[k])
                cnt++;
        }
        if(cnt == 0) cnt = j - s.size() - 1;
        cout << nm[i] << " " << cnt << endl;
    }
    return 0;
}