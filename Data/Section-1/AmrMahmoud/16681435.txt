#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[4005][4005];
int cost[4005][4005];
int DP[805][4005], best[805][4005];

int main()
{
  int n, k;
  cin >> n >> k;
  for(int i=1;i<=n;i++)
  {
    for(int j=1;j<=n;j++)
    {
      scanf("%d", &arr[i][j]);
      arr[i][j] += arr[i][j - 1];
    }
  }
  for(int i=2;i<=n;i++)
  {
    for(int j=1;j<=n;j++)
    {
      int R = j + i - 1;
      if(R > n) break;
      cost[j][R] = cost[j + 1][R] + arr[j][R] - arr[j][j];
    }
  }
  for(int j=0;j<=k;j++)
    for(int i=0;i<=n;i++)
      DP[j][i] = (1 << 30), best[j][i] = 1;
  DP[0][0] = 0;
  for(int i=1;i<=k;i++)
  {
    best[i][n + 1] = n;
    for(int j=n;j>=i;j--)
    {
      for(int k=best[i - 1][j];k<=best[i][j + 1];k++)
      {
        if(DP[i][j] > DP[i - 1][k - 1] + cost[k][j])
        {
          DP[i][j] = DP[i - 1][k - 1] + cost[k][j];
          best[i][j] = k;
        }
      }
    }
  }
  cout << DP[k][n];
  return 0;
}
