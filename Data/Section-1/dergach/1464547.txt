#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

#define eps 1e-8

struct Rectangle
{
    int x1, y1, x2, y2;
    int w, h;
    int povernut;
};

Rectangle a[105], b[105], c[105];
int i, j, k, n, w, h, N;
int used[105], flag, f, best_i, minh, best_used[105];
int cnt, res, cnt_tolst, best_res;
int deltaX, deltaY, bestX, bestY;
double best;

int gcd(int a, int b)
{
    if(b == 0) return a;
    return gcd(b, a % b);
}

int calc()
{
    int i, j, r = 0;
    for(i = 0; i < N; i++)
        for(j = 0; j < N; j++)
            if(used[i] && used[j] && a[i].x2 == a[j].x1)
                r += min(a[i].y2, a[j].y2);
    return r;
}

int calc2()
{
    int res = 0;
    for(int i = 0; i < N; i++)
        for(int j = i + 1; j < N; j++)
            if(used[i] == 1 && used[j] == 1 && i != j)
            {
                if(a[i].povernut != a[j].povernut)
                {
                    if((a[i].y2 == a[j].y1 || a[i].y1 == a[j].y2) && 
                        (a[i].x1 >= a[j].x1 && a[i].x1 <= a[j].x2 || a[i].x2 >= a[j].x1 && a[i].x2 <= a[j].x2
                    || a[j].x1 >= a[i].x1 && a[j].x1 <= a[i].x2 || a[j].x2 >= a[i].x1 && a[j].x2 <= a[i].x2))
                        res += min(a[i].x2, a[j].x2) - max(a[i].x1, a[j].x1);
                    if((a[i].x1 == a[j].x2 || a[i].x2 == a[j].x1) &&
                        (a[i].y1 >= a[j].y1 && a[i].y1 <= a[j].y2 || a[i].y2 >= a[j].y1 && a[i].y2 <= a[j].y2
                    || a[j].y1 >= a[i].y1 && a[j].y1 <= a[i].y2 || a[j].y2 >= a[i].y1 && a[j].y2 <= a[i].y2))
                        res += min(a[i].y2, a[j].y2) - max(a[i].y1, a[j].y1);
                }
                else
                {
                    if((a[i].y2 == a[j].y1 || a[i].y1 == a[j].y2) && 
                        (a[i].x1 >= a[j].x1 && a[i].x1 <= a[j].x2 || a[i].x2 >= a[j].x1 && a[i].x2 <= a[j].x2
                    || a[j].x1 >= a[i].x1 && a[j].x1 <= a[i].x2 || a[j].x2 >= a[i].x1 && a[j].x2 <= a[i].x2))
                        res -= min(a[i].x2, a[j].x2) - max(a[i].x1, a[j].x1);
                    if((a[i].x1 == a[j].x2 || a[i].x2 == a[j].x1) &&
                        (a[i].y1 >= a[j].y1 && a[i].y1 <= a[j].y2 || a[i].y2 >= a[j].y1 && a[i].y2 <= a[j].y2
                    || a[j].y1 >= a[i].y1 && a[j].y1 <= a[i].y2 || a[j].y2 >= a[i].y1 && a[j].y2 <= a[i].y2))
                        res -= min(a[i].y2, a[j].y2) - max(a[i].y1, a[j].y1);
                }
            }
    return res;
}

void razmeshch(int L, int R)
{
    int up = 0;
    int i, j, k, best_i, best_tmp, minv;
    flag = 0;
    while(up < h)
    {
        best_i = -1;
        minv = 123456789;
        for(i = 0; i < N; i++)
        {
            if(flag)
            {
                if(used[i] == 0 && a[i].h <= R - L && a[i].w + up <= h)
                {
                    deltaX = a[i].w / gcd(a[i].w, a[i].h);
                    deltaY = a[i].h / gcd(a[i].w, a[i].h);
                    int tmp = (R - L - a[i].h) / deltaY;
//                  if(tmp > 20)
//                      tmp = 20;
                    if(a[i].w + tmp * deltaX > 20 * a[i].w || a[i].h + tmp * deltaY > 20 * a[i].h)
                        tmp = 19 * a[i].w / deltaX;
                    if(up + a[i].w + tmp * deltaX <= h && R - L - a[i].h - tmp * deltaY < minv)
                    {
                        minv = R - L - a[i].h - tmp * deltaY;
                        bestX = deltaX;
                        bestY = deltaY;
                        best_i = i;
                        best_tmp = tmp;
                    }
                }
            }
            else
            {
                if(used[i] == 0 && a[i].w <= R - L && a[i].h + up <= h)
                {
                    deltaX = a[i].w / gcd(a[i].w, a[i].h);
                    deltaY = a[i].h / gcd(a[i].w, a[i].h);
                    int tmp = (R - L - a[i].w) / deltaX;
                    //if(tmp > 20)
                    //  tmp = 20;
                    if(a[i].w + tmp * deltaX > 20 * a[i].w || a[i].h + tmp * deltaY > 20 * a[i].h)
                        tmp = 19 * a[i].w / deltaX;
                    if(up + a[i].h + tmp * deltaY <= h && R - L - a[i].w - tmp * deltaX < minv)
                    {
                        minv = R - L - a[i].w - tmp * deltaX;
                        bestX = deltaX;
                        bestY = deltaY;
                        best_i = i;
                        best_tmp = tmp;
                    }
                }
            }
        }

        if(best_i == -1)
            return;

        if(flag)
        {
            a[best_i].povernut = 1;
            a[best_i].x1 = L;
            a[best_i].y1 = up;
            a[best_i].x2 = L + a[best_i].h + best_tmp * bestY;
            a[best_i].y2 = up + a[best_i].w + best_tmp * bestX;
            up = a[best_i].y2;
        }
        else
        {
            a[best_i].x1 = L;
            a[best_i].y1 = up;
            a[best_i].x2 = L + a[best_i].w + best_tmp * bestX;
            a[best_i].y2 = up + a[best_i].h + best_tmp * bestY;
            up = a[best_i].y2;
        }

        for(i = 0; i < N; i++)
            if(i != best_i && used[i] == 1 && a[i].x1 == a[best_i].x1 && a[i].y2 == a[best_i].y1)
            {
                res += min(a[i].x2 - a[i].x1, a[best_i].x2 - a[best_i].x1);
                break;
            }

        used[best_i] = 1;
        flag = 1 - flag;
    }
}



void razmeshch2(int L, int R, int up, int flag, int pihaem)
{
    if(R <= L) return;
    flag = 1 - flag;
    int i, j, k, best_i, best_tmp, minv;
    while(up < h)
    {
        best_i = -1;
        minv = 123456789;
        for(i = 0; i < N; i++)
        {
            if(flag)
            {
                if(used[i] == 0 && a[i].h <= R - L && a[i].w + up <= h)
                {
                    deltaX = a[i].w / gcd(a[i].w, a[i].h);
                    deltaY = a[i].h / gcd(a[i].w, a[i].h);
                    int tmp = (R - L - a[i].h) / deltaY;
                    //if(tmp > 20)
                    //  tmp = 20;
                    if(a[i].w + tmp * deltaX > 20 * a[i].w || a[i].h + tmp * deltaY > 20 * a[i].h)
                        tmp = 19 * a[i].w / deltaX;
                    if(pihaem)
                    {
                        while(!(up + a[i].w + tmp * deltaX <= h)) tmp--;
                    }
                    if(up + a[i].w + tmp * deltaX <= h && R - L - a[i].h - tmp * deltaY < minv)
                    {
                        minv = R - L - a[i].h - tmp * deltaY;
                        bestX = deltaX;
                        bestY = deltaY;
                        best_i = i;
                        best_tmp = tmp;
                    }
                }
            }
            else
            {
                if(used[i] == 0 && a[i].w <= R - L && a[i].h + up <= h)
                {
                    deltaX = a[i].w / gcd(a[i].w, a[i].h);
                    deltaY = a[i].h / gcd(a[i].w, a[i].h);
                    int tmp = (R - L - a[i].w) / deltaX;
                    //if(tmp > 20)
                    //  tmp = 20;
                    if(a[i].w + tmp * deltaX > 20 * a[i].w || a[i].h + tmp * deltaY > 20 * a[i].h)
                        tmp = 19 * a[i].w / deltaX;
                    if(pihaem)
                    {
                        while(!(up + a[i].h + tmp * deltaY <= h)) tmp--;
                    }
                    if(up + a[i].h + tmp * deltaY <= h && R - L - a[i].w - tmp * deltaX < minv)
                    {
                        minv = R - L - a[i].w - tmp * deltaX;
                        bestX = deltaX;
                        bestY = deltaY;
                        best_i = i;
                        best_tmp = tmp;
                    }
                }
            }
        }

        if(best_i == -1)
            return;

        if(flag)
        {
            a[best_i].povernut = 1;
            a[best_i].x1 = L;
            a[best_i].y1 = up;
            a[best_i].x2 = L + a[best_i].h + best_tmp * bestY;
            a[best_i].y2 = up + a[best_i].w + best_tmp * bestX;
            up = a[best_i].y2;
        }
        else
        {
            a[best_i].x1 = L;
            a[best_i].y1 = up;
            a[best_i].x2 = L + a[best_i].w + best_tmp * bestX;
            a[best_i].y2 = up + a[best_i].h + best_tmp * bestY;
            up = a[best_i].y2;
        }

        used[best_i] = 1;
        flag = 1 - flag;
    }
}




int main()
{
    scanf("%d %d %d", &w, &h, &N);
    w *= 10; h *= 10;

    bool swp = false;
    if(w < h) 
    {
        swap(w, h);
        swp = true;
    }

    for(i = 0; i < N; i++)
    {
        scanf("%d %d", &a[i].w, &a[i].h);
        //a[i].w *= 10;
        //a[i].h *= 10;
        if(swp)
            swap(a[i].w, a[i].h);
    }

    for(i = 0; i < N; i++)
        b[i] = a[i];

    for(i = 1; i < N; i++)
    {
        res = 0;
        for(j = 0; j < N; j++)
        {
            a[j] = b[j];
            used[j] = 0;
        }

        k = 0;
        for(j = 0; j < i; j++)
        {
            razmeshch(k, min(k + w / i, w));
            k += w / i + 1;
            if(k > w)
                k = w;
        }

        if(res > best_res)
        {
            best_res = res;
            for(j = 0; j < N; j++)
            {
                c[j] = a[j];
                best_used[j] = used[j];
            }
        }
    }
    
    for(n = 2; n <= N; n++)
    {
        for(f = 0; f < 2; f++)
        {
            for(i = 0; i < N; i++)
            {
                a[i] = b[i];
                used[i] = 0;
            }
            k = 0;
            cnt = 0;
            flag = f;
            while(k <= w && cnt < n)
            {
                best = 0.0;
                for(i = 0; i < N; i++)
                {
                    if(flag)
                    {
                        if(!used[i] && (double)(a[i].w) / a[i].h > best && a[i].w <= h)
                        {
                            best = (double)(a[i].h) / a[i].w;
                            best_i = i; 
                        }
                    }
                    else
                    {
                        if(!used[i] && (double)(a[i].h) / a[i].w > best && a[i].h <= h)
                        {
                            best = (double)(a[i].h) / a[i].w;
                            best_i = i;
                        }
                    }
                }
                if(best < eps)
                    break;
                if(flag)
                {
                    a[best_i].povernut = 1;
                    a[best_i].x1 = k;
                    a[best_i].y1 = 0;
                    a[best_i].x2 = k + a[best_i].h;
                    a[best_i].y2 = a[best_i].w;
                    k += a[best_i].h;
                    swap(a[best_i].h, a[best_i].w);
                }
                else
                {
                    a[best_i].x1 = k;
                    a[best_i].y1 = 0;
                    a[best_i].x2 = k + a[best_i].w;
                    a[best_i].y2 = a[best_i].h;
                    k += a[best_i].w;
                }
                if(k > w)
                    break;

                used[best_i] = 1;
                cnt++;
                flag = 1 - flag;
            }

            if(cnt < n && best > eps)
                k = a[best_i].x1;
            bool ok = true;
            while(k < w && ok)
            {
                ok = false;
                minh = 123456789;
                for(i = 0; i < N; i++)
                {
                    if(used[i])
                    {
                        deltaX = a[i].w / gcd(a[i].w, a[i].h);
                        deltaY = a[i].h / gcd(a[i].w, a[i].h);
                        if(k + deltaX <= w && a[i].y2 + deltaY <= h && a[i].y2 < minh && 
                            20 * a[i].w >= (a[i].x2 - a[i].x1 + deltaX) && 20 * a[i].h >= (a[i].y2 - a[i].y1 + deltaY))
                        //  2 * a[i].w * a[i].h >= (a[i].x2 - a[i].x1 + deltaX) * (a[i].y2 - a[i].y1 + deltaY))
                        {
                            minh = a[i].y2;
                            best_i = i;
                            ok = true;
                            bestX = deltaX;
                            bestY = deltaY;
                        }
                    }
                }

                if(!ok)
                    break;

                for(i = 0; i < N; i++)
                    if(i != best_i && used[i] && a[i].x1 >= a[best_i].x2)
                    {
                        a[i].x1 += bestX;
                        a[i].x2 += bestX;
                    }
                a[best_i].x2 += bestX;
                a[best_i].y2 += bestY;
                k += bestX;
            }
            int tmp = calc();
            if(tmp > best_res)
            {
                best_res = tmp;
                for(i = 0; i < N; i++)
                {
                    c[i] = a[i];
                    best_used[i] = used[i];
                }
            }
        }
    }

//пробую набирать самых высоких

    for(n = 2; n <= N; n++)
    {
        for(f = 0; f < 2; f++)
        {
            cnt_tolst = 0;
            for(i = 0; i < N; i++)
            {
                a[i] = b[i];
                used[i] = 0;
            }
NABIRAEM:
            k = 0;
            cnt = 0;
            flag = f;
            while(k <= w && cnt < n)
            {
                best = 0.0;
                for(i = 0; i < N; i++)
                {
                    if(flag)
                    {
                        if(used[i] == 0 && (a[i].w) > best && a[i].w <= h)
                        {
                            best = a[i].w;
                            best_i = i; 
                        }
                    }
                    else
                    {
                        if(used[i] == 0 && (a[i].h) > best && a[i].h <= h)
                        {
                            best = a[i].h;
                            best_i = i;
                        }
                    }
                }
                if(best < eps)
                    break;
                if(flag)
                {
                    a[best_i].povernut = 1;
                    a[best_i].x1 = k;
                    a[best_i].y1 = 0;
                    a[best_i].x2 = k + a[best_i].h;
                    a[best_i].y2 = a[best_i].w;
                    k += a[best_i].h;
                    swap(a[best_i].h, a[best_i].w);
                }
                else
                {
                    a[best_i].x1 = k;
                    a[best_i].y1 = 0;
                    a[best_i].x2 = k + a[best_i].w;
                    a[best_i].y2 = a[best_i].h;
                    k += a[best_i].w;
                }
                if(k > w)
                    break;

                used[best_i] = 1;
                cnt++;
                flag = 1 - flag;
            }

            if(cnt < n && best > eps)
                k = a[best_i].x1;
            bool ok = true;
            while(k < w && ok)
            {
                ok = false;
                minh = 123456789;
                for(i = 0; i < N; i++)
                {
                    if(used[i] == 1)
                    {
                        deltaX = a[i].w / gcd(a[i].w, a[i].h);
                        deltaY = a[i].h / gcd(a[i].w, a[i].h);
                        if(k + deltaX <= w && a[i].y2 + deltaY <= h && a[i].y2 < minh && 
                            20 * a[i].w >= (a[i].x2 - a[i].x1 + deltaX) && 20 * a[i].h >= (a[i].y2 - a[i].y1 + deltaY))
                        //  2 * a[i].w * a[i].h >= (a[i].x2 - a[i].x1 + deltaX) * (a[i].y2 - a[i].y1 + deltaY))
                        {
                            minh = a[i].y2;
                            best_i = i;
                            ok = true;
                            bestX = deltaX;
                            bestY = deltaY;
                        }
                    }
                }

                if(!ok)
                    break;

                for(i = 0; i < N; i++)
                    if(i != best_i && used[i] == 1 && a[i].x1 >= a[best_i].x2)
                    {
                        a[i].x1 += bestX;
                        a[i].x2 += bestX;
                    }
                a[best_i].x2 += bestX;
                a[best_i].y2 += bestY;
                k += bestX;
            }
            int tmp = calc();
            if(tmp > best_res)
            {
                best_res = tmp;
                for(i = 0; i < N; i++)
                {
                    c[i] = a[i];
                    best_used[i] = used[i] == 1 ? 1 : 0;
                }
            }

            if(clock() > 4000)
                goto PRINT;

            int maxv = 0, maxi = 0;
            for(i = 0; i < N; i++)
                if(used[i] == 1 && a[i].x2 - a[i].x1 > maxv)
                {
                    maxi = i;
                    maxv = a[i].x2 - a[i].x1;
                }
            used[maxi] = 2;
            cnt_tolst++;
            for(i = 0; i < N; i++)
            {
                a[i] = b[i];
                if(used[i] == 1)
                    used[i] = 0;
            }
            if(N - cnt_tolst >= n)
                goto NABIRAEM;
        }
    }

PRINT:

    cnt = 0;
    for(i = 0; i < N; i++)
    {
        a[i] = c[i];
        used[i] = best_used[i];
        if(used[i] == 1)
            cnt++;
    }

    int max_width;
    while(cnt--)
    {
        max_width = 0;
        for(i = 0; i < N; i++)
            if(best_used[i] == 1 && max_width < a[i].x2 - a[i].x1)
            {
                best_i = i;
                max_width = a[i].x2 - a[i].x1;
            }
        best_used[best_i] = 2;
        for(i = 0; i < N; i++)
            if(used[i] == 1 && i != best_i && a[i].y1 == a[best_i].y2 && a[i].x1 == a[best_i].x1)
                break;
        if(i == N)
            razmeshch2(a[best_i].x1 + 1, a[best_i].x2 - 1, a[best_i].y2, a[best_i].povernut, 0);
    }

    for(i = 0; i < N; i++)
    {
        if(used[i] == 1)
        {
            for(j = 0; j < N; j++)
                if(used[j] == 1 && i != j && a[i].y2 == a[j].y1 &&
                    (a[i].x1 >= a[j].x1 && a[i].x1 <= a[j].x2 || a[i].x2 >= a[j].x1 && a[i].x2 <= a[j].x2
                    || a[j].x1 >= a[i].x1 && a[j].x1 <= a[i].x2 || a[j].x2 >= a[i].x1 && a[j].x2 <= a[i].x2))
                    break;
            if(j == N)
                razmeshch2(a[i].x1 + 1, a[i].x2 - 1, a[i].y2, a[i].povernut, 1);
        }
    }


    best_res = calc2();
    int minL, minR, Li, Ri;
    for(i = 0; i < N; i++)
    {
        if(used[i])
        {
            minL = minR = 123456789;
            Li = Ri = -1;
            for(j = 0; j < N; j++)
            {
                if(used[j] == 1 && i != j && 
                    (a[i].y1 >= a[j].y1 && a[i].y1 <= a[j].y2 || a[i].y2 >= a[j].y1 && a[i].y2 <= a[j].y2
                    || a[j].y1 >= a[i].y1 && a[j].y1 <= a[i].y2 || a[j].y2 >= a[i].y1 && a[j].y2 <= a[i].y2))
                {
                    if(a[j].x2 <= a[i].x1 && a[i].x1 - a[j].x2 < minL)
                    {
                        minL = a[i].x1 - a[j].x2;
                        Li = j;
                    }
                    if(a[j].x1 >= a[i].x2 && a[j].x1 - a[i].x2 < minR)
                    {
                        minR = a[j].x1 - a[i].x2;
                        Ri = j;
                    }
                }
            }
            Rectangle tmp1 = a[i], tmp2 = a[i];
            if(Li != -1 && minL != 0)
            {
                a[i].x2 -= 1;
                a[i].x1 -= 1;
                res = calc2();
                if(res < best_res)
                    a[i] = tmp1;
                else
                {
                    best_res = res;
                    tmp1 = a[i];
                }
                a[i] = tmp2;
                a[i].x2 -= a[i].x1 - a[Li].x2;
                a[i].x1 = a[Li].x2;
                res = calc2();
                if(res < best_res)
                    a[i] = tmp1;
                else
                    best_res = res;
            }
            tmp1 = a[i]; tmp2 = a[i];
            if(Ri != -1 && minR != 0)
            {
                a[i].x2 += 1;
                a[i].x1 += 1;
                res = calc2();
                if(res < best_res)
                    a[i] = tmp1;
                else
                {
                    best_res = res;
                    tmp1 = a[i];
                }
                a[i] = tmp2;
                a[i].x1 += a[Ri].x1 - a[i].x2;
                a[i].x2 = a[Ri].x1;
                res = calc2();
                if(res < best_res)
                    a[i] = tmp1;
                else
                    best_res = res;
            }
        }
    }


    for(i = 0; i < N; i++)
    {
        c[i] = a[i];
        best_used[i] = used[i];
    }

    for(i = 0; i < N; i++)
    {
        if(best_used[i])
        {
           // if(!swp)
                printf("%d.%d %d.%d %d.%d %d.%d\n", c[i].x1 / 10, c[i].x1 % 10, c[i].y1 / 10, c[i].y1 % 10, 
                                                    c[i].x2 / 10, c[i].x2 % 10, c[i].y2 / 10, c[i].y2 % 10);
           // else
           //     printf("%d.%d %d.%d %d.%d %d.%d\n", c[i].y1 / 10, c[i].y1 % 10, c[i].x1 / 10, c[i].x1 % 10, 
           //                                         c[i].y2 / 10, c[i].y2 % 10, c[i].x2 / 10, c[i].x2 % 10);
        }
        else
            printf("-1 -1 -1 -1\n");
    }   
    return 0;
}