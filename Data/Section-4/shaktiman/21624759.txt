//Diplav
#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(a) (int)(a.size())
#define all(c) (c).begin(),(c).end()
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define dout(n) printf("%d\n",n)
#define REP(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
//Works for forward as well as backward iteration
#define TRvi(c,it) for(vi::iterator it = (c).begin();it! = (c).end();it++)
#define MOD 1000000007
#define PI 3.14159265359
#define endl '\n'

#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

typedef long long int ll;
typedef vector<int> vi;
typedef pair<int,int > ii;
typedef vector<ii> vii;
typedef pair<int,ii > ip;
typedef pair< ii,ii > pp;
typedef map<string, int> msi;
typedef vector< vi > vvi;
typedef long long ll;
typedef pair<long long,long long> pll;
typedef vector<long long> vll;
typedef vector<pll> vpll;
typedef vector<vll> vvll;
typedef pair<pll,pll>  ppll;
typedef priority_queue < ll , vector < ll > , greater < ll > > minheap;
typedef priority_queue < ll , vector < ll > , less < ll > > maxheap;
struct sort_pred {
    bool operator()(const std::pair<int,int> &left, const std::pair<int,int> &right) 
    { 
            return left.second < right.second; 
    }
};
//sort(v.begin(),v.begin()+n,sort_pred())
void optimise()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
long long int gcd(long long int m, long long int n)
{
    if(n == 0)
        return m;
    return gcd(n, m % n);
}
ll powmod(ll a,ll b)
{
    if(b==0)return 1;
    ll x=powmod(a,b/2);
    ll y=(x*x)%MOD;
    if(b%2)
        return (a*y)%MOD;
    return y%MOD;
}
//Template ends here
int main()
{
    int n, rw,col,temp;
    cin >> n;
    trace1(n);
    std::vector<int>  a(n);
    string dip;
    cin >> dip;
    for(int j=0;j<n;j++)
    {
         temp=dip[j]-'0';
        a[j]=temp;
    }
   // cout <<"in";
    vii dir;
    std::vector<std::vector<int> > matrix;
     matrix.resize(10, std::vector<int>(2, 0));
     matrix[0][0]=3;matrix[0][1]=1;
    for(int i=1;i<=9;i++)
    {
        if((i%3)!=0)
        {
            matrix[i][0]=i/3;
            matrix[i][1]=(i%3)-1;
        }
        else
        {
            matrix[i][0]=(i/3) -1;
            matrix[i][1]=2;
        }
    }
  /*  for (int i = 0; i < 10; ++i)
    {
        trace3(i,matrix[i][0],matrix[i][1]);
    } */
    
    for (int i=1;i<n;i++)
    {
        rw=matrix[a[i]][0]-matrix[a[i-1]][0];
        col=matrix[a[i]][1]-matrix[a[i-1]][1];
        trace2(rw,col);
        dir.pb(mp(rw,col));
    }
   // cout << "dir";
    trace1(586);
    for(int j=0;j<n-1;j++)
    {
        trace2(dir[j].first,dir[j].second);
    }
    int state=0,state2=0;
    for(int i=0;(i<=9) ;i++)
    {
        if((i!=a[0]))
        {
            state2=0;
            rw=matrix[i][0];col=matrix[i][1];
            trace2(rw,col);
            for(int j=0;j<n-1;j++)
            {
                rw+=dir[j].first;
                col+=dir[j].second;
                if(((rw>=0&&rw<3)&&(col>=0&&col<3))||rw==3 && col==1)
                {
                    state2=0;
                }
                else
                {
                    state2=1;
                    break;
                }
            }
            if(state2==0)
            {
                state=1;
                break;
            }
        } 
        if(state==1)
        {
            break;
        }
    }
    if(state==1)
    {
        cout << "NO" << endl;
    }
    else
    {
        cout << "YES" << endl;
    }  
    return 0;
}