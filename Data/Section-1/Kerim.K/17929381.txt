#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define lg(x) ceil(log2(x))
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define y1 husran
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int dis(int x1,int y1,int x2,int y2){
//	cerr<<x1<<" "<<y1<<"-"<<x2<<" "<<y2<<endl;
	int x3=(x1-x2)*(x1-x2);
	int x4=(y1-y2)*(y1-y2);
	double k=atan(-1)/sin(45);
//	cerr<<x3+x4<<endl;
	return (x3+x4);
	assert(k!=M_PI);
}
int l[MAXN],r[MAXN];
int dp[(1<<24)+3];
struct Order{
	int bir,iki;
	int mask;
}way[(1<<24)+3];
int main(){
	int stx,sty,n;
	scanf("%d%d",&stx,&sty);
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d%d",&l[i],&r[i]);
	for(int i=1;i<(1<<n);i++)
		dp[i]=INF;	
	for(int i=0;i<(1<<n);i++){
		if(dp[i]==INF)
			continue;
		for(int j=1;j<=n;j++)
			if(!(i&(1<<(j-1)))){
				if(umin(dp[i|(1<<(j-1))],dp[i]+2*dis(stx,sty,l[j],r[j]))){
					way[i|(1<<(j-1))].mask=i;
					way[i|(1<<(j-1))].bir=j;
					way[i|(1<<(j-1))].iki=-INF;
				}
			}
		for(int j=1;j<=n;j++)
			for(int k=1;k<=n;k++)
				if(j!=k and !(i&(1<<(j-1))) and !(i&(1<<(k-1)))){
					if(umin(dp[i|(1<<(j-1))|(1<<(k-1))],dp[i]+dis(stx,sty,l[j],r[j])+
						dis(l[j],r[j],l[k],r[k])+dis(l[k],r[k],stx,sty))){	
						way[i|(1<<(j-1))|(1<<(k-1))].mask=i;
						way[i|(1<<(j-1))|(1<<(k-1))].bir=j;
						way[i|(1<<(j-1))|(1<<(k-1))].iki=k;	
					}
				}
	}
	printf("%d\n",dp[(1<<n)-1]);
	int mass=(1<<n)-1;vector<int>v;
	while(mass!=0){
		v.pb(0);
		if(way[mass].iki!=-INF)
			v.pb(way[mass].iki);
		v.pb(way[mass].bir);
		mass=way[mass].mask;
	}v.pb(0);
	for(int i=v.size()-1;i>=0;i--)
		cout<<v[i]<<" ";
	cout<<endl;			
	return 0;
}
