#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"You can do IT.I belive YOU!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ordered_set s;
*/
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int dis[2009][2009],vis[2009][2009];
int dx[]={+1,-1,0,0},dy[]={0,0,-1,+1};
void bfs(){
	queue<PII>q;
	q.push(mp(500,500));
	while(!q.empty()){
		int nx=q.front().ff,ny=q.front().ss,c=dis[nx][ny];
		q.pop();
		if(vis[nx][ny]==1 or c<4)
			continue;
		vis[nx][ny]=1;
		for(int i=0;i<4;i++){
			int tox=nx+dx[i],toy=ny+dy[i];
			dis[tox][toy]+=c/4;
			if(dis[tox][toy]>=4 and !vis[tox][toy])
				q.push(mp(tox,toy));
		}
		dis[nx][nx]=c%4;
	}
}
int main(){
	int n,t,x,y;
	cin>>n>>t;
	dis[500][500]=n;
	bfs();
	while(t--){
		scanf("%d%d",&x,&y);
		if(x<-500 or y<-500 or x>500 or y>500)
			printf("0\n");
		else
			cout<<dis[x+500][y+500]<<endl;
	}
	return 0;
}
