#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
#include <climits>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)

typedef unsigned long long ull;
typedef long long ll;

class Fenwick {
private:
	vector<int> arr;
	const int size;
public:
	Fenwick(int n) : arr(n+1), size(n) {
		for (int it = 0; it < arr.size(); ++it)
			arr[it] = 0;
	}
	void add(int v, int k) {
		for (;k <= size; k += lsone(k)) {
			arr[k] += v;
		}
	}
	int get(int k) {
		int total = 0;
		for (;k > 0; k -= lsone(k))  {
			total += arr[k];
		}
		return total;
	}
};

template <typename U> class Comparator {
public:
    bool operator() (const U lhs, const U rhs) {
        // implement
        return true;
    }
};
// end of template

int main() {
    // freopen("493C.in", "r", stdin);
    int n;
    scanf("%d", &n);
    vi a(n);
    for (int it = 0; it < n; ++it)
    	scanf("%d", &a[it]);
    sort(a.begin(), a.end());
    int m;
    scanf("%d", &m);
    vi b(m);
    for (int it = 0; it < m; ++it)
    	scanf("%d", &b[it]);
    sort(b.begin(), b.end());

    ii ans(INT_MIN, 0);
    {
	    for (int it = 0; it < n; ++it) {
	    	if ((it) and (a[it] == a[it-1]))
	    		continue;
	    	int l = 0, r = m-1;
	    	while (l < r) {
	    		int mid = (l+r) >> 1;
	    		if (b[mid] < a[it])
	    			l = mid+1;
	    		else
	    			r = mid;
	    	}
	    	if (b[l] < a[it])
	    		++l;
	    	int scoreA = (n-it)*3+(it)*2;
	    	int scoreB = (m-l)*3+(l)*2;
	    	// printf("%d %d\n", scoreA, scoreB);
	    	if ((ans.a-ans.b < scoreA-scoreB) or ((ans.a-ans.b == scoreA-scoreB) and (ans.a < scoreA))) {
	    		ans.a = scoreA;
	    		ans.b = scoreB;
	    	}
	    }
	    int l = 0, r = m-1;
	    while (l < r) {
			int mid = (l+r) >> 1;
			if (b[mid] < a.back()+1)
				l = mid+1;
			else
				r = mid;
		}
		if (b[l] < a.back()+1)
			++l;
		int scoreA = n*2;
		int scoreB = (m-l)*3+(l)*2;
	    // printf("%d %d\n", scoreA, scoreB);
		if ((ans.a-ans.b < scoreA-scoreB) or ((ans.a-ans.b == scoreA-scoreB) and (ans.a < scoreA))) {
			ans.a = scoreA;
			ans.b = scoreB;
		}
	}
    {
	    for (int it = 0; it < m; ++it) {
	    	if ((it) and (b[it] == b[it-1]))
	    		continue;
	    	int l = 0, r = n-1;
	    	while (l < r) {
	    		int mid = (l+r) >> 1;
	    		if (a[mid] < b[it])
	    			l = mid+1;
	    		else
	    			r = mid;
	    	}
	    	if (a[l] < b[it])
	    		++l;
	    	int scoreA = (n-l)*3+(l)*2;
	    	int scoreB = (m-it)*3+(it)*2;

	    	// printf("%d %d\n", scoreA, scoreB);
	    	if ((ans.a-ans.b < scoreA-scoreB) or ((ans.a-ans.b == scoreA-scoreB) and (ans.a < scoreA))) {
	    		ans.a = scoreA;
	    		ans.b = scoreB;
	    	}
	    }
	    int l = 0, r = n-1;
	    while (l < r) {
			int mid = (l+r) >> 1;
			if (a[mid] < b.back()+1)
				l = mid+1;
			else
				r = mid;
		}
		if (a[l] < b.back()+1)
			++l;
		int scoreA = (n-l)*3+(l)*2;
		int scoreB = m*2;
		if ((ans.a-ans.b < scoreA-scoreB) or ((ans.a-ans.b == scoreA-scoreB) and (ans.a < scoreA))) {
			ans.a = scoreA;
			ans.b = scoreB;
		}
	}


    printf("%d:%d\n", ans.a, ans.b);    
    return 0;
}