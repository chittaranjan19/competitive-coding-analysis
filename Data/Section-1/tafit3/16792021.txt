import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int k = intarr()[1];
        char[] r = rd.readLine().toCharArray();
        int n = r.length;

        int[][] h = new int[n][2];
        int prev = -1;
        for(int i=0;i<n;i++) {
            if(r[i] == '0') {
                prev = i;
            }
            h[i][0] = prev;
        }
        prev = -1;
        for(int i=n-1;i>=0;i--) {
            if(r[i] == '0') {
                prev = i;
            }
            h[i][1] = prev;
        }

        int p0 = 0;
        while(r[p0]=='1') {
            p0++;
        }
        int p2 = 0;
        int occ = 0;
        while(occ < k+1) {
            if(r[p2] == '0') {
                occ++;
            }
            p2++;
        }
        int res = Integer.MAX_VALUE;
        while(p2 <= n) {
            int p1 = (p0 + p2) / 2;
            for(int i=-2;i<=2;i++) {
                int p = p1 + i;
                if(p >= p0 && p < p2) {
                    int[] y;
                    if(r[p] == '0') {
                        y = new int[] { p };
                    } else {
                        y = new int[] { h[p][0], h[p][1] };
                    }
                    for(int z: y) {
                        if(z != -1) {
                            if(z >= p0 && z < p2) {
                                int m = Math.max(z-p0,p2-z-1);
                                res = Math.min(m, res);
                            }
                        }
                    }
                }
            }
            p0++;
            while(p0 < n && r[p0]=='1') {
                p0++;
            }
            while(p2 < n && r[p2]=='1') {
                p2++;
            }
            p2++;
        }
        out(res);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
