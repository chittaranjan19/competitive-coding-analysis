#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;

const int inf = (int)2 * 1e18;
const int MOD = (int)1e9 + 7;
const int MAX_N = 100000;
const long double pi = 3.1415926535897932;
const long double eps = 1e-6;

long double dist(long long x1, long long y1, long long x2, long long y2, long long x, long long y)
{
    long double ans = min((x - x1) * (x - x1) + (y - y1) * (y - y1), (x - x2) * (x - x2) + (y - y2) * (y - y2));
    if (x1 == x2)
    {
        if (abs(y - y1) + abs(y - y2) == abs(y1 - y2))
            return min(ans, (long double)(x - x1) * (x - x1));
        else return ans;
    }
    else if (y1 == y2)
    {
        if (abs(x - x1) + abs(x - x2) == abs(x1 - x2))
            return min(ans, (long double)(y - y1) * (y - y1));
        else return ans;
    }
    else
    {
        long double k1 = (long double)(y2 - y1) / (x2 - x1);
        long double b1 = y1 - k1 * x1;
        long double k2 = (-1) / k1;
        long double b2 = y - k2 * x;
        long double x0 = (b2 - b1) / (k1 - k2);
        long double y0 = k2 * x0 + b2;
        if (x0 <= max(x1, x2) && x0 >= min(x1, x2))
            return min(ans, (x - x0) * (x - x0) + (y - y0) * (y - y0));
        else
            return ans;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, x, y, x1, y1;
    cin >> n >> x >> y;
    long long p[n][2];
    for (int i = 0; i < n; i++)
        cin >> p[i][0] >> p[i][1];
    long double dmax = 0, dmin = inf;
    for (int i = 0; i < n; i++)
    {
        //cout << dist(p[i][0], p[i][1], p[(i + 1) % n][0], p[(i + 1) % n][1], x, y) << endl;
        //cout << (long double)((x - p[i][0]) * (x - p[i][0]) + (y - p[i][1]) * (y - p[i][1])) << endl;
        dmax = max(dmax, (long double)((x - p[i][0]) * (x - p[i][0]) + (y - p[i][1]) * (y - p[i][1])));
        dmin = min(dmin, dist(p[i][0], p[i][1], p[(i + 1) % n][0], p[(i + 1) % n][1], x, y));
    }
    //cout << dmin << " " << dmax << endl;
    cout.precision(15);
    cout << pi * (dmax - dmin);
    return 0;
}
