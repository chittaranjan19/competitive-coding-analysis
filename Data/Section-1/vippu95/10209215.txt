//Coder: Vipin Singh
#include<bits/stdc++.h>
using namespace std;

const int MAX = 10000001;
#define lli long long
#define pb push_back
bool v[MAX];
lli len , sp[MAX];

const int limit = 10000001;
int nume[limit];
int deno[limit];

lli power(int x,int y){
	lli id = 1;
	while(y>0){
		if(y&1)
			id=id*(long long)x;
		x=(long long)x*x;
		y = y>>1;
	}
	return id;
}

void Sieve(){
	for (lli i = 2; i < MAX; i += 2)
		sp[i] = 2;
	for (lli i = 3; i < MAX; i += 2){
		if (!v[i]){
			sp[i] = i;
			for (lli j = i; (j*i) < MAX; j += 2){
				if (!v[j*i])	
					v[j*i] = true, sp[j*i] = i;
			}
		}
	}
}

void factorize1(lli num){
	while(num>1){
		nume[sp[num]]++;
		num=num/(long long)sp[num];
	}	
}

void factorize2(lli num){
	while(num>1){
		deno[sp[num]]++;
		num=num/(long long)sp[num];
	}	
}

int main(){
	Sieve();
	memset(nume,0,sizeof(nume));
	memset(deno,0,sizeof(deno));
	int n,m;
	lli num;
	scanf("%d %d",&n,&m);
	for(int i=0;i<n;i++){
		cin>>num;
		factorize1(num);
	}
	for(int i=0;i<m;i++){
		cin>>num;
		factorize2(num);
	}
	vector<lli> anum,aden;
	for(int i=2;i<limit;i++){
		if(nume[i]==deno[i]) continue;
		if(nume[i]<deno[i]){
			int p = deno[i]-nume[i];
			lli res = power(i,p);
			aden.pb(res);
		}
		else{
			int p = nume[i]-deno[i];
			lli res = power(i,p);
			anum.pb(res);
		}
	}
	anum.pb(1);
	aden.pb(1);
	cout<<anum.size()<<" "<<aden.size()<<"\n";
	for(int i=0;i<anum.size();i++)
		cout<<anum[i]<<" ";
	cout<<"\n";
	for(int i=0;i<aden.size();i++)
		cout<<aden[i]<<" ";
	cout<<"\n";
    return 0;
}
