import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class SerejaAndSwaps {
    private int[] s;
    private Integer[][] m;
    private int[][][] limits;

    public SerejaAndSwaps() throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));
        String h = rd.readLine();
        String[] t = h.split("\\s+");
        int n = Integer.parseInt(t[0]);
        int k = Integer.parseInt(t[1]);
        int[] a = new int[n];
        h = rd.readLine();
        t = h.split("\\s+");
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(t[i]);
        }
        recompute(a);
        int res = m[0][n-1];
        for(int i=0;i<k;i++) {
            int minIdx = limits[0][n-1][0];
            for(int j=limits[0][n-1][0]+1;j<limits[0][n-1][1];j++) {
                if(a[minIdx] > a[j]) {
                    minIdx = j;
                }
            }
            List<PossibleSwap> possibleSwapList = new ArrayList<PossibleSwap>();
            int from = limits[0][n-1][0];
            int to = limits[0][n-1][1];

            if(a[minIdx] > 0) {
                if(from > 0) {
                    int largest = findLargest(a,0,from-2,to+1,n-1);
                    if(largest != -1) {
                        possibleSwapList.add(checkPossibleSwap(a, from - 1, largest));
                    }
                }
                if(to < n-1) {
                    int largest = findLargest(a,0,from-1,to+2,n-1);
                    if(largest != -1) {
                        possibleSwapList.add(checkPossibleSwap(a, to + 1, largest));
                    }
                }
            } else {
                int largest = findLargest(a,0,from-1,to+1,n-1);
                if(largest != -1) {
                    possibleSwapList.add(checkPossibleSwap(a, minIdx, largest));
                }
                if(minIdx != from) {
                    possibleSwapList.add(checkPossibleSwap(a, minIdx, from));
                }
                if(minIdx != to) {
                    possibleSwapList.add(checkPossibleSwap(a, minIdx, to));
                }
            }

            int maxRes = res;
            PossibleSwap bestPossibleSwap = null;
            for(PossibleSwap possibleSwap: possibleSwapList) {
                if(possibleSwap.resAfterSwap > maxRes) {
                    maxRes = possibleSwap.resAfterSwap;
                    bestPossibleSwap = possibleSwap;
                }
            }
            if(bestPossibleSwap != null) {
                res = maxRes;
                swap(a, bestPossibleSwap.x, bestPossibleSwap.y);
                recompute(a);
            }
        }
        out(res);
    }

    private class PossibleSwap {
        int x;
        int y;
        int resAfterSwap;

        private PossibleSwap(int x, int y, int resAfterSwap) {
            this.x = x;
            this.y = y;
            this.resAfterSwap = resAfterSwap;
        }
    }

    private PossibleSwap checkPossibleSwap(int[] a, int x, int y) {
        swap(a,x,y);
        recompute(a);
        swap(a,x,y);
        return new PossibleSwap(x,y,m[0][a.length-1]);
    }

    private void swap(int[] a,int x,int y) {
        int tmp = a[x];
        a[x] = a[y];
        a[y] = tmp;
    }

    private void recompute(int[] a) {
        int n = a.length;
        s = new int[n];
        s[0] = a[0];
        for(int i=1;i<n;i++) {
            s[i] = s[i-1] + a[i];
        }
        m = new Integer[n][n];
        limits = new int[n][n][2];
        computeMax(0,n-1);
    }

    private int findLargest(int[] a, int from1, int to1, int from2, int to2) {
        int largest = -1;
        int largest1 = findLargest(a,from1, to1);
        int largest2 = findLargest(a,from2, to2);
        if(largest1 == -1) {
            if(largest2 != -1) {
                largest = largest2;
            }
        } else if(largest2 == -1) {
            largest = largest1;
        } else if(a[largest1] > a[largest2]) {
            largest = largest1;
        } else {
            largest = largest2;
        }
        return largest;
    }

    private int findLargest(int[] a,int from, int to) {
        int res = -1;
        for(int i=Math.max(0,from);i<=Math.min(a.length-1,to);i++) {
            if(res == -1) {
                res = i;
            } else if(a[res] < a[i]) {
                res = i;
            }
        }
        return res;
    }

    private Integer computeMax(int from, int to) {
        Integer res = m[from][to];
        if(res == null) {
            res = s[to];
            if(from > 0) {
                res -= s[from-1];
            }
            limits[from][to][0] = from;
            limits[from][to][1] = to;
            if(from != to) {
                for(int i=from;i<to;i++) {
                    int mx = computeMax(from,i);
                    if(mx > res) {
                        res = mx;
                        limits[from][to][0] = from;
                        limits[from][to][1] = i;
                    }
                    mx = computeMax(i+1,to);
                    if(mx > res) {
                        res = mx;
                        limits[from][to][0] = i+1;
                        limits[from][to][1] = to;
                    }
                }
            }
            m[from][to] = res;
        }
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new SerejaAndSwaps();
    }
}
