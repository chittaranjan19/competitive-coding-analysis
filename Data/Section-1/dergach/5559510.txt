#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <algorithm>
#include <iostream>
#include <queue>
using namespace std;

typedef long long ll;
#define eps 1e-8
#define INF 1234567890

struct student
{
    int level, zach, i;
    bool operator<(student &b)
    {
        return level < b.level;
    }
}stud[100005];

int n, m, s;
pair <int, int> bug[100005];
int res[100005];

int main()
{
    scanf("%d %d %d", &n, &m, &s);
    for(int i = 0; i < m; i++)
    {
        scanf("%d", &bug[i].first);
        bug[i].second = i;
    }
    for(int i = 0; i < n; i++)
        scanf("%d", &stud[i].level);
    for(int i = 0; i < n; i++)
    {
        scanf("%d", &stud[i].zach);
        stud[i].i = i;
    }

    sort(bug, bug + m);
    sort(stud, stud + n);

    bool ok = false;
    int L = 1, R = m + 73;
    while(L < R)
    {
        int C = (L + R) / 2;
        int sum = 0;
        priority_queue <pair <int, int>, vector <pair <int, int> >, greater <pair <int, int> > > q;  
        int curStud = n - 1;
        bool tmpOk = true;
        for(int i = m - 1; i >= 0; i -= C)
        {
            while(curStud >= 0 && stud[curStud].level >= bug[i].first)
            {
                q.push(make_pair(stud[curStud].zach, stud[curStud].i));
                curStud--;
            }
            if(q.empty() || sum + q.top().first > s)
            {
                tmpOk = false;
                break;
            }
            sum += q.top().first; q.pop();
        }
        if(!tmpOk)
            L = C + 1;
        else
        {
            R = C;
        }
    }

    if(R > m)
        puts("NO");
    else
    {
        int C = R;
        int sum = 0;
        priority_queue <pair <int, int>, vector <pair <int, int> >, greater <pair <int, int> > > q;  
        int curStud = n - 1;
        bool tmpOk = true;
        for(int i = m - 1; i >= 0; i -= C)
        {
            while(curStud >= 0 && stud[curStud].level >= bug[i].first)
            {
                q.push(make_pair(stud[curStud].zach, stud[curStud].i));
                curStud--;
            }
            if(q.empty() || sum + q.top().first > s)
            {
                tmpOk = false;
                break;
            }
            for(int j = i; j > max(i - C, -1); j--)
                res[bug[j].second] = q.top().second;
            sum += q.top().first; q.pop();
        }
        puts("YES");
        for(int i = 0; i < m; i++)
        {
            if(i) putchar(' ');
            printf("%d", res[i] + 1);
        }
        puts("");
    }
    return 0;
}