#include <bits/stdc++.h>
#define ll long long
#define N 1000100 
using namespace std;
const ll MAX=1e18+10;
ll 	n, a, b;
ll x[N], f[N], g[N];
vector<ll> prime;
bool isprime[N];
set<ll> s;
void getPrime()
{
	int i, j;
	for (i = 0; i < N; i++)
		isprime[i] =true;
	isprime[0] = isprime[1] = 0;
	for (i = 2; i < N; i++)
	{
		if (!isprime[i])	continue;
		for (j = 2*i; j < N; j += i)
			isprime[j] = false;
	}
	prime.clear();
	for (i = 2; i < N; i++)
		prime.push_back(i);
}

ll change(ll a, ll p)
{
	if (a%p == 0)	return 0;
	if ((a+1)%p==0 || (a-1)%p==0)	return b;
	return -1;
}
ll Solve(ll p)
{
	int L = n+1, R = 0, i, tag = 0;
	ll t, G, res;
	f[0] = 0;
	for (i = 1; i <= n; i++)
	{
		t = change(x[i], p);
		if (t == -1)
		{
			L = i;
			tag = 1;
		}
		if (tag)	f[i] = MAX;
		else f[i] = f[i-1]+t;
	}
	g[n+1] = 0;
	tag = 0;
	for (i = n; i > 0; i--)
	{
		t = change(x[i], p);
		if (t == -1)
		{
			R = i;
			tag = 1;
		}
		if (tag)	g[i] = MAX;
		else g[i] = g[i+1]+t;
	}
	G = g[n+1]+(n+1)*a;
	res = f[n];
	for (i = n; i >= 0; i--)
	{
		res = min(res, f[i]-(i+1)*a+G);
		G = min(G, g[i]+i*a);
	}
	return res;
}
void Get(ll a)
{
	if (a == 0 || a == 1)	return ;
	int i, l = prime.size(), t;
	for (i = 0; i < l; i++)
	{
		t = prime[i];
		if (t*t > a)	break;
		while(a%t == 0)
		{
			if (s.find(t) == s.end())
				s.insert(t);
			a /= t;
		}
	}
	if (a > 1)	s.insert(a);
}
void Init()
{
	s.clear();
	Get(x[1]);
	Get(x[1]+1);
	Get(x[1]-1);
	Get(x[n]);
	Get(x[n]+1);
	Get(x[n]-1);
}
int main()
{
//	freopen("1.txt", "r", stdin);
	int i, j;
	ll  ans;
	set<ll>::iterator it;
	getPrime();
	scanf("%I64d%I64d%I64d", &n, &a, &b);
	for (i = 1; i <= n; i++)
		scanf("%I64d", &x[i]);
	Init();
	ans = MAX;
	for (it = s.begin(); it != s.end(); it++)
		ans = min(ans, Solve(*it));
	printf("%I64d", ans);
	return 0;
}
