#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}


int main()
{
	int n;
	cin >> n;
	vector<int> primer (n+1,-1);
	vector<int> ultimo (n+1,-1);
	vector<int> q (n+1,0);
	forn(i,n)
	{
		int a;
		cin >> a;
		if (primer[a] == -1)
			primer[a] = i+1;
		ultimo[a] = i+1;
		q[a]++;
	}
	int maxi = *max_element(q.begin(),q.end());
	vector<int> p;
	forn(i,n+1)
	{
		if (q[i] == maxi)
			p.push_back(i);
	}
	int largop = p.size();
	int l = 0,r = n+2,lnew = 0,rnew = 0;
	forn(i,largop)
	{
		lnew = primer[p[i]];
		rnew = ultimo[p[i]];
		if (rnew-lnew < r - l or (rnew - lnew == r - l && lnew < l))
		{
			l = lnew;
			r = rnew;
		}
	}
	cout << l << " " << r << endl;
	
		
	return 0;
}
