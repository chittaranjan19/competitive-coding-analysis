#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const int inf = (int)1e9;
const int MOD = (int)1e9 + 7;
const int p = 239;
const int MAX_N = 200000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

vector<vector<pair<int, int> > > graph;
int dist[MAX_N], cnt[MAX_N];

int dfs(int x, int par, int d, int c)
{
    int ans = 0;
    dist[x] = d;
    cnt[x] = c;
    for (int i = 0; i < graph[x].size(); i++)
        if (graph[x][i].first != par)
        {
            ans += dfs(graph[x][i].first, x, d + 1, c + graph[x][i].second);
            ans += graph[x][i].second;
        }
    return ans;
}

int main()
{
    //ifstream ifs("input.txt");
    //ofstream ofs("output.txt");
    //freopen("candies.in", "r", stdin);
    //freopen("candies.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    int n;
    scanf("%d", &n);
    graph.resize(n);
    for (int i = 0; i < n - 1; i++)
    {
        int s, f;
        scanf("%d %d", &s, &f);
        graph[s - 1].push_back(make_pair(f - 1, 0));
        graph[f - 1].push_back(make_pair(s - 1, 1));
    }
    int tot = dfs(0, -1, 0, 0);
    int ans = n - 1;
    for (int i = 0; i < n; i++)
        ans = min(ans, tot - cnt[i] + (dist[i] - cnt[i]));
    printf("%d\n", ans);
    for (int i = 0; i < n; i++)
        if (ans == tot - cnt[i] + (dist[i] - cnt[i]))
            printf("%d ", i + 1);
    return 0;
}
