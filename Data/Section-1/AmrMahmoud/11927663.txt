#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[1000005];
pair<int, int> a[1000005];
LL DP[1000005][3];
int last[1000005][2];
int nxt[1000005][2];

set<int> s;

bool sorter1(pair<int, int> a, pair<int, int> b)
{
  if(a.f == b.f) return a.s > b.s;
  return a.f > b.f;
}

bool sorter2(pair<int, int> a, pair<int, int> b)
{
  if(a.f == b.f) return a.s > b.s;
  return a.f < b.f;
}

int main()
{
  //ios_base::sync_with_stdio(0);
  //freopen("funny.in", "r", stdin);
  //freopen("funny.out", "w", stdout);
  int n;
  scanf("%d", &n);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &arr[i]);
    a[i] = mp(arr[i], i);
  }
  sort(a, a + n, sorter1);
  for(int i=0;i<n;i++)
  {
    last[i][0] = INF_MAX;
    last[i][1] = INF_MIN;
    set<int>::iterator it = s.lower_bound(a[i].s);
    if(it != s.end())
      nxt[a[i].s][0] = *it;
    else nxt[a[i].s][0] = -1;
    s.insert(a[i].s);
  }
  s.clear();
  sort(a, a + n, sorter2);
  for(int i=0;i<n;i++)
  {
    set<int>::iterator it = s.lower_bound(a[i].s);
    if(it != s.end())
      nxt[a[i].s][1] = *it;
    else nxt[a[i].s][1] = -1;
    s.insert(a[i].s);
  }
  for(int i=0;i<n;i++)
  {
    DP[i + 1][2] = max(DP[i][2], DP[i + 1][2]);
    int x = nxt[i][0];
    if(x != -1 && DP[x][0] - last[x][0] < DP[i][2] - arr[i])
    {
      last[x][0] = arr[i];
      DP[x][0] = DP[i][2];
    }
    if(x != -1 && DP[x][0] - last[x][0] < DP[i][0] - last[i][0])
    {
      last[x][0] = last[i][0];
      DP[x][0] = DP[i][0];
    }
    DP[i + 1][2] = max(DP[i + 1][2], DP[i][0] + arr[i] - last[i][0]);
    x = nxt[i][1];
    if(x != -1 && DP[x][1] + last[x][1] < DP[i][2] + arr[i])
    {
      last[x][1] = arr[i];
      DP[x][1] = DP[i][2];
    }
    if(x != -1 && DP[x][1] + last[x][1] < DP[i][1] + last[i][1])
    {
      last[x][1] = last[i][1];
      DP[x][1] = DP[i][1];
    }
    DP[i + 1][2] = max(DP[i + 1][2], DP[i][1] - arr[i] + last[i][1]);
  }
  printf("%I64d", DP[n][2]);
  return 0;
}