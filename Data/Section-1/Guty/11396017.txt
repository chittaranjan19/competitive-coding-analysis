#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int main()
{
	string s,t;
	cin >> s >> t;
	map <char, int> qs; // Cuenta la cantidad de apariciones de una letra en el string s
	map <char, int> qt; // Cuenta la cantidad de apariciones de una letra en el string t
	int n = s.size();
	forn(i,n)
		qs[s[i]]++;
	forn(i,t.size())
		qt[t[i]]++;
	int yay = 0, whoops = 0;
	for (map<char,int>::iterator x = qs.begin(); x != qs.end(); x++)
		yay += min(qs[x->first],qt[x->first]); // qs[x->first] deberia ser igual a x->second
	if (yay >= n)
	{
		cout << n << " " << 0 << endl;
		return 0;
	}
	else
		for(map<char,int>::iterator y = qs.begin(); y != qs.end(); y++)
		{
			if (y->first == tolower(y->first))
				whoops += min(qs[y->first], qt[toupper(y->first)]);
			else
				whoops += min(qs[y->first], qt[tolower(y->first)]);
		}
	if (whoops + yay >= n)
		cout << yay << " " << n-yay << endl;
	else
		cout << yay << " " << whoops << endl;
	
	return 0;
}
