#include <algorithm>
#include <fstream>
#include <iostream>
#include <unordered_map>
using namespace std;

class Hsh {
    public: inline size_t operator()(pair<int, int> a) const {
        return hash<int>()(a.first) + hash<int>()(a.second);
    }
};

unordered_map< pair<int, int>, int, Hsh > qq;
int f[30001];
int partial[30001];

int solve(int pos, int last) {
    if (pos + max(last - 1, 1) > 30000) {
        return f[pos];
    }
    if (qq.count(make_pair(pos, last))) {
        return qq[make_pair(pos, last)];
    }
    if (last == 1) {
        return qq[make_pair(pos, last)] = partial[pos];
    }
    if (partial[pos] == 0) {
        return 0;
    }
    return qq[make_pair(pos, last)] = f[pos] + max(solve(pos + last, last), max(solve(pos + last - 1, last - 1), solve(pos + last + 1, last + 1)));

}

int main() {
    int n, d, x;
    cin >> n >> d;
    for (int i = 1; i <= n; ++ i) {
        cin >> x;
        ++ f[x];
    }
    for (int i = 29999; i >= 0; -- i) {
        partial[i] = partial[i + 1] + f[i];
    }
    cout << solve(d, d) << "\n";
    return 0;
}
