#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl 

typedef long long tint;

using namespace std;

void imprimirVector (vector<bool> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

vector<bool> row (vector<vector<bool> > mt, int n, int i)
{
	vector<bool> row (n);
	forn(j,n)
		row[j] =  mt[i][j];
	return row;
}

vector<bool> column (vector<vector<bool> > mt, int m, int j)
{
	vector<bool> column(m);
	forn(i,m)
		column[i] =  mt[i][j];
	return column;
}

bool tuttiTrue (vector<bool> pity)
{
	bool allTrue = true;
	forn(i,pity.size())
		allTrue &= pity[i];
	return allTrue;
}

bool tuttiFalse (vector<bool> pity)
{
	bool allFalse = true;
	forn(i,pity.size())
		allFalse &= !pity[i];
	return allFalse;
}

int main()
{
	int m,n;
	cin >> m >> n;
	vector<vector<bool> > b (m,vector<bool> (n));
	vector<vector<bool> > a (m,vector<bool> (n,false));
	forn(i,m)
		forn(j,n)
		{
			bool trapito;
			cin >> trapito;
			b[i][j] = trapito;
		}
	bool rcz = false;
	bool ato = false;
	forn(i,m)
		forn(j,n)
		{
			if (b[i][j] == 1)
			{
				ato = true;
				if(tuttiTrue(row(b,n,i)) or tuttiTrue(column(b,m,j)))
				{
					if (tuttiTrue(row(b,n,i)) and tuttiTrue(column(b,m,j)))
						a[i][j] = 1;
				}
				else
				{
					cout << "NO" << endl;
					return 0;
				}
			}
			else
			{
				if(tuttiFalse(row(b,n,i)) or tuttiFalse(column(b,m,j)))
					rcz = true;
			}
		}
	if (rcz && ato)
	{
		cout << "NO" << endl;
		return 0;
	}
	else
	{
		cout << "YES" << endl;
		forn(i,m)
		{
			forn(j,n-1)
				cout << a[i][j] << " ";
			cout << a[i][n-1] << endl;
		}		
	}
	return 0;
}
