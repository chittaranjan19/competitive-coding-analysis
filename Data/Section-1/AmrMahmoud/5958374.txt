#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define PI acos(-1.0)
#define LL long long
#define EPS 1e-9

using namespace std;

vector<int> primes;

vector<int> get_primes(LL max){
    vector<int> primes;
    char *sieve;
    sieve = new char[max/8+1];
    memset(sieve, 0xFF, (max/8+1) * sizeof(char));
    for(LL x = 2; x <= max; x++)
        if(sieve[x/8] & (0x01 << (x % 8))){
            primes.push_back(x);
            for(LL j = 2*x; j <= max; j += x)
                sieve[j/8] &= ~(0x01 << (j % 8));
        }
    delete[] sieve;
    return primes;
}

bool isprime(int n)
{
    if(n==1)
        return false;
    int l=0;
    while(primes[l]*primes[l]<=n)
    {
        if(n%primes[l]==0)
            return false;
        l++;
    }
    return true;
}

int a,b,k;

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    primes=get_primes(1000007);
    //cout << primes.size();
    cin >> a >> b >> k;
    int j=0,counter=0,mini;
    while(primes[j]<a)
        j++;
    int temp=j;
    while(primes[j]<=b)
    {
        counter++;
        j++;
    }
    if(counter<k)
    {
        cout << "-1";
        return 0;
    }
    if(counter==k)
    {
        if(!isprime(b) && !isprime(a))
            b--;
        cout << b-a+1;
        return 0;
    }
    mini=max(primes[temp]-a+1,b-primes[temp+counter-1]+1);
    if(b-a+1>1e6)
        mini=max(primes[temp+k-1]-a+1,b-primes[counter-k]+1);
    for(int i=temp;i<temp+counter-k;i++)
    {
        mini=max(mini,primes[i+k]-primes[i]);
    }
    cout << mini;
    return 0;
}