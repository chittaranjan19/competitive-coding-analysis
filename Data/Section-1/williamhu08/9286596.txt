//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
#include <iomanip>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e6 + 5, MAXM = 255;

int N, M;
ll X[MAXM], Y[MAXM];
int ans[MAXN];

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios_base::sync_with_stdio(false);
	cin >> N >> M;
	for (int i = 0; i < M; i++) {
		cin >> X[i] >> Y[i];
	}
	fill(ans + 1, ans + N + 1, 1);	//it will always be >= 1
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < i; j++) {
			//if they lie on a telescope line
			ll bin = Y[j] * X[i] - Y[i] * X[j], dn = Y[j] - Y[i];
			if (dn) {
				if (bin % dn) {
					continue;
				} else {
					bin /= dn;
				}
			} else {
				ll v = Y[j];
				if (v <= 0 || v > N) {
					continue;
				} else {
					bin = v;
				}
			}
			if (bin <= 0 || bin > N) {
				continue;
			}
			//see how many things are on this line
			int tot = 2;
			for (int k = 0; k < j; k++) {
				//see if i, j, k is collinear
				tot += (Y[k] - Y[j]) * (X[i] - X[j]) == (Y[i] - Y[j]) * (X[k] - X[j]);
			}
			if (ans[bin] < tot) {
				ans[bin] = tot;
			}
		}
	}
	printf("%d\n", accumulate(ans + 1, ans + N + 1, 0));
}