#include <iostream> 
#include <cstdio>
#include <map>

using namespace std;

#define For(i , a , b) for (int i = a , _b = b ; i <= _b ; ++i)
#define Ford(i , a  ,b) for (int i = a , _b = b : i >= _b ; --i)
#define Rep(i , n) for (int i = 0 , _n = n ; i < _n ; ++i)
#define sz(A) ((int)A.size())
#define LL(x) (x << 1)
#define RR(x) ((x << 1) | 1)

typedef pair<int , int> pt;

const int maxn = 400000 + 123;
int n , k;
int l[maxn] , r[maxn];
int rev[maxn];
map<int , int> mp;

void ReadData() {
	cin >> n >> k;
	For(i , 1 , n) {
		cin >> l[i] >> r[i];
		++r[i];
		mp[l[i]] , mp[r[i]];
	}
}

const int md = 1e9 + 7;
int pwr(int a , int n) {
	int res = 1;
	while (n) {
		if (n & 1) res = 1LL * res * a % md;
		n >>= 1;
		a = 1LL * a * a % md;
	}
	return res;
}
int frac[maxn] , invFrac[maxn];

int sum[maxn];
void Add(int l , int r) {
	sum[l]++; sum[r + 1]--;
}

int res = 0;
void do_add(int &a , const int &b) {
	a += b; if (a >= md) a -= md;
}
int add(int a , int b) {
	return (a + b) % md;
}
int mul(int a , int b) {
	return 1LL * a  * b % md;
}
int C(int n , int k) {
	return 1LL * frac[n] * invFrac[k] % md * invFrac[n - k] % md;
}

void Init() {
	int cur = 0;
	for (map<int , int>::iterator it = mp.begin() ; it != mp.end() ; ++it) {
		rev[cur] = it->first;
		it->second = cur++;
	}
	For(i , 1 , n) {
		Add(mp[l[i]] + 1 , mp[r[i]]);
	}
	int z = 0;
	For(i , 0 , cur - 1) {
		z += sum[i];
		if (z >= k) {
			do_add(res , 1LL * C(z , k) * (rev[i] - rev[i - 1]) % md );
		}
	}
}

void Process() {
	Init();
	cout << res << endl;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	//freopen("input.inp" , "r" , stdin);
	frac[0] = 1;
	For(i , 1 , 200000) frac[i] = 1LL * frac[i - 1] * i % md;
	For(i , 0 , 200000) invFrac[i] = pwr(frac[i] , md - 2);

	ReadData();
	Process();

	return 0;

}			