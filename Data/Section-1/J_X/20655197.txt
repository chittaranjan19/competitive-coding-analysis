#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define ls rt << 1
#define rs rt << 1 | 1
#define lson ls, l, mid
#define rson rs, mid + 1, r

using namespace std;

const int maxn = 1000 + 5;
const int maxh = 10;

short rg[maxn][maxn], dw[maxn][maxn], mm[maxn], d[maxn][maxn][maxh][maxh];
int a[maxn][maxn];

int rmq(int x1, int y1, int x2, int y2)
{
    int k1 = mm[x2 - x1 + 1], k2 = mm[y2 - y1 + 1];
    return max(max(d[x1][y1][k1][k2], d[x1][y2 - (1 << k2) + 1][k1][k2]), max(d[x2 - (1 << k1) + 1][y1][k1][k2], d[x2 - (1 << k1) + 1][y2 - (1 << k2) + 1][k1][k2]));
}

int main()
{
    mm[0] = -1;
    for(int i = 1; i < maxn; ++i) mm[i] = (i & (i - 1)) ? mm[i - 1] : mm[i - 1] + 1;
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; ++i)
    {
        for(int j = 1; j <= m; ++j)
        {
            scanf("%d", &a[i][j]);
        }
    }
    for(int i = n; i > 0; --i)
    {
        for(int j = m; j > 0; --j)
        {
            if(a[i][j])
            {
                rg[i][j] = rg[i][j + 1] + 1;
                dw[i][j] = dw[i + 1][j] + 1;
                d[i][j][0][0] = d[i + 1][j + 1][0][0] + 1;
                d[i][j][0][0] = min(d[i][j][0][0], min(rg[i][j], dw[i][j]));
            }
        }
    }
    for(int i = 1; i <= n; ++i)
    {
        for(int k = 1; (1 << k) <= m; ++k)
        {
            for(int j = 1; j + (1 << k) - 1 <= m; ++j) d[i][j][0][k] = max(d[i][j][0][k - 1], d[i][j + (1 << (k - 1))][0][k - 1]);
        }
    }
    for(int l = 1; (1 << l) <= n; ++l)
    {
        for(int i = 1; i + (1 << l) - 1 <= n; ++i)
        {
            for(int k = 0; (1 << k) <= m; ++k)
            {
                for(int j = 1; j + (1 << k) - 1 <= m; ++j) d[i][j][l][k] = max(d[i][j][l - 1][k], d[i + (1 << (l - 1))][j][l - 1][k]);
            }
        }
    }
    int q;
    scanf("%d", &q);
    while(q--)
    {
        int x1, y1, x2, y2;
        scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
        int l = 0, r = min(x2 - x1, y2 - y1) + 1;
        while(l < r)
        {
            int mid = (l + r + 1) >> 1;
            if(rmq(x1, y1, x2 - mid + 1, y2 - mid + 1) >= mid) l = mid;
            else r = mid - 1;
        }
        printf("%d\n", l);
    }
    return 0;
}
