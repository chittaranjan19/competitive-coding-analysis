#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <set>
#include <iomanip>
#include <utility>    
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector< ii > vii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INF 0x3f3f3f3f
#define EPS 1e-11
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S)) 
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL 
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//__builtin_popcount(m)
//scanf(" %d ", &t);
//L[i]=L[i/2]+1;

#define PI 3.14159265359

int n, t;
double a[100][100];

#define right(x) 2*x+1
#define left(x) 2*x

bool ge(double x, double y){	
	return fabs(x-y) <= EPS || x > y;
}

void add(int r, int c, double qnt){
	if(qnt <= EPS || r == n) return;
	if(ge(a[r][c], 1.0)){
		add(r+1, c+1, qnt/2);
		add(r+1, c, qnt/2);
	}
	else{
		a[r][c] += qnt;
		if(ge(a[r][c], 1.0)){
			add(r+1, c+1, (a[r][c]-1.0)/2.0);
			add(r+1, c, (a[r][c]-1.0)/2.0);
		}
	}
}

int count(){
	int ans = 0;
	REP(i, 100)
	REP(j, 100) ans += ge(a[i][j], 1.0);
	return ans;
}

int main(){
	REP(i, 100)
	REP(j, 100) a[i][j] = 0.0;
	cin >> n >> t;
	REP(i, t){
		add(0, 0, 1.0);
	}
	cout << count() << endl;
	
	
}
