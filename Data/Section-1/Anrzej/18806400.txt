#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int _gcd(int a, int b, int & x, int & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	int _x1, _y1;
	int d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

int _cnt = 0;

vector<int> factor(int n){
	vector<int> f;
	for (int i = 2; i*i <= n; i++){
		if (n % i != 0) continue;
		while (n % i == 0){
			n /= i;
			f.push_back(i);
		}
	}
	if (n != 1)
		f.push_back(n);
	sort(f.begin(), f.end());
	return f;
}

vector<int> _factor(int n){
	vector<int> f;
	for (int i = 2; i*i <= n; i++){
		if (n % i != 0) continue;
		f.push_back(i);
		n /= i;
		while (n % i == 0){
			n /= i;
			f[f.size() - 1] *= i;
		}
	}
	if (n != 1)
		f.push_back(n);
	sort(f.begin(), f.end());
	return f;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 20;
ll mod = 1e9 + 7;
int n, k;
int c[1000];
bool can[1000];
bool _can[1000][1000];

int main()
{
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> c[i];
	sort(c, c + n);

	can[0] = 1;
	_can[0][0] = 1;
	for (int i = 0; i < n; i++){
		int _c = c[i];
		for (int j = k; j >= 0; j--){
			if (can[j])
			{
				can[j + _c] = 1;
				for (int _i = 0; _i <= k; _i++){
					if (_can[j][_i]){
						if (_i == 14 || _i + _c == 14){
							int adas = 123;
						}
						_can[j + _c][_i] = 1, _can[j + _c][_i + _c] = 1;
					}
				}
			}
		}
	}
	int cnt = 0;
	for (int i = 0; i <= k; i++){
		if (_can[k][i]) cnt++;
	}
	cout << cnt << endl;
	for (int i = 0; i <= k; i++){

		if(_can[k][i])
			cout << i << ' ';
	}
	return 0;
}