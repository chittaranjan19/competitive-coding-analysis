#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;
typedef long long ll;

const int maxp = 100000;
bool sieve[maxp];
vector<int> primes;

const int maxn = 100;
map<int, int> factors[maxn];
int arr[maxn];

const int N = 1000000;
const int M = 1000000;
const ll INF = 0x3f3f3f3f;
int vis[N], par[N], first[N], nxt[2*M], ep[2*M], m, e;
ll pot[N], dist[N], df[N], flo[2*M], cap[2*M], cost[2*M];
 
void init() { m = 0; memset(first,-1,sizeof first); memset(flo,0,sizeof flo); }
void add_edge(int a, int b, ll c=1, ll p=0) { //a,b - nodes, c, p - cap, price
  nxt[m] = first[ep[m]=a], first[ep[m]] = m, cap[m] = c, cost[m++] =  p;
  nxt[m] = first[ep[m]=b], first[ep[m]] = m, cap[m] = 0, cost[m++] = -p; }
 
// Max flow without costs, USAGE: 1) init(); 2) add edges, 3) ll flow=0; and 4)
// for (ll del=INF; del; del/=2) while (ll df=mf_update(s, t, del)) flow+=df;
// Then if you want to extract a min cut: for (e = 0; e < m; ++e)
// if (par[ep[e]] != -1 && par[ep[e^1]] == -1) cut.push_back(e);
// If you want to recover flow paths: get set of edges with flo[e] > 0.
ll mf_update(int s, int t, ll del=1) {
  memset(df, 0, sizeof df); memset(par, -1, sizeof par);
  queue<int> q; q.push(s); par[s] = -2; df[s] = INF;
  while (!q.empty()) { ll cf, v, u = q.front(); q.pop();
    for (e = first[u]; e != -1; e = nxt[e])
      if (par[v=ep[e^1]] == -1 && (cf = cap[e]-flo[e]) >= del)
        q.push(v), par[v] = e, df[v] = min(df[u], cf); }
  if (par[t] == -1) return 0;
  for (int i = t; i != s; i = ep[e])
    e = par[i], flo[e] += df[t], flo[e^1] -= df[t];
  return df[t]; }

int main() {
	// sieve
	memset(sieve, true, sizeof sieve);
	sieve[0] = false;
	sieve[1] = false;
	int p = 2;
	while (p*p < maxp) {
		for (int q = p*p; q < maxp; q += p) {
			sieve[q] = false;
		}
		p++;
		while (p < maxp && !sieve[p]) p++;
	}
	for (int i = 0; i < maxp; i++) {
		if (sieve[i]) primes.push_back(i);
	}

	// start processing
	set<int> usedprimes;
	int n, m; cin >> n >> m;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
		int num = arr[i];

		// prime factoriz arr[i]
		while (num > 1) {
			bool success = false;
			for (int j = 0; j < primes.size() && primes[j] <= num; j++) {
				int p = primes[j];
				if (num % p == 0) {
					num /= p;
					factors[i][p]++;
					usedprimes.insert(p);
					success = true;
				}
			}
			if (!success) {
				factors[i][num]++;
				usedprimes.insert(num);
				num = 1;
			}
		}
	}

	int left[m];
	int right[m];
	for (int i = 0; i < m; i++) {
		int a, b; cin >> a >> b; a--; b--;
		if (a % 2 != 0) {
			int tmp = a; a = b; b = tmp;
		}
		left[i] = a; right[i] = b;
	}

	// flow graph
	init();
	int ind = 0;
	int numprimes = usedprimes.size();
	int s = numprimes * n;
	int t = s+1;
	for (set<int>::iterator it = usedprimes.begin(); it != usedprimes.end(); ++it) {
		int p = *it;
		for (int i = 0; i < n; i++) {
			int ii = ind * n + i;
			int cnt = factors[i][p];
			if (cnt > 0) {
				if (i % 2 == 0) {
					add_edge(s, ii, cnt);
				} else {
					add_edge(ii, t, cnt);
				}
			}
		}
		for (int i = 0; i < m; i++) {
			int a = left[i]; int aa = ind * n + a;
			int b = right[i]; int bb = ind * n + b;
			int cnt = min(factors[a][p], factors[b][p]);
			if (cnt > 0) {
				add_edge(aa, bb, cnt);
			}
		}
		ind++;
	}

	// flow!
	ll flow = 0; for (ll del=INF; del; del/=2) while (ll df=mf_update(s, t, del)) flow+=df;
	cout << flow << endl;
}
