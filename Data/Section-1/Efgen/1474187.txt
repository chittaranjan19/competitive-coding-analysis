import java.io.*;
import java.util.*;
import java.math.*;

public class Main {

    public void solve() throws IOException {
        int n = nextInt();
        int m = nextInt();
        int[] t = new int[n];
        int[] x = new int[n];
        int[] res = new int[n];
        for (int i=0; i<n; i++) {
            t[i] = nextInt();
            x[i] = nextInt();
        }

        int time = 0;
        TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
        HashMap<Integer, Integer> ans = new HashMap<Integer, Integer>();
        for (int g=0; g<(n+m-1)/m; g++) {
            map.clear();
            ans.clear();
            int last = 0;
            for (int i=g*m; i<Math.min(g*m+m, n); i++) {
                if (map.containsKey(x[i])) map.put(x[i], map.get(x[i])+1); else map.put(x[i], 1);
                last = t[i];
            }
            if (last > time) time = last;

            int prev = 0;
            for (int pos:map.keySet()) {
                time += pos-prev;
                ans.put(pos, time);
                prev = pos;
                time += 1 + map.get(pos)/2;
            }
            time += prev;

            for (int i=g*m; i<Math.min(g*m+m, n); i++) {
                res[i] = ans.get(x[i]);
            }
        }

        for (int i=0; i<n; i++)
            out.print(res[i]+" ");
                
        
    }






    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;

    public void run() {
        try {
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            // br = new BufferedReader(new FileReader("input.txt"));
            // out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(123);
        }
    }

    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public static void main(String[] args) {
        new Main().run();
    }
}
