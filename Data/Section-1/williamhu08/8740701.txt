//why are you stalking me?
#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 510;

int N, M, D;
bool grid[MAXN][MAXN];
int dp[2][MAXN][MAXN];	//dp[row][num0][num1]

void add (int &x, int y) {
	x = (x + y) % D;
}

int mult (int x, int y) {
	return (1ll * x * y) % D;
}

int main() {
	//why are you stalking me?
#ifndef ONLINE_JUDGE
	freopen("codeforces489F.in", "r", stdin);
#endif
	scanf("%d %d %d", &N, &M, &D);
	for (int i = 1; i <= M; i++) {
		getchar();
		int num1 = 0;
		for (int j = 1; j <= N; j++) {
			bool b = grid[i][j] = (getchar() == '1');
			num1 += b;
		}
		if (num1 != 2) {
			puts("0");
			return 0;
		}
	}
	int c0 = 0, c1 = 0;
	for (int j = 1; j <= N; j++) {
		int num1 = 0;
		for (int i = 1; i <= M; i++) {
			if ((num1 += grid[i][j]) > 2) {
				puts("0");
				return 0;
			}
		}
		if (N == M && num1 != 2) {
			puts("0");
			return 0;
		}
		if (num1 == 1) {
			c1++;
		} else if (num1 == 0) {
			c0++;
		}
	}
	// puts("passed");
	if (N == M) {
		puts("1");
		return 0;
	}
	// printf("c0 = %d, c1 = %d\n", c0, c1);
	//dp? definitely assign two of them
	dp[M & 1][c0][c1] = 1;
	for (int i = M + 1; i <= N; i++) {
		bool cur = i & 1, prv = !cur;
		for (int j = 0; j <= N; j++) {
			for (int k = 0; j + k <= N; k++) {
				//where to put those two?
				if (j + k < 2) {
					continue;
				}
				int p = dp[prv][j][k];
				if (!p) {
					continue;
				}
				//00 or 01 or 11
				if (j >= 2) {
					//00 -> 11
					add(dp[cur][j - 2][k + 2], mult(p, j * (j - 1) / 2));
				}
				if (j && k) {
					//01 -> 12
					add(dp[cur][j - 1][k], mult(p, j * k));
				}
				if (k >= 2) {
					//11 -> 22
					add(dp[cur][j][k - 2], mult(p, k * (k - 1) / 2));
				}
			}
		}
	}
	printf("%d\n", dp[N & 1][0][0]);
}