#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

void bfs (vector<tint> &color, vector<vector<tint> > &vecinos, tint actual,bool &noSePuede)
{
	deque<tint> v = {actual};
	deque<tint> nuevos;
	tint c = 0;
	while (!v.empty())
	{
		tint x = v.front();
		v.pop_front();
		color[x]  = c;
		for (auto vecino : vecinos[x])
		{
			if (color[vecino] == -1)
				nuevos.push_back(vecino);
			else if (color[vecino] == c)
				noSePuede = true;
		}
		if (v.empty())
		{
			v = nuevos;
			nuevos.clear();
			c = 1-c;
		}
	}
}


int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,m;
	while (cin >> n >> m)
	{
		vector<vector<tint> > vecinos (n);
		forn(i,m)
		{
			tint u,v;
			cin >> u >> v;
			vecinos[u-1].push_back(v-1);
			vecinos[v-1].push_back(u-1);
		}
		vector<tint> color (n,-1);
		bool noSePuede = false;
		forn(i,n)
			if (color[i] == -1)
				bfs(color,vecinos,i,noSePuede);
		if (noSePuede)
			cout << -1 << "\n";
		else
		{
			vector<tint> a,b;
			forn(i,n)
			{
				if (color[i] == 0)
					a.push_back(i+1);
				else
					b.push_back(i+1);
			}
			cout << a.size() << "\n";
			for (auto x : a)
				cout << x << " ";
			cout << "\n";
			cout << b.size() << "\n";
			for (auto x : b)
				cout << x << " ";
			cout << "\n";
		}
	}
	return 0;
}



