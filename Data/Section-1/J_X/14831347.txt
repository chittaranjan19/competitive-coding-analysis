#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

typedef long long ll;

const int MAXN = 300 + 5;
const int MAXM = MAXN * 50;
const int INF = 1 << 30;

int a[MAXN], c[MAXN], dp[MAXN][MAXM];
vector<int> v;
map<int, bool> mp;

int gcd(int a, int b)
{
    return b ? gcd(b, a % b) : a;
}

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        v.clear();
        mp.clear();
        v.push_back(0);
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", a + i);
            for(ll j = 1; j * j <= a[i]; ++j)
            {
                if(a[i] % j == 0)
                {
                    int k = a[i] / j;
                    if(!mp[j])
                    {
                        mp[j] = true;
                        v.push_back(j);
                    }
                    if(k != j && !mp[k])
                    {
                        mp[k] = true;
                        v.push_back(k);
                    }
                }
            }
        }
        for(int i = 1; i <= n; ++i)
        {
            scanf("%d", c + i);
        }
        sort(v.begin(), v.end());
        fill(dp[0], dp[0] + v.size(), INF);
        dp[0][0] = 0;
        for(int i = 1; i <= n; ++i)
        {
//            fill(dp[i], dp[i] + v.size(), INF);
            memcpy(dp[i], dp[i - 1], sizeof(dp[i - 1]));
            for(int j = 0; j < v.size(); ++j)
            {
                if(dp[i - 1][j] < INF)
                {
                    int g = gcd(v[j], a[i]);
                    int k = lower_bound(v.begin(), v.end(), g) - v.begin();
                    dp[i][k] = min(dp[i][k], dp[i - 1][j] + c[i]);
                }
            }
        }
        printf("%d\n", dp[n][1] < INF ? dp[n][1] : -1);
    }
    return 0;
}
