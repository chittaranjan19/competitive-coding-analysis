#include <bits/stdc++.h>

#define SZ(x) (( (int)x.size() ) )

using namespace std;
typedef long long ll;
const int N = 500 * 1000 + 10;

int n ,q , a[N] , c , v , b[N];
int seg[4 * N];
int segp[4 * N];
int U,D;

vector < vector <int> > g;
bool mark[N];
int cnt;

void dfs(int x){
	mark[x] = 1;
	a[x] = cnt;
	cnt ++;
	for(int i = 0; i < SZ(g[x]); ++i){
		if( !mark[ g[x][i] ] )
			dfs( g[x][i] );
	}
	b[x] = cnt;
}

void update(int x, int l, int r, int lp, int rp, int t){
	if(l == lp && r == rp){
		seg[x] = t;
		return;
	}
	int mid = (l + r) / 2;
	if(lp >= mid){
		update(2 * x + 1, mid , r , lp , rp , t);
	}
	else if(rp <= mid){
		update(2 * x, l , mid , lp , rp , t);
	}
	else{
		update(2 * x, l , mid , lp , mid , t);
		update(2 * x + 1, mid , r , mid , rp , t);
	}
} 

void update2(int x, int l, int r, int y, int t){
	segp[x] = t;
	if(l == y && r == y + 1){
		return;
	}
	int mid = (l + r) / 2;
	if(y >= mid){
		update2(2 * x + 1 , mid , r , y, t);
	}
	else if(y+1 <= mid){
		update2(2 * x , l , mid , y, t);
	}
	else{
		update2(2 * x + 1 , mid , r , y, t);
		update2(2 * x , l , mid , y, t);
	}
}

void ask(int x, int l, int r, int y){
	D = max(D , seg[x]);
	if(l == y && r == y + 1){
		return;
	}
	int mid = (l + r) / 2;
	if(y >= mid){
		ask(2 * x + 1, mid , r , y);
	}
	else if(y + 1 <= mid){
		ask(2 * x, l , mid , y);
	}
}

void ask2(int x, int l, int r, int lp , int rp){
	if(l == lp && r == rp){
		U = max(U , segp[x]);
		return;
	}
	int mid = (l + r) / 2;
	if(lp >= mid){
		ask2(2 * x + 1, mid , r , lp , rp);
	}
	else if(rp <= mid){
		ask2(2 * x, l , mid , lp , rp);
	}
	else{
		ask2(2 * x, l , mid , lp , mid);
		ask2(2 * x + 1, mid , r , mid , rp);
	}
}

int main(){
	cin >> n;
	g.resize(n);
	for(int i = 0; i < n - 1; ++i){
		int t1,t2;
		cin >> t1 >> t2;
		t1 --; t2 --;
		g[t1].push_back(t2);
		g[t2].push_back(t1);
	}
	dfs(0);
	cin >> q;
	for(int i = 0; i < q; ++i){
		cin >> c >> v;
		v --;
		if(c == 1){
			update(1, 0, n, a[v] , b[v] , i + 1);
		}
		if(c == 2){
			update2(1 ,0 ,n , a[v] , i + 1);
		}
		if(c == 3){
			U = D = -1;
			ask(1 , 0 , n , a[v]);
			ask2(1 , 0 , n , a[v] , b[v]);
			if(D > U){
				cout << "1\n";
			}
			else{
				cout << "0\n";
			}
		}
	}
	return 0;
}
