#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 500000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int dp[MAX_N][26], pref[26], suff[26], summ[26];

int main()
{
	//ifstream ifs("input.in");
	//ofstream ofs("output.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, k;
	cin >> n >> k;
	string s;
	cin >> s;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < k; j++)
			dp[i][j] = inf;
	for (int j = 0; j < k; j++)
		dp[0][j] = 1;
	dp[0][s[0] - 'A'] = 0;
	for (int i = 1; i < n; i++)
	{
		for (int j = 0; j < k; j++)
			pref[j] = inf;
		for (int j = 1; j < k; j++)
			pref[j] = min(pref[j - 1], dp[i - 1][j - 1]);
		for (int j = k - 1; j >= 0; j--)
			suff[j] = inf;
		for (int j = k - 2; j >= 0; j--)
			suff[j] = min(suff[j + 1], dp[i - 1][j + 1]);
		for (int j = 0; j < k; j++)
			summ[j] = min(pref[j], suff[j]);
		for (int j = 0; j < k; j++)
			if (j == s[i] - 'A')
				dp[i][j] = summ[j];
			else
				dp[i][j] = summ[j] + 1;
	}
	int ans = inf, x;
	for (int j = 0; j < k; j++)
	{
		if (dp[n - 1][j] < ans)
		{
			ans = dp[n - 1][j];
			x = j;
		}
	}
	cout << ans << endl;
	string t = "";
	for (int i = n - 1; i >= 0; i--)
	{
		t = (char)(x + 'A') + t;
		if (x != s[i] - 'A')
			ans--;
		if (i > 0)
			for (int j = 0; j < k; j++)
				if (j != x && dp[i - 1][j] == ans)
				{
					x = j;
					break;
				}
	}
	cout << t;
	return 0;
}