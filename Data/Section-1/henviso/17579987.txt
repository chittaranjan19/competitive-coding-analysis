#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <set>
#include <iomanip>
#include <utility>    
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector< ii > vii;
///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define CMP(a, b) memcmp(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = n-1; i>=a; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define INF 0x3f3f3f3f
#define EPS 1e-9
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S)) 
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
///////////////////////////////64 BITS//////////////////////////////
#define LCHECK(S, j) (S & (1ULL << j))
#define LSET(S, j) S |= (1ULL << j)
#define LSETALL(S, j) S = (1ULL << j)-1ULL 
#define LUNSET(S, j) S &= ~(1ULL << j)
#define LTOOGLE(S, j) S ^= (1ULL << j)
//__builtin_popcount(m)
//scanf(" %d ", &t);
//L[i]=L[i/2]+1;

#define PI 3.14159265359

int pd[11111][5];
int n;

string s;
set<string> ans;

int pos(int a, int b){
	if(a + b == n) return 1;
	if(a + b > n) return 0;
	if(pd[a][b] == -1){
		string x = s.substr(a, b);
		pd[a][b] = 0;
		if(pos(a+b, 2) && x != s.substr(a+b, 2)){
			
			pd[a][b] = 1;
		}
		else if(pos(a+b, 3) && x != s.substr(a+b, 3)) pd[a][b] = 1;
	}
	return pd[a][b];
}
 
int main(){
	REP(i, 10001) REPP(j, 2, 4) pd[i][j] = -1;
	cin >> s;
	n = s.length();
	for(int i = s.length()-1; i>4; i--){
		if(pos(i, 2)) ans.insert(s.substr(i, 2)); 
		if(pos(i, 3)) ans.insert(s.substr(i, 3));
	}
	cout << ans.size() << endl;
	for(set<string>::iterator it = ans.begin(); it != ans.end(); it++) cout << *it << endl;
}


