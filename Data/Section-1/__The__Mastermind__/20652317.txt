#include <bits/stdc++.h>
#define forinc(i,a,b) for(int i = a, _key = b; i <= _key; ++i)
#define fordec(i,a,b) for(int i = a, _key = b; i >= _key; --i)
#define fori(i,n) for(int i = 0, _key = n; i < _key; ++i)
#define ford(i,n) for(int i = n - 1; i >= 0; --i)
#define forvct(i,v) for(int i = 0, _key = v.size(); i < _key; ++i)
#define task "problem"
#define st first
#define nd second
#define m_p make_pair
#define p_b push_back
#define p_f push_front
#define pp_b pop_back
#define pp_f pop_front
#define sn string::npos
#define heap priority_queue
#define ll long long
#define db double
#define str string
#define oo 1000000007

using namespace std;

int n;

int x_search(const int &down, const int &up, const int &c)
{
    int l = down, r = up, key = 0;
    while (l <= r)
    {
        int mid = (l + r) / 2, cnt;
        cout << "? " << mid << " " << 1 << " " << n << " " << n << "\n";
        cin >> cnt;
        if (cnt >= c)
        {
            key = mid;
            l = mid + 1;
        }
        else r = mid - 1;
    }
    return key;
}

int u_search(const int &left, const int &right, const int &c)
{
    int l = left, r = right, key = right + 1;
    while (l <= r)
    {
        int mid = (l + r) / 2, cnt;
        cout << "? " << 1 << " " << 1 << " " << mid << " " << n << "\n";
        cin >> cnt;
        if (cnt >= c)
        {
            key = mid;
            r = mid - 1;
        }
        else l = mid + 1;
    }
    return key;
}

int y_search(const int &left, const int &right, const int &c)
{
    int l = left, r = right, key = 0;
    while (l <= r)
    {
        int mid = (l + r) / 2, cnt;
        cout << "? " << 1 << " " << mid << " " << n << " " << n << "\n";
        cin >> cnt;
        if (cnt >= c)
        {
            key = mid;
            l = mid + 1;
        }
        else r = mid - 1;
    }
    return key;
}

int v_search(const int &left, const int &right, const int &c)
{
    int l = left, r = right, key = right + 1;
    while (l <= r)
    {
        int mid = (l + r) / 2, cnt;
        cout << "? " << 1 << " " << 1 << " " << n << " " << mid << "\n";
        cin >> cnt;
        if (cnt >= c)
        {
            key = mid;
            r = mid - 1;
        }
        else l = mid + 1;
    }
    return key;
}

void check(int x_1, int y_1, int u_1, int v_1, int x_2, int y_2, int u_2, int v_2)
{
    int c;
    cout << "? " << x_1 << " " << y_1 << " " << u_1 << " " << v_1 << "\n";
    cin >> c;
    if (c != 1) return;
    cout << "? " << x_2 << " " << y_2 << " " << u_2 << " " << v_2 << "\n";
    cin >> c;
    if (c != 1) return;
    cout << "! " << x_1 << " " << y_1 << " " << u_1 << " " << v_1 << " " << x_2 << " " << y_2 << " " << u_2 << " " << v_2 << "\n";
    exit(0);
}

int main()
{
    cin >> n;
    int x_1 = x_search(1,n,2),
        x_2 = x_search(x_1,n,1),
        u_2 = u_search(1,n,2),
        u_1 = u_search(1,u_2,1),
        y_1 = y_search(1,n,2),
        y_2 = y_search(y_1,n,1),
        v_2 = v_search(1,n,2),
        v_1 = v_search(1,v_2,1);
    int c;
    //int x_1 = 4, y_1 = 7, u_1 = 4, v_1 = 37, x_2 = 8, y_2 = 64, u_2 = 90, v_2 = 100;
    //if (n == 100) check(x_1,y_2,u_1,v_2,x_2,y_1,u_2,v_1);
    check(x_1,y_1,u_1,v_1,x_2,y_2,u_2,v_2);
    check(x_1,y_1,u_2,v_1,x_2,y_2,u_1,v_2);
    check(x_1,y_1,u_1,v_2,x_2,y_2,u_2,v_1);
    check(x_1,y_1,u_2,v_2,x_2,y_2,u_1,v_1);
    check(x_1,y_2,u_1,v_1,x_2,y_1,u_2,v_2);
    check(x_1,y_2,u_2,v_1,x_2,y_1,u_1,v_2);
    check(x_1,y_2,u_1,v_2,x_2,y_1,u_2,v_1);
    check(x_1,y_2,u_2,v_2,x_2,y_1,u_1,v_1);
}
