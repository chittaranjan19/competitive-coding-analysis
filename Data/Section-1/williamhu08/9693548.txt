//why are you stalking me?
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define dbg(x) cerr << #x << " = " << x << endl

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 55, inc[4][2] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};

int N, M;
char grid[MAXN][MAXN];
vector<pii> adj[MAXN][MAXN];
int depth[MAXN][MAXN];

bool bounded (int x, int y) {
	return 0 <= x && x < N && 0 <= y && y < M;
}

void dfs (int x, int y, int d) {
	depth[x][y] = d;
	for (pii p : adj[x][y]) {
		int nx = p.first, ny = p.second;
		if (depth[nx][ny]) {
			if (depth[nx][ny] <= d - 3) {
				cout << "Yes";
				exit(0);
			}
		} else {
			dfs(nx, ny, d + 1);
		}
	}
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		cin >> grid[i];
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			for (int k = 0; k < 4; k++) {
				int ni = i + inc[k][0], nj = j + inc[k][1];
				if (bounded(ni, nj)) {
					if (grid[ni][nj] == grid[i][j]) {
						adj[i][j].push_back(pii(ni, nj));
					}
				}
			}
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (!depth[i][j]) {
				dfs(i, j, 1);
			}
		}
	}
	cout << "No";
}