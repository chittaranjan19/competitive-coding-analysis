#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second
#define PB push_back
#define MP make_pair

typedef signed long long    ll;
typedef unsigned long long  ull;
typedef double              lf;
typedef long double         llf;

#if (defined(WIN32) || !defined(__GNUC__))
	#define __F_LL "%I64"
#else
	#define __F_LL "%ll"
#endif

struct FastReader {
	FastReader &operator,(int &x) { scanf("%d", &x); return *this; }
	FastReader &operator,(ll &x) { scanf(__F_LL"d", &x); return *this; }
	FastReader &operator,(double &x) { scanf("%lf", &x); return *this; }
	FastReader &operator,(char &x) { do x = getchar(); while (x == ' ' || x == '\n'); return *this; }
	FastReader &operator,(char *x) { scanf("%s", x); return *this; }
} in;

struct FastWriter {
	FastWriter &operator,(const int x) { printf("%d", x); return *this; }
	FastWriter &operator,(const ll x) { printf(__F_LL"d", x); return *this; }
	FastWriter &operator,(const double x) { printf("%lf", x); return *this; }
	FastWriter &operator,(const char x) { putchar(x); return *this; }
	FastWriter &operator,(const char *x) { printf("%s", x); return *this; }
	FastWriter &operator,(const string x) { return operator,(x.c_str()); }
} out;

#undef __F_LL

template<class T>
T sqr(T x) { return x * x; }

/* Main code */
static const int L = 555;

int n, k, sl, pl, pc;
char s[L], p[L];
vector< pair<int, int> > l[L];
int f[L], g[L];
int ans;

int main() {
	#ifdef __DEBUG
	//	freopen("input.txt", "rt", stdin);
	#endif

	// Start here...
	// ...
	in, sl, s, n;

	for (int i = 0; i < n; i++) {
		in, p, pc; pl = strlen(p);

		for (int j = 0; j <= sl - pl; j++) {
            bool b = true;

            for (int k = 0; k < pl; k++)
				if (p[k] != s[j + k])
					{ b = false; break; }

			if (b)
				l[j + pl - 1].PB(MP(pl, pc));
		}
	}

	in, k; ans = 0;

    for (int i = 0; i < k; i++) {
		for (int j = 0; j < sl; j++) {
			f[j] = j > 0 ? f[j - 1] : 0, g[j] = -1;

			for (int k = 0; k < l[j].size(); k++) {
				if (l[j][k].F <= j) {
					if (f[j - l[j][k].F] + l[j][k].S > f[j])
						f[j] = f[j - l[j][k].F] + l[j][k].S, g[j] = k;
					else if (f[j - l[j][k].F] + l[j][k].S == f[j] && g[j] != -1 && l[j][k].F > l[j][g[j]].F)
						f[j] = f[j - l[j][k].F] + l[j][k].S, g[j] = k;
				} else if (l[j][k].F == j + 1) {
					if (l[j][k].S > f[j])
						f[j] = l[j][k].S, g[j] = k;
					else if (l[j][k].S == f[j] && g[j] != -1 && l[j][k].F > l[j][g[j]].F)
						f[j] = l[j][k].S, g[j] = k;
				}
			}
		}

		ans += f[sl - 1];

		for (int j = sl - 1; j >= 0; j--) {
			if (g[j] != -1) {
				int dj = l[j][g[j]].F;
				l[j].erase(l[j].begin() + g[j]);
				j -= dj - 1;
			}
		}

        /*for (int j = 0; j < sl; j++)
			out, f[j], ' ';

		out, '\n';*/
    }

    out, ans;

	return 0;
}
