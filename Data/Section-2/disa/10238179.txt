
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
#include <iomanip>
#include <map>
#include <cmath>
#include <queue>
using namespace std;

typedef long long ll;

#if _DEBUG
#include <fstream>
ifstream cin("input.txt");
ofstream cout("output.txt");
#else
#include <iostream>
#endif


void get(string & s) {
	for (int i = 0; i < s.size(); i++) {
		if (s[i] >= 'A' && s[i] <= 'Z') {
			s[i] -= 'A' - 'a';
		}
	}
}

map <string, int> m;

vector < vector <int > > vv;


int ans = 0;

bool used[2000];

void dfs(int v, int cnt) {
	ans = max(ans, cnt);
	used[v] = true;
	for (int i = 0; i < vv[v].size(); i++) {
		if (!used[vv[v][i]]) {
			dfs(vv[v][i], cnt + 1);
		}
	}
}

int main() {
	int n;
	cin >> n;
	int cnt = 0;
	vv.resize(2000);
	for (int i = 0; i < n; i++) {
		string from, to, c;
		cin >> to >> c >> from;
		get(from);
		get(to);
		if (m.find(to) == m.end()) {
			m[to] = ++cnt;
		}
		if (m.find(from) == m.end()) {
			m[from] = ++cnt;
		}
		int f = m[from];
		int t = m[to];
		vv[f].push_back(t);
	}
	int from = m["polycarp"];
	dfs(from, 1);
	cout << ans << '\n';
	return 0;
}