#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 200005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)
#define lc (id << 1)
#define rc (lc + 1)

using namespace std;
int n, k, x;
long long a[mn];

struct interval
{
    pair<long long, int> tree[mn << 2];
    bool pos[mn << 2], dau[mn];

    void build(int l, int r, int id)
    {
        if (l == r)
        {
            tree[id] = mp(abs(a[l]), l);
            dau[l] = pos[id] = (a[l] >= 0);
            return;
        }
        build(l, mid, lc);
        build(mid + 1, r, rc);
        tree[id] = min(tree[lc], tree[rc]);
        pos[id] = (pos[lc] == pos[rc]);
    }

    void update(int l, int r, int id, int x, int val)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            a[l] += val;
            tree[id].F = abs(a[l]);
            dau[l] = pos[id] = (a[l] >= 0);
            return;
        }
        update(l, mid, lc, x, val);
        update(mid + 1, r, rc, x, val);
        tree[id] = min(tree[lc], tree[rc]);
        pos[id] = (pos[lc] == pos[rc]);
    }
} t;

void setup()
{
    cin >> n >> k >> x;
    FOR(i, 1, n)
        cin >> a[i];
    t.build(1, n, 1);
}

void xuly()
{
    FOR(i, 1, k)
    {
        int u = t.tree[1].S;
        bool rest = (t.pos[1] == t.dau[u]);
        if (rest)
            t.update(1, n, 1, u, -x);
        else
            t.update(1, n, 1, u, x);
    }
    FOR(i, 1, n)
        cout << a[i] << ' ';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
