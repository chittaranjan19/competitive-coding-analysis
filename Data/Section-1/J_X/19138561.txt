#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int maxn = 1000000 + 5;

vector<int> vec[maxn];
int par[maxn], a[maxn], ans[maxn];

bool cmp(int x, int y)
{
    return x > y;
}

int findp(int x)
{
    return par[x] == x ? x : par[x] = findp(par[x]);
}

void unite(int u, int v)
{
    u = findp(u), v = findp(v);
    par[v] = u;
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; ++i)
    {
        par[i] = i;
        scanf("%d", ans + i);
    }
    for(int i = 1; i <= m; ++i)
    {
        int u, v;
        scanf("%d%d", &u, &v);
        unite(u, v);
    }
    //
    for(int i = 1; i <= n; ++i) vec[findp(i)].push_back(i);
    for(int i = 1; i <= n; ++i)
    {
        int len = vec[i].size();
        for(int j = 0; j < len; ++j) a[j] = ans[vec[i][j]];
        sort(a, a + len, cmp);
        for(int j = 0; j < len; ++j) ans[vec[i][j]] = a[j];
    }
    for(int i = 1; i <= n; ++i) printf("%d%c", ans[i], " \n"[i == n]);
    return 0;
}