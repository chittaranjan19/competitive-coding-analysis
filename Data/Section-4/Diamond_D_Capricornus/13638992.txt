Const Fi='';//'C.INP';
      Fo='';//'C.OUT';
      maxN=1000001;
Var   n,m,nHeap:Longint;
      A,B,Heap:Array[0..maxN]Of Longint;
Procedure Enter;
Var i:Longint;
  Begin
    Readln(n);
    For i:=1 to n do
      Read(A[i]);
  End;
Procedure Swap(i,J:Longint);
Var Tmp:Longint;
  Begin
    Tmp:=Heap[i];
    Heap[i]:=Heap[J];
    Heap[J]:=Tmp;
  End;
Procedure Up(i:Longint);
  Begin
    If (i=1)or(Heap[i]>Heap[i Div 2]) then Exit;
    Swap(i,i Div 2);
    Up(i Div 2);
  End;
Procedure Down(i:Longint);
Var J:Longint;
  Begin
    J:=i*2;
    If J>nHeap then Exit;
    If (J<nHeap)and(Heap[J]>Heap[J+1]) then Inc(J);
    If (Heap[i]<Heap[J]) then Exit;
    Swap(i,J);
    Down(J);
  End;
Procedure Push(v:Longint);
  Begin
    Inc(nHeap);
    Heap[nHeap]:=v;
    Up(nHeap);
  End;
Function  Pop:Longint;
  Begin
    Pop:=Heap[1];
    Heap[1]:=Heap[nHeap];
    Dec(nHeap);
    Down(1);
  End;
Procedure Main;
Var i,u,Count:Longint;
  Begin
    nHeap:=0;
    For i:=1 to n do
      Push(A[i]);
    Count:=1;
    While nHeap>1 do
      Begin
        u:=Pop;
        If u=Heap[1] then
          Begin
            u:=Pop;
            Push(u+1);
          End
        Else
          Inc(Count);
      End;
    Writeln(Count);
  End;
Begin
  Assign(Input,Fi);Reset(Input);
  Assign(Output,Fo);Rewrite(Output);
  Enter;
  Main;
  Close(Input);Close(Output);
End.