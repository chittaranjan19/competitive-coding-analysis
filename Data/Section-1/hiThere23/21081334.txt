#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)
#define lc (id << 1)
#define rc (lc + 1)

using namespace std;
int n, a[mn];

struct node
{
    long long val, lef, rig;
    int lsz, rsz, sz;

    node(long long x = 0)
    {
        val = lef = rig = x;
        lsz = rsz = sz = 1;
    }
};

node com(node a, node b)
{
    node re;
    re.sz = a.sz + b.sz;
    if (a.lsz)
    {
        re.lef = a.lef;
        if (a.lsz == a.sz && b.lsz)
            re.lef += b.lef, re.lsz = a.sz + b.lsz;
        else
            re.lsz = a.lsz;
    }
    else
        re.lsz = 0;
    if (b.rsz)
    {
        re.rig = b.rig;
        if (b.rsz == b.sz && a.rsz)
            re.rig += a.rig, re.rsz = a.rsz + b.sz;
        else
            re.lsz = b.rsz;
    }
    else
        re.rsz = 0;
    long long mi = -1;
    if (a.rsz && b.lsz)
        mi = a.rig + b.lef;
    re.val = max(max(a.val, b.val), mi);
    return re;
}

struct interval
{
    node tree[mn << 2];

    void build(int l, int r, int id)
    {
        if (l == r)
        {
            tree[id] = node(a[l]);
            return;
        }
        build(l, mid, lc);
        build(mid + 1, r, rc);
        tree[id] = com(tree[lc], tree[rc]);
    }

    void update(int l, int r, int id, int x)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            tree[id].val = -1;
            tree[id].lsz = tree[id].rsz = 0;
            return;
        }
        update(l, mid, lc, x);
        update(mid + 1, r, rc, x);
        tree[id] = com(tree[lc], tree[rc]);
    }
} t;

void setup()
{
    cin >> n;
    FOR(i, 1, n)
        cin >> a[i];
    t.build(1, n, 1);
    int x;
    FOR(i, 2, n)
    {
        cin >> x;
        t.update(1, n, 1, x);
        cout << t.tree[1].val << '\n';
    }
    cout << 0;
}

void xuly()
{

}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
