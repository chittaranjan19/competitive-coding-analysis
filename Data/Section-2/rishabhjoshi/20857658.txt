#include <bits/stdc++.h>
#define LL long long
#define gc getchar
using namespace std;
template <typename T> void scanint(T &x) {
	T c = gc(); while(((c < 48) || (c > 57)) && (c!='-')) c = gc();
	bool neg = false; if(c == '-') neg = true; x = 0; for(;c < 48 || c > 57;c=gc());
	for(;c > 47 && c < 58;c=gc())	x = (x*10) + (c - 48); if(neg)	x = -x;
}

const int MAXN = 1e5 + 3;
const LL mod = 1e9 + 7;

LL arr[MAXN], n;

struct Num {
    LL x, y;
    Num operator+(Num other) {
        return Num(x + other.x, y + other.y);
    }
    Num operator-(Num other) {
        return Num(x - other.x, y - other.y);
    }
    Num operator-() {
        return Num(mod - x, mod - y);
    }
    Num operator*(Num other) {
        return Num(x*other.x + 5*y*other.y, x*other.y + y*other.x);
    }
    Num pow(LL e) {
        Num res(1, 0), temp = *this;
        while(e) {
            if(e%2) { res = res * temp; }
            temp = temp * temp;
            e /= 2;
        }
        return res;
    }
    bool operator!=(Num other) {
        return x == other.x and y == other.y;
    }
    LL get_answer() {
        return 2*y % mod;
    }
    Num(LL a = 0, LL b = 0) {
        x = a % mod, y = b % mod;
        if(x < 0) x += mod;
        if(y < 0) y += mod;
    }
};

LL half = (mod + 1) / 2;
Num phi = Num(half, half);
Num n_phi = Num(half, mod - half);
Num zero = Num(0, 0);

struct node {
    Num val, lazy;
    void merge(node &l, node &r) {
        val = l.val + r.val;
    }
    void split(node &l, node &r) {
        if(lazy.x + lazy.y > 0) {
            l.val = l.val * lazy;
            r.val = r.val * lazy;
            l.lazy = l.lazy + lazy, r.lazy = r.lazy + lazy;
            lazy = zero;
        }
    }
} tree[MAXN * 4];

void bt(int root = 1, int l = 1, int r = n) {
    if(l == r) {
        tree[root].val = phi.pow(arr[l]);
        return ;
    }
    int mid = (l + r) / 2;
    bt(root*2, l, mid);
    bt(root*2+1, mid + 1, r);
    tree[root].merge(tree[root*2], tree[root*2+1]);
}
void update(int ql, int qr, Num &x, int root = 1, int l = 1, int r = n) {
    if(ql <= l and qr >= r) {
        tree[root].val = tree[root].val * x;
        tree[root].lazy = tree[root].lazy + x;
        return ;
    }
    tree[root].split(tree[root*2], tree[root*2+1]);
    int mid = (l + r) / 2;
    if(ql <= mid)
        update(ql, qr, x, root*2, l, mid);
    if(qr > mid)
        update(ql, qr, x, root*2+1, mid + 1, r);
    tree[root].merge(tree[root*2], tree[root*2+1]);
}
LL query(int ql, int qr, int root = 1, int l = 1, int r = n) {
    if(ql <= l and qr >= r) {
        return tree[root].val.get_answer();
    }
    tree[root].split(tree[root*2], tree[root*2+1]);
    int mid = (l + r) / 2;
    LL res = 0;
    if(ql <= mid)
        res += query(ql, qr, root*2, l, mid);
    if(qr > mid)
        res = (res + query(ql, qr, root*2+1, mid + 1, r)) % mod;
    tree[root].merge(tree[root*2], tree[root*2+1]);
    return res;
}

int main() {
    int q, opt;
    LL a, b, x;
    scanint(n), scanint(q);
    for(int i = 1; i <= n; i++) {
        scanint(arr[i]);
    }
    bt();
    while(q--) {
        scanint(opt);
        scanint(a), scanint(b);
        if(opt == 1) {
            scanint(x);
            Num temp = phi.pow(x);
            update(a, b, temp);
        } else {
            LL res = query(a, b);
            if(res < 0) res += mod;
            cout << res << '\n';
        }
    }
    return 0;
}
