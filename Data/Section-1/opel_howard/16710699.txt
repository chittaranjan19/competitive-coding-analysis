#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

int main() {
    // freopen("632D.in", "r", stdin);
    
    int n, m;
    scanf("%d %d", &n, &m);
    vi divs[m+1];
    vi only1;

    vi vals(n);
    loop(idx, n) {
    	scanf("%d", &vals[idx]);
    	ll val = vals[idx];
    	if (val == 1) {
    		only1.pub(idx);
    		continue;
    	}
    	for (int it = 1; val*it <= m; ++it) {
    		divs[val*it].pub(idx);
    	}
    }

    int m_ans = 1;
    vi ans_v;
    loop1(m_val, m) {
    	bool valid = true;
    	vi &div = divs[m_val];
    	if (div.size() > 1) {
    		ll lcm = vals[div[0]];
    		for (int it = 1; it < div.size(); ++it) {
    			lcm = (lcm*vals[div[it]])/__gcd((int)lcm, vals[div[it]]);
    		}
    		if (lcm != m_val) {
    			valid = false;
    		}
    	}
    	if (valid) {
    		if (ans_v.size() < div.size()) {
    			m_ans = m_val;
    			ans_v = div;
    		}
    	}
    }
    ans_v.insert(ans_v.end(), all(only1));
    sort(all(ans_v));
    printf("%d %d\n", m_ans, (int)ans_v.size());
    loop(idx, ans_v.size()) {
    	if (idx)
    		printf(" ");
    	printf("%d", ans_v[idx]+1);
    }
    printf("\n");

    return 0;
}