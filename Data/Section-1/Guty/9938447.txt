#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl 

typedef long long tint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		tint p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int sum(vector <int> v)
{
	int counter = 0;
	forn(i,v.size())
		counter += v[i];
	return counter;
}

pair<int,int> firstLastOne (vector <int> v)
{
	bool foundFirst = false;
	int minIndex = -1;
	int maxIndex = -1;
	forn(i,v.size())
	{
		if(v[i] != 0)
		{
			if(foundFirst)
				maxIndex = i;
			else
			{
				minIndex = i;
				maxIndex = i;
				foundFirst = true;
			}
		}
	}
	pair<int,int> par = {minIndex,maxIndex};
	return par;
}



int main()
{
	int n,p;
	cin >> n >> p;
	p--;
	string str;
	cin >> str;
	vector<int> v (n);
	forn(i,n)
		v[i] = min(abs(str[i] - str[n-i-1]),26 - abs(str[i] - str[n-i-1]));
	int counter = sum(v)/2;
	vector<int> subVector;
	if (p >= n/2)
	{
		vector<int> newVector (v.begin() + n/2,v.end());
		subVector = newVector;
		p -= n/2;
	}
	else if (n % 2 == 1)
	{
		vector<int> newVector (v.begin(),v.begin() + n/2);
		subVector = newVector;
	}
	else
	{
		vector<int> newVector (v.begin(),v.begin() + n/2 );
		subVector = newVector;
	}
	pair<int,int> indy = firstLastOne(subVector);
	int minIndex = indy.first;
	int maxIndex = indy.second;
	if (minIndex != -1)
		counter += abs(minIndex - maxIndex) + min(abs(p-minIndex),abs(p-maxIndex));
	cout << counter << endl;
	return 0;
}
