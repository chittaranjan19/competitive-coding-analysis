#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

char s[22][22];
int cost[22][22];
int all[22][27];
int mm[22][27];
int DP[(1 << 20) + 5];

int main()
{
  int n, m;
  scanf("%d %d", &n, &m);
  for(int i=0;i<n;i++)
    scanf("%s", s[i]);
  for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
      scanf("%d", &cost[i][j]);
  for(int i=0;i<m;i++)
  {
    for(int j=0;j<26;j++)
    {
      int tmp = 0;
      for(int k=0;k<n;k++)
      {
        if(s[k][i] == 'a' + j)
        {
          all[i][j] += cost[k][i];
          tmp = max(tmp, cost[k][i]);
          mm[i][j] |= (1 << k);
        }
      }
      all[i][j] -= tmp;
    }
  }
  for(int i=1;i<(1 << n);i++) DP[i] = INF;
  for(int i=0;i<(1 << n) - 1;i++)
  {
    int nxt;
    for(int j=0;j<n;j++)
    {
      if(i & (1 << j)) continue;
      nxt = j;
      break;
    }
    for(int j=0;j<m;j++)
    {
      DP[i | (1 << nxt)] = min(DP[i | (1 << nxt)], DP[i] + cost[nxt][j]);
      DP[i | mm[j][s[nxt][j] - 'a']] = min(DP[i | mm[j][s[nxt][j] - 'a']], DP[i] + all[j][s[nxt][j] - 'a']);
    }
  }
  printf("%d", DP[(1 << n) - 1]);
  return 0;
}