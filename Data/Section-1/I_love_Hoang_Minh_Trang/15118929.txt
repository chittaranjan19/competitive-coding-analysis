#include <bits/stdc++.h>
#include <string>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 5002;
const int INF = 1e9 + 7;
using namespace std;
string s;
int n, f[MAXN][MAXN], ans[MAXN][MAXN];
long long H[MAXN];
long long Pow[MAXN];
long long BASE = 12354;
long long Get(int l, int r)
{
    return H[r] - H[l - 1] * Pow[r - l + 1];
}

bool ok(int Left, int Right, int u, int v)
{
    int ans = 0;
    for (int l = 0, r = Right - Left + 1; l <= r; )
    {
        int mid = (l + r) / 2;
        if (Get(Left, Left + mid - 1) == Get(u, u + mid - 1)) ans = max(ans, mid), l = mid + 1;
            else r = mid - 1;
    }
    if (ans == Right - Left + 1) return 0;
    return s[Left + ans] > s[u + ans];
}

main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("D.inp", "r", stdin);
    freopen("D.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n >> s;
    s = '=' + s;
    Pow[0] = 1;
    FORE(i, 1, n){
        Pow[i] = Pow[i - 1] * BASE;
        H[i] = H[i - 1] * BASE + s[i];
    }
    memset(f, 0, sizeof(f));
    f[0][0] = 1;
    FORE(i, 0, n) ans[0][i] = 1;
    FORE(i, 1, n)
    {
        FORE(j, 1, i)
        if (s[i - j + 1] != '0')
        {
            f[i][j] = ans[i - j][j - 1];
            if (i < 2 * j) f[i][j] += f[i - j][j];
                else if (ok(i - j + 1, i, i - 2 * j + 1, i - j))
                    f[i][j] += f[i - j][j];
            f[i][j] %= INF;
        }
        for (int j = 1; j <= n; j++)
            ans[i][j] = (ans[i][j - 1] + f[i][j]) % INF;
    }

    cout << ans[n][n];
}
