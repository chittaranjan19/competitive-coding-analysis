#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;
const int maxm = 21;

struct node{
	bitset<maxm> mask;
	int lazy;
};

int n, m, q;
vector<int> adj[maxn], dfstree;
int depth[maxn], strt[maxn], en[maxn], arr[maxn], prime[maxm];
node st[maxn*5];
bitset<maxm> isprime;

void pre()
{
	int i, j;
	for(i=2; i<m; i++){
		if(!prime[i]){
			isprime[i] = 1;
			for(j=i*i; j<m; j+=i)
				prime[j] = 1;  
		}
	}
}

void dfs(int cur, int p, int d)
{
	depth[cur] = d;
	strt[cur] = (int)dfstree.size();
	dfstree.pb(cur);
	for(int it:adj[cur]){
		if(it!=p)
			dfs(it, cur, d+1);
	}
	en[cur] = (int)dfstree.size()-1;
}

void init(int s, int e, int k)
{
	if(s==e){
		st[k].mask[arr[dfstree[s]]] = 1;
		st[k].lazy = 0;
		return;
	}
	int lc, rc, mid;
	mid = (s+e)>>1;
	lc = 2*k + 1;
	rc = lc + 1;
	init(s, mid, lc);
	init(mid+1, e, rc);
	st[k].mask = st[lc].mask | st[rc].mask;
	st[k].lazy = 0;
}

void normalize(int k)
{
	int i, val;
	bitset<maxm> temp = st[k].mask;
	val = st[k].lazy%m;
	st[k].mask<<=val;
	temp >>=(m-val);
	st[k].mask = st[k].mask|temp;
}

void propagate_down(int s, int e, int k)
{
	if(st[k].lazy){
		normalize(k);
		if(s!=e){
			int lc = 2*k + 1;
			int rc = lc + 1;
			st[lc].lazy = (st[lc].lazy + st[k].lazy)%m;
			st[rc].lazy = (st[rc].lazy + st[k].lazy)%m;
		}
		st[k].lazy = 0;
	}
}

void update(int s, int e, int qs, int qe, int k, int val)
{
	propagate_down(s, e, k);
	if(s>e || s>qe || qs>e)
		return;
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*k + 1;
	rc = lc + 1;
	if(s>=qs && qe>=e){
		st[k].lazy = val;
		propagate_down(s, e, k);
		return;
	}
	update(s, mid, qs, qe, lc, val);
	update(mid+1, e, qs, qe, rc, val);
	st[k].mask = st[lc].mask | st[rc].mask;
}

void query(bitset<maxm> &ret, int s, int e, int qs, int qe, int k)
{
	propagate_down(s, e, k);
	if(s>e || s>qe || qs>e)
		return;
	if(s>=qs && qe>=e){
		ret = ret|st[k].mask;
		return;
	}
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*k + 1;
	rc = lc + 1;
	query(ret, s, mid, qs, qe, lc);
	query(ret, mid+1, e, qs, qe, rc);
}

int main()
{
	//freopen("i1.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int t, x, v, u, i, j;
	scanf("%d%d", &n, &m);
	pre();
	for(i=1; i<=n; i++){
		scanf("%d", &arr[i]);
		arr[i]%=m;
	}
	for(i=1; i<n; i++){
		scanf("%d%d", &u, &v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1, 0, 0);
	init(0, n-1, 0);
	scanf("%d", &q);
	while(q--){
		scanf("%d%d", &t, &v);
		if(t==1){
			scanf("%d", &x);
			x%=m;
			update(0, n-1, strt[v], en[v], 0, x);
		}
		else{
			bitset<maxm> temp, ans;
			query(temp, 0, n-1, strt[v], en[v], 0);
			ans = temp & isprime;
			printf("%d\n", (int)ans.count());
		}
		//for(i=0; i<16; i++)
		//	cout << i << " " << st[i].mask << " " << st[i].lazy << "\n";
	}
	return 0;
}
