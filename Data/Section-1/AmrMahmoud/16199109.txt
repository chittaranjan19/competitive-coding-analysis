#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000009
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

typedef complex<double> point;

#define X real()
#define Y imag()
#define polar(r, t) (r * exp(point(0, t)))
#define length(a) hypot(a.X, a.Y)
#define angle(a) atan2(a.Y, a.X)
#define vec(a, b) (b - a)
#define dot(a, b) ((conj(a) * b).X)
#define cross(a, b) ((conj(a) * b).Y)
#define lengthsqr(a) dot(a, a)
#define vec_rot(v, t) (v * exp(point(0, t)))
#define vec_rot_around(v, t, a) (vec_rot(vec(a, v), t) + a)
#define reflect(v, m) (conj(v / m) * m)
#define normalize(v) (v / length(v))
#define ccw(a, b, c) (cross(vec(a, b), vec(a, c)) > EPS)
#define same(a, b) (lengthsqr(vec(a, b)) < EPS)

point arr[7];

int main()
{
  point x, y;
  int a, b, c, d;
  scanf("%d %d", &a, &b);
  x = point(a, b);
  scanf("%d %d", &a, &b);
  y = point(a, b);
  scanf("%d %d", &a, &b);
  scanf("%d %d", &c, &d);
  double theta = angle(y);
  theta -= PI / 2;
  arr[0] = point(x.X, x.Y + b);
  arr[1] = point(x.X - a * 1.0 / 2.0, x.Y);
  arr[6] = point(x.X + a * 1.0 / 2.0, x.Y);
  arr[2] = point(x.X - c * 1.0 / 2.0, x.Y);
  arr[5] = point(x.X + c * 1.0 / 2.0, x.Y);
  arr[3] = point(arr[2].X, arr[2].Y - d);
  arr[4] = point(arr[5].X, arr[5].Y - d);
  for(int i=0;i<7;i++)
  {
    arr[i] = vec_rot(vec(x, arr[i]), theta) + x;
    printf("%.15lf %.15lf\n", arr[i].X, arr[i].Y);
  }
  return 0;
}
