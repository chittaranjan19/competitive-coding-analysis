#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 55
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define ex 0.000001

using namespace std;
struct edge
{
    int v, f, c;
    edge(int v = 0, int c = 0): v(v), c(c) {f = 0;};

};
int n, k, mark[mn], num = 0, d[mn], f[mn][mn];
int que[mn], l, r, pos[mn], ans = 0, trace[mn];
vector<int> g[mn];
vector<edge> e;
priority_queue< pair<int, int> > p;

void setup()
{
    cin >> n >> k;
    int c;
    FOR(i, 1, n)
    FOR(j, 1, n)
    {
        cin >> c;
        if (c)
        {
            g[i].pb(f[i][j] = e.size());
            e.pb(edge(j, c));
            g[j].pb(e.size());
            e.pb(edge(i, 0));
        }
    }
}

bool bfs()
{
    mark[que[l = r = 1] = 1] = ++ num;
    while(l <= r)
    {
        int u = que[l ++];
        pos[u] = 0;
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int id = g[u][i];
            int v = e[id].v;
            if (mark[v] == num || e[id].f == e[id].c)
                continue;
            d[v] = d[u] + 1;
            if (v == n)
                return true;
            mark[v] = num;
            que[++ r] = v;
        }
    }
    return false;
}

int dfs(int u, int flow)
{
    if (!flow)
        return 0;
    if (u == n)
        return flow;
    for(; pos[u] < int(g[u].size()); pos[u] ++)
    {
        int id = g[u][pos[u]];
        int v = e[id].v;
        if (d[v] != d[u] + 1)
            continue;
        int get = dfs(v, min(flow, e[id].c - e[id].f));
        if (get)
        {
            e[id].f += get;
            e[id ^ 1].f -= get;
            return get;
        }
    }
    return 0;
}

bool getLow()
{
    while(!p.empty())
        p.pop();
    mark[1] = ++ num;
    p.push(mp(0, 1));
    while(!p.empty())
    {
        int u = p.top().S;
        int w = - p.top().F;
        p.pop();
        if (w != d[u])
            continue;
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int id = g[u][i];
            if (e[id].c == 0 && e[id].f == 0)
                continue;
            int v = e[id].v, add = (e[id].c == e[id].f);
            if (mark[v] == num && d[v] <= d[u] + add)
                continue;
            mark[v] = num;
            d[v] = d[u] + add;
            trace[v] = u;
            p.push(mp(- d[v], v));
        }
    }
    int en = n;
    if (mark[en] != num || d[en] > k)
        return false;
    k -= d[en];
    while(en > 1)
    {
        int pa = trace[en];
        if (d[pa] != d[en])
            e[f[pa][en]].c ++;
        en = pa;
    }
    return true;
}

void xuly()
{
    while(true)
    {
        while(bfs())
        {
            while(int xx = dfs(1, maxC))
                ans += xx;
        }
        if (!getLow())
            break;
    }
    cout << ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
