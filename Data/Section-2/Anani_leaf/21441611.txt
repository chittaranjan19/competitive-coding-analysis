#include<bits/stdc++.h>
#define INF 0x3f3f3f3f
#define rep(i,a,b) for(int i=a;i<(b);++i)
using namespace std;
typedef __int64 ll;
int const Max_N = 1e5+5;
int const MOD = 5e3;
int const p = 233333;
map<int,int>mp[Max_N];
map<int,int>vis[Max_N];
int X[Max_N] = {0};
int Y[Max_N] = {0};
int main()
{
	int N,M,K;
	cin >> N >> M >> K;
	int n = N;
	int m = M;
	queue<int>que;
	for (int i = 0; i < K; ++i)
	{
		cin >> X[i] >> Y[i];
		que.push(i);
	}
	int x,y,k = 1;
	x = y = 0;
	int t = 0;
	int len = max(n,m);
	int cnt = que.size();
	while(cnt--)
	{
		int i = que.front();
		que.pop();
		if(Y[i]-y == k*(X[i] - x))
		{
			mp[X[i]][Y[i]] = t + abs(Y[i]-y);
		}
		else que.push(i);
	}
	while(true)
	{
		int XX = x;
		int YY = y;
		if(k>0)
		{
			if(y==0)
			{
				int len1 = n - x;
				int len2 = m;
				if(len1 < len2) //�ұ�ǽ
				{
					t += len1;
					x = n;
					y = len1;
					len = len1;
				}
				else //�ϱ�
				{
					t += len2;
					x +=len2;
					y = m;
					len = len2;
				}
			}
			else if(y==m)
			{
				int len1 = x;
				int len2 = m;
				if (len1 < len2) //���
				{
					
					len = len1;
					t += len1;
					x = 0;
					y -= len1;
				}
				else
				{
					
					len = len2;
					t += len2;
					y = 0;
					x -= len2;
				}
			}
			else if(x==0)
			{
				int len1 = m-y;
				int len2 = n;
				if(len1 < len2)
				{
					
					len = len1;
					t += len1;
					y = m;
					x = len1;
				}
				else
				{
					len = len2;
					t += len2;
					y += len2;
					x = n;
				}
			}
			else if(x==n)
			{
				int len1 = y;
				int len2 = n;
				if(len1 < len2) //����
				{
					len = len1;
					t += len1;
					y =  0;
					x -= len1;
				}
				else //����
				{
					len = len2;
					t += len2;
					x = 0;
					y -=len2;
				}
			}
			k = -1;
		}
		else if(k < 0)
		{
			if(y==0)
			{
				int len1 = x;
				int len2 = m;
				if(len1 < len2) // ����
				{
					len = len1;
					t += len1;
					x = 0;
					y = len1;
				}
				else //����
				{
					len = len2;
					t += len2;
					y = m;
					x -= len2;
				}
			}
			else if(y == m)
			{
				int len1 = n - x;
				int len2 = m;
				if(len1 < len2) //����
				{
					len = len1;
					t += len1;
					x = n;
					y -= len1;
				}
				else //����
				{
					len = len2;
					t += len2;
					y =  0;
					x += len2;
				}
			}
			else if(x==0)
			{
				int len1 = y;
				int len2 = m;
				if(len1 < len2) //����
				{
					len = len1;
					t += len1;
					y = 0;
					x += len1;
				}
				else //����
				{
					len = len2;
					t += len2;
					x = n;
					y -= len2;
				}
			}
			else if(x==n)
			{
				int len1 = m - y;
				int len2 = n;
				if(len1 < len2) //����
				{
					len = len1;
					t += len1;
					x -= len1;
					y = m;
				}
				else //����
				{
					len = len2;
					t += len2;
					x = 0;
					y += len2;
				}
			}
			k = 1;
		}
		cnt = que.size();
		if(!cnt) break;
		while(cnt--)
		{
			int i = que.front();
			que.pop();
			if(Y[i]-YY == k*(X[i] - XX))
			{
				mp[X[i]][Y[i]] = t + abs(Y[i]-YY);
				len --;
			}
			else que.push(i);
			if(len == -1) break;
		}
		
		if(vis[x][y]) break;
		else vis[x][y] = true;
		if((x==0||x==n)&&(y==0||y==m)) break;
	}
	for (int i = 0; i < K; ++i)
	{
		if(mp[X[i]][Y[i]]) printf("%d\n",mp[X[i]][Y[i]]);
		else printf("-1\n");
	}
	return 0;
}

