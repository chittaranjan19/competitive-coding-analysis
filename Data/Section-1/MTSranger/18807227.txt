#include <iostream>
#include <cstring>
#include <queue>
#include <vector>

using namespace std;
typedef pair<int, int> pii;

const int N = 100005;

int n, m;

vector<pii> adj[N];
vector<pii> edges;

bool visited[N];
int color[N];

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int u, v; cin >> u >> v; u--; v--;
		adj[u].push_back(pii(v, edges.size()));
		adj[v].push_back(pii(u, edges.size()));
		edges.push_back(pii(u, v));
	}

	memset(visited, 0, sizeof visited);
	for (int start = 0; start < n; start++) {
		if (!visited[start]) {
			queue<pii> q;
			q.push(pii(start, 0));
			while (!q.empty()) {
				pii curr = q.front();
				q.pop();

				int v = curr.first;
				int c = curr.second;
				if (visited[v]) continue;
				visited[v] = true;
				color[v] = c;

				for (int k = 0; k < adj[v].size(); k++) {
					q.push(pii(adj[v][k].first, (c+1)%2));
				}
			}
		}
	}

	bool good = true;
	for (int i = 0; i < m; i++) {
		pii e = edges[i];
		int u = e.first; int v = e.second;
		if (color[u] == color[v]) {
			good = false;
			break;
		}
	}

	if (good) {
		int c1 = 0; int c2 = 0;
		for (int i = 0; i < n; i++) {
			if (color[i] == 0) c1++;
			else c2++;
		}

		cout << c1 << endl;
		int ccc1 = 0;
		for (int i = 0; i < n; i++) {
			if (color[i] == 0) {
				if (ccc1 > 0) cout << " ";
				ccc1++;
				cout << i+1;
			}
		}
		cout << endl;

		cout << c2 << endl;
		int ccc2 = 0;
		for (int i = 0; i < n; i++) {
			if (color[i] == 1) {
				if (ccc2 > 0) cout << " ";
				ccc2++;
				cout << i+1;
			}
		}
		cout << endl;
	} else {
		cout << -1 << endl;
	}
}
