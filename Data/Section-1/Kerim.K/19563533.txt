#include "bits/stdc++.h"

#define mp make_pair
#define pb push_back
#define ppb pop_back
#define db puts("*****");
#define maxn 500007
#define mid(x , y) ((x+y)>>1)
#define ff first
#define ss second
#define ll long long
#define INF 1050000000
#define mod 1000000007
#define pii pair <ll, ll>
#define sz(x) x.size()
#define tr(i , c) for(__typeof(c.begin()) it = (c.begin()); it != (c.end(); it++))

using namespace std;

//	freopen("file.in" , "r" , stdin);
//	freopen("file.out" , "w" , stdin);

ll a, b, c, d[maxn], n, m, T1[maxn<<2]; 
pii T2[maxn<<2];

ll N, X[maxn], Y[maxn], pos, val, M, type;

void combine2(ll v){
	if(T2[v<<1].ss == -1 || T2[v<<1|1].ss == -1){
		T2[v].ff = (T2[v<<1].ff * T2[v<<1|1].ff) % mod;
		T2[v].ss = -1;
		return;
	}
	
	T2[v].ff = (T2[v<<1].ff * T2[v<<1|1].ff) % mod;
	
	if(T2[v<<1].ff * T2[v<<1|1].ff > INF)
		T2[v].ss = -1;
}

void form_tree2(ll l, ll r, ll v){
	if(l == r){
		T2[v].ff = X[l-1] % mod;
		
		if(T2[v].ff > INF)
			T2[v].ss = -1;
		
		return;
	}
	
	form_tree2(l, mid(l, r), v<<1);
	form_tree2(mid(l, r)+1, r, v<<1|1);
	
	combine2(v);
}

pii get(ll x, ll y, ll l, ll r, ll v)
{
	if(y < l || r < x)
		return {1LL, 0LL};
	
	if(x <= l && r <= y)
		return T2[v];
	
	pii t1 = get(x, y, l, mid(l, r), v<<1);
	pii t2 = get(x, y, mid(l, r)+1, r, v<<1|1);
	
	if(t1.ss == -1 || t2.ss == -1)
		return {(t1.ff * t2.ff) % mod, -1};
	
	return {(t1.ff * t2.ff) % mod, ((t1.ff * t2.ff) > INF ? -1LL : 0LL)};
}

void upd2(ll x, ll y, ll l, ll r, ll v)
{
	if(l == r)
	{
		T2[v] = {y, (y > INF ? -1LL : 0LL)};
		return;
	}
	
	if(x <= mid(l, r))
		upd2(x, y, l, mid(l, r), v<<1);
	else
		upd2(x, y, mid(l, r)+1, r, v<<1|1);
	
	combine2(v);
}

void combine1(ll v){
	if(!T1[v<<1|1]){
			T1[v] = T1[v<<1];
			return;
		}
	
	pii tr = get(T1[v<<1]+1, T1[v<<1|1], 1, N, 1);
	
	if(!Y[T1[v<<1|1]-1])	Y[T1[v<<1|1]-1] = 1;
	if(!Y[T1[v<<1]-1])		Y[T1[v<<1]] = 1;

	if(tr.ss == -1)
		T1[v] = T1[v<<1];
	else if(~tr.ss){
		if(tr.ff >= Y[T1[v<<1]-1] / Y[T1[v<<1|1]-1] + (Y[T1[v<<1]-1] % Y[T1[v<<1|1]-1] ? 1LL : 0LL))
			T1[v] = T1[v<<1|1];
		else
			T1[v] = T1[v<<1];
	}
}

void upd1(ll x, ll l, ll r, ll v){
	if(l == r)
	{
		T1[v] = l;
		return;
	}
	
	if(x <= mid(l, r))
		upd1(x, l, mid(l, r), v<<1);
	else
		upd1(x, mid(l, r)+1, r, v<<1|1);
	
	combine1(v);
}

void form_tree1(ll N){
	for(ll i=0; i<N; i++)	
		upd1(i+1, 1, N, 1);
}

ll init(){
	form_tree2(1, N, 1);
	form_tree1(N);
	
	return (Y[T1[1]-1] * get(1, T1[1], 1, N, 1).ff) % mod;
}

ll updateX(ll pos, ll val){
	upd2(pos+1, val, 1, N, 1);
	upd1(pos+1, 1, N, 1);
	
	return (Y[T1[1]-1] * get(1, T1[1], 1, N, 1).ff) % mod;
}

ll updateY(ll pos, ll val){
	Y[pos] = val;
	upd1(pos+1, 1, N, 1);
	
	return (Y[T1[1]-1] * get(1, T1[1], 1, N, 1).ff) % mod;
}

int main()
{
	scanf("%lld", &N);
	
	for(ll i=0; i<N; i++)	scanf("%lld", &X[i]);
	for(ll i=0; i<N; i++)	scanf("%lld", &Y[i]);
	
	printf("%d\n", init());
	
	scanf("%lld", &M);
	
	while(M--)
	{
		scanf("%lld%lld%lld", &type, &pos, &val);
		
		if(type == 1)
			printf("%lld\n", updateX(pos, val));
		else
			printf("%lld\n", updateY(pos, val));
	}
	
	return 0;
}
/*
3
2 1 3
3 4 1

*/
