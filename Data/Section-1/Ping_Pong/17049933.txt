#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

#define ll long long
#define ld long double

using namespace std;

const ll inf = (ll)2 * 1e9;
const ll MOD = (ll)1e9 + 7;
const ll p = 239;
const ll MAX_N = 10;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

vector<vector<int> > graph;
vector<bool> used;

pair<int, int> dfs(int x)
{
    used[x] = true;
    int cnt1 = 0, cnt2 = 0;
    cnt1++;
    cnt2 += graph[x].size();
    for (int i = 0; i < graph[x].size(); i++)
    {
        if (!used[graph[x][i]])
        {
            pair<int, int> p = dfs(graph[x][i]);
            cnt1 += p.first;
            cnt2 += p.second;
        }
    }
    return make_pair(cnt1, cnt2);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    graph.resize(n);
    used.resize(n, false);
    for (int i = 0; i < m; i++)
    {
        int x, y;
        cin >> x >> y;
        graph[x - 1].push_back(y - 1);
        graph[y - 1].push_back(x - 1);
    }
    int ans = 0;
    for (int i = 0; i < n; i++)
        if (!used[i])
        {
            pair<int, int> p = dfs(i);
            if (p.first - 1 == p.second / 2)
                ans++;
        }
    cout << ans;
    return 0;
}
