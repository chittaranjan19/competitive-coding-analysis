#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define rwfile(f) freopen(f".in", "r", stdin); freopen(f".out", "w", stdout)
#define fi first
#define se second

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 10;

struct fenwick {
	vector<int> data;
	void grow (int x) {
#warning this is the problem, you need to grow correctly...
		int ind1 = data.size();
		int tot = query(ind1 - 1);
		for (int i = ind1; i < ind1 + x; i++) {
			int lt = i & (i - 1);
			int val = 0;
			if (lt < ind1 - 1) {
				val = tot - query(lt);
			}
			data.push_back(val);
		}
	}
	void update (int x, int v) {
		assert(x < data.size());
		for (; x < data.size(); x += (x & -x)) {
			assert(x < data.size());
			data[x] += v;
		}
	}
	int query (int x) {
		int s = 0;
		for (x = min(x, int(data.size()) - 1); x > 0; x &= x - 1) {
			assert(x < data.size());
			s += data[x];
		}
		return s;
	}
	int query (int x, int y) {
		if (x > y) {
			return 0;
		}
		return query(y) - query(x - 1);
	}
};

void test() {
	fenwick ft;
	ft.data.resize(6);
	ft.update(1, 1);
	ft.update(3, 4);
	ft.grow(5);
	for (int i = 3; i <= 10; i++) {
		assert(ft.query(i) == 5);
	}
	for (int i = 1; i <= 10; i++) {
		printf("ft.data[%d] = %d\n", i, ft.data[i]);
	}
	exit(0);
}

struct node {
	unordered_map<int, int> cnt;	//cnt[x] = # of times this appears
	fenwick bit;
	int size;	//size
	int id;
	void inc (int x, int c) {
		//increment x by c occurrences
		auto it = cnt.find(x);
		if (it == cnt.end()) {
			bit.update(cnt[x] = c, 1);
			return;
		}
		int &ref = it -> se;
		if (ref) {
			bit.update(ref, -1);
		}
		ref += c;
		bit.update(ref, 1);
	}
};

node *merge (node *n1, node *n2) {
	if (n1 -> size < n2 -> size) {
		swap(n1, n2);
	}
	n1 -> size += n2 -> size;
	n1 -> bit.grow(n2 -> size);
	for (auto it : n2 -> cnt) {
		n1 -> inc(it.fi, it.se);
	}
	return n1;
}

int N, M;
vector<int> adj[MAXN];
vector<pii> qu[MAXN];
node nodes[MAXN];
int ans[MAXN];

node *dfs (int x, int p) {
	node *n = nodes + x;
	for (int t : adj[x]) {
		if (t != p) {
			node *pn = n;
			n = merge(n, dfs(t, x));
		}
	}
	//answer queries
	int sub = n -> size;
	for (pii q : qu[x]) {
		ans[q.se] = n -> cnt.size() - n -> bit.query(q.fi - 1);
	}
	return n;
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	// test();
	scanf("%d %d", &N, &M);
	for (int i = 1, x; i <= N; i++) {
		scanf("%d", &x);
		nodes[i].id = i;
		nodes[i].size = 1;
		nodes[i].bit.data.resize(2);
		nodes[i].inc(x, 1);
	}
	for (int i = 1, a, b; i < N; i++) {
		scanf("%d %d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	for (int i = 1, x, k; i <= M; i++) {
		scanf("%d %d", &x, &k);
		qu[x].push_back(pii(k, i));
	}
	dfs(1, 0);
	for (int i = 1; i <= M; i++) {
		printf("%d\n", ans[i]);
	}
}