#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}


int main()
{
	int n,k;
	cin >> n >> k;
	vector<int> tower (n);
	vector<vector<int>> move;
	forn(i,n)
		cin >> tower[i];

	forn(p,k)
	{
		int maximo = *max_element(tower.begin(),tower.end());
		int minimo = *min_element(tower.begin(),tower.end());
		int i = index(maximo,tower);
		int j = index(minimo,tower);
		if (maximo != minimo)
		{
			tower[i]--;
			tower[j]++;
			vector<int> pepe = {i,j};
			move.push_back(pepe);
		}
	}
	int maxi = *max_element(tower.begin(),tower.end());
	int mini = *min_element(tower.begin(),tower.end());
	int m = move.size();
	cout << maxi - mini << " " << m << endl;
	forn(t,m)
		cout << move[t][0]+1 << " " << move[t][1]+1 << endl;

	return 0;
}
