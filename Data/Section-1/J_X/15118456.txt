#include <iostream>
#include <cstdio>
#include <cstring>

using namespace std;

typedef long long ll;

const int MAXN = 5000 + 5;
const int mod = 1e9 + 7;

ll dp[MAXN][MAXN];
char s[MAXN];

bool check(int s1, int s2, int len)
{
    for(int i = 0; i < len; ++i)
    {
        if(s[s1 + i] != s[s2 + i]) return s[s1 + i] < s[s2 + i];
    }
    return false;
}

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        scanf("%s", s);
        for(int i = 1; i <= n; ++i)
        {
            dp[0][i] = 1;
        }
        for(int i = 1; i < n; ++i)
        {
            memset(dp[i], 0, sizeof(dp[i]));
            int tmp = i >> 1;
            for(int j = 0; j <= tmp; ++j)
            {
                if(s[j] == '0') continue;
                if(j)
                {
                    dp[i][i - j + 1] = (dp[i][i - j + 1] + dp[j - 1][j]) % mod;
                }
                else
                {
                    dp[i][i - j + 1] = (dp[i][i - j + 1] + 1) % mod;
                }
            }
            for(int j = tmp + 1; j <= i; ++j)
            {
                if(s[j] == '0') continue;
                int len = i - j + 1;
                if(check(j - len, j, len))
                {
                    dp[i][len] = (dp[i][len] + dp[j - 1][len]) % mod;
                }
                else
                {
                    dp[i][len] = (dp[i][len] + dp[j - 1][len - 1]) % mod;
                }
            }
            for(int j = 1; j <= i + 1; ++j)
            {
                dp[i][j] = (dp[i][j] + dp[i][j - 1]) % mod;
            }
        }
        printf("%I64d\n", dp[n - 1][n]);
    }
    return 0;
}
