#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct appleTree{
	int position;
	int amount;
};

int comparatorD(const void* v1, const void* v2)
{
 return ((appleTree*)v1)->position < ((appleTree*)v2)->position;
}

int comparatorA(const void* v1, const void* v2)
{
 return ((appleTree*)v1)->position > ((appleTree*)v2)->position;
}

int main()
{
	int n; cin>>n;
	
	vector<appleTree> positive;
	vector<appleTree> negative;
	for(int i = 0; i < n; i++)
	{
		appleTree tree;

		cin>>tree.position;
		cin>>tree.amount;

		if(tree.position < 0)
		{
			negative.push_back(tree);
		}
		else
		{
			positive.push_back(tree);
		}
	}
	qsort(&positive[0], positive.size(), sizeof(appleTree), comparatorA);

	qsort(&negative[0], negative.size(), sizeof(appleTree), comparatorD);
int count=0;
int result=0;
int flag=-1;
	if(negative.size()>=positive.size())
	{
		if(negative.size()>positive.size())
		{
			flag=1;
		}
		count=positive.size(); 
	}
	else
	{
		if(negative.size()<positive.size())
		{
			flag=0;
		}
		count=negative.size();
	}
	for(int i=0; i<count; i++)
	{
	 result+=positive[i].amount;
	 result+=negative[i].amount;
	}
	if(flag==0)
	{
		result+=positive[count].amount;	
	}
	else if(flag==1)
 	{
		result+=negative[count].amount;
	}
	cout<<result;
	return 0;
}