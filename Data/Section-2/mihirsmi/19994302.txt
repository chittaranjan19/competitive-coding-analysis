/*
 * Developer: Mihir Shah
 * Email: mihirsmi404@gmail.com
*/
#include <stdio.h>
#include <limits.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define si(n) scanf("%d", &n);
#define sl(n) scanf("%ld", &n);
#define sll(n) scanf("%lld", &n);
#define pi(n) printf("%d\n", n);
#define pl(n) printf("%ld", n);
#define pll(n) printf("%lld", n);
/*
 * This code is implementation of Merge Sort in C
 * This code is O(nlogn) in time complexity
 * Each recursive call needs O(n) auxillary space
 * This code can also be used to count number of inversions in given input array
*/

void initializeArray(int arr[], int value, int size)
{
	int i;
	for(i = 0; i < size; i++)
		arr[i] = value;
	return;
}

void printArrayNewLine(int arr[], int size)
{
	int i;
	for(int i = 0; i < size; i++)
		pi(arr[i]);
}

void printArraySpace(int arr[], int size)
{
	int i;
	for(i = 0; i < size; i++)
		printf("%d ", arr[i]);
	printf("\n");
}

void mergeSort(int arr[], int low, int high)
{
	if(low == high)
		return;

	int mid,i;
	mid = (low + high) / 2;

	mergeSort(arr, low, mid);
	mergeSort(arr, mid + 1, high);

	int tempArray[high - low + 1];
	int key1 = low, key2 = mid + 1;
	int size = (high - low + 1);

	//Storing sorted version in temporary array
	for(i = 0; i < size; i++)
	{
		if(key1 == mid + 1)
		{
			if(key2 != high + 1)
			{
				tempArray[i] = arr[key2];
				key2++;
			}
		}

		else if(key2 == high + 1)
		{
			if(key1 != mid + 1)
			{
				tempArray[i] = arr[key1];
				key1++;
			}
		}

		else
		{
			if(arr[key1] < arr[key2])
			{
				tempArray[i] = arr[key1];
				key1++;
			}

			else
			{
				tempArray[i] = arr[key2];
				key2++;
			}
		}
	}	
	//Now storing sorted array in main array
	for(i = low; i <= high; i++)
	{
		arr[i] = tempArray[i - low];
	}
	return;
	
}

//Main

int main()
{
	long int a,b,c;
	sl(a);
	if(a <= 2)
	{
		pi(-1);
	}
	else
	{
		if(a % 2)
		{
			b = ((a * a) - 1) / 2;
			c = b + 1;
			printf("%ld %ld",b,c);
		}
		else
		{
			b = ((a / 2) * (a / 2)) - 1;
			c = b + 2;
			printf("%ld %ld",b,c);
		}
	}
	return 0;
}

