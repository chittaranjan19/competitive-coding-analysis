#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};

struct stop
{
    int halt, ind;
};
bool operator<(const stop &s1, const stop &s2)
{
    if ( s1.halt < s2.halt || (s1.halt == s2.halt && s1.ind > s2.ind) )
        return true;
    return false;
}
typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef list<int> List;
typedef List::iterator lIter;

const int S = 100001;
Pair a[S], temp[S];
int dp[S];

int main()
{
    int n;
    cin >> n;
    for (int i = 1, v; i < n; ++i)
    {
        scanf("%d", &v);
        a[i] = Pair(v, i);
    }
    
    dp[n-1] = 1;
    ll sum = 1;
    for (int i = n-2, m, am; i > 0; --i)
    {
        if (a[i].first != n)
            am = a[i].first - i;
        else
            am = a[i].first - i - 1;
        memcpy(temp + 0, a + i + 1, am * sizeof(Pair));
        sort(temp, temp + am);
        m = temp[am-1].second;
        dp[i] = dp[m] + m - a[i].first + n - i;
        
        sum += dp[i];
    }
    
    cout << sum << '\n';
    
    return 0;
}