#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define isIn(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) find((v).begin(),(v).end(),(x)) - (v).begin()

using namespace std;

vector <int> stack;
int counter = 0;
int n;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

void read(vector<int> pila, int book, vector<int> w)
{
	vector <int> newStack (n);
	int miniCounter = 0;
	int j = index(book,pila);
	newStack[0] = pila[j];
	forn(i,j)
	{
		miniCounter += w[pila[i]-1];
		newStack[i+1] = pila[i];
	}
	forsn(i,j+1,n)
		newStack[i] = pila[i];
	stack = newStack;
	counter += miniCounter;
}

int main()
{
	int m;
	cin >> n >> m;
	vector <int> w (n);
	vector <int> b (m);
	forn(i,n)
		cin >> w[i];
	forn(i,m)
	{
		cin >> b[i];
		if (!isIn(b[i],stack))
			stack.push_back(b[i]);
	}
	forsn(i,1,n+1)
	{
		if(!isIn(i,stack))
			stack.push_back(i);
	}
	forn(i,m)
	{	
		read(stack,b[i],w);
	}
	cout << counter << endl;
	
		
	
	
	return 0;
}
