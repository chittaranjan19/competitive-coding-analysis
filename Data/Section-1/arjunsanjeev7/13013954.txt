/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define set(a,b) fill(all(a),b)
#define let(x,a) __typeof(a) x(a)
#define si(n) scanf("%d",&n)
#define pi(n) printf("%d",n)
#define piw(n) printf("%d ",n)
#define pin(n) printf("%d\n",n)
#define all(a) (a).begin(),(a).end()
#define sorti(a) sort(all(a))
#define sortd(a) sort(a.rbegin(),a.rend()) 
#define len(s) s.length()
#define sz(s) s.size()
#define endl '\n'
#define nl printf("\n");
#define present1(c,x) ((c).find(x) != (c).end()) 
#define present2(c,x) (find(all(c),x) != (c).end())
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define PLL pair<LL,LL>
#define VI vector<int>
#define SI set<int>
#define VPII vector< PII >
#define SPII set< PII >
#define mod (int)1e9+7
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

class UnionFind
{
public:
	VI parent;
	VI rank;
	VI size;
	UnionFind(int n)
	{
		parent.assign(n+1,0);
		rep2(i,1,n)
		{
			parent[i]=i;
		}
		rank.assign(n+1,0);
		size.assign(n+1,1);
	}
	int findSet(int n)
	{
		if(n==parent[n]) return n;
		return parent[n]=findSet(parent[n]);
	}
	void setUnion(int a, int b)
	{
		a=findSet(a);
		b=findSet(b);
		if(a==b) return;
		if(rank[a]>rank[b])
		{
			parent[b]=a;
			size[a]+=size[b];
		}
		else
		{
			parent[a]=b;
			size[b]+=size[a];
			if(rank[a]==rank[b])
			{
				rank[b]++;
			}
		}
	}
	int setSize(int n)
	{
		return size[findSet(n)];
	}
};

int main()
{
	FastIO();
	int n,m,a,b;
	cin>>n>>m;
	UnionFind UF(n);
	int arr[n+1];
	VPII V;
	rep2(i,1,n)
	{
		cin>>arr[i];
		V.pb(mp(arr[i],i));
	}
	vector< VI > edge(n+1,VI());
	while(m--)
	{
		cin>>a>>b;
		edge[a].pb(b);
		edge[b].pb(a);
	}
	sort(all(V),greater< PII >());
	VI marked(n+1,0);
	LL ans=0;
	rep1(i,n)
	{
		int x=V[i].f, y=V[i].s;
		marked[y]=1;
		set<LL> S;
		rep1(j,edge[y].size())
		{
			int z=edge[y][j];
			if(marked[z])
			{
				S.insert(UF.findSet(z));
			}
		}
		LL sum=0;
		vector<LL> temp;
		tr(S,it)
		{
			temp.pb(UF.setSize(*it));
			UF.setUnion(y,*it);
			sum+=temp.back();
		}
		ans+=sum*x*2;
		rep1(j,temp.size())
		{
			sum-=temp[j];
			ans+=(2*sum*temp[j]*x);
		}
	}
	cout<<setprecision(6)<<fixed<<(double)ans/((LL)n*(n-1))<<endl;
	return 0;
}