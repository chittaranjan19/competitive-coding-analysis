import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemB {
    private static final long B = 1_000_000_007L;
    BufferedReader rd;
    long[] p = new long[15];

    ProblemB() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        p[0] = 1;
        for(int i=1;i<15;i++) {
            p[i] = 10*p[i-1];
        }
        compute();
    }

    private void compute() throws IOException {
        int k = intarr()[1];
        int[] a = intarr();
        int[] b = intarr();
        int blocks = a.length;
        long res = 1;
        for(int i=0;i<blocks;i++) {
            res *= f(a[i],b[i],k);
            res %= B;
        }
        out(res);
    }

    private long f(int a, int b, int k) {
        long res;
        if(a == 1) {
            res = p[k]-p[k-1];
        } else if(a == 2) {
            if(k == 1) {
                if(b%2==0) {
                    res = 4;
                } else {
                    res = 5;
                }
            } else {
                res = p[k] / 2 - p[k - 1] / 2;
            }
        } else if(k == 1) {
            int u = 0;
            res = 0;
            while(u < 10) {
                if(u != b) {
                    res++;
                }
                u += a;
            }
        } else {
            long lower = b*p[k-1];
            long upper = (b+1)*p[k-1] - 1;
            if(b == 0) {
                long h = upper / a;
                res = (p[k]-1) / a + 1;
                res -= h+1;
            } else if(b == 9) {
                res = (lower-1) / a + 1;
            } else {
                long g = ((lower - 1) / a) + 1;
                long h = (upper / a) + 1;
                res = (p[k]-1) / a + 1;
                res -= h - g;
            }
        }
        return res;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemB();
    }
}
