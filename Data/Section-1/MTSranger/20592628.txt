#include <iostream>
#include <cstdio>

using namespace std;

int query(int x1, int y1, int x2, int y2) {
	cout << "? " << x1 << " " << y1 << " " << x2 << " " << y2 << endl;
	fflush(stdout);
	int res; cin >> res;
	return res;
}

int main() {
	int n; cin >> n;
	int x11=0, y11=0, x12=0, y12=0, x21=0, y21=0, x22=0, y22=0;
	int lb, rb;

	// search for x12 and x22, assume x12 <= x22
	// search for x12
	lb = 1; rb = n;
	if (query(1, 1, lb, n) >= 1) rb = 1;
	while (rb-lb > 1) {
		int mid = (lb+rb)/2;
		if (query(1, 1, mid, n) >= 1) rb = mid;
		else lb = mid;
	}
	x12 = rb;
	if (query(1, 1, rb, n) == 2) {
		x22 = rb;
	}

	// search for x22
	if (x22 == 0) {
		lb = 1; rb = n;
		if (query(1, 1, lb, n) == 2) rb = 1;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(1, 1, mid, n) == 2) rb = mid;
			else lb = mid;
		}
		x22 = rb;
	}

	// search for x11 and x21, assume x11 >= x21 if x12 == x22
	// search for x11
	lb = 1, rb = x12;
	if (query(rb, 1, x12, n) >= 1) lb = x12;
	while (rb-lb > 1) {
		int mid = (lb+rb)/2;
		if (query(mid, 1, x12, n) >= 1) lb = mid;
		else rb = mid;
	}
	x11 = lb;
	if (query(lb, 1, x12, n) == 2) {
		x21 = lb;
	}

	// search for x21
	if (x21 == 0) {
		if (x12 == x22) {
			lb = 1, rb = x22;
			if (query(rb, 1, x22, n) == 2) lb = x22;
			while (rb-lb > 1) {
				int mid = (lb+rb)/2;
				if (query(mid, 1, x22, n) == 2) lb = mid;
				else rb = mid;
			}
			x21 = lb;
		} else {
			lb = 1, rb = x22;
			if (query(rb, 1, x22, n) >= 1) lb = x22;
			while (rb-lb > 1) {
				int mid = (lb+rb)/2;
				if (query(mid, 1, x22, n) >= 1) lb = mid;
				else rb = mid;
			}
			int cand1 = lb;

			lb = 1, rb = x22;
			if (query(rb, 1, x22, n) == 2) lb = x22;
			while (rb-lb > 1) {
				int mid = (lb+rb)/2;
				if (query(mid, 1, x22, n) == 2) lb = mid;
				else rb = mid;
			}
			int cand2 = lb;

			// assume cand2 <= cand1
			if (x11 == cand2) {
				x21 = cand1;
			} else {
				x21 = cand2;
			}
		}
	}

	// swap if rect2 contained in rect1 in x
	if (x11 <= x21 && x22 <= x12) {
		swap(x11, x21);
		swap(x12, x22);
	}

	// search for y12
	lb = 1, rb = n;
	if (query(x11, 1, x12, 1) >= 1) rb = 1;
	while (rb-lb > 1) {
		int mid = (lb+rb)/2;
		if (query(x11, 1, x12, mid) >= 1) rb = mid;
		else lb = mid;
	}
	y12 = rb;

	// search for y11
	lb = 1, rb = y12;
	if (query(x11, y12, x12, y12) >= 1) lb = rb;
	while (rb-lb > 1) {
		int mid = (lb+rb)/2;
		if (query(x11, mid, x12, y12) >= 1) lb = mid;
		else rb = mid;
	}
	y11 = lb;

	if (x21 == x11 && x12 == x22) {
		// search for y22
		lb = y12+1, rb = n;
		if (query(x21, lb, x22, lb) >= 1) rb = lb;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(x21, y12+1, x22, mid) >= 1) rb = mid;
			else lb = mid;
		}
		y22 = rb;

		// search for y21
		lb = 1, rb = y22;
		if (query(x21, y22, x22, y22) >= 1) lb = rb;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(x21, mid, x22, y22) >= 1) lb = mid;
			else rb = mid;
		}
		y21 = lb;
	} else if (x21 <= x11 && x12 <= x22) {
		// search for y22
		lb = 1, rb = n;
		if (query(x21, 1, x22, 1) >= 1) rb = 1;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(x21, 1, x22, mid) >= 1) rb = mid;
			else lb = mid;
		}
		int cand1 = rb;

		lb = 1, rb = n;
		if (query(x21, 1, x22, 1) == 2) rb = 1;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(x21, 1, x22, mid) == 2) rb = mid;
			else lb = mid;
		}
		int cand2 = rb;

		if (y12 == cand1) y22 = cand2;
		else y22 = cand1;

		// search for y21
		lb = 1, rb = y22;
		if (query(x21, y22, x22, y22) >= 1) lb = rb;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(x21, mid, x22, y22) >= 1) lb = mid;
			else rb = mid;
		}
		y21 = lb;
	} else {
		// search for y22
		lb = 1, rb = n;
		if (query(x21, 1, x22, 1) >= 1) rb = 1;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(x21, 1, x22, mid) >= 1) rb = mid;
			else lb = mid;
		}
		y22 = rb;

		// search for y21
		lb = 1, rb = y22;
		if (query(x21, y22, x22, y22) >= 1) lb = rb;
		while (rb-lb > 1) {
			int mid = (lb+rb)/2;
			if (query(x21, mid, x22, y22) >= 1) lb = mid;
			else rb = mid;
		}
		y21 = lb;
	}

	cout << "! " << x11 << " " << y11 << " " << x12 << " " << y12 << " "
	     << x21 << " " << y21 << " " << x22 << " " << y22 << endl;
}
