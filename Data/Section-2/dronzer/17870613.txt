#include <bits/stdc++.h>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define lli long long
#define mp make_pair
#define pi pair<int,int>
#define pli pair<lli,lli>
#define pb push_back
#define x first
#define y second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);

const double EPS = 1e-6;
const lli mod = 1000000007ll;
const lli mod1 = 1000000009ll;
const lli mod2 = 1100000009ll;
const double PI = 3.14159265359;
int INF = 2147483645;
lli INFINF = 9223372036854775807;

template <class T>T Max2(T a,T b){return a<b?b:a;}
template <class T>T Min2(T a,T b){return a<b?a:b;}
template <class T>T Max3(T a,T b,T c){return Max2(Max2(a,b),c);}
template <class T>T Min3(T a,T b,T c){return Min2(Min2(a,b),c);}
template <class T>T Max4(T a,T b,T c,T d){return Max2(Max2(a,b),Max2(c,d));}
template <class T>T Min4(T a,T b,T c,T d){return Min2(Min2(a,b),Max2(c,d));}

using namespace std;
lli bit_count(lli _x){lli _ret=0;while(_x){if(_x%2==1)_ret++;_x/=2;}return _ret;}
lli bit(lli _mask,lli _i){return (_mask&(1<<_i))==0?0:1;}
lli powermod(lli _a,lli _b,lli _m){lli _r=1;while(_b){if(_b%2==1)_r=(_r*_a)%_m;_b/=2;_a=(_a*_a)%_m;}return _r;}
lli add(lli a,lli b,lli m){lli x=a+b;while(x>=m)x-=m;return x;}
lli sub(lli a,lli b,lli m){lli x=a-b;while(x<0)x+=m;return x;}
lli mul(lli a,lli b,lli m){lli x=a*b;x%=m;return x;}

//pi operator + (pi A, pi B) { return mp(A.x + B.x, A.y + B.y); }
lli operator * (pi A,pi B) { return A.x*B.y-A.y*B.x; }
typedef vector< int > vi;
typedef vector< vi > vvi;
long double squareRoot(long double n)
{
  /*We are using n itself as initial approximation
   This can definitely be improved */
  float x = n;
  float y = 1;
  float e = 0.0000000001; /* e decides the accuracy level*/
  while(x - y > e)
  {
    x = (x + y)/2;
    y = n/x;
  }
  return x;
}
long double dist(pi p1,pi p2){
	return squareRoot( ((p1.x - p2.x)*(p1.x - p2.x) +
                 (p1.y - p2.y)*(p1.y - p2.y))*1.000000000
               );
}
int main()
{
ios::sync_with_stdio(false);	
cin.tie(NULL);
int ax,ay,bx,by,rx,ry,n;
cin>>ax>>ay>>bx>>by>>rx>>ry;
cin>>n;
pi r = mp(rx,ry);
pi a = mp(ax,ay);
pi b = mp(bx,by);
pi p[n];
long double ma=0,mb=0,s=0,ma1,mb1;
vector< pair< long double,long double > > q;
vector< long double >d,f;
forn(i,n){
	cin>>p[i].x>>p[i].y;
	s+=dist(p[i],r);
	s+=dist(p[i],r);
	ma1 = dist(p[i],r) - dist(p[i],a);
	mb1 = dist(p[i],r) - dist(p[i],b);
	q.pb(mp(ma1,mb1));
	d.pb(ma1);
	f.pb(mb1);
}
//cout<<"serg";
int flg = 0;
sort(d.begin(),d.end());
sort(f.begin(),f.end());
for(int i=0;i<n;i++){
	if(q[i].x == d[n-1] && q[i].y == f[n-1]){
		flg = 1;
		if(d[n-1 ] > 0 || f[n-1] >0 )
    	    s -= (Max4(d[n-1]+f[n-2],d[n-1],f[n-1],d[n-2]+f[n-1]));
		break;
	}
}
if(flg == 0)
	{
		if(d[n-1] > 0)
			s-=d[n-1];
		if(f[n-1]>0)
			s-=f[n-1];
	}
cout<<setprecision(15)<<s;
}
      
