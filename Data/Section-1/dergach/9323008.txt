#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define pi acos(-1.0)
#define eps 1e-9

int n;
vector <pair <ll, ll> > v[100005];
map <pair <int, int>, int> mp;
ll edgeCnt[100005], edgeCost[100005];

int d[100005];
int dist(int i, int j)
{
    queue <int> q;
    for(int k = 0; k < n; k++)
        d[k] = mod;
    q.push(i);
    d[i] = 0;
    while(!q.empty())
    {
        int x = q.front(); q.pop();
        for(int k = 0; k < v[x].size(); k++)
            if(d[v[x][k].first] > d[x] + v[x][k].second)
            {
                q.push(v[x][k].first);
                d[v[x][k].first] = d[x] + v[x][k].second;
            }
    }
    return d[j];
}

ll dfs(int i, int p)
{
    ll res = 1;
    for(int j = 0; j < v[i].size(); j++)
    {
        if(v[i][j].first != p)
        {
            ll tmpRes = dfs(v[i][j].first, i);
            edgeCnt[mp[make_pair(min(i, (int)v[i][j].first), max(i, (int)v[i][j].first))]] = tmpRes * (n - tmpRes);
            res += tmpRes;
        }
    }
    return res;
}

int main()
{
    scanf("%d", &n);
    for(int i = 0; i < n - 1; i++)
    {
        int a, b, w;
        scanf("%d %d %d", &a, &b, &w);
        a--; b--;
        v[a].push_back(make_pair((ll)b, (ll)w));
        v[b].push_back(make_pair((ll)a, (ll)w));
        mp[make_pair(min(a, b), max(a, b))] = i;
        edgeCost[i] = w;
    }
/*  int res = 0;
    for(int i = 0; i < n; i++)
        for(int j = i + 1; j < n; j++)
            for(int k = j + 1; k < n; k++)
                res += dist(i, j) + dist(i, k) + dist(j, k);
    printf("%d\n", res);*/

    dfs(0, 0);
    ll res = 0;
    for(int i = 0; i < n - 1; i++)
        res += edgeCost[i] * edgeCnt[i];

    int q;
    scanf("%d", &q);
    while(q--)
    {
        int r, w;
        scanf("%d %d", &r, &w);
        r--;
        res -= (edgeCost[r] - w) * edgeCnt[r];
        edgeCost[r] = w;
        printf("%.10lf\n", (double)res / ((double)n * (n-1) / 6));
    }
    return 0;
}