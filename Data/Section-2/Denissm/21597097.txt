#include <stdio.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <queue>
#include <functional>
#include <set>
#include <map>
using namespace std;
typedef unsigned long long ull;
typedef long long ll;
typedef unsigned int ui;

struct Pair {
	int index;
	int value;
	Pair(int index, int value) :index(index), value(value) {}
	bool operator<(const Pair &other) const {
		return value < other.value;
	}
	bool operator>(const Pair &other) const {
		return value > other.value;
	}
};

struct Tuple {
	int a;
	int b;
	int c;
	Tuple(int a, int b, int c) : a(a), b(b), c(c) {}
	bool operator<(const Tuple &other) const {
		return c < other.c;
	}
	bool operator>(const Tuple &other) const {
		return c > other.c;
	}
};

struct Wrap {
	int* index;
	Wrap(int* index) : index(index) {}
	bool operator<(const Wrap&other) const {
		return (*index) < (*other.index);
	}
	bool operator>(const Wrap&other) const {
		return (*index) > (*other.index);
	}
};

int in_i() {
	int result;
	scanf("%d", &result);
	return result;
}
ll in_l() {
	ll result;
	scanf("%I64d", &result);
	return result;
}
char in_c() {
	char result;
	scanf(" %c", &result);
	return result;
}
double in_d() {
	double result;
	scanf("%lf", &result);
	return result;
}

int n, m, k, t, u, v, l, r, x;
const ll MODULO = 1000000007;
char ch;
double d;
char input[102];
int paint[200002];
int parent[200002];
int child_count[200002];
bool visited[200002];
vector<int> edges[200002];

set<int> s;
map<int, int> map1;

int dfs(int node) {
    if (visited[node])
        return 0;
    visited[node] = true;
	map1[paint[node]]++;
	int result = 1;
	for (auto i : edges[node]) {
		result += dfs(i);
	}
	return result;
}

int get_parent(int u) {
    if (parent[u] == -1) {
        return u;
    }
    int result = get_parent(parent[u]);
    return parent[u] = result;
}

void union_set(int u, int v) {
    int parent1 = get_parent(u);
    int parent2 = get_parent(v);
    if (parent1 != parent2) {
        parent[parent1] = parent2;
    }
}

int main() {
	n = in_i();
	m = in_i();
	k = in_i();
	ll result = 0;
	memset(visited, false, sizeof(visited));
	memset(parent, -1, sizeof(parent));
	for (int i = 1; i <= n; i++) {
		paint[i] = in_i();
	}
	for (int i = 0; i < m; i++) {
		l = in_i();
		r = in_i();
		union_set(l, r);
		edges[l].push_back(r);
		edges[r].push_back(l);
	}
	for (int i = 1; i <= n; i++) {
        if (parent[i] == -1) {
            map1.clear();
            int count = dfs(i);
            int max_color = 0;
            for (auto a : map1) {
                max_color = max(max_color, a.second);
            }
            result += count - max_color;
        }
	}
	printf("%I64d", result);
	return 0;
}
