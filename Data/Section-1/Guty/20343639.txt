#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,k;
	while (cin >> n >> k)
	{
		string s;
		cin >> s;
		vector<vector<tint> > v (2,vector<tint> (n+1,0));
		vector<char> aux = {'a','b'};
		forn(j,2)
		forsn(i,1,n+1)
			v[j][i] = v[j][i-1] + (s[i-1] == aux[j]);
			
		tint best = 0;
		forn(j,2)
		{
			tint  l = 1, r = 1;
			while (r <= n)
			{
				while (r <= n && (v[j][r] - v[j][l-1]) <= k)
					r++;
				best = max(best,r-l);
				if (r > n)
					break;
				while (r <= n && l <= n && (v[j][r] - v[j][l-1]) > k)
					l++;
			}
		}
		cout << best << endl;
	}
	return 0;
}



