#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int maxn = 10000 + 5;

struct edge
{
    int to, next;

    edge(int to = 0, int next = 0) : to(to), next(next) {}
} G[maxn << 1];
int head[maxn], color[maxn], tot;
vector<int> vec[2];

void init()
{
    memset(head, -1, sizeof(head));
    memset(color, -1, sizeof(color));
    tot = 0;
}

void addedge(int u, int v)
{
    G[tot] = edge(v, head[u]);
    head[u] = tot++;
    G[tot] = edge(u, head[v]);
    head[v] = tot++;
}

bool dfs(int u, int c)
{
    color[u] = c;
    vec[c].push_back(u);
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(color[v] == -1 && !dfs(v, c ^ 1)) return false;
        if(color[u] == color[v]) return false;
    }
    return true;
}

bool bipgra(int n)
{
    for(int i = 1; i <= n; ++i) if(color[i] == -1 && !dfs(i, 0)) return false;
    return true;
}

int main()
{
    int n, m;
    init();
    scanf("%d%d", &n, &m);
    for(int i = 0; i < m; ++i)
    {
        int u, v;
        scanf("%d%d", &u, &v);
        addedge(u, v);
    }
    if(bipgra(n))
    {
        for(int i = 0; i < 2; ++i)
        {
            printf("%d\n", (int)vec[i].size());
            for(int j = 0; j < vec[i].size(); ++j) printf("%d%c", vec[i][j], " \n"[j == vec[i].size() - 1]);
        }
    }
    else puts("-1");
    return 0;
}
