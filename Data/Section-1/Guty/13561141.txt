#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	int n;
	cin >> n;
	vector<int> sUp (n-1);
	vector<int> sDown (n-1);
	vector<int> cross (n);
	forn(i,n-1)
		cin >> sUp[i];
	forn(i,n-1)
		cin >> sDown[i];
	forn(i,n)
		cin >> cross[i];
	int miniPath = 90000000;
	forn(i,n)
	forn(j,n)
	{
		if (i != j)
		{
			int path = 0;
			forsn(k,i,n-1)
				path += sDown[k];
			path += cross[i];
			forn(k,i)
				path += sUp[k];
			forn(k,j)
				path += sUp[k];
			path += cross[j];
			forsn(k,j,n-1)
				path += sDown[k];
			miniPath = min(miniPath,path);
		}
	}
	cout << miniPath << endl;
	return 0;
}



