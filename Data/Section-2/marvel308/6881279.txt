#include<stdio.h>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
#define pp pair<int,int>
#define ppp pair<pp,int>
#define p(i) push(i)
#define pb(i) push_back(i)
char s[2001];
int a[2005][2005]={0},ans[2001]={0};
int main()
{
    queue<ppp> q;
    int n,m,i,j,k;
    scanf("%d%d%d",&n,&m,&k);
    for(i=0;i<m;i++)
    {
        q.push(ppp(pp(0,i),5+i));
    }
    for(i=0;i<n;i++)
    {
        scanf("%s",s);
        for(j=0;j<m;j++)
        {
            if(s[j]!='.')
            {
                a[i][j]++;
                if(s[j]=='R')
                {
                    q.push(ppp(pp(i,j),1));
                }
                else if(s[j]=='L')
                {
                    q.push(ppp(pp(i,j),2));
                }
                else if(s[j]=='U')
                {
                    q.push(ppp(pp(i,j),3));
                }
                else
                {
                    q.push(ppp(pp(i,j),4));
                }
            }
        }
    }
    while(!q.empty())
    {
        ppp temp=q.front();
        q.pop();
        int x=temp.first.first;
        int y=temp.first.second;
        int z=temp.second;
        //printf("x=%d y=%d z=%d a=%d\n",x,y,z,a[x][y]);
        if(x<0||x>=n||y<0||y>=m)
            continue;
        if(z>4)
        {
            ans[z-4]+=a[x][y];
            q.push(ppp(pp(x+1,y),z));
            continue;
        }
        if(z==1)
        {
            a[x][y]--;
            if(y+1<m)
                a[x][y+1]++;
            q.push(ppp(pp(x,y+1),z));
        }
        else if(z==2)
        {
            a[x][y]--;
            if(y>0)
                a[x][y-1]++;
            q.push(ppp(pp(x,y-1),z));
        }
        else if(z==3)
        {
            a[x][y]--;
            if(x>0)
                a[x-1][y]++;
            q.push(ppp(pp(x-1,y),z));
        }
        else if(z==4)
        {
            a[x][y]--;
            if(x+1<n)
                a[x+1][y]++;
            q.push(ppp(pp(x+1,y),z));
        }
    }
    for(i=1;i<=m;i++)
        printf("%d ",ans[i]);
    return 0;
}
