#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e9;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;
const ll P = 239;

vector<int> p;
vector<int> h;
vector<int> d;

void build(int n)
{
    p.resize(n);
    for (int i = 0; i < n; i++)
        p[i] = i;
    h.resize(n, 0);
    d.resize(n, 0);
}

int get_p(int x)
{
    if (p[x] == x)
        return x;
    else
        return get_p(p[x]);
}

bool union_s(int x, int y)
{
    x = get_p(x);
    y = get_p(y);
    if (x == y)
        return false;
    if (h[x] > h[y])
    {
        p[y] = x;
        d[x] = max(d[x], max(d[y], h[x] + h[y] + 1));
    }
    else if (h[x] == h[y])
    {
        p[y] = x;
        d[x] = max(d[x], max(d[y], h[x] + h[y] + 1));
        h[x]++;
    }
    else
    {
        p[x] = y;
        d[y] = max(d[y], max(d[x], h[y] + h[x] + 1));
    }
    return true;
}

int main()
{
    //freopen("point.in", "r", stdin);
    //freopen("point.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m, q;
    cin >> n >> m >> q;
    build(n);
    for (int i = 0; i < m; i++)
    {
        int x, y;
        cin >> x >> y;
        union_s(x - 1, y - 1);
    }
    for (int i = 0; i < q; i++)
    {
        int t;
        cin >> t;
        if (t == 1)
        {
            int x;
            cin >> x;
            cout << d[get_p(x - 1)] << endl;
        }
        else
        {
            int x, y;
            cin >> x >> y;
            union_s(x - 1, y - 1);
        }
    }
    return 0;
}
