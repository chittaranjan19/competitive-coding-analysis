var me: MutableMap<String, Boolean> = hashMapOf()

fun check(n: Int, m: Int, p: Int): Boolean {
    val mi = Math.min(n,m)
    val ma = Math.max(n,m)
    val key: String = ""+mi+"_"+ma
    var cur: Boolean
    if(!me.containsKey(key)) {
        val all: Int = mi*ma
        var res: Boolean = false
        if (p == all) {
            res = true
        } else if(p < all) {
            if (mi == 1) {
                res = true
            } else {
                var x = mi-1
                while (x > 0) {
                    if(check(x,ma,p)) {
                        res = true
                        break
                    }
                    x--
                }
                x = ma-1
                while (x > 0) {
                    if(check(mi,x,p)) {
                        res = true
                        break
                    }
                    x--
                }
            }
        }
        cur = res
        me.put(key, cur)
    } else {
        cur = me.get(key)!!
    }
    return cur
}

fun main(args: Array<String>) {
    var q = readLine()!!.toInt()
    var s = StringBuilder()
    var first = true
    while(q > 0) {
        me = hashMapOf()
        if(first) {
            first = false
        } else {
            s.append('\n')
        }
        val (n, m, p) = readLine()!!.split(' ').map(String::toInt)
        if(check(n,m,p)) {
            s.append("Yes")
        } else {
            s.append("No")
        }
        q--
    }
    println(s)
}