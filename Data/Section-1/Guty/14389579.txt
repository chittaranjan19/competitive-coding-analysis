#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	ios_base::sync_with_stdio(0);
	tint n,m;
	cin >> n >> m;
	vector<tint> f (n+1);
	vector<tint> b (m+1);
	forsn(i,1,n+1)
		cin >> f[i];
	forsn(i,1,m+1)
		cin >> b[i];
	vector<tint> fCopia = f;
	vector<tint> bCopia = b;
	sort(f.begin(),f.end());
	sort(b.begin(),b.end());
	if (m < n)
	{
		cout << "Impossible" << endl;
		return 0;
	}
	else if (n == m)
	{
		if (f == b)
		{
			forsn(i,1,n+1)
			{
				if (f[i] == f[i-1])
				{
					cout << "Ambiguity" << endl;
					return 0;
				}
			}
			cout << "Possible" << endl;
			vector<tint> fMenosUno (n+1);
			forsn(i,1,n+1)
				fMenosUno[fCopia[i]] = i;
			forsn(i,1,n+1)
				cout << fMenosUno[bCopia[i]] << " ";
			cout << endl;
		}
		else
		{
			cout << "Impossible" << endl;
			return 0;
		}
	}
	else
	{
		set<tint> s;
		forsn(i,1,n+1)
			s.insert(f[i]);
		vector<tint> v1;
		for(auto x: s)
			v1.push_back(x);
		s.clear();
		vector<tint> v2;
		forsn(i,1,m+1)
			s.insert(b[i]);
		for(auto x: s)
			v2.push_back(x);
		if (v1 == v2)
			cout << "Ambiguity" << endl;
		else
			cout << "Impossible" << endl;
		
	}
	
		
	return 0;
}



