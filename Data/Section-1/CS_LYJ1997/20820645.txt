#include<iostream>
#include<cstring>
#include<vector>
using namespace std;
vector<int> visit,unvisit,v1,v2;
int main()
{
    int n,m,u,v,i,j,k,l;
    int dis[410];
    bool flag;
    bool rail[410][410];
    cin>>n>>m;
    memset(rail,false,sizeof(rail));
    for(i=1;i<=m;i++)
    {
        cin>>u>>v;
        rail[u][v]=rail[v][u]=true;
    }
    memset(dis,-1,sizeof(dis));dis[1]=0;
    if (rail[1][n])
    {
        visit.push_back(1);
        for(i=2;i<=n;i++)
            unvisit.push_back(i);
        flag=true;
        while(flag)
        {
            flag=false;v1.clear();v2.clear();
            for(i=0;i<unvisit.size();i++)
            {
                k=unvisit[i];
                for(j=0;j<visit.size();j++)
                {
                    l=visit[j];
                    if (!rail[k][l])
                    {
                        flag=true;
                        dis[k]=dis[l]+1;
                        v1.push_back(k);
                        break;
                    }
                }
                if (j==visit.size()) v2.push_back(k);
            }
            visit=v1;unvisit=v2;
        }
    }
    else
    {
        visit.push_back(1);
        for(i=2;i<=n;i++)
            unvisit.push_back(i);
        flag=true;
        while(flag)
        {
            flag=false;v1.clear();v2.clear();
            for(i=0;i<unvisit.size();i++)
            {
                k=unvisit[i];
                for(j=0;j<visit.size();j++)
                {
                    l=visit[j];
                    if (rail[k][l])
                    {
                        flag=true;
                        dis[k]=dis[l]+1;
                        v1.push_back(k);
                        break;
                    }
                }
                if (j==visit.size()) v2.push_back(k);
            }
            visit=v1;unvisit=v2;
        }
    }
    cout<<dis[n]<<endl;
    return 0;
}