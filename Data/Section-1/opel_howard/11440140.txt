#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

// end of template

int main() {
    // freopen("445A.in", "r", stdin);
    
    int n, m;
    scanf("%d %d", &n, &m);

    string peta[n];
    loop(i, n)
    	cin >> peta[i];

    int xMov[] = {1, 0, -1, 0};
    int yMov[] = {0, 1, 0, -1};

    loop(i, n) {
    	loop(j, m) {
    		if (peta[i][j] == '.') {
    			que<ii> q;
    			q.pu(mp(i, j));
    			peta[i][j] = 'B';
    			while (!q.empty()) {
    				ii currNode = q.front();
    				q.po();
    				loop(it, 4) {
    					ii newPos = mp(currNode.a+yMov[it], currNode.b+xMov[it]);
    					if (((0 <= newPos.a) and (newPos.a < n)) and ((0 <= newPos.b) and (newPos.b < m))) {
    						if (peta[newPos.a][newPos.b] == '.') {\
    							if (peta[currNode.a][currNode.b] == 'W')
    								peta[newPos.a][newPos.b] = 'B';
    							else
    								peta[newPos.a][newPos.b] = 'W';
    							q.pu(newPos);
    						}
    					}
    				}
    			}
    		}
    	}
    }


    loop(i, n) {
    	cout << peta[i] << endl;
    }

    return 0;
}