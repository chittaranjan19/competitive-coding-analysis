#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#include <map>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,x,n) for(i=x;i<n;i++)
#define BACK(i,n) for(i=n;i>=0;i--)
#define BACK_X(i,n,x) for(i=n;i>=x;i--)
#define fill(a,v) memset(a,v,sizeof(a))
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) a*b/gcd(a,b)
#define pb push_back
#define pp pair<int,int>
typedef long long int lld;
using namespace std;
const lld N=2e6;
const lld mod= 1e9+7;
lld f[N+2],inv[N+2];
inline lld nCr( lld n, lld r)
{
    return ( ( ( f[n]*inv[r])%mod )*inv[n-r] )%mod;
}
lld power(lld a,lld b)
{
    if(b==1) return a;
    lld ans= power(a,b/2);
    ans= (ans*ans)%mod;
    if( b%2==1) ans= (ans*a)%mod;
    return ans;
}
int main()
{
    ios_base::sync_with_stdio(0); //dont use with EOF
    f[0]=1;
    
    for(lld i=1;i<=N;i++)
        f[i]= (f[i-1]*i)%mod;
    inv[N] = power( f[N], mod-2 );
    
    for(lld i=N-1;i>=0;i--)
    {
        inv[i]= ( inv[i+1]*(i+1) ) %mod ;
    }
    lld n,tmp=0;
    cin>>n;
    lld ans= ( power(2,2*n+1) -1 +mod )%mod;
    for( lld i=n+2;i<=2*n+1;i++)
    {
        tmp+= nCr(2*n+1, i);
        if(tmp>mod)
            tmp-=mod;
    }
    tmp= (tmp*2 )%mod;
    ans= (ans-tmp + mod )%mod;
    cout<<ans<<endl;
    return 0;
}