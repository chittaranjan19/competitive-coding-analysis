#include <cstdio>
#include <queue>
#include <vector>
#include <memory.h>
#include <algorithm>
using namespace std;
typedef long long LL;
typedef pair <LL, int> plli;
const int MX=200200;
LL p[MX],inf;
int n,m,i,j,x,y,z;
vector <int> g[MX],f[MX],t[MX];
vector <int>::iterator it;
priority_queue <plli, vector <plli>, greater <plli> > q;
int main() {
  scanf("%d%d",&n,&m);
  for (i=0; i<m; i++) {
    scanf("%d%d%d",&x,&y,&z);
	g[x].push_back(n+y); f[x].push_back(z);
	g[y].push_back(n+x); f[y].push_back(z);
  }
  for (i=1; i<=n; i++) {
    scanf("%d",&x);
	while (x--) {
	  scanf("%d",&y);
	  t[i].push_back(y);
	}
  }
  memset(p,120,sizeof(p));
  inf=p[1]; p[1]=0;
  q.push(make_pair(p[1],1));
  LL z=0;
  while (!q.empty()) {
    x=q.top().second;
	z=q.top().first;
	q.pop();
	if (p[x]!=z) continue;
	if (x>n) {
	  y=x-n; z=p[x];
	  if (t[y].size()>0) {
	    for (j=t[y].size()-1; j>=0; j--) if (t[y][j]<=z) break;
		if (j>=0) for (; j<t[y].size() && t[y][j]==z; j++) z++;
	  }
	  p[y]=z; q.push(make_pair(z,y));
	} else for (j=0; j<g[x].size(); j++) {
	  y=g[x][j]; z=p[x]+f[x][j];
	  if (z<p[y]) { p[y]=z; q.push(make_pair(z,y)); }
	}
  }
  if (p[n]==inf) puts("-1"); else printf("%I64d\n",p[n]);
  return 0;
}
