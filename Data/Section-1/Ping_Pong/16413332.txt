#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long p = 239;
const long long MAX_N = 1000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<long long> tree1;
long long cnt_ver1 = 1;

void make_tree1(long long n)
{
    while (cnt_ver1 < n)
        cnt_ver1 *= 2;
    tree1.resize(cnt_ver1 * 2 - 1);
    for (long long i = 0; i < cnt_ver1 * 2 - 1; i++)
        tree1[i] = 0;
}

void update1(long long pos, long long del)
{
    tree1[pos] += del;
    while (pos > 0)
    {
        tree1[(pos - 1) / 2] += del;
        pos = (pos - 1) / 2;
    }
}

long long ans1(long long x, long long lx, long long rx, long long l, long long r)
{
    if (r < lx || l > rx)
        return 0;
    else if (lx >= l && rx <= r)
        return tree1[x];
    else
        return ans1(x * 2 + 1, lx, (lx + rx) / 2, l, r) + ans1(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r);
}


vector<long long> tree2;
long long cnt_ver2 = 1;

void make_tree2(long long n)
{
    while (cnt_ver2 < n)
        cnt_ver2 *= 2;
    tree2.resize(cnt_ver2 * 2 - 1);
    for (long long i = 0; i < cnt_ver2 * 2 - 1; i++)
        tree2[i] = 0;
}

void update2(long long pos, long long del)
{
    tree2[pos] += del;
    while (pos > 0)
    {
        tree2[(pos - 1) / 2] += del;
        pos = (pos - 1) / 2;
    }
}

long long ans2(long long x, long long lx, long long rx, long long l, long long r)
{
    if (r < lx || l > rx)
        return 0;
    else if (lx >= l && rx <= r)
        return tree2[x];
    else
        return ans2(x * 2 + 1, lx, (lx + rx) / 2, l, r) + ans2(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r);
}


int main()
{
    //ifstream ifs("input.txt");
    //ofstream ofs("output.txt");
    //freopen("candies.in", "r", stdin);
    //freopen("candies.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    long long n, k, a, b, q;
    scanf("%I64d %I64d %I64d %I64d %I64d", &n, &k, &a, &b, &q);
    make_tree1(n);
    make_tree2(n);
    for (long long i = 0; i < q; i++)
    {
        long long type;
        scanf("%I64d", &type);
        if (type == 1)
        {
            long long x, cnt;
            scanf("%I64d %I64d", &x, &cnt);
            update1(cnt_ver1 - 1 + x - 1, min(a, tree1[cnt_ver1 - 1 + x - 1] + cnt) - tree1[cnt_ver1 - 1 + x - 1]);
            update2(cnt_ver2 - 1 + x - 1, min(b, tree2[cnt_ver2 - 1 + x - 1] + cnt) - tree2[cnt_ver2 - 1 + x - 1]);
        }
        else
        {
            long long p;
            scanf("%I64d", &p);
            printf("%I64d\n", ans2(0, cnt_ver2 - 1, cnt_ver2 * 2 - 2, cnt_ver2 - 1 + 0, cnt_ver2 - 1 + p - 2) + ans1(0, cnt_ver1 - 1, cnt_ver1 * 2 - 2, cnt_ver1 - 1 + p - 1 + k, cnt_ver1 - 1 + n - 1));
        }
    }
    return 0;
}
