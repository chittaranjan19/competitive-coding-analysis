#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> arr[200005];
int res[200005], tree[800005];

void update(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree[i] = val;
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree[i] = tree[i*2 + 1] + tree[i*2 + 2];
}

int query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return query(i*2 + 1, L, (L + R) / 2, x, y) + query(i*2 + 2, (L + R) / 2 + 1, R, x, y);
}

bool sorter(pair<int, int> a, pair<int, int> b)
{
  if(a.f == b.f) return a.s < b.s;
  return a.f < b.f;
}

int main()
{
  int n;
  scanf("%d", &n);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &arr[i].f);
    arr[i].s = i;
  }
  sort(arr, arr + n);
  for(int i=0;i<n;i++)
  {
    for(int j=1;j<n;j++)
    {
      if(arr[i].s * j + 1 >= n) break;
      int L = arr[i].s * j + 1, R = j * (arr[i].s + 1);
      R = min(R, n - 1);
      res[j] += query(0, 0, n - 1, L, R);
    }
    update(0, 0, n - 1, arr[i].s, 1);
  }
  for(int i=1;i<n;i++)
    printf("%d ", res[i]);
  return 0;
}