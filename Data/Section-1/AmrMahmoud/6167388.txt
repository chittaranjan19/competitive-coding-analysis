#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define PI acos(-1.0)
#define LL long long

using namespace std;
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define pi acos(-1.0)
#define LL long long

#define For(i,a,b) for( int i = (a); i < (b); i++ )
#define Fors(i,sz) for( size_t i = 0; i < sz.size (); i++ )
#define Fore(it,x) for(typeof (x.begin()) it = x.begin(); it != x.end (); it++)
#define Set(a,s) memset(a, s, sizeof (a))
#define Read(r) freopen(r, "r", stdin)
#define Write(w) freopen(w, "w", stdout)

using namespace std;

bool visited[205][205] = {false},bug=false;

int main()
{
    int x=100,y=100;
    string input;
    cin >> input;
    for(int i=0;i<input.size();i++)
    {
        visited[x][y] = true;
        if(input[i] == 'U')
        {
            if(visited[x][y+1] || visited[x][y+2] || visited[x-1][y+1] || visited[x+1][y+1])
            {
                bug = true;
                break;
            }
            y++;
        }
        else if(input[i] == 'L')
        {
            if(visited[x-1][y] || visited[x-2][y] || visited[x-1][y+1] || visited[x-1][y-1])
            {
                bug = true;
                break;
            }
            x--;
        }
        else if(input[i] == 'R')
        {
            if(visited[x+1][y] || visited[x+2][y] || visited[x+1][y+1] || visited[x+1][y-1])
            {
                bug = true;
                break;
            }
            x++;
        }
        else if(input[i] == 'D')
        {
            if(visited[x][y-1] || visited[x][y-2] || visited[x+1][y-1] || visited[x-1][y-1])
            {
                bug = true;
                break;
            }
            y--;
        }
    }
    if(bug)
        printf("BUG");
    else printf("OK");
    return 0;
}