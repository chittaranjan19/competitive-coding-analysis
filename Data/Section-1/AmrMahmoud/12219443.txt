#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int DP[200005];
int res[200005];
vector<int> tree[200005];
vector<int> s[200005];

int init(int node, int parent = -1)
{
  int res = 1, x, tmp = 1;
  for(int i=tree[node].size()-1;i>=0;i--)
  {
    x = tree[node][i];
    if(x == parent)
    {
      s[node].pb(tmp);
      continue;
    }
    res = (res * 1LL * (init(x, node) + 1)) % mod;
    s[node].pb(tmp);
    tmp = (tmp * 1LL * (DP[x] + 1)) % mod;
  }
  DP[node] = res;
  reverse(s[node].begin(), s[node].end());
  return res;
}

void solve(int node, int parent = -1, int sum = 1)
{
  int x, nxt, tmp = 1;
  res[node] = (DP[node] * 1LL * sum) % mod;
  for(int i=0;i<tree[node].size();i++)
  {
    x = tree[node][i];
    if(x == parent) continue;
    nxt = (tmp * 1LL * s[node][i]) % mod;
    nxt = (nxt * 1LL * sum) % mod;
    nxt++;
    if(nxt >= mod) nxt -= mod;
    solve(x, node, nxt);
    tmp = (tmp * 1LL * (DP[x] + 1)) % mod;
  }
}

int main()
{
  //freopen("immetric.in", "r", stdin);
  //freopen("immetric.out", "w", stdout);
  int n, x;
  scanf("%d", &n);
  for(int i=1;i<n;i++)
  {
    scanf("%d", &x);
    x--;
    tree[i].pb(x);
    tree[x].pb(i);
  }
  init(0);
  solve(0);
  for(int i=0;i<n;i++)
    printf("%d ", res[i]);
  return 0;
}