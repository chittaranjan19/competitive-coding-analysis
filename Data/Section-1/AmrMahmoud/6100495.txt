#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits.h>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define pi acos(-1.0)
#define LL long long

using namespace std;

int main()
{
    int n;
    cin >> n;
    int counter=1;
    int arr[n+2][2];
    bool graph[105][105]={false};
    while(n--)
    {
        int temp;
        scanf("%d",&temp);
        if(temp == 1)
        {
            scanf("%d",&temp);
            arr[counter][0]=temp;
            scanf("%d",&temp);
            arr[counter][1]=temp;
            for(int i=1;i<counter;i++)
            {
                if((arr[counter][0] > arr[i][0] && arr[counter][0] < arr[i][1]) || (arr[counter][1] > arr[i][0] && arr[counter][1] < arr[i][1]))
                    graph[counter][i] = true;
                if((arr[i][0] > arr[counter][0] && arr[i][0] < arr[counter][1]) || (arr[i][1] > arr[counter][0] && arr[i][1] < arr[counter][1]))
                    graph[i][counter] = true;
            }
            counter++;
        }
        else
        {
            int x,y;
            scanf("%d %d",&x,&y);
            bool visited[105]={false};
            stack<int> dfs;
            dfs.push(x);
            visited[x]=true;
            bool found = false;
            while(!dfs.empty())
            {
                int tempo=dfs.top();
                dfs.pop();
                for(int i=1;i<counter;i++)
                {
                    if(!visited[i] && graph[tempo][i])
                    {
                        if(i == y)
                        {
                            found = true;
                            break;
                        }
                        dfs.push(i);
                        visited[i]=true;
                    }
                }
                if(found)
                    break;
            }
            if(found)
                printf("YES\n");
            else printf("NO\n");
        }
    }
    return 0;
}