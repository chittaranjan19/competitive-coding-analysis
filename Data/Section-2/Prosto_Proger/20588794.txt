#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct vertex
{
    int next[2];
    int cnt_end, cnt;
    int pred;
    bool c;
    vertex() : cnt_end(0), cnt(0), pred(-1) { next[0] = next[1] = -1; }
};

const int MAXN = 70 * 1e5;
int memsize;
int root;
vertex memory[MAXN];

int go(int we, bool c)
{
    if ( memory[we].next[c] == -1)
        memory[++memsize].pred = we,
        memory[memsize].c = c,
        memory[we].next[c] = memsize;

    return memory[we].next[c];
}

void to_2(vector <bool> &v, long long num)
{
    v.clear();
    while (num)
        v.push_back( (num % 10)&1),
        num /= 10;

    //reverse(v.begin(), v.end());
}

void add(long long num)
{
    vector <bool> v;
    to_2(v, num);
    int we = root;
    for (int i = 0; i < v.size(); ++i)
        we = go(we, v[i]),
        ++memory[we].cnt;

    ++memory[we].cnt_end;
}

void del(long long num)
{
    vector <bool> v;
    to_2(v, num);
    int we = root;
    for (int i = 0; i < v.size(); ++i)
    {
        we = go(we, v[i]);
        --memory[we].cnt;
        int pr = memory[we].pred;
        bool c = memory[we].c;
        if (memory[we].cnt == 0)
            memory[ pr ].next[c] = -1;
    }

    --memory[we].cnt_end;
}

int qest(string& s)
{
    int we = root;
    int ind = 0;
    while (ind < s.size() and s[ind] == '0') ++ind;

    int res = 0;
    for (int i = s.size() - 1; i >= 0; --i)
    {
        if (memory[we].next[s[i] - '0'] == -1) return res;
        we = memory[we].next[ s[i] - '0' ];
        res += (i <= ind)*memory[we].cnt_end;
    }
    we = memory[we].next[0];
    while (we != -1)
    {
        res += memory[we].cnt_end;
        we = memory[we].next[0];
    }
    return res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    int n; long long x;
    cin >> n;
    for (int i = 0; i < n; ++i)
    {
        char c; cin >> c;
        if (c == '+')
        {
            cin >> x;
            add(x);
        }
        else if (c == '-')
        {
            cin >> x;
            del(x);
        }
        else
        {
            string s;
            cin >> s;
            cout << qest(s) << endl;
        }
    }
    return 0;
}
