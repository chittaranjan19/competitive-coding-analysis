#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;




void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

struct Order
{
	Order(tint ll, tint rr)
	{
		left = ll;
		right = rr;
	}
	tint left,right;
};

bool operator < (Order o1, Order o2)
{
	return make_tuple(o1.right, o1.left) < make_tuple(o2.right, o2.left);
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<Order> order (n,Order(0,0));
	forn(i,n)
	{
		tint l,r;
		cin >> l >> r;
		order[i] = Order(l,r);
	}
	sort(order.begin(),order.end());
	vector<tint> ans (n,0);
	ans[0] = 1;
	forsn(i,1,n)
	{
		tint cinf = 0;
		tint csup = i-1;
		if (!(order[cinf].right >= order[i].left))
		{
			while (csup - cinf > 1)
			{
				tint c = (cinf + csup)/2;
				if ((order[c].right < order[i].left))
					cinf = c;
				else
					csup = c;
			}
			if ((order[csup].right < order[i].left))
				cinf = csup;
			ans[i] = max(ans[i-1],ans[cinf]+1);
		}
		else
			ans[i] = ans[i-1];
	}
	//imprimirVector(ans);
	cout << *max_element(ans.begin(),ans.end()) << endl;
		
	
	return 0;
}



