#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 5005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define mid ((l + r) >> 1)

using namespace std;
int n, m, t, low[mn][mn], trace[mn][mn], ans = 0;
vector< pair<int, int> > g[mn];
vector<int> path;

struct node
{
    pair< int , pair<int, int> > val;
    node* lc;
    node* rc;

    node()
    {
        val = mp(0, mp(0, 0));
        lc = rc = NULL;
    }

    void build(int l, int r, int id)
    {
        if (l == r)
        {
            int u = (l - 1) / n + 1;
            int num = l - (u - 1) * n;
            if (u == 1 && num == 1)
                low[u][num] = 0;
            else
                low[u][num] = maxC;
            val = mp(low[u][num], mp(u, num));
            return;
        }
        lc = new node(); lc -> build(l, mid, id << 1);
        rc = new node(); rc -> build(mid + 1, r, (id << 1) + 1);
        val = min(lc -> val, rc -> val);
    }

    void update(int l, int r, int x, int v)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            val.F = v;
            return;
        }
        lc -> update(l, mid, x, v);
        rc -> update(mid + 1, r, x, v);
        val = min(lc -> val, rc -> val);
    }
} p;

int pos(int x, int y)
{
    return (x - 1) * n + y;
}

void setup()
{
    cin >> n >> m >> t;
    int u, v, w;
    FOR(i, 1, m)
    {
        cin >> u >> v >> w;
        g[u].pb(mp(v, w));
    }
    p.build(1, n * n, 1);
}

void xuly()
{
    while(p.val.F <= t)
    {
        int u = p.val.S.F;
        int num = p.val.S.S;
        int w = p.val.F;
        p.update(1, n * n, pos(u, num), maxC);
        if (u == n)
            ans = max(ans, num);
        FOR(i, 0, int(g[u].size()) - 1)
        {
            int v = g[u][i].F;
            int e = g[u][i].S + w;
            if (low[v][num + 1] <= e || t < e)
                continue;
            low[v][num + 1] = e;
            trace[v][num + 1] = u;
            p.update(1, n * n, pos(v, num + 1), e);
        }
    }
    cout << ans << '\n';
    while(n)
    {
        path.pb(n);
        n = trace[n][ans --];
    }
    FORD(i, int(path.size()) - 1, 0)
        cout << path[i] << ' ';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
