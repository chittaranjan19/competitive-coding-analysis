#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<int, int> arr[2005];
int DP[2005], fact[200005], factinv[100005];

bool sorter(pair<int, int> a, pair<int, int> b)
{
  if(a.f == b.f) return a.s < b.s;
  return a.f < b.f;
}

int power(int a, int b)
{
  if(b == 0) return 1;
  if(b & 1) return (a * 1LL * power(a, b - 1)) % mod;
  int tmp = power(a, b / 2);
  return (tmp * 1LL * tmp) % mod;
}

int main()
{
  //freopen("immetric.in", "r", stdin);
  //freopen("immetric.out", "w", stdout);
  int h, w, n;
  scanf("%d %d %d", &h, &w, &n);
  h--, w--;
  for(int i=0;i<n;i++)
  {
    scanf("%d %d", &arr[i].f, &arr[i].s);
    arr[i].f--;
    arr[i].s--;
  }
  sort(arr, arr + n, sorter);
  fact[0] = 1;
  for(int i=1;i<200002;i++)
    fact[i] = (fact[i - 1] * 1LL * i) % mod;
  for(int i=0;i<100002;i++)
    factinv[i] = power(fact[i], mod - 2);
  int res = (fact[h + w] * 1LL * factinv[h]) % mod;
  res = (res * 1LL * factinv[w]) % mod;
  for(int i=0;i<n;i++)
  {
    int x = arr[i].f, y = arr[i].s, dx, dy, tmp;
    DP[i] = (fact[x + y] * 1LL * factinv[x]) % mod;
    DP[i] = (DP[i] * 1LL * factinv[y]) % mod;
    for(int j=0;j<i;j++)
    {
      if(arr[j].f > x || arr[j].s > y)
        continue;
      dx = x - arr[j].f;
      dy = y - arr[j].s;
      tmp = (DP[j] * 1LL * fact[dx + dy]) % mod;
      tmp = (tmp * 1LL * factinv[dx]) % mod;
      tmp = (tmp * 1LL * factinv[dy]) % mod;
      DP[i] -= tmp;
      if(DP[i] < 0) DP[i]+=mod;
    }
    dx = h - arr[i].f;
    dy = w - arr[i].s;
    tmp = (DP[i] * 1LL * fact[dx + dy]) % mod;
    tmp = (tmp * 1LL * factinv[dx]) % mod;
    tmp = (tmp * 1LL * factinv[dy]) % mod;
    res -= tmp;
    if(res < 0) res+=mod;
  }
  printf("%d", res);
  return 0;
}