#include <iostream>
#include <cstdio>
#include <string>

using namespace std;

const int MAXN = 1e5 + 5;
const int MAXM = 60;

struct segtree
{
    int node[MAXN << 2][MAXM];

    void pushup(int rt)
    {
        int lson = rt << 1, rson = rt << 1 | 1;
        for(int i = 0; i < MAXM; ++i)
        {
            int j = (i + node[lson][i]) % MAXM;
            node[rt][i] = node[lson][i] + node[rson][j];
        }
    }

    void build(int rt, int l, int r)
    {
        if(l == r)
        {
            int x;
            scanf("%d", &x);
            for(int i = 0; i < MAXM; ++i)
            {
                node[rt][i] = i % x ? 1 : 2;
            }
            return;
        }
        int m = (l + r) >> 1;
        build(rt << 1, l, m);
        build(rt << 1 | 1, m + 1, r);
        pushup(rt);
    }

    void update(int rt, int l, int r, int x, int a)
    {
//        cout << rt << endl;
        if(l == r)
        {
            for(int i = 0; i < MAXM; ++i)
            {
                node[rt][i] = i % a ? 1 : 2;
            }
            return;
        }
        int m = (l + r) >> 1;
        x <= m ? update(rt << 1, l, m, x, a) : update(rt << 1 | 1, m + 1, r, x, a);
        pushup(rt);
    }

    int query(int rt, int l, int r, int x, int y, int t)
    {
        if(x <= l && r <= y) return t + node[rt][t % MAXM];
        int m = (l + r) >> 1;
        if(x <= m) t = query(rt << 1, l, m, x, y, t);
        if(m < y) t = query(rt << 1 | 1, m + 1, r, x, y, t);
        return t;
    }
} tree;

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        tree.build(1, 1, n);
        int q;
        scanf("%d", &q);
        while(q--)
        {
            char op[5];
            int x, y;
            scanf("%s%d%d", op, &x, &y);
            if(*op == 'C') tree.update(1, 1, n, x, y);
            else printf("%d\n", tree.query(1, 1, n, x, y - 1, 0));
        }
    }
    return 0;
}