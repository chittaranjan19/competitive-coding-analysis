#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 20;
ll mod = 1e9 + 7;

vector<int> g[N];
int cnt[N], mx[N], n, q;
int ans[N], pr[N];

void dcnt(int v, int p = 0){
	pr[v] = p;
	cnt[v] = 1;
	mx[v] = -1;
	for (int i = 0; i < g[v].size(); i++){
		int to = g[v][i];
		if (to == p) continue;
		dcnt(to, v);
		if (mx[v] == -1)
			mx[v] = to;
		else{
			if (cnt[mx[v]] < cnt[to])
				mx[v] = to;
		}
		cnt[v] += cnt[to];
	}
	if (mx[v] == -1)
		mx[v] = v;
}


void dfs(int v, int p = 0){

	for (int i = 0; i < g[v].size(); i++){
		int to = g[v][i];
		if (to != p)
			dfs(to, v);
	}
	if (cnt[mx[v]] <= (cnt[v] + 1) / 2)
		ans[v] = v;
	else{
		int _ans = ans[mx[v]];
		while (1){
			int upper = cnt[v] - cnt[_ans];
			int under = cnt[mx[_ans]];
			if (max(upper, under) > (cnt[v] + 1) / 2)
				_ans = pr[_ans];
			else break;
		}
		ans[v] = _ans;
	}
}

int main()
{
	cin >> n >> q;
	for (int i = 2; i <= n; i++){
		int u, v = i;
		cin >> u;
		g[v].push_back(u);
		g[u].push_back(v);
	}
	dcnt(1);
	dfs(1);
	while (q--){
		int v;
		cin >> v;
		printf("%d\n", ans[v]);
	}
	return 0;
}