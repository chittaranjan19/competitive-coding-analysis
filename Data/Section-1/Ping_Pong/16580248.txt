#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long p = 239;
const long long MAX_N = 1000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

vector<vector<int> > a, ans;
vector<vector<bool> > used;
vector<vector<vector<pair<int, int> > > > graph;

bool comp(pair<int, int> x, pair<int, int> y)
{
    return a[x.first][x.second] < a[y.first][y.second];
}

void dfs(int x, int y, int c)
{
    ans[x][y] = c;
    used[x][y] = true;
    for (int i = 0; i < graph[x][y].size(); i++)
        if (!used[graph[x][y][i].first][graph[x][y][i].second])
            if (a[x][y] == a[graph[x][y][i].first][graph[x][y][i].second])
                dfs(graph[x][y][i].first, graph[x][y][i].second, c);
            else
                dfs(graph[x][y][i].first, graph[x][y][i].second, c + 1);
}

int main()
{
    //ifstream ifs("input.txt");
    //ofstream ofs("output.txt");
    //freopen("candies.in", "r", stdin);
    //freopen("candies.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    scanf("%d %d", &n, &m);
    vector<int> v(m);
    vector<bool> u1(m);
    vector<vector<pair<int, int> > > v1(m);
    for (int i = 0; i < n; i++)
    {
        a.push_back(v);
        ans.push_back(v);
        used.push_back(u1);
        graph.push_back(v1);
    }
    pair<int, int> b[n][m], c[m][n];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            scanf("%d", &a[i][j]);
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            b[i][j] = make_pair(i, j);
        sort(b[i], b[i] + m, comp);
    }
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
            c[i][j] = make_pair(j, i);
        sort(c[i], c[i] + n, comp);
    }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m - 1; j++)
            graph[b[i][j].first][b[i][j].second].push_back(make_pair(b[i][j + 1].first, b[i][j + 1].second));
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n - 1; j++)
            graph[c[i][j].first][c[i][j].second].push_back(make_pair(c[i][j + 1].first, c[i][j + 1].second));
    int x = 0, y = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (a[i][j] < a[x][y])
            {
                x = i;
                y = j;
            }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            used[i][j] = false;
    dfs(x, y, 1);
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            printf("%d ", ans[i][j]);
        printf("\n");
    }
    return 0;
}
