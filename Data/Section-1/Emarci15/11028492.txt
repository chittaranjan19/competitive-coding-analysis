#include <iostream>
#include <queue>
#include <list>

using namespace std;

int n,m;
int s[2],t[2],l[2];

list<int> h[3000];
int a,b;
int d[3000][3000];
queue<int> sor;

int main()
{
    cin >> n >> m;

    for(int i=0; i<m; i++) {
        cin >> a >> b;
        a--; b--;

        h[a].push_back(b);
        h[b].push_back(a);
    }

    for(int ll=0; ll<2; ll++) {
        cin >> s[ll] >> t[ll] >> l[ll];
        s[ll]--; t[ll]--;
    }

    for(int i=0; i<n; i++) {
        for(int j=0; j<n ;j++) {
            d[i][j] = -1;
        }

        d[i][i] = 0;
        sor.push(i);
        while(!sor.empty()) {
            int q = sor.front();
            sor.pop();

            for(int j:h[q]) {
                if(d[i][j] < 0) {
                    d[i][j] = d[i][q]+1;
                    sor.push(j);
                }
            }
        }
    }

    if((d[s[0]][t[0]] > l[0]) || (d[s[1]][t[1]] > l[1])) {
        cout << -1 << endl;
        return 0;
    }
    int sol = m-(d[s[0]][t[0]]+d[s[1]][t[1]]);

    for(int i=0; i<n; i++) {
        for(int j=0; j<n; j++) {
            int ko[2];
            bool jo = 1;
            for(int ll=0; ll<2; ll++) {
                ko[ll] = min(d[s[ll]][i]+d[j][t[ll]], d[s[ll]][j]+d[i][t[ll]]);
                if((ko[ll]+d[i][j]) > l[ll]) {
                    jo = 0;
                }
            }
            if(!jo) continue;
            int nsol = d[i][j] + ko[0] + ko[1];
            sol = max(sol, m-nsol);
        }
    }

    cout << sol << endl;

    return 0;
}
