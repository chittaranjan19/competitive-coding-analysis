#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int maxn = 1000 + 5;
const int dir[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

char s[maxn], c[300];
int maze[4][maxn][maxn], n, m, que[4 * maxn * maxn], d[4][maxn][maxn];

void closewise(int &x)
{
    x = (x >> 1) | ((x & 1) << 3);
}

int myhash(int w, int x, int y)
{
    return w * n * m + x * m + y;
}

bool ok(int x, int y)
{
    return x >= 0 && x < n && y >= 0 && y < m;
}

int bfs(int sx, int sy, int tx, int ty)
{
    int front = 0, rear = 0;
    memset(d, -1, sizeof(d));
    d[0][sx][sy] = 0;
    que[rear++] = myhash(0, sx, sy);
    while(front < rear)
    {
        int u = que[front++];
        int w = u / (n * m), x = u % (n * m) / m, y = u % m;
        if(x == tx && y == ty) return d[w][x][y];
        for(int i = 0; i < 4; ++i)
        {
            if(!(maze[w][x][y] >> i & 1)) continue;
            int dx = x + dir[i][0], dy = y + dir[i][1], j = (i + 2) % 4;
            if(ok(dx, dy) && d[w][dx][dy] == -1 && (maze[w][dx][dy] >> j & 1))
            {
                d[w][dx][dy] = d[w][x][y] + 1;
                que[rear++] = myhash(w, dx, dy);
            }
        }
        int dw = (w + 1) % 4;
        if(d[dw][x][y] == -1)
        {
            d[dw][x][y] = d[w][x][y] + 1;
            que[rear++] = myhash(dw, x, y);
        }
    }
    return -1;
}

int main()
{
    c['+'] = 15, c['-'] = 10, c['|'] = 5;
    c['^'] = 1, c['>'] = 8, c['<'] = 2, c['v'] = 4;
    c['L'] = 13, c['R'] = 7, c['U'] = 14, c['D'] = 11;
    scanf("%d%d", &n, &m);
    for(int i = 0; i < n; ++i)
    {
        scanf("%s", s);
        for(int j = 0; j < m; ++j)
        {
            int p = c[s[j]];
            for(int k = 0; k < 4; ++k)
            {
                maze[k][i][j] = p;
                closewise(p);
            }
        }
    }
    int sx, sy, tx, ty;
    scanf("%d%d%d%d", &sx, &sy, &tx, &ty);
    printf("%d\n", bfs(sx - 1, sy - 1, tx - 1, ty - 1));
    return 0;
}
