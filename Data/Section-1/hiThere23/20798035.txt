#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int n, m, sz[mn], spe[mn];
vector< pair<int, int> > g[mn];
map<long long, int> num, same;
long long ans = 0, power[mn], inv[mn];
bool mark[mn];

void dfs(int u)
{
    sz[u] = 1;
    spe[u] = 0;
    mark[u] = true;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        if (mark[v])
            continue;
        dfs(v);
        if (sz[v] > sz[spe[u]])
            spe[u] = v;
        sz[u] += sz[v];
    }
    mark[u] = false;
}

void getUp(int u, int h, long long val)
{
    //cout << "getUp " << u << ' ' << h << ' ' << val << '\n';
    long long good = ((-val * inv[h]) % m + m) % m;
    ans += num[good] - same[good];
    if (val == 0)
        ans ++;
    mark[u] = true;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        if (mark[v])
            continue;
        getUp(v, h + 1, (val * 10 + g[u][i].S) % m);
    }
    mark[u] = false;
}

void getReady(int u, int h, long long val)
{
    //cout << "getReady " << u << ' ' << h << ' ' << val << '\n';
    same[val] ++;
    mark[u] = true;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        if (mark[v])
            continue;
        getReady(v, h + 1, (val + (g[u][i].S * power[h]) % m) % m);
    }
    mark[u] = false;
}

void getDown(int u, int h, long long val)
{
    //cout << "getDown " << u << ' ' << h << ' ' << val << '\n';
    if (h)
    {
        num[val] ++;
        if (val == 0)
            ans ++;
    }
    mark[u] = true;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        if (mark[v])
            continue;
        getDown(v, h + 1, (val + (g[u][i].S * power[h]) % m) % m);
    }
    mark[u] = false;
}

long long hat(long long a, long long b)
{
    long long re = 1;
    while(b)
    {
        if (b)
            re = (re * a) % m;
        b >>= 1;
        a = (a * a) % m;
    }
    return re;
}

void prepare()
{
    power[0] = 1;
    FOR(i, 1, n)
        power[i] = (power[i - 1] * 10) % m;
    inv[n] = hat(power[n], m - 2);
    FORD(i, n - 1, 0)
        inv[i] = (inv[i + 1] * 10) % m;
}

void solve(int x)
{
    dfs(x);
    int siz = sz[x] >> 1;
    while(sz[spe[x]] > siz)
        x = spe[x];
    //cout << x << '\n';
    num.clear();
    getDown(x, 0, 0);
    mark[x] = true;
    FOR(i, 0, int(g[x].size()) - 1)
    {
        int v = g[x][i].F;
        if(mark[v])
            continue;
        int z = g[x][i].S % m;
        same.clear();
        getReady(v, 1, z);
        getUp(v, 1, z);
    }
    FOR(i, 0, int(g[x].size()) - 1)
    {
        int v = g[x][i].F;
        if (mark[v])
            continue;
        solve(v);
    }
}

void setup()
{
    cin >> n >> m;
    int u, v, w;
    FOR(i, 2, n)
    {
        cin >> u >> v >> w;
        u ++, v ++;
        g[u].pb(mp(v, w));
        g[v].pb(mp(u, w));
    }
}

void xuly()
{
    if (m == 1)
    {
        cout << 0;
        return;
    }
    prepare();
    solve(1);
    cout << ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
