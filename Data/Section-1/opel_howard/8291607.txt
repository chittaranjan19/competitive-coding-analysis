#include <cstdio>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
// end of template

typedef unsigned long long ull;
template <typename U> class Comparator {
public:
	bool operator() (const U lhs, const U rhs) {
		// implement
		return true;
	}
};
// end of template

ull power(const ull &a, const ull &b) {
	if (b == 0)
		return 1;
	if (b % 2) {
		return power(a, b-1)*a;
	}
	else {
		ull temp = power(a, b/2);
		return temp*temp;
	}
}

vector<ull> prime;
ull getCombinatoric(const ull &n, const ull &m) {
	if (n < m)
		return 0;
	ull ans = (n*(n-1))/2ULL;
	return ans;
}
void preparePrime() {
	bool sieve[2000000];
	for (ull it = 0; it <= 2000000; ++it)
		sieve[it] = true;

	sieve[1] = false;
	for (ull i = 2; i <= 1415; ++i)
		if (sieve[i]) {
			for (ull j = i; j < (2000000/i); ++j)
					sieve[i*j] = false;
		}

	for (ull it = 1; it <= 2000000; ++it) {
		if (sieve[it]) {
			prime.push_back(it);
		}
	}
}

int main() {
	// initializiation
	// preparePrime();
	
	// freopen("478B.in", "r", stdin);
	ull n, m;
	scanf("%I64d %I64d", &n, &m);
	ull temp_n = n, temp_m = m;
	ull minimum = (n%m)*getCombinatoric(n/m+1, 2)+(m-n%m)*getCombinatoric(n/m, 2);
	printf("%I64d %I64d\n", minimum, getCombinatoric(n-(m-1), 2));
	return 0;
}