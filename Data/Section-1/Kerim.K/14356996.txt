#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <algorithm>
#include <bitset>
#include <math.h>
#include <queue>
#include <map>
#include <set>
#include <limits.h>
#include <limits>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <time.h>

#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define pp pop_back
#define lld long long
#define maxn 100009
#define inf 1000000009
#define mid (x, y) (x+y)/2
#define pii pair <int, int>
#define all(x) x.begin(), x.end()
#define lcm (x, y) (x*y) / __gcd (x, y);
#define random srand((unsigned)time(NULL))

using namespace std;

//min beryar ---> priority_queue < pii, vector< pii >, greater< pii > > Q;
//max beryar ---> priority_queue < pii > Q;

map <int, map <int, int> > ma;

struct nah {
	int a, b, c;
} arr[100009];

int n, xa, xb, ya, yb, ans, m, M;

int main() {
	//freopen("file.in", "r", stdin);
	//freopen("file.out", "w", stdout);
	
	cin >> xa >> ya >> xb >> yb;
	
	cin >> n;
	
	for (int i=0; i<n; i++) {
		cin >> arr[i].a >> arr[i].b >> arr[i].c;
	}
	
	ans += abs (xa - xb) * 2;
	ans += abs (ya - yb) * 2;
	
	m = min (xa, xb), M = max (xa, xb);
	
	for (int i=m; i<=M; i++) {
		for (int j=0; j<n; j++) {
			if (sqrt (((i-arr[j].a)*(i-arr[j].a))+((ya-arr[j].b)*(ya-arr[j].b))) <= arr[j].c && ma[i][ya] == 0) {
				ma[i][ya] = 1, ans--; break;
			}
		}
	}
	
	for (int i=m; i<=M; i++) {
		for (int j=0; j<n; j++) {
			if (sqrt (((i-arr[j].a)*(i-arr[j].a))+((yb-arr[j].b)*(yb-arr[j].b))) <= arr[j].c && ma[i][yb] == 0) {
				ma[i][yb] = 1, ans--;
				break;
			}
		}
	}
	
	m = min (ya, yb), M = max (ya, yb);
	
	for (int i=m; i<=M; i++) {
		for (int j=0; j<n; j++) {
			if (sqrt (((i-arr[j].b)*(i-arr[j].b))+((xa-arr[j].a)*(xa-arr[j].a))) <= arr[j].c && ma[xa][i] == 0) {
				ma[xa][i] = 1, ans--;
				break;
			}
		}
	}
	
	for (int i=m; i<=M; i++) {
		for (int j=0; j<n; j++) {
			if (sqrt (((i-arr[j].b)*(i-arr[j].b))+((xb-arr[j].a)*(xb-arr[j].a))) <= arr[j].c && ma[xb][i] == 0) {
				ma[xb][i] = 1, ans--;
				break;
			}
		}
	}
	
	cout << ans;
	return 0;
}