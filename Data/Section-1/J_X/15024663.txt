#include <iostream>
#include <string>
#include <queue>

using namespace std;

typedef pair<int, int> P;

const int MAXN = 1e6 + 5;

string s;
queue<P> que;
char mp[300];
int l[MAXN], r[MAXN];

int main()
{
    mp['<'] = 0, mp['>'] = 1, mp['{'] = 2, mp['}'] = 3;
    mp['['] = 4, mp[']'] = 5, mp['('] = 6, mp[')'] = 7;
    while(cin >> s)
    {
        int ans = 0, num = 0;
        l[0] = -1, r[0] = 1;
        for(int i = 1; i < s.size(); ++i)
        {
            l[i] = i - 1;
            r[i] = i + 1;
            if(!(mp[s[i - 1]] & 1) && (mp[s[i]] & 1))
            {
                que.push(P(i - 1, i));
            }
        }
        while(!que.empty())
        {
            P p = que.front();
            que.pop();
            num += 2;
            int x = p.first, y = p.second;
            if((mp[s[x]] ^ mp[s[y]]) != 1)
            {
                ++ans;
            }
            if(l[x] >= 0)
            {
                r[l[x]] = r[y];
            }
            if(r[y] < s.size())
            {
                l[r[y]] = l[x];
            }
            if(l[x] >= 0 && r[y] < s.size() && !(mp[s[l[x]]] & 1) && (mp[s[r[y]]] & 1))
            {
                que.push(P(l[x], r[y]));
            }
        }
        if(num == s.size())
        {
            cout << ans << endl;
        }
        else
        {
            cout << "Impossible" << endl;
        }
    }
    return 0;
}
