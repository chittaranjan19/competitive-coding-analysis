#include<cstdio>
#include<set>
#include<queue>
#include<fstream>
#include<iostream>
#include<algorithm>
using namespace std;
int dx[]={0,1,0,-1};
int dy[]={-1,0,1,0};
int n,m,a[505][505];
int deg[505][505];
multiset< pair<int, pair<int,int> > > SET;
int main() {
    //ifstream fin("maze.in");
    int k;char ch;
    cin>>n>>m>>k;
    for(int i=1;i<=n;i++) {
        for(int j=1;j<=m;j++) {
            cin>>ch;
            if(ch=='\n' || ch==' ')
                cin>>ch;
            if(ch=='.')
                a[i][j]=1;
            else
                a[i][j]=0;
        }
    }
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
            if(a[i][j]==1)
            {
                for(int d=0;d<4;d++)
                    if(a[i+dx[d]][j+dy[d]]==1)
                        deg[i][j]++;
            }
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
            if(deg[i][j])
                SET.insert(make_pair(deg[i][j],make_pair(i,j)));
    for(int move=1;move<=k;move++)
    {
        pair<int,int> p=SET.begin()->second;
        int i=p.first,j=p.second;
        SET.erase(SET.begin());
        a[p.first][p.second]=2;
        for(int d=0;d<4;d++)
            if(a[i+dx[d]][j+dy[d]]==1)
            {
                int x=i+dx[d],y=j+dy[d];
                SET.erase(SET.find(make_pair(deg[x][y],make_pair(x,y))));
                deg[x][y]--;
                SET.insert(make_pair(deg[x][y],make_pair(x,y)));
            }
    }
    for(int i=1;i<=n;i++,printf("\n"))
        for(int j=1;j<=m;j++){
            if(a[i][j]==0)
                printf("#");
            if(a[i][j]==1)
                printf(".");
            if(a[i][j]==2)
                printf("X");
        }
    return 0;
}
