using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    public class Frag
    {
        public string Row { get; set; }
        public bool Used;
        public int Length
        {
            get { return Row.Length; }
        }
    }

    class Program
    {
        public static string Glue(string str1, string str2)
        {
            string result = string.Empty;
            bool flag = false;

            string st1Temp = str1
                , st2Temp = str2;

            if (str2.Length < str1.Length)
            {
                st1Temp = str2;
                st2Temp = str1;
            }
            string tempStr = string.Empty;
            for (int i = 1; i < st2Temp.Length; i++)
            {
                tempStr = st2Temp.Substring(i);
                if (st1Temp.IndexOf(tempStr) == 0)
                {
                    result = st2Temp + st1Temp.Replace(tempStr, "");
                    flag = true;
                    break;
                }
            }
            if (!flag)
            {
                for (int i = 1; i < st2Temp.Length; i++)
                {
                    tempStr = st2Temp.Substring(0, st2Temp.Length - i);
                    if (st1Temp.IndexOf(tempStr) >= 0)
                    {
                        result = st1Temp + st2Temp.Replace(tempStr, "");
                        flag = true;
                        break;
                    }
                }
            }
            return result;
        }

        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            string str = String.Empty;
            List<Frag> gen = new List<Frag>();
            for (int j = 0; j < n; j++)
            {
                str = Console.ReadLine();
                gen.Add(new Frag() { Row = str, Used = false });
            }
            string temp = string.Empty;
            List<Frag> res = gen.OrderBy(a => a.Length).ToList();
            for (int i = 0; i < res.Count; i++)
            {
                for (int j = i; j < res.Count; j++)
                {
                    if (i != j && !res[i].Used && res[j].Row.Contains(res[i].Row))
                    {
                        res[i].Used = true;
                    }
                }
            }

            for (int i = 0; i < res.Count; i++)
            {
                for (int j = i; j < res.Count; j++)
                {
                    if (i != j && !res[i].Used)
                    {
                        temp = Glue(res[j].Row, res[i].Row);
                        if (!string.IsNullOrEmpty(temp))
                        {
                            res[i].Used = true;
                            res[j].Row = temp;
                        }
                    }
                }
            }
            for (int i = 0; i < gen.Count; i++)
            {
                if (!gen[i].Used)
                {
                    Console.Write(gen[i].Row);
                }
            }
            Console.WriteLine();

            //Console.ReadLine();
        }
    }
}