#include<bits/stdc++.h>

using namespace std;

struct node
{
	bool flag;
	node*child[26];
};

void init_trie(node*root)
{
	int i;
	root->flag=0;
	for(i=0;i<26;i++)
	{
		root->child[i]=NULL;
	}
}

node*getnewnode()
{
	int i;
	node*ptr;
	ptr=new node;
	ptr->flag=0;
	for(i=0;i<26;i++)
	{
		ptr->child[i]=NULL;
	}
	return ptr;
}

void append(node*ptr,char*key,int i)
{
	int len,j;
	node*temp=ptr;
	len=strlen(key);
	j=i;
	while(j<len)
	{
		//cout<<j<<" "<<"get"<<"\n";
		ptr->child[key[j]-'a']=getnewnode();
		ptr=ptr->child[key[j]-'a'];
		j++;
	}
	ptr->flag=1;
}

void insert(char*key,node*root)
{
	int len,i,val;
	//cout<<"in1\n";
	node*ptr;
	ptr=root;
	len=strlen(key);
	//cout<<"in2\n";
	for(i=0;i<len;i++)
	{
		//cout<<"in3\n";
		val=key[i]-'a';
		if(ptr->child[val]==NULL)
		{
			//cout<<"app\n";
			append(ptr,key,i);
			return ;
		}
		else
		{
			//cout<<"in4\n";
			ptr=ptr->child[val];
		}
	}
	//cout<<"in5\n";
	ptr->flag=1;
}

bool search(char*key,node*root)
{
	int len,i,val;node*ptr;
	len=strlen(key);
	ptr=root;
	for(i=0;i<len;i++)
	{
		val=key[i]-'a';
		if(ptr->child[val]==NULL)
		return 0;
		else ptr=ptr->child[val];
	}
	if(ptr->flag==1)
	return 1;
	return 0;
}

bool prefix_search(char*key,node*root)
{
	int len,i,val;
	node *ptr;
	len=strlen(key);
	ptr=root;
	for(i=0;i<len;i++)
	{
		val=key[i]-'a';
		if(ptr->child[val]==NULL)
		return 0;
		else ptr=ptr->child[val];
	}
	return 1;
}

bool func(char str[],int len,int idx, node* root, int flag)
{
	int i,val;
	if(root==NULL)
	return 0;
	if(idx == len && root->flag == 1 && flag==1)
		return 1;
	else if(idx == len)
	return 0;
	
	if(root->child[str[idx] - 'a'] == NULL) 
	{
		if(flag == 1)
			return 0;
		else
		{
			for(i=0; i<26; i++)
			{
				if(root->child[i] != NULL)
				{
				
					if(func(str, len, idx+1, root->child[i], 1))
					{
						return 1;
					}
				}
			}
		return 0;
	    }
	}
	else 
	{
		val = str[idx]-'a';
		if (func(str,len,idx+1,root->child[val],flag))
		return 1;
		for(i=0; i<26; i++)
		{
			if(root->child[i] != NULL && i != val)
			{
			
				if(func(str, len, idx+1, root->child[i], 1))
				{
					return 1;
				}
			}
		}
	return 0;
	}
	
}
int main()
{
	char str[100];int i,n,m;
	node*root;
	root=new node;
	init_trie(root);
	cin>>n>>m;
	for(i=0;i<n;i++)
	{
		cin>>str;
		insert(str,root);
	}
	/*
	for(i=0;i<n;i++)
	{
		cin>>str;
		cout<<search(str,root)<<"\n";
	}
	*/
	while(m--)
	{
		cin>>str;
		if(func(str,strlen(str),0,root,0) == 1)
		{
		cout<<"YES\n";	
		}
		else
		{
			cout<<"NO\n";
		}
	}
	return 0;
}