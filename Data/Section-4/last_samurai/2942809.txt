
/* Author:
       * Rohit Laddha */
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <map>
#include <limits.h>
#include <math.h>
#include <cassert>
#include <ctime>
#define PI 3.14159265
using namespace std;
int a[10000][10000]={0};
int flag=0,n,k;
vector<int>ans;
void dp(int i,int l,vector <bool> visited){
	for(int j=0;j<n;j++){
		if(a[i][j]==0 )
			continue;
		if(visited[j]==true && l>=k){
			flag=1;
			cout << l+1 << endl;
			for(int p=l;p>=0;p--){
				cout << ans[p]+1 << ' ';
			}
			cout << endl;
			return ;
		}
		else if(visited[j]==true)
			continue;
		else{
			visited[j]=true;
			ans.push_back(j);
//			dp(j,l+1);
			dp(j,l+1,visited);
			ans.pop_back();
		}
	}
	return;
}


int main()
{
	int m,p,q;
	cin >> n >> m>> k;
	for(int i=0;i<m;i++){
		cin >> p >> q;
		a[p-1][q-1]=1;
		a[q-1][p-1]=1;
	}
	vector <bool> visited;
	for(int j=0;j<n;j++){
		visited.push_back(false);
	}
	for(int i=0;i<n;i++){
		if(flag==1)
			return 0;
		ans.push_back(i);
		visited[i]=true;
		dp(i,0,visited);
		visited[i]=false;
		ans.pop_back();
	}
	return 0;
}
