import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemC {
    BufferedReader rd;
    long[] a;
    int m;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        m = intarr()[1];
        a = longarr();
        long sum = 0;
        for(long i: a) {
            sum += i;
        }
        long min = 1;
        long max = sum;
        while(max - min > 2) {
            long mid = (min + max) / 2;
            if(possible(mid)) {
                max = mid-1;
            } else {
                min = mid+1;
            }
        }
        long res = sum;
        for(int j=-5;j<=10;j++) {
            long t = min + j;
            if(t > 0) {
                if(possible(t)) {
                    res = t;
                    break;
                }
            }
        }
        out(res);
    }

    private boolean possible(long t) {
        int n = a.length;
        int y = 0;
        int p = 0;
        long r = a[0];
        while(y < m && p < n) {
            long u = t-p-1;
            while(p < n && u > 0) {
                if(r >= u) {
                    r -= u;
                    u = 0;
                    if(r == 0) {
                        p++;
                        if(p < n) {
                            r = a[p];
                        }
                    }
                } else {
                    u -= r+1;
                    p++;
                    if(p < n) {
                        r = a[p];
                    }
                }
            }
            if(u == 0) {
                y++;
            }
        }
        return p == n;
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
