#include <iostream>
#include <bits/stdc++.h>

using namespace std;

const int maxn = 5000 + 5;

string s;
bool dp[maxn][maxn];

struct trie
{
    int sz, ch[4 * maxn][2], val[4 * maxn], l;
    char ans[maxn];

    trie()
    {
        for(int i = 0; i < maxn; ++i)
        {
            ans[i] = '\0';
        }
        sz = 0;
        memset(ch[0], 0, sizeof(ch[0]));
        l = 0;
    }

    void add(int i)
    {
        int u = 0;
        for(int j = i; j < s.size(); ++j)
        {
//            cout << s[i];
            int c = s[j] - 'a';
            if(!ch[u][c])
            {
                ch[u][c] = ++sz;
                memset(ch[sz], 0, sizeof(ch[sz]));
                val[sz] = 0;
            }
            u = ch[u][c];
            if(dp[i][j])
            {
                ++val[u];
            }
        }
//        cout << endl;
    }

    bool dfs(int k, int u, int h)
    {
        l += val[u];
        if(l >= k)
        {
            cout << ans << endl;
            return true;
        }
//        if(val[u])
//        {
//            cout << ans << endl;
//        }
        if(ch[u][0])
        {
            ans[h] = 'a';
            if(dfs(k, ch[u][0], h + 1))
            {
                return true;
            }
            ans[h] = '\0';
        }
        if(ch[u][1])
        {
            ans[h] = 'b';
            if(dfs(k, ch[u][1], h + 1))
            {
                return true;
            }
            ans[h] = '\0';
        }
        return false;
    }

} T;

int main()
{
    int k;
    cin >> s >> k;
    for(int len = 1; len <= s.size(); ++len)
    {
        for(int i = 0; i + len <= s.size(); ++i)
        {
            if((len <= 4 && s[i] || dp[i + 2][i + len - 3]) && s[i] == s[i + len - 1])
            {
                dp[i][i + len - 1] = true;
            }
        }
    }
    for(int i = 0; i < s.size(); ++i)
    {
        T.add(i);
    }
    T.dfs(k, 0, 0);
    return 0;
}
