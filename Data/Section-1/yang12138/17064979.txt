/*


	/＼7　　　 ∠＿/
	　 /　│　　 ／　／
	　│　Z ＿,＜　／　　 /`ヽ
	　│　　　　　ヽ　　 /　　〉
	　 Y　　　　　`　 /　　/
	　ｲ●　､　●　　⊂⊃〈　　/
	　()　 へ　　　　|　＼〈		//去吧比卡丘！！！
	　　>ｰ ､_　 ィ　 │ ／／
	　 / へ　　 /　ﾉ＜| ＼＼
	　 ヽ_ﾉ　　(_／　 │／／
	　　7　　　　　　　|／	|
	　　＞―r￣￣`ｰ―＿

*/


#include <iostream>
#include <cstdio>
#include <cmath>
#include <string>
#include <cstring>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#define mem(a,b) memset(a,b,sizeof(a))
using namespace std;
typedef pair<int,int>P;
typedef long long ll;
const int maxn=150005;
int a[maxn],now[maxn];
int n;
struct node
{
    int x,y;
    bool operator<(const node&a)const
    {
        if(x==a.x) return y<a.y;
        return x<a.x;
    }
}ans[maxn];
bool check(int x)
{
    if(x==0||x==n) return true;
    if(x&1){
        if(a[x]<a[x+1]) return true;
        return false;
    }
    else{
        if(a[x]>a[x+1]) return true;
        return false;
    }
}
int main()
{
    while(~scanf("%d",&n))
    {
        for(int i=1;i<=n;i++) scanf("%d",&a[i]);
        int t=0,k=0;
        for(int i=1;i<n;i++){
            if(!check(i)) now[t++]=i;
        }
      //  cout<<t<<endl;
        if(t>3) {printf("0\n");continue;}
        if(t==3){
            if(now[2]==now[1]+1&&now[1]==now[0]+1){
                swap(a[now[1]],a[now[2]]);
                if(check(now[0])&&check(now[1])&&check(now[2])) printf("1\n");
                else printf("0\n");
            }
            else printf("0\n");
            continue;
        }
        if(t==1){
            for(int i=now[0];i<=now[0]+1;i++)
                for(int j=1;j<=n;j++){
                if(i==j) continue;
                swap(a[i],a[j]);
                if(check(i-1)&&check(i)&&check(j-1)&&check(j)){
                    ans[k].x=min(i,j),ans[k].y=max(i,j);
                    k++;
                }
                swap(a[i],a[j]);
            }
        }
        else if(t==2){
            for(int i=now[0];i<=now[0]+1;i++){
                for(int j=now[1];j<=now[1]+1;j++){
                    if(i!=j){
                        swap(a[i],a[j]);
                        if(check(i-1)&&check(i)&&check(j-1)&&check(j)){
                            ans[k].x=min(i,j),ans[k].y=max(i,j);
                            k++;
                        }
                        swap(a[i],a[j]);
                    }
                }
            }
        }
        sort(ans,ans+k);
        int ansn=0;
        for(int i=0;i<k;i++){
            ansn++;
            while(i<k-1&&ans[i+1].x==ans[i].x&&ans[i+1].y==ans[i].y) i++;
        }
        printf("%d\n",ansn);
    }
    return 0;
}
