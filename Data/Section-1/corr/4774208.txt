#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>

#include<cmath>
#include<iostream>
#include<iomanip>
#include<fstream>

#include<string>
#include<utility>
#include<vector>
#include<list>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>

#define ii long long int
#define pi 2*acos(0.0)
#define eps 1e-9
#define mem(x,y) memset(x,y,sizeof(x))
#define all(x) x.begin(), x.end()
#define pb push_back
#define sz(a) (int)a.size()
#define inf 2147483640

#define mx 30
#define fst 0
#define snd 1

using namespace std;

const int debug= 0;

struct node
{
	int na,nb;
	node(){}
	node(int a,int b)
	{
		na= a,nb= b;
	}
};

int n;
char s[mx][mx];
int dx[]= {1,0};
int dy[]= {0,1};
bool vis[mx][mx][2];
node dp[mx][mx][2];

node call(int i,int j,int turn);

int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	
	while (cin>>n)
	{
		mem(vis,0);
		int i;
		for (i=0;i<n;++i) cin>>s[i];
		node ans= call(0,0,1);
		
		//cout<<ans.na<<" "<<ans.nb<<endl;
		
		if (ans.na>ans.nb) puts("FIRST");
		else if (ans.na<ans.nb) puts("SECOND");
		else puts("DRAW");
	}
	
	return 0;	
}

node call(int i,int j,int turn)
{
	if (i==n || j==n) return node(0,0);
	
	if (vis[i][j][turn]) return dp[i][j][turn];
	vis[i][j][turn]= 1;
	
	int k;
	node a[2],ans;
	for (k=0;k<=1;++k)
	{
		int x,y;
		x= i+dx[k], y= j+dy[k];
		if (x==n || y==n) a[k]= node(-1,-1);
		else
		{
			a[k]= call(x,y,(turn+1)%2);
		}
	}
	
	if (a[0].na==-1)
	{
		if (a[1].na==-1) ans= node(0,0);
		else ans= a[1];
	}
	else
	{
		if (a[1].na==-1) ans= a[0];
		
		else if (turn==fst)
		{
			if (a[0].na-a[0].nb > a[1].na-a[1].nb) ans= a[0];
			ans= a[1];
		}
		
		else if (turn==snd)
		{
			if (a[0].na-a[0].nb < a[1].na-a[1].nb) ans= a[0];
			ans= a[1];
		}
	}
	
	if (s[i][j]=='a') ans.na++;
	if (s[i][j]=='b') ans.nb++;
	
	//cout<<i<<" "<<j<<" "<<turn<<" rturns "<<ans.na<<","<<ans.nb<<endl;
	return dp[i][j][turn]= ans;
}
