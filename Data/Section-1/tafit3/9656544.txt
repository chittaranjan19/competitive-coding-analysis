import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;

public class ProblemC2 {
    BufferedReader rd;
    int[] a;
    int nnum;

    private ProblemC2() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        nnum = pint();
        a = new int[nnum];
        for(int i=0;i<nnum;i++) {
            a[i] = pint();
        }
        String last = getFirst(a[0]);
        out(last);
        for(int i=1;i<nnum;i++) {
            last = smallestGreaterThan(last, a[i]);
            out(last);
        }
    }

    private String smallestGreaterThan(String last, int sum) {
        char[] c = last.toCharArray();
        int n = c.length;
        int k = n-1;
        int ps = partialSum(c,0,n-1);
        int cs = sum-ps;
        while(cs > 0 && k >= 0) {
            while(k >= 0 && c[k] == '9') {
                k--;
            }
            if(k >= 0) {
                c[k]++;
                cs--;
            }
        }
        if(cs > 0) {
            return getFirst(sum);
        }
        if(new BigInteger(new String(c)).compareTo(new BigInteger(last)) > 0) {
            return new String(c);
        }

        k = n-1;
        while(k >= 1 && c[k-1] == '9') k--;
        while(true) {
            if(k == 0) {
                if(c[0] < '9') {
                    k++;
                } else {
                    n++;
                    c = new char[n];
                    Arrays.fill(c,'0');
                    c[0] = '1';
                    int j = n-1;
                    for(int i=1;i<sum;i++) {
                        while(j > 0 && c[j] == '9') {
                            j--;
                        }
                        if(j <= 0) {
                            break;
                        }
                        c[j]++;
                    }
                    if(j > 0) {
                        return new String(c);
                    } else {
                        k = n-1;
                        while(k >= 1 && c[k-1] == '9') k--;
                    }
                }
            } else {
                if(c[k-1] < '9') {
                    c[k-1]++;
                    Arrays.fill(c,k,n,'0');
                    int rs = partialSum(c, 0, k-1);
                    rs = sum-rs;
                    if(rs >= 0) {
                        int j = n-1;
                        for(int i=0;i<rs;i++) {
                            while(j >= k && c[j] == '9') {
                                j--;
                            }
                            if(j < k) {
                                break;
                            }
                            c[j]++;
                        }
                        if(j >= k) {
                            return new String(c);
                        }
                    } else {
                        k--;
                    }
                } else {
                    while(k >= 1 && c[k-1] == '9') k--;
                }
            }
        }
    }

    private int partialSum(char[] c, int from, int to) {
        int rs = 0;
        for(int i=from;i<=to;i++) {
            rs += c[i]-'0';
        }
        return rs;
    }

    private String getFirst(int x) {
        StringBuilder buf = new StringBuilder();
        while(x >= 9) {
            buf.append('9');
            x -= 9;
        }
        return (x > 0 ? Integer.toString(x) : "") + buf.toString();
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC2();
    }
}
