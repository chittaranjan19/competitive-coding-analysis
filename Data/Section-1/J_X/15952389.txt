#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int maxn = 5e5 + 5;

struct edge
{
    int to, next;
    edge(int to = 0, int next = 0) : to(to), next(next) {}
} G[maxn << 1];
int head[maxn], tot, clk, d[maxn];

void init()
{
    memset(head, -1, sizeof(head));
    tot = 0;
}

void addedge(int u, int v)
{
    G[tot] = edge(v, head[u]);
    head[u] = tot++;
    G[tot] = edge(u, head[v]);
    head[v] = tot++;
}

void dfs(int u, int fa, int dep)
{
    bool leaf = true;
    for(int i = head[u]; ~i; i = G[i].next)
    {
        int v = G[i].to;
        if(v == fa) continue;
        leaf = false;
        dfs(v, u, dep + 1);
    }
    if(leaf) d[clk++] = dep;
}

int solve(int u)
{
    clk = 0;
    dfs(u, 1, 1);
    sort(d, d + clk);
    int ret = d[0];
    for(int i = 1; i < clk; ++i)
    {
        d[i] = max(d[i], d[i - 1] + 1);
        ret += d[i] - d[i - 1];
    }
    return ret;
}

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        init();
        for(int i = 1; i < n; ++i)
        {
            int u, v;
            scanf("%d%d", &u, &v);
            addedge(u, v);
        }
        int ans = 0;
        for(int i = head[1]; ~i; i = G[i].next)
        {
            ans = max(ans, solve(G[i].to));
        }
        printf("%d\n", ans);
    }
    return 0;
}
