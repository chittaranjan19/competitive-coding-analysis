#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

vector<tint> movimientoX = {-1,1,0,0};
vector<tint> movimientoY = {0,0,-1,1};

struct Par
{
	tint x,y;
	Par(tint xx, tint yy)
	{
		x = xx;
		y = yy;
	}
};

void bfs (vector<string> &c, vector<vector<bool> > &usado, vector<vector<tint> > &ans, tint a, tint b, tint n, tint m)
{
	vector<Par> vecinos = {Par(a,b)};
	vector<Par> nuevosVecinos;
	vector<Par> paredes;
	tint total = 0;
	while (!vecinos.empty())
	{
		
		Par actual = vecinos.back();
		vecinos.pop_back();
		usado[actual.x][actual.y] = true;
		total++;
		forn(i,4)
		{
			tint nuevoX = actual.x + movimientoX[i], nuevoY = actual.y + movimientoY[i];
			if (nuevoX >= 0 && nuevoX < n && nuevoY >= 0 && nuevoY < m && c[nuevoX][nuevoY] == '.' && !usado[nuevoX][nuevoY])
				nuevosVecinos.push_back(Par(nuevoX,nuevoY));
			else if (nuevoX >= 0 && nuevoX < n && nuevoY >= 0 && nuevoY < m && c[nuevoX][nuevoY] == '*' && !usado[nuevoX][nuevoY])
			{
				paredes.push_back(Par(nuevoX,nuevoY));
				usado[nuevoX][nuevoY] = true;
			}
		}
		if (vecinos.empty())
		{
			vecinos = nuevosVecinos;
			nuevosVecinos.clear();
		}
	}
	tint l = paredes.size();
	forn(i,l)
	{
		Par pos = paredes[i];
		usado[pos.x][pos.y] = false;
		if (ans[pos.x][pos.y] == -1)
			ans[pos.x][pos.y] = 0;
		ans[pos.x][pos.y] = (ans[pos.x][pos.y] + total) % 10;
	}
	
}


int main()
{
	int n,m;
	int pepe;
	pepe = scanf("%d%d", &n, &m);
	vector<string> c (n);
	static char auxString[1500];
	
	forn(i,n)
	{
		pepe = scanf("%s", auxString);
		c[i] = auxString;
	}
	vector<vector<bool> > usado (n, vector<bool> (m,false));
	vector<vector<tint> > ans (n,vector<tint> (m,-1));
	forn(i,n)
	forn(j,m)
	if (!usado[i][j] && c[i][j] == '.')
		bfs(c,usado,ans,i,j,n,m);
	
	string s = "";
	forn(i,m)
		s.push_back('.');	
		
	vector<string> risposta (n, s);
	forn(i,n)
	forn(j,m)
	{
		if (ans[i][j] != -1)
			risposta[i][j] = '0' + ((ans[i][j] + 1) % 10);
		else if (ans[i][j] == -1 && c[i][j] == '*')
			risposta[i][j] = '1';
	}
	forn(i,n)
		printf("%s\n", risposta[i].c_str());
	
		
	if (pepe) return 0;
	return 0;
}



