#include <algorithm>
#include <fstream>
#include <iostream>

using namespace std;

int p[8][3];
long long dist[28];

bool cube() {
    int k = 0;
    for (int i = 0; i < 8; ++ i) {
        for (int j = 0; j < i; ++ j) {
            dist[k ++] = 1LL * (p[i][0] - p[j][0]) * (p[i][0] - p[j][0]) + 1LL * (p[i][1] - p[j][1]) * (p[i][1] - p[j][1]) + 1LL * (p[i][2] - p[j][2]) * (p[i][2] - p[j][2]);
        }
    }
    sort(dist, dist + k);
    for (int i = 1; i < 12; ++ i) {
        if (dist[i] != dist[0]) {
            return false;
        }
    }
    for (int i = 12; i < 24; ++ i) {
        if (dist[i] != 2 * dist[0]) {
            return false;
        }
    }
    for (int i = 24; i < 28; ++ i) {
        if(dist[i] != 3 * dist[0]) {
            return false;
        }
    }
    return true;
}

int main() {
    for (int i = 0; i < 8; ++ i) {
        for(int j = 0; j < 3; ++ j) {
            cin >> p[i][j];
        }
    }
    do {
        do {
            do {
                do{
                    do{
                        do{
                            do{
                                do{
                                    if(cube()) {
                                        cout << "YES\n";
                                        for (int i = 0; i < 8; ++ i) {
                                            cout << p[i][0] << " " << p[i][1] << " " << p[i][2] << "\n";
                                        }
                                        return 0;
                                    }
                                } while(next_permutation(p[7], p[7] + 3));
                            }while(next_permutation(p[6], p[6] + 3));
                        } while(next_permutation(p[5], p[5] + 3));
                    } while(next_permutation(p[4], p[4] + 3));
                } while(next_permutation(p[3], p[3] + 3));
            } while(next_permutation(p[2], p[2] + 3));
        } while(next_permutation(p[1], p[1] + 3));
    } while(next_permutation(p[0], p[0] + 3));
    cout << "NO\n";
    return 0;
}
