#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>
#include <time.h>
#include <stdlib.h>
#include <stdio.h>

using namespace std;

#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<long long, long long> pt;

const int MAX_K = 200010;
const int MAX_N = 200020;
const long long mod = 1e9 + 7;
vector <pair< long long, long long> > sp[MAX_N];
set<long long> ans;
long long tet[MAX_N];

void dfs(int n){
    for (int i = 0; i < sp[n].size(); i++)
        if (ans.find(sp[n][i].ft) != ans.end());
        else{
            tet[sp[n][i].ft] = min(tet[sp[n][i].ft], sp[n][i].sc);
        }
}

int main(){
    #if 0
	freopen("division.in", "r", stdin);
	freopen("division.out", "w", stdout);
    #endif
    for (int i = 1; i < MAX_N; i++)
        tet[i] = 9999999999999;
    long long anss = 9999999999999;
    long long n, m, k;
    cin >> n >> m >> k;
    for (int i = 1; i <= m; i++) {
        long long r, l, w;
        cin >> r >> l >> w;
        sp[r].pb(mp(l, w));
        sp[l].pb(mp(r, w));
    }
    long long w[MAX_N];
    for (int i = 0; i < k; i++){
        cin >> w[i];
        ans.insert(w[i]);
    }
    for (int i =0 ; i < k; i++)
        dfs(w[i]);
    for (int i = 1; i <= n; i++){
        if (tet[i] != 9999999999999)
            anss = min(anss, tet[i]);
    }
    if (anss != 9999999999999)
        cout << anss;
    else cout << -1;
return 0;
}
