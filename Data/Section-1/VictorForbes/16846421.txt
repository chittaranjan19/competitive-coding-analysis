#include <bits/stdc++.h>

#define PI 3.14159265358979323846
#define N 1001

using namespace std;

typedef unsigned long long ull;
typedef unsigned int ui;
typedef long long ll;

int n, m;
char mat[N][N];
int aux[N][N];
int v[N * N];

void bfs(int x, int y, int index){
	queue <pair<int, int> > q;
	int counter = 0;

	aux[x][y] = index;
	q.push(make_pair(x, y));

	while (!q.empty()){
		x = q.front().first;
		y = q.front().second;
		q.pop();

		// if (aux[x + 1][y] != index){
			
			if (mat[x + 1][y] == '.'){
				if (aux[x + 1][y] != index){
					q.push(make_pair(x + 1, y));
				}
			}
			else{
				// printf("Set %d - (%d, %d)\n", index, x + 1, y);
				counter++;
			}
			aux[x + 1][y] = index;
		// }

		// if (aux[x - 1][y] != index){
			
			if (mat[x - 1][y] == '.'){
				if (aux[x - 1][y] != index){
					q.push(make_pair(x - 1, y));
				}
			}
			else{
				// printf("Set %d - (%d, %d)\n", index, x - 1, y);
				counter++;
			}
			aux[x - 1][y] = index;
		// }

		// if (aux[x][y + 1] != index){
			
			if (mat[x][y + 1] == '.'){
				if (aux[x][y + 1] != index){
					q.push(make_pair(x, y + 1));
				}
			}
			else{
				// printf("Set %d - (%d, %d)\n", index, x, y + 1);
				counter++;
			}
			aux[x][y + 1] = index;
		// }

		// if (aux[x][y - 1] != index){
			
			if (mat[x][y - 1] == '.'){
				if (aux[x][y - 1] != index){
					q.push(make_pair(x, y - 1));
				}
			}
			else{
				// printf("Set %d - (%d, %d)\n", index, x, y - 1);
				counter++;
			}
			aux[x][y - 1] = index;
		// }
	}

	v[index] = counter;
}

int main(void){
	int k, i, j, x, y, indexCounter;

	scanf("%d%d%d%*c", &n, &m, &k);

	for (i = 0; i < n; i++){
		for (j = 0; j < m; j++){
			scanf("%c", mat[i] + j);
		}

		scanf("%*c");
	}

	indexCounter = 0;

	for (i = 0; i < n; i++){
		for (j = 0; j < m; j++){
			if (mat[i][j] == '.' and !aux[i][j]){
				indexCounter++;
				bfs(i, j, indexCounter);
			}
		}
	}

	/*for (i = 0; i < n; i++){
		for (j = 0; j < m; j++){
			printf("%d ", aux[i][j]);
		}
		printf("\n");
	}*/

	for (i = 0; i < k; i++){
		scanf("%d%d", &x, &y);
		printf("%d\n", v[aux[x - 1][y - 1]]);
	}

	return 0;
}