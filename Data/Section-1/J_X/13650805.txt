#include <iostream>
#include <cstdio>
#include <algorithm>
#include <map>

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

const int maxn = 1e6 + 5;
const int mod = 1000000007;

ll dp[3][maxn];
P pp[maxn];
map<int, int> mp1, mp2;

ll fastpow(ll x, ll n)
{
    ll res = 1;
    while(n)
    {
        if(n & 1)
        {
            res = res * x % mod;
        }
        x = x * x % mod;
        n >>= 1;
    }
    return res;
}

int main()
{
    int n, k;
    ll l;
    scanf("%d%I64d%d", &n, &l, &k);
    ll p = l / n, q = l % n;
    for(int i = 0; i < n; ++i)
    {
        scanf("%d", &pp[i].first);
        pp[i].second = i;
        ++mp1[pp[i].first];
        if(i < q)
        {
            ++mp2[pp[i].first];
        }
    }
    ll ans = 0;
    sort(pp, pp + n);
    ll *now = dp[0], *nxt = dp[1];
    for(int i = 0; i < n; ++i)
    {
        if(i && pp[i].first == pp[i - 1].first) continue;
        nxt[1] = mp1[pp[i].first];
        if(p)
        {
            ans = (ans + nxt[1] * p % mod) % mod;
        }
        if(pp[i].second < q)
        {
            ans = (ans + mp2[pp[i].first]) % mod;
        }
        for(int j = 2; j <= k; ++j)
        {
            nxt[j] = (now[j - 1] + nxt[j - 1]) * mp1[pp[i].first] % mod;
            if(p >= j)
            {
                ans = (ans + nxt[j] * (p - j + 1) % mod) % mod;
            }
            if(p >= j - 1 && pp[i].second < q)
            {
                ans = (ans + (now[j - 1] + nxt[j - 1]) * mp2[pp[i].first] % mod) % mod;
            }
        }
        for(int j = 1; j <= k; ++j)
        {
            nxt[j] = (nxt[j] + now[j]) % mod;
        }
        swap(now, nxt);
    }
    printf("%I64d\n", ans);
    return 0;
}
