import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemC {
    BufferedReader rd;

    ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        int[] a = intarr();
        List<List<Integer>> e = new ArrayList<>();
        for(int i=0;i<n;i++) {
            e.add(new ArrayList<>(2));
        }
        Map<Pair, Integer> edgeLen = new HashMap<>();
        for(int i=0;i<n-1;i++) {
            int[] q = intarr();
            int p = q[0]-1;
            int c = q[1];

            e.get(p).add(i+1);
            e.get(i+1).add(p);

            edgeLen.put(pair(i+1,p), c);
        }

        int[] parent = new int[n+5];
        long[] len = new long[n+5];
        long[] mlen = new long[n+5];
        boolean[] vis = new boolean[n+5];
        boolean[] rem = new boolean[n+5];
        Queue<Integer> qu = new ArrayDeque<>();
        qu.add(0);
        vis[0] = true;
        while(!qu.isEmpty()) {
            int v = qu.poll();
            if(a[v] < mlen[v]) {
                rem[v] = true;
            }
            for(Integer x: e.get(v)) {
                if(!vis[x]) {
                    vis[x] = true;
                    qu.add(x);
                    parent[x] = v;
                    len[x] = len[v] + edgeLen.get(pair(x,v));
                    mlen[x] = Math.max(mlen[v], len[x]);
                }
            }
        }
        qu.add(0);
        int ok = 0;
        while(!qu.isEmpty()) {
            int v = qu.poll();
            if(!rem[v]) {
                ok++;
                for(Integer x: e.get(v)) {
                    if(x != parent[v]) {
                        qu.add(x);
                    }
                }
            }
        }
        out(n - ok);
    }

    private Pair pair(int x, int y) {
        return new Pair(Math.min(x,y), Math.max(x,y));
    }

    class Pair {
        final int[] v;

        Pair(int a, int b) {
            v = new int[] { a, b };
        }

        Pair(int[] x) {
            v = x;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o instanceof Pair) {
                return Arrays.equals(v, ((Pair) o).v);
            }
            return false;
        }

        public int hashCode() {
            return v != null ? Arrays.hashCode(v) : 0;
        }

    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
