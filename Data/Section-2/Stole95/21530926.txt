import java.io.*;
import java.util.*;

public class C {
	public static void main(String[] args) {
		FastScannerC sc = new FastScannerC(System.in);
		
		long A = sc.nextLong();
		long B = sc.nextLong();
		long C = sc.nextLong();
		
		if(A == B && B == C){
			System.out.println(0);
			System.exit(0);
		}
//		else if( (A==B || A==B-1) && C == A-1){
//			System.out.println(0);
//			System.exit(0);
//		}
//		else if( (C==B || C==B+1) && C == A+1){
//			System.out.println(0);
//			System.exit(0);
//		}
		
//		long max = Math.max(C, Math.max(A, B));
//		long min = Math.min(C, Math.min(A, B));
//		long mid = -1;
//		if(A == max || A == min){
//			if(B == max || B == min){
//				mid = C;
//			}
//			else mid = B;
//		}
//		else mid = A;
//		System.out.println(max + " " + min + " " + mid);
//		long rez = max - 1 - mid;
//		rez += (max - 1 - min);
//		System.out.println(rez);
		
		if(A == B){
			if(C < A){
				System.out.println(A-C - 1);
			}
			else{
				System.out.println(2*(C- A - 1));
			}
			System.exit(0);
		}
		else if(B==C){
			if(A < B){
				System.out.println(B-A - 1);
			}
			else{
				System.out.println(2*(A- B - 1));
			}
			System.exit(0);
		}
		else if(A==C){
			if(B < A){
				System.out.println(A - B - 1);
			}
			else{
				System.out.println(2*(B- A - 1));
			}
			System.exit(0);
		}
		else{
			long max = Math.max(C, Math.max(A, B));
			long min = Math.min(C, Math.min(A, B));
			long mid = -1;
			if(A == max || A == min){
				if(B == max || B == min){
					mid = C;
				}
				else mid = B;
			}
			else mid = A;
			
			long rez = max - 1 - mid;
			rez += (max - 1 - min);
			System.out.println(rez);
		}
	}
}

class FastScannerC{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScannerC(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}