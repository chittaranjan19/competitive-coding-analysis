#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>
#include <vector>

using namespace std;

bool a[300][300];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int n; cin >> n;
    int init[n];
    for (int i = 0; i < n; i++) cin >> init[i];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            char c; cin >> c;
            a[i][j] = (c == '1');
        }
    }

    int res[n];
    bool visited[n];
    memset(visited, 0, sizeof visited);
    for (int s = 0; s < n; s++) {
        if (visited[s]) continue;
        vector<int> nums, pos;
        queue<int> q;
        q.push(s);
        while (!q.empty()) {
            int curr = q.front(); q.pop();
            if (visited[curr]) continue;
            visited[curr] = true;
            nums.push_back(init[curr]);
            pos.push_back(curr);
            for (int i = 0; i < n; i++) {
                if (a[curr][i]) {
                    q.push(i);
                }
            }
        }
        sort(nums.begin(), nums.end());
        sort(pos.begin(), pos.end());
        for (int i = 0; i < pos.size(); i++) {
            res[pos[i]] = nums[i];
        }
    }
    for (int i = 0; i < n; i++) {
        if (i > 0) cout << " ";
        cout << res[i];
    }
    cout << endl;
}
