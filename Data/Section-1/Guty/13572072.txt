#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

bool gano (vector<string> &row, int fila, int columna, int n)
{
	bool gane = false;
	if (columna >= n-1)
		gane = true;
	else 
	{	
		vector<int> pos = {-1,0,1};
		forn(i,3)
		{
			if (fila + pos[i] < 3 && fila + pos[i] >= 0)
			{
				int nuevaFila = fila + pos[i];
				if (row[nuevaFila].substr(columna+1,4) == "...." or (columna + 4 >= n))
					 gane = gane or gano(row,nuevaFila,columna+3,n);
				else
					gane = gane or false;
			}
			else
				gane = gane or false;
		}
	}
	return gane;
	
	
			
	
}


int main()
{
	int t;
	cin >> t;
	forn(tt,t)
	{
		int n,k;
		cin >> n >> k;
		vector<string> row (3);
		forn(i,3)
			cin >> row[i];
		int fila;
		if (row[0][0] == 's')
			fila = 0;
		else if (row[1][0] == 's')
			fila = 1;
		else
			fila = 2;
		if (gano(row,fila,0,n))
			cout << "YES" << endl;
		else
			cout << "NO" << endl;
		
		
	}
	return 0;
}



