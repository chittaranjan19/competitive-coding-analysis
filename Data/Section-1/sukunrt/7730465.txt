#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
//#include <rope>
#include <cstring>


using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


char grid[505][505];
int e[505][505];
int n, m, k;
void solve(){
//        if (k == 0) return;
        for(int i = 1; i <= n; i++){
                for(int j = 1; j <= m; j++){
                        if (grid[i][j] == '.'){
                                int cnt = 0;
                                if (grid[i+1][j] == '.') cnt++;
                                if (grid[i][j+1] == '.') cnt++;
                                if (grid[i-1][j] == '.') cnt++;
                                if (grid[i][j-1] == '.') cnt++;
                                e[i][j] = cnt;
                        }
                }
        }

        while (k){
                int mi = 10;
                int cx, cy;
                int flag = 0;
                for(int i = 1; i <= n; i++){
                        for(int j = 1; j <= m; j++){
                                if (grid[i][j] == '.'  && e[i][j] < mi){
                                        mi = e[i][j];
                                        cx = i;
                                        cy = j;
                                }
                                if (mi == 1) break;
                        }
                        if (flag) break;
                }

                e[cx+1][cy]--;
                e[cx-1][cy]--;
                e[cx][cy+1]--;
                e[cx][cy-1]--;
                grid[cx][cy] = 'X';
                k--;
        }
}
                                        
                               
int main(){
        ios::sync_with_stdio(false);
        cin >> n >> m >> k;
        for(int i = 0; i < n; i++){
                string s;
                cin >> s;
                for(int j = 0; j < m; j++)
                        grid[i+1][j+1] = s[j];
        }
        int i = 1;
        while (k > m){

                for(int j = 1; j <= m; j++){
                        if (grid[i][j] == '.') grid[i][j] = 'X', k--;
                }
                i++;
        }

        solve();
        for(int i = 1; i <= n; i++){
                for(int j = 1; j <= m; j++){
                        cout << grid[i][j];
                }
                cout << "\n";
        }

        return 0;
}
        
                        
        
        
        

