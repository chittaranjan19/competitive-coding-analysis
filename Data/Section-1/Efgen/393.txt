import java.io.*;         
import java.util.*;         
import java.math.*;         
import java.awt.geom.*;         
import java.util.regex.*;
public class Main implements Runnable  {
StreamTokenizer ST;      
PrintWriter out;      
BufferedReader br;   
int inf = 1000000000;


int nextInt() throws IOException{      
    ST.nextToken();      
    return (int)ST.nval;      
}

long nextLong() throws IOException{      
    ST.nextToken();      
    return (long)ST.nval;      
}      
String next() throws IOException{      
    ST.nextToken();      
    return ST.sval;      
}      
double nextD() throws IOException{      
    ST.nextToken();      
    return ST.nval;      
}      
public static void main(String[] args) throws IOException {       
    new Thread(new Main()).start();      
}

public void run()  {      
    try {          
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(System.in, "ISO-8859-1"));
        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        
        ST = new StreamTokenizer(br);      
        solve();      
        out.close();
        br.close();            
    }         
    catch (IOException e) {        
        throw new IllegalStateException(e);       
    }      
}


double eps = 1e-6;
double f(double x0, double y0, double x1, double y1, double x2, double y2) {
    x2 -= x0; y2 -= y0; x1 -= x0; y1 -= y0;
    return Math.atan2(x1*y2-x2*y1, x1*x2+y1*y2);
}
boolean ok(double x) {
    return (x-Math.floor(x+eps))<eps;
}
public void solve() throws IOException {
    double x1 = nextD();
    double y1 = nextD();
    double x2 = nextD();
    double y2 = nextD();
    double x3 = nextD();
    double y3 = nextD();
    
    x2 -= x1; y2 -= y1; x3 -= x1; y3 -= y1; x1 = y1 = 0;
    double a = -y2, b = x2;
    double d1 = Math.hypot(x2, y2);
    double d2 = Math.hypot(x3, y3);
    double res = 1e+100;
    for (int n=3; n<=100; n++)
        for (int i=1; i<n; i++) {
            double alf = Math.PI*2/n*Math.min(i, n-i);
            double bet = (Math.PI-alf)/2;
            double R = Math.sin(bet)/Math.sin(alf)*d1;
            double h = Math.sqrt(R*R-d1*d1/4);
            double cx = x2/2;
            double cy = y2/2;
            double vx = a*h/d1;
            double vy = b*h/d1;
            if (Math.abs(Math.hypot(cx+vx-x3, cy+vy-y3)-R)<eps ) {
                double ug = f(cx+vx, cy+vy, 0, 0, x3, y3);
                if (ok(ug*n/2/Math.PI)) res = Math.min(res, d1*h*n);
            }
            if (Math.abs(Math.hypot(cx-vx-x3, cy-vy-y3)-R)<eps ) {
                double ug = f(cx-vx, cy-vy, 0, 0, x3, y3);
                if (ok(ug*n/2/Math.PI)) res = Math.min(res, d1*h*n);
            }
        }
    
    
    
    a = -y3; b = x3;
    double q = d1; d1 = d2; d2 = q;
    q = x2; x2 = x3; x3 = q;
    q = y2; y2 = y3; y3 = q;
    for (int n=3; n<=100; n++)
        for (int i=1; i<n; i++) {
            double alf = Math.PI*2/n*Math.min(i, n-i);
            double bet = (Math.PI-alf)/2;
            double R = Math.sin(bet)/Math.sin(alf)*d1;
            double h = Math.sqrt(R*R-d1*d1/4);
            double cx = x2/2;
            double cy = y2/2;
            double vx = a*h/d1;
            double vy = b*h/d1;
            if (Math.abs(Math.hypot(cx+vx-x3, cy+vy-y3)-R)<eps ) {
                double ug = f(cx+vx, cy+vy, 0, 0, x3, y3);
                if (ok(ug*n/2/Math.PI)) res = Math.min(res, h*d1*n);
            }
            if (Math.abs(Math.hypot(cx-vx-x3, cy-vy-y3)-R)<eps ) {
                double ug = f(cx-vx, cy-vy, 0, 0, x3, y3);
                if (ok(ug*n/2/Math.PI)) res = Math.min(res, d1*h*n);
            }
        }
    
    out.printf(Locale.US, "%1.7f", res/2);
    
    
}
}






 



