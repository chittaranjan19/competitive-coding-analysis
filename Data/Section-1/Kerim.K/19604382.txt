#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
int way[16][16],F[16][16],vis[16],deg[16];
int n,m,dp[(1<<15)];
void dfs(int nd){
	if(vis[nd])
		return;
	vis[nd]=1;	
	for(int i=1;i<=n;i++)
		if(way[nd][i] or way[i][nd])
			dfs(i);
}vector<int>root;
int rec(int mask){
	if(mask==0)
		return 0;
	int &ret=dp[mask];
	if(~ret)
		return ret;ret=INF;
	vector<int>bit;
	for(int i=0;i<int(root.size());i++)
		if(mask&(1<<i))
			bit.pb(i);
	for(int i=1;i<int(bit.size());i++){
		int u=root[bit[0]];
		int v=root[bit[i]];
		umin(ret,rec(mask^(1<<bit[0])^(1<<bit[i]))+F[u][v]);
	}
	return ret;		
}
int main(){
	memset(dp,-1,sizeof(dp));
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	memset(F,12,sizeof F);
	int ans=0;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++){
		int u,v,w;
		scanf("%d%d%d",&u,&v,&w);
		umin(F[u][v],w);umin(F[v][u],w);
		way[u][v]=way[v][u]=1;
		deg[u]++;deg[v]++;
		ans+=w;
	}
	for(int i=1;i<=n;i++)
		F[i][i]=0;
	for(int k=1;k<=n;k++)
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)
				umin(F[i][j],F[i][k]+F[k][j]);
	dfs(1);
	for(int i=1;i<=n;i++){
		if(!vis[i] or !deg[i])
			return printf("-1\n"),0;
		if(deg[i]&1)
			root.pb(i);
	}	
	if(int(root.size()))
		ans+=rec((1<<int(root.size()))-1);
	printf("%d\n",ans);
	return 0;
}
/*
If you need some information about Route inspection::
link->https://en.wikipedia.org/wiki/Route_inspection_problem
*/
