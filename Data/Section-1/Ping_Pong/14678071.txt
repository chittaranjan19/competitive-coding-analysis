#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

int main()
{
    long long n;
    scanf("%I64d", &n);
    long long a[n][n], b[n][n];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%I64d", &a[i][j]);
    long long s;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            b[i][j] = 0;
    for (int i = 0; i < n * 2 - 1; i++)
    {
        s = 0;
        if (i < n)
        {
            for (int j = 0; j < i + 1; j++)
                s += a[i - j][j];
            for (int j = 0; j < i + 1; j++)
                b[i - j][j] += s;
        }
        else
        {
            for (int j = 0; j < n * 2 - 1 - i; j++)
                s += a[n - 1 - j][i - n + 1 + j];
            for (int j = 0; j < n * 2 - 1 - i; j++)
                b[n - 1 - j][i - n + 1 + j] += s;
        }
    }
    for (int i = 0; i < n * 2 - 1; i++)
    {
        s = 0;
        if (i < n)
        {
            for (int j = 0; j < i + 1; j++)
                s += a[n - 1 - i + j][j];
            for (int j = 0; j < i + 1; j++)
                b[n - 1 - i + j][j] += s;
        }
        else
        {
            for (int j = 0; j < n * 2 - 1 - i; j++)
                s += a[j][i - n + 1 + j];
            for (int j = 0; j < n * 2 - 1 - i; j++)
                b[j][i - n + 1 + j] += s;
        }
    }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            b[i][j] -= a[i][j];
    int x1 = 0, y1 = 0, x2 = 0, y2 = 1;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if ((i + j) % 2 && b[i][j] > b[x2][y2])
            {
                x2 = i;
                y2 = j;
            }
            else if (!((i + j) % 2) && b[i][j] > b[x1][y1])
            {
                x1 = i;
                y1 = j;
            }
    printf("%I64d\n%d %d %d %d", b[x1][y1] + b[x2][y2], x1 + 1, y1 + 1, x2 + 1, y2 + 1);
    return 0;
}
