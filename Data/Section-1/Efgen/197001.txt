import java.io.*;
import java.util.*;
import java.math.*;

public class Solution {
	static final String FileName = "test";
	

	class Point {
		int x, y;
		public Point(int xx, int yy) {
			x = xx; y = yy;
		}
		public Point (String ss) {
			char[] s = ss.toCharArray();
			x = s[0]-'a'+1;
			y = s[1]-'0';
		}
		boolean ok() {
			return x>0 && y>0 && x<9 && y<9;
		}
		boolean Rkill(Point p) {
			if (p.x==x && p.y==y) return false;
			return (p.x==x || p.y==y); 
		}
		boolean Kkill(Point p) {
			if (p.x==x && p.y==y) return false;
			return Math.abs(p.x-x)<2 && Math.abs(p.y-y)<2;
		}
	}
	void solve() throws IOException {
		Point r1 = new Point(next());
		Point r2 = new Point(next());
		Point k1 = new Point(next());
		Point k2 = new Point(next());
		boolean mat = k2.Rkill(r1) || k2.Rkill(r2);		
		for (int i=-1; i<2; i++)
			for (int j=-1; j<2; j++) {
				Point p = new Point(k2.x+i, k2.y+j);
				if (p.ok()) {
					if (!((p.Rkill(r1) || p.Rkill(r2) || p.Kkill(k1))))
						mat = false;
				}
			}
		if (mat) out.println("CHECKMATE"); else out.println("OTHER");
		
    }

	
    static final int inf = 1000000000+10;
    static final double eps = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }
    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }
    long nextLong() throws IOException {
            return Long.parseLong(next());
    }
    public static void main(String[] args) {        
    	new Solution().run();    
    }    
}