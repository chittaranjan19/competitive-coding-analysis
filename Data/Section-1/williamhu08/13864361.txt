//Let it go
//let it go
//can't hold me back anymore
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define mp make_pair
#define fi first
#define se second

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int MAXN = 50010;

int N, M, K;
vector<int> adj[MAXN];
bool spec[MAXN];
bool vis[MAXN];
int par[MAXN];

vector<int> getpath (int x, int c) {
	vector<int> ans;
	for (; x != c; x = par[x]) {
		ans.push_back(x);
	}
	return ans;
}

vector<vector<int> > ans;

int dfs (int x, int p) {
	if (vis[x]) {
		return 0;
	}
	vis[x] = true;
	vector<int> has;
	if (spec[x]) {
		has.push_back(x);
	}
	par[x] = p;
	for (int t : adj[x]) {
		int res = dfs(t, x);
		if (res) has.push_back(res);
	}
	while (has.size()>1) {
		int a = has.back(); has.pop_back();
		int b = has.back(); has.pop_back();
		vector<int> path = getpath(a,x);
		vector<int> path2 = getpath(b,x);
		path.push_back(x);
		reverse(path2.begin(),path2.end());
		path.insert(path.end(),path2.begin(),path2.end());
		ans.push_back(path);
	}
	return has.size() ? has[0] : 0;
}


int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	scanf("%d %d %d", &N, &M, &K);
	for (int i = 0, a, b; i < M; i++) {
		scanf("%d %d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}

	for (int i = 0, x; i < K; i++) {
		scanf("%d", &x);
		spec[x] = true;
	}

	for (int i = 1; i <= N; i++) {
		if (!vis[i]) {
			dfs(i, 0);
		}
	}

	/*
	IT'S TIME TO SEE WHAT I CAN DO
	TO TEST THE LIMITS AND BREAKTHROUGH
	NO RIGHT, NO WRONG, NO RULES FOR ME
	I'M FREE!!!!!!
	*/
	printf("%d\n",ans.size());
	for (auto &v : ans) {
		printf("%lu ", v.size() - 1);
		for (int x : v) {
			printf("%d ", x);
		}
		puts("");
	}
}
