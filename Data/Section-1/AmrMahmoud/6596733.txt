#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

LL DP2[1005][1005];

int main()
{
    int n,m;
    cin >> n >> m;
    LL DP[n][m];
    int mini = INF_MAX,minx,miny;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            scanf("%I64d",&DP[i][j]);
            DP2[i][j] = DP[i][j];
            if(DP[i][j] < mini)
                minx=i,miny=j,mini=DP[i][j];
        }
    }
    for(int i=0;i<=minx;i++)
    {
        for(int j=0;j<=miny;j++)
        {
            if(i != minx || j != miny)
                DP[i][j]+= max((i != 0? DP[i-1][j]:0) , (j != 0? DP[i][j-1]:0));
        }
    }
    DP[minx][miny] = max((minx != 0? DP[minx-1][miny]:0) , (miny != 0? DP[minx][miny-1]:0));
    for(int i=n-1;i>=minx;i--)
    {
        for(int j=0;j<=miny;j++)
        {
            if(i != minx || j != miny)
                DP2[i][j]+= max((i != n-1? DP2[i+1][j]:0) , (j != 0? DP2[i][j-1]:0));
        }
    }
    DP2[minx][miny] = max((minx != n-1? DP2[minx+1][miny]:0) , (miny != 0? DP2[minx][miny-1]:0));
    for(int i=minx;i<n;i++)
    {
        for(int j=miny;j<m;j++)
        {
            if(i != minx || j != miny)
                DP[i][j]+= max((i != 0? DP[i-1][j]:0) , (j != 0? DP[i][j-1]:0));
        }
    }
    for(int i=minx;i>=0;i--)
    {
        for(int j=miny;j<m;j++)
        {
            if(i != minx || j != miny)
                DP2[i][j]+= max((i != n-1? DP2[i+1][j]:0) , (j != 0? DP2[i][j-1]:0));
        }
    }
    cout << DP[n-1][m-1] + DP2[0][m-1];
    return 0;
}
