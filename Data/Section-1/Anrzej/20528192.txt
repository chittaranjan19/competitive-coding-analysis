#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 3e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_ans(string ans){
	cout << ans;
	exit(0);
}


ll n, m;
double p[128];

double d[128][128];
double tmp[128][128];
double res[128][128];

void fast_mul(){
	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++)
			tmp[i][j] = 0;
	}
	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++){
			for (int k = 0; k < 128; k++){
				tmp[i][j] += res[i][k] * d[k][j];
			}
		}
	}
	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++){
			res[i][j] = tmp[i][j];
		}
	}
}

void fast_mul1(){
	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++)
			tmp[i][j] = 0;
	}
	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++){
			for (int k = 0; k < 128; k++){
				tmp[i][j] += d[i][k] * d[k][j];
			}
		}
	}
	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++){
			d[i][j] = tmp[i][j];

		}
	}
}

double get_ans(long b){

	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++)
			res[i][j] = 0, tmp[i][j] = 0;
		res[i][i] = 1.0;
	}

	while (b > 0){
		if (b % 2)
			fast_mul();
		b >>= 1;
		fast_mul1();

	}

	return 1 - res[0][0];
}


int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	cin >> n >> m;
	for (int i = 0; i < 128; i++) p[i] = 0;
	for (int i = 0; i < m + 1; i++){
		cin >> p[i];
	}

	for (int i = 0; i < 128; i++){
		for (int j = 0; j < 128; j++)
			d[i][j] = p[j ^ i];
	}


	printf("%.7f", get_ans(n));

	return 0;
}
