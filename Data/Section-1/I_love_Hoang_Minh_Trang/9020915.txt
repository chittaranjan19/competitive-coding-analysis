uses    math;
const   fi      ='';
        fo      ='';
        maxN    =trunc(1e5);

type    arr1    =array[1..maxN] of int64;

var     n,r,avg :int64;
        a,b     :arr1;
        suma    :int64;

procedure hv(var a, b:int64);
var     tg      :int64;
begin
        tg:=a;a:=b;b:=tg;
end;

procedure QS(l,r:longint);
var     i, j, x :longint;
begin
        i:=l;j:=r;x:=b[(i+j) shr 1];
        repeat
                while b[i]<x do inc(i);
                while b[j]>x do dec(j);
                if i<=j then
                        begin
                                hv(b[i],b[j]);
                                hv(a[i],a[j]);
                                inc(i);
                                dec(j);
                        end;
        until i>j;
        if l<j then QS(l,j);
        if i<r then QS(i,r);
end;

procedure xuly;
var     i, j    :longint;
        re :int64;
        ans     :int64;
        tmp     :int64;
begin
        re:=n*avg-suma;
        i:=1;
        ans:=0;
        QS(1,n);
        while re>0 do
                begin
                        tmp:=min(r-a[i],re);
                        ans:=ans+tmp*b[i];
                        a[i]:=a[i]+tmp;
                        if a[i]=r then inc(i);
                        re:=re-tmp;
                end;
        writeln(ans);
end;

procedure run;
var     i :longint;

begin
        assign(input,fi);assign(output,fo);
        reset(input);rewrite(output);
        readln(n,r,avg);
        suma:=0;
        for i:=1 to n do
                begin
                        readln(a[i],b[i]);
                        suma:=suma+a[i];
                end;
        if suma/n>=avg then writeln(0)
        else
        xuly;
        close(input);close(output);
end;

begin
        run;
end.