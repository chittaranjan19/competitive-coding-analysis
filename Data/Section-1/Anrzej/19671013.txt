#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 1e6 + 10, lg = 20, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}

int n, q;
int a[N], t[N * 4];
int prx[N];
map<int, int> last;

void update(int v, int tl, int tr, int p, int vl){
	if (tl > tr) return;
	if (tl == tr)
		t[v] = vl;
	else{
		int m = (tl + tr) >> 1;
		if (m >= p)
			update(v * 2, tl, m, p, vl);
		else
			update(v * 2 + 1, m + 1, tr, p, vl);
		t[v] = t[v * 2] ^ t[v * 2 + 1];
	}
}

int _xor(int v, int tl, int tr, int l, int r){
	if (tl >= l && tr <= r)
		return t[v];
	if (l > tr || r < tl)
		return 0;
	int m = (tl + tr) >> 1;
	return _xor(v * 2, tl, m, l, r) ^ _xor(v * 2 + 1, m + 1, tr, l, r);
}

pair<pair<int, int>, int> qq[N];
int ans[N];

int main()
{
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++)
		prx[i] = prx[i - 1] ^ a[i];
	cin >> q;
	for (int i = 1; i <= q; i++){
		int l, r;
		cin >> l >> r;
		qq[i] = mp(mp(r, l), i);
	}
	sort(qq+1, qq + q+1);

	int cur = 0;
	for (int i = 1; i <= q; i++){
		int l = qq[i].fs.sc, r = qq[i].fs.fs;
		while (cur < r){
			cur++;
			int vl = a[cur];
			if (last.count(vl) == 0){
				last[vl] = cur;
				update(1, 1, n, cur, vl);
			}
			else{
				int prv = last[vl];
				update(1, 1, n, prv, 0);
				update(1, 1, n, cur, vl);
				last[vl] = cur;
			}
		}
		int tans = prx[r] ^ prx[l - 1];
		tans ^= _xor(1, 1, n, l, r);
		ans[qq[i].sc] = tans;
	}
	for (int i = 1; i <= q; i++)
		cout << ans[i] << '\n';
	return 0;
}