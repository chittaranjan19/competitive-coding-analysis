#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 200010;

int n, arr[maxn], ind[2];
vector<int> prob;
int hold;

int checkp(int k, int num)
{
	if(k==0 || k==n)
		return 1;
	if(k&1){
		if(arr[k]<num)
			return 1;
		return 0;
	}
	else{
		if(arr[k]>num)
			return 1;
		return 0;
	}
}

int checkn(int k, int num)
{
	if(k==0 || k==n)
		return 1;
	if(k&1){
		if(num<arr[k+1])
			return 1;
		return 0;
	}
	else{
		if(num>arr[k+1])
			return 1;
		return 0;
	}
}

int valid(int k)
{
	if(k==0 || k==n)
		return 1;
	if(k&1){
		if(arr[k]<arr[k+1])
			return 1;
		return 0;
	}
	else{
		if(arr[k]>arr[k+1])
			return 1;
		return 0;
	}
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, k, p, prev;
	ll ans = 0;
	sd(n);
	for(i=1; i<=n; i++)
		sd(arr[i]);
	for(i=1; i<n; i++){
		if(i&1){
			if(!(arr[i]<arr[i+1])){
				ind[0] = i;
				ind[1] = i+1;
				break;
			}
		}
		else{
			if(!(arr[i]>arr[i+1])){
				ind[0] = i;
				ind[1] = i+1;
				break;
			}
		}
	}
	for(i=1; i<n; i++){
		if(i&1){
			if(!(arr[i]<arr[i+1]))
				prob.pb(i);
		}
		else{
			if(!(arr[i]>arr[i+1]))
				prob.pb(i);
		}
	}
	for(i=0; i<2; i++){
		prev = ind[i];
		for(j=1; j<=n; j++){
			if(j==prev)
				continue;
			if(j==prev-1){
				swap(arr[j], arr[prev]);
				if(valid(prev-1) && valid(prev)){
					p = 1;
					for(k=0; k<prob.size(); k++){
						if(prob[k]==prev-1 || prob[k]==prev)
							continue;
						p = 0;
						break;
					}
					ans+=p;
				}
				swap(arr[j], arr[prev]);
			}
			else if(j==prev+1){
				swap(arr[j], arr[prev]);
				if(valid(prev+1) && valid(prev)){
					p = 1;
					for(k=0; k<prob.size(); k++){
						if(prob[k]==prev+1 || prob[k]==prev)
							continue;
						p = 0;
						break;
					}
					ans+=p;
				}
				swap(arr[j], arr[prev]);
			}
			else{
				if(checkp(prev-1, arr[j]) && checkp(j-1, arr[prev]) && checkn(prev, arr[j]) && checkn(j, arr[prev])){
					p = 1;
					for(k=0; k<prob.size(); k++){
						if(prob[k]==prev-1 || prob[k]==prev || prob[k]==j-1 || prob[k]==j)
							continue;
						p = 0;
						break;
					}
					ans+=p;
				}
			}
		}
	}
	swap(arr[ind[0]], arr[ind[1]]);
	p = 1;
	for(i=1; i<n; i++){
		if(i&1){
			if(!(arr[i]<arr[i+1]))
				p = 0;
		}
		else{
			if(!(arr[i]>arr[i+1]))
				p = 0;
		}
	}
	ans-=p;
	printf("%lld\n", ans);
	return 0;
}
