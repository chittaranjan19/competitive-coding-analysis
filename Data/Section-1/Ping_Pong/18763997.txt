#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

#define ll long long
#define ld long double

using namespace std;

const int inf = (int)2 * 1e8;
const int MOD = (int)1e9 + 7;
const int P = 239;
const int MAX_N = 500000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

int gcd(int a, int b)
{
    while (a > 0)
    {
        int c = a;
        a = b % a;
        b = c;
    }
    return b;
}

vector<int> tree;
int cnt_ver = 1;

void build(vector<int> a)
{
    int n = a.size();
    while (cnt_ver < n)
        cnt_ver <<= 1;
    tree.resize(cnt_ver * 2 - 1);
    for (int i = 0; i < n; i++)
        tree[cnt_ver - 1 + i] = a[i];
    for (int i = cnt_ver - 2; i >= 0; i--)
        tree[i] = gcd(tree[i * 2 + 1], tree[i * 2 + 2]);
}

int ans(int x, int lx, int rx, int l, int r)
{
    if (l > rx || r < lx)
        return -1;
    else if (lx >= l && rx <= r)
        return tree[x];
    else
    {
        int x1 = ans(x * 2 + 1, lx, (lx + rx) / 2, l, r);
        int x2 = ans(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r);
        if (x1 == -1)
            return x2;
        else if (x2 == -1)
            return x1;
        else
            return gcd(x1, x2);
    }
}

vector<vector<int> > F;

void buildF(vector<pair<int, int> > b)
{
    int n = b.size();
    F.resize(n);
    for (int i = 0; i < n; i++)
        for (int x = b[i].second; x < n; x = x | (x + 1))
            F[x].push_back(b[i].first);
}

int get_cnt(int x, int val)
{
    int t1, t2;
    int l, r, mid;
    l = -1, r = F[x].size();
    while (r - l > 1)
    {
        mid = (l + r) / 2;
        if (val >= F[x][mid])
            l = mid;
        else
            r = mid;
    }
    t1 = l;
    l = -1, r = F[x].size();
    while (r - l > 1)
    {
        mid = (l + r) / 2;
        if (val > F[x][mid])
            l = mid;
        else
            r = mid;
    }
    t2 = r;
    return t1 - t2 + 1;
}

int ans(int x, int val)
{
    int cnt = 0;
    for (; x >= 0; x = (x & (x + 1)) - 1)
        cnt += get_cnt(x, val);
    return cnt;
}

int main()
{
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    int n;
    scanf("%d", &n);
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    build(a);
    vector<pair<int, int> > b(n);
    for (int i = 0; i < n; i++)
        b[i] = make_pair(a[i], i);
    sort(b.begin(), b.end());
    buildF(b);
    int q;
    cin >> q;
    for (int i = 0; i < q; i++)
    {
        int l, r;
        scanf("%d %d", &l, &r);
        int g = ans(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + l - 1, cnt_ver - 1 + r - 1);
        printf("%d\n", (r - l + 1) - (ans(r - 1, g) - ans(l - 2, g)));
    }
    return 0;
}
