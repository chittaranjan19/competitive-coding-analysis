//Cok tavsanin pesinde kosan hicbrini yakalmaz!
#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss seconds]
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int n,m,P[MAXN][28],lgN=18,lvl[MAXN],dis[MAXN];
vector<int>adj[MAXN],r;
void dfs(int nd,int pr){
	P[nd][0]=pr;lvl[nd]=lvl[pr]+1;
	tr(v,adj[nd])
		if(*v!=pr) dfs(*v,nd);
}
void build(){
	for(int i=1;i<lgN;i++)
		for(int j=1;j<=n;j++)
			if(P[i][j-1]!=-1)
				P[i][j]=P[P[i][j-1]][j-1];
}
int LCA(int x,int y){
	if(lvl[x]<lvl[y])
		swap(x,y);
	for(int i=lgN;i>=0;i--)
		if(lvl[x]-(1<<i)>=lvl[y])
			x=P[x][i];
	if(x==y)	
		return x;
	for(int i=lgN;i>=0;i--)
		if(P[x][i]!=-1 and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];			
	return P[x][0];
}
int dist(int x,int y){
	int z=LCA(x,y);	
	return (lvl[x]-lvl[z])+(lvl[y]-lvl[z]);
}
void bfs(){
	queue<int>q;
	for(int i=0;i<r.size();i++)
		dis[r[i]]=0,q.push(r[i]);
	r.resize(0);	
	while(!q.empty()){
		int nd=q.front();
		q.pop();
		tr(to,adj[nd])
			if(dis[*to]>dis[nd]+1)
				dis[*to]=dis[nd]+1,q.push(*to);
	}
}
int main(){
	memset(P,-1,sizeof(P));
	for(int i=1;i<MAXN;i++)
		dis[i]=INF;
	cin>>n>>m;
	int u,v,counter=0;
	for(int i=0;i<n-1;i++){
		scanf("%d%d",&u,&v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1,0);
	build();
	int sqm=311;
	r.pb(1);
	while(m--){
		int type,v;
		scanf("%d%d",&type,&v);
		if(type==1)
			r.pb(v);
		else{
			int ans=dis[v];
			for(int i=0;i<r.size();i++)
				umin(ans,dist(r[i],v));
			printf("%d\n",ans);	
		}				
		counter++;
		if(counter%sqm==0)
			bfs(),counter=0;	
	}
	return 0;
}
