import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.util.StringTokenizer;


public class problem
{

     static BigDecimal areaOfIntersection(int x0, int y0, double r0, int x1, int y1, double r1)
    {
         BigDecimal rr0 = new BigDecimal(r0 * 1.0 * r0);
         BigDecimal rr1 = new BigDecimal(r1 * 1.0 * r1);
         double d = Math.sqrt((x1 - x0) * 1L * (x1 - x0) + (y1 - y0) * 1L * (y1 - y0));
         BigDecimal phi = rr0.add(new BigDecimal(d * d)).subtract(rr1);
         BigDecimal tmp = new BigDecimal(r0).multiply(new BigDecimal(d * 2.0));
         phi = new BigDecimal(phi.doubleValue() / tmp.doubleValue());
         phi = new BigDecimal(Math.acos(phi.doubleValue()) * 2.0);
         BigDecimal theta = rr1.add(new BigDecimal(d * d)).subtract(rr0);
         tmp = new BigDecimal(r1).multiply(new BigDecimal(d * 2.0));
         theta = new BigDecimal(theta.doubleValue() / tmp.doubleValue());
         theta = new BigDecimal(Math.acos(theta.doubleValue()) * 2.0);
         BigDecimal area1 = rr1.multiply(new BigDecimal(0.5));
         tmp = theta.subtract(new BigDecimal(Math.sin(theta.doubleValue())));
         area1 = area1.multiply(tmp);
         BigDecimal area2 = rr0.multiply(new BigDecimal(0.5));
         tmp = phi.subtract(new BigDecimal(Math.sin(phi.doubleValue())));
         area2 = area2.multiply(tmp);
       return area1.add(area2);
    }
    public static void main(String Args[]) throws Exception
    {
        InputReader in = new InputReader(System.in);
        int x, y, r;
          int xx, yy, rr;
          x = in.nextInt();
          y = in.nextInt();
          r = in.nextInt();
          xx = in.nextInt();
          yy = in.nextInt();
          rr = in.nextInt();
          if(r > rr)
          {
              int tmp = r;
              r = rr;
              rr = tmp;
              tmp = x;
              x = xx;
              xx = tmp;
              tmp = y;
              y = yy;
              yy = tmp;
          }
          if((x - xx) * 1L * (x - xx) + (y - yy) * 1L * (y - yy) >= (r + rr) * 1L * (rr + r))
          {
            System.out.println("0.00000000");
            return ;
          }
          BigDecimal pi = new BigDecimal("3.14159265358979323846264338327950288419716939937510582097494459230781640");
          if(x == xx && y == yy && r == rr)
          {
            BigDecimal tmp = new BigDecimal(r);
            tmp = tmp.multiply(tmp);
            tmp = tmp.multiply(pi);
            System.out.format("%.15f", tmp);
          }
          else if((x - xx) * 1L * (x - xx) + (y - yy) * 1L * (y - yy) <= (rr - r) * 1L * (rr - r))
          {
            BigDecimal tmp = new BigDecimal(r);
            tmp = tmp.multiply(tmp);
            tmp = tmp.multiply(pi);
            System.out.format("%.15f", tmp);
          }
          else 
              System.out.format("%.15f", areaOfIntersection(x, y, r, xx, yy, rr));
    //  in.close();
    }

    static class InputReader {
        private BufferedReader reader;
        private StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream));
            tokenizer = null;
        }

        public InputReader(FileReader stream) {
            reader = new BufferedReader(stream);
            tokenizer = null;
        }

        public String nextLine() {
            try {
                return reader.readLine();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}