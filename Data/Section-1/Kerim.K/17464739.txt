#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int>PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int ata[MAXN],n,m,k,w,c=0,online;
pair<int,PII>edge[MAXN];
struct matris{
	char m[11][11];
	int dif(matris f,int x,int y){
		int mx=0;
		for(int i=1;i<=x;i++)
			for(int j=1;j<=y;j++)
				if(m[i][j]!=f.m[i][j])
					mx++;
		return mx;			
	}
}arr[1009];
void process(){
	online=k;
	for(int i=1;i<=k;i++)
		ata[i]=i;
	sort(edge+1,edge+c+1);	
}
int get(int x){
	if(ata[x]==x)
		return x;
	return ata[x]=get(ata[x]);	
}
void merge(int x,int y){
	y=get(y);x=get(x);
	online--;ata[y]=x;		
}
set<int>s;
int main(){
	scanf("%d%d%d%d",&n,&m,&k,&w);
	for(int i=1;i<=k;i++){
		for(int j=1;j<=n;j++)
			for(int h=1;h<=m;h++)
				scanf(" %c",&arr[i].m[j][h]);
	}
	for(int i=1;i<=k;i++)
		for(int j=i+1;j<=k;j++)
				edge[++c]=mp(arr[i].dif(arr[j],n,m)*w,mp(i,j)),cout<<i<<"-"<<j<<" "<<edge[c].ff<<endl;
				wr
	process();int ans=0;	
	vector<PII>vec;vec.pb(mp(1,0)),s.insert(1);
	queue<PII>q;
	for(int i=1;i<=c and online>1;i++){
		queue<PII>nw;
		while(!q.empty()){
			int u=q.front().ff,v=q.front().ss;
			q.pop();
			if(s.count(u) and !s.count(v))	
				vec.pb(mp(v,u)),s.insert(v);
			else if(s.count(v) and !s.count(u))
				vec.pb(mp(u,v)),s.insert(u);
			else
				nw.push(mp(u,v));	
		}
		while(!nw.empty()){
			q.push(nw.front());
			nw.pop();
		}
		int w=edge[i].ff;
		int u=edge[i].ss.ff;
		int v=edge[i].ss.ss;
		if(get(u)==get(v) or w>n*m)
			continue;	
		if(s.count(u) and !s.count(v))	
				vec.pb(mp(v,u)),s.insert(v);
		else if(s.count(v) and !s.count(u))
			vec.pb(mp(u,v)),s.insert(u);
		else
			q.push(mp(u,v));		
		ans+=w;merge(u,v);
	}
	while(!q.empty()){
		int u=q.front().ff,v=q.front().ss;
		q.pop();
		if(s.count(u) and !s.count(v))	
			vec.pb(mp(v,u)),s.insert(v);
		else if(s.count(v) and !s.count(u))
			vec.pb(mp(u,v)),s.insert(u);
	}
	while(online>=1)
		ans+=m*n,online--;
	for(int i=1;i<=k;i++)	
		if(!s.count(i))
			vec.pb(mp(i,0));
	printf("%d\n",ans);
	for(int i=0;i<vec.size();i++)
		printf("%d %d\n",vec[i].ff,vec[i].ss);
	return 0;
}
//LooK aT mY COde ONlinE +_+
