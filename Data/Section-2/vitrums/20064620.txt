
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;

public class B_OptimalPointOnLine {
	private final boolean isDebug;
	
	private int n;
	private int[] x;
	
	public B_OptimalPointOnLine(boolean isDebug) {
		this.isDebug = isDebug;
	}
	
	public void readInput() {
		Scanner sc = null;
		if (isDebug) {
			try {
				sc = new Scanner(new FileInputStream("src\\x0005_educational_codeforces_round_16\\B_input1.txt"));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			sc =  new Scanner(System.in);
		}
		
		n = sc.nextInt();
		x = new int[n];
		for (int i = 0; i < n; ++i) {
			x[i] = sc.nextInt();
		}
		
		if (isDebug) {
			System.out.format("n=%d%n", n);
			for (int i = 0; i < n; ++i) {
				System.out.format("%d ", x[i]);
			}
			System.out.println();
		}
	}
	
	public void solve() {
		Arrays.sort(x);
		
		if (n == 1 || n == 2) {
			System.out.println(x[0]);
			return;
		}
		
		long L = 0, R = 0;
		for (int i = 1; i < n; ++i) {
			R += x[i] - x[0];
		}
		
		L = 0;
//		L = x[1] - x[0];
//		R = R - (n - 1) * (x[1] - x[0]);
//		long min = L + R;
		long min = R;
		int m_min = 0;
		int m;
		for (m = 0; m < n - 1; ++m) {
			L += (m + 1) * (x[m + 1] - x[m]);
			R -= (n - m - 1) * (x[m + 1] - x[m]);
//			if (min <= L + R && x[m + 1] > x[m]) {
//				break;
//			} else {
//				min = L + R;
//			}
			if (L + R < min) {
				min = L + R;
				m_min = m + 1;
			}
		}
		
		System.out.println(x[m_min]);
	}
	
	private void solve1() {
		Arrays.sort(x);
		
		if (n == 1 || n == 2) {
			System.out.println(x[0]);
			return;
		}
		
		System.out.println(x[n/2 - (n + 1) % 2]);
	}
	
	public static void main(String[] args) {
		B_OptimalPointOnLine solver = new B_OptimalPointOnLine(false);
		solver.readInput();
		solver.solve1();
	}
}
