#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAXN = 200000 + 2;
const int MAXM = 100 + 1;

char s[MAXN];
int n, m, k;

struct segtree
{
    int node[MAXN << 2];
    short lazy[MAXN << 2];

    void modify(int rt, int c, int len)
    {
        lazy[rt] = c;
        node[rt] = c * len;
    }

    void pushup(int rt)
    {
        node[rt] = node[rt << 1] + node[rt << 1 | 1];
    }

    void pushdown(int rt, int l, int r)
    {
        if(~lazy[rt])
        {
            int m = (l + r) >> 1;
            modify(rt << 1, lazy[rt], m - l + 1);
            modify(rt << 1 | 1, lazy[rt], r - m);
            lazy[rt] = -1;
        }
    }

    void build(int rt, int l, int r)
    {
        node[rt] = 0;
        lazy[rt] = -1;
        if(l == r) return;
        int m = (l + r) >> 1;
        build(rt << 1, l, m);
        build(rt << 1 | 1, m + 1, r);
    }

    void update(int rt, int l, int r, int x, int y, int c)
    {
        if(x <= l && r <= y)
        {
            modify(rt, c, r - l + 1);
            return;
        }
        pushdown(rt, l, r);
        int m = (l + r) >> 1;
        if(x <= m)
        {
            update(rt << 1, l, m, x, y, c);
        }
        if(m < y)
        {
            update(rt << 1 | 1, m + 1, r, x, y, c);
        }
        pushup(rt);
    }

    int query(int rt, int l, int r, int x, int y)
    {
        if(x <= l && r <= y) return node[rt];
        pushdown(rt, l, r);
        int m = (l + r) >> 1, res = 0;
        if(x <= m)
        {
            res = max(res, query(rt << 1, l, m, x, y));
        }
        if(m < y)
        {
            res = max(res, query(rt << 1 | 1, m + 1, r, x, y));
        }
        return res;
    }
} tree[MAXM];

int myhash(int x, int y)
{
    return x * k + y;
}

int main()
{
    while(~scanf("%d%d%d", &n, &m, &k))
    {
        scanf("%s", s);
        int t = MAXM - 1;
        for(int i = 0; i < k; ++i)
        {
            for(int j = 0; j < k; ++j)
            {
                tree[myhash(i, j)].build(1, 1, n);
            }
        }
        tree[t].build(1, 1, n);
        for(int i = 0; i < n; ++i)
        {
            tree[t].update(1, 1, n, i + 1, i + 1, s[i] - 'a');
            if(i < n - 1)
            {
                tree[myhash(s[i] - 'a', s[i + 1] - 'a')].update(1, 1, n, i + 1, i + 1, 1);
            }
        }
//            for(int i = 1; i <= n; ++i)
//            {
//                printf("%c", tree[t].query(1, 1, n, i, i) + 'a');
//            }
//            puts("");
//                        for(int i = 0; i < k; ++i)
//                {
//                    for(int j = 0; j < k; ++j)
//                    {
//                        int tmp = tree[myhash(i, j)].query(1, 1, n, 1, n);
//                        if(tmp > 0)
//                        {
//                            cout << char('a' + i) << ' ' << char('a' + j) << ' ' << tmp << endl;
//                        }
//                    }
//                }
        while(m--)
        {
            int op;
            scanf("%d", &op);
            if(op == 1)
            {
                int l, r;
                scanf("%d%d%s", &l, &r, s);
                tree[t].update(1, 1, n, l, r, *s - 'a');
                for(int i = 0; i < k; ++i)
                {
                    for(int j = 0; j < k; ++j)
                    {
                        tree[myhash(i, j)].update(1, 1, n, max(1, l - 1), r, 0);
                    }
                }
                int tmp;
                if(l > 1)
                {
                    tmp = tree[t].query(1, 1, n, l - 1, l - 1);
                    tree[myhash(tmp, *s - 'a')].update(1, 1, n, l - 1, l - 1, 1);
                }
                if(r < n)
                {
                    tmp = tree[t].query(1, 1, n, r + 1, r + 1);
                    tree[myhash(*s - 'a', tmp)].update(1, 1, n, r, r, 1);
                }
//                for(int i = 0; i < k; ++i)
//                {
//                    for(int j = 0; j < k; ++j)
//                    {
//                        int tmp = tree[myhash(i, j)].query(1, 1, n, 1, n);
//                        if(tmp > 0)
//                        {
//                            cout << char('a' + i) << ' ' << char('a' + j) << ' ' << tmp << endl;
//                        }
//                    }
//                }
            }
            else
            {
                scanf("%s", s);
                int ans = n;
                for(int i = 0; i < k - 1; ++i)
                {
                    for(int j = i + 1; j < k; ++j)
                    {
                        ans -= tree[myhash(s[i] - 'a', s[j] - 'a')].query(1, 1, n, 1, n);
//                        cout << ans << endl;
                    }
                }
                printf("%d\n", ans);
            }
//            for(int i = 1; i <= n; ++i)
//            {
//                printf("%c", tree[t].query(1, 1, n, i, i) + 'a');
//            }
//            puts("");
        }
    }
    return 0;
}
