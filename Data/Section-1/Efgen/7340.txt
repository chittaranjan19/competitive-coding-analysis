import java.io.*;         
import java.util.*;         
import java.math.*;         
import java.util.regex.*;
public class Main implements Runnable  {
StreamTokenizer ST;      
PrintWriter out;      
BufferedReader br;
Scanner in;
int inf = 1000000000;
class Point {
    int x, y;
    public Point(int xx, int yy) {
        x = xx; y = yy;
    }
                          
}

int nextInt() throws IOException{      
    ST.nextToken();      
    return (int)ST.nval;      
}

long nextLong() throws IOException{      
    ST.nextToken();      
    return (long)ST.nval;      
}      
String next() throws IOException{      
    ST.nextToken();      
    return ST.sval;      
}      
double nextD() throws IOException{      
    ST.nextToken();      
    return ST.nval;      
}      
public static void main(String[] args) throws IOException {       
    new Thread(new Main()).start();      
}

public void run()  {      
    try {          
        //br = new BufferedReader(new InputStreamReader(System.in));
        br = new BufferedReader(new InputStreamReader(System.in, "ISO-8859-1"));
        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out, "ISO-8859-1")));
        in = new Scanner(br);
        ST = new StreamTokenizer(br);      
        solve();      
        out.close();
        br.close();            
    }         
    catch (IOException e) {        
        throw new IllegalStateException(e);       
    }      
}

public void solve() throws IOException {
    int n = Integer.parseInt(br.readLine());
    int max = -inf;
    String res = "";
    HashMap<String, Vector<Point>> map = new HashMap<String, Vector<Point>>();
    for (int t=0; t<n; t++) {
        String[] ss = br.readLine().trim().split(" ");
        String name = ss[0];
        int x = Integer.parseInt(ss[1]);
        if (!map.containsKey(name)) map.put(name, new Vector<Point>());
        map.get(name).add(new Point(t, x));     
        
    }
    
    for (String s:map.keySet()) {
        int val = 0;
        for (Point p:map.get(s)) {
            val += p.y;
        }
        if (val>max) max = val;
    }
    int bt = inf;
    for (String s:map.keySet()) {
        int val = 0;
        for (Point p:map.get(s)) {
            val += p.y;
            if (val>=max && p.x<bt) {
                bt = p.x;
                res = s;
            }
        }
    }
    out.println(res);
    

        
}
}






 



