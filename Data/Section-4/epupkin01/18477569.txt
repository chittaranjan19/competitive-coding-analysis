#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

const int S = 1000000, L = 21;
const char t[3] = {'i', 'g', 'r'};
Pair heap[S];
int n;

int main()
{
    mSet st;
    msIter it;
    char temp[L];
    int i, j, a, nh = 0;
    
    cin >> n;
    for (i = 0; i < n; ++i)
    {
        scanf("%s", temp);
        for (j = 0; j < 3 && temp[0] != t[j]; ++j);
        
        switch (j)
        {
            case 0:
                scanf("%d", &a);
                st.insert(a);
                heap[nh++] = Pair(0, a);
                break;
            case 1:
                scanf("%d", &a);
                if (st.empty())
                {
                    st.insert(a);
                    heap[nh++] = Pair(0, a);
                    heap[nh++] = Pair(1, a);
                }
                else
                {
                    it = st.begin();
                    while (!st.empty() && *it < a)
                    {
                        it = st.erase(st.begin());
                        heap[nh++] = Pair(2, 0);
                    }
                    if (st.empty() || *it != a)
                    {
                        st.insert(a);
                        heap[nh++] = Pair(0, a);
                        heap[nh++] = Pair(1, a);
                    }
                    else
                        heap[nh++] = Pair(1, a);
                }
                break;
            case 2:
                if (st.empty())
                {
                    heap[nh++] = Pair(0, 0);
                    heap[nh++] = Pair(2, 0);
                }
                else
                {
                    st.erase(st.begin());
                    heap[nh++] = Pair(2, 0);
                }
                break;
        }
    }
    
    cout << nh << '\n';
    for (int i = 0; i < nh; ++i)
    {
        switch (heap[i].first)
        {
            case 0: printf("insert %d\n", heap[i].second); break;
            case 1: printf("getMin %d\n", heap[i].second); break;
            case 2: printf("removeMin\n"); break;
        }
    }
    return 0;
}