#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <set>

#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;

const int N = 200 * 1000 + 100;
const int oo = 1e9;
piii q[N];
int n;
char ch[6];

vector <int> xi;
set <int> s[N];
set<int>::iterator it;
int seg[4 * N];

vector <piii> vec;

void update(int v, int s, int e, int p, int val){
	if(p < s || e <= p) return;
	if(e - s == 1){
		seg[v] = val;
		return;
	}
	int mid = (s + e) / 2;
	update(2 * v + 0, s, mid, p, val);
	update(2 * v + 1, mid, e, p, val);
	seg[v] = max(seg[2 * v + 0], seg[2 * v + 1]);
}

void ask(int v, int s, int e, int l, int r){
	if(r <= s || e <= l) return;
	if(l <= s && e <= r) return vec.PB(MP(MP(s, e), v));
	int mid = (s + e) / 2;
	ask(2 * v + 0, s, mid, l, r);
	ask(2 * v + 1, mid, e, l, r);
}

int bsearch(int v, int s, int e, int val){
	if(e - s == 1)
		return s;
	int mid = (s + e) / 2;
	if(seg[2 * v + 0] > val)
		return bsearch(2 * v + 0, s, mid, val);
	return bsearch(2 * v + 1, mid, e, val);
}

int main(){
	scanf("%d", &n);
	for(int i = 0; i < n; ++i){
		int x, y;
		scanf("%6s%d%d", ch, &x, &y);
		q[i].X = MP(x, y);
		if(ch[0] == 'f')
			q[i].Y = 1;
		else if(ch[0] == 'r')
			q[i].Y = 2;
		xi.PB(x);
	}
	sort(xi.begin(), xi.end());
	xi.resize(unique(xi.begin(), xi.end()) - xi.begin());
	for(int i = 0; i < SZ(xi); ++i){
		s[i].insert(oo);
		update(1, 0, SZ(xi), i, -oo);
	}
	for(int i = 0; i < n; ++i){
		int x = lower_bound(xi.begin(), xi.end(), q[i].X.X) - xi.begin();
		if(q[i].Y == 0){
			s[x].insert(-q[i].X.Y);
			update(1, 0, SZ(xi), x,  -(*s[x].begin()));
		}
		else if(q[i].Y == 2){
			s[x].erase(-q[i].X.Y);	
			update(1, 0, SZ(xi), x,  -(*s[x].begin()));
		}
		else{
			/*int down = x + 1, up = SZ(xi);
			int mx;
			while(up - down > 1){
				int mid = (up + down) / 2;
				mx = ask(1, 0, SZ(xi), x + 1, mid);
				if(mx <= q[i].X.Y)
					down = mid;
				else
					up = mid;
			}
			*/
			vec.clear();
			int p = -1;
			ask(1, 0, SZ(xi), x + 1, SZ(xi));
			for(int j = 0; j < SZ(vec); ++j){
				if(seg[vec[j].Y] > q[i].X.Y){
					p = bsearch(vec[j].Y, vec[j].X.X, vec[j].X.Y, q[i].X.Y);
					break;
				}
			}
			if(p == -1){
				printf("-1\n");
				continue;
			}
			it = s[p].lower_bound(-q[i].X.Y);
			if(it != s[p].begin())
				it --;
			int y = -(*it);
			if(y > q[i].X.Y)
				printf("%d %d\n", xi[p], y);
			else
				printf("-1\n");
		}
	}
	return 0;
}
