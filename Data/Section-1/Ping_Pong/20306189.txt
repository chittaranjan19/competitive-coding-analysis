#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e9;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;
const ll P = 239;

vector<int> p;
vector<int> h;
vector<int> d;

void build(int n)
{
    p.resize(n);
    for (int i = 0; i < n; i++)
        p[i] = i;
    h.resize(n, 0);
    d.resize(n, 0);
}

int get_p(int x)
{
    if (p[x] == x)
        return x;
    else
        return get_p(p[x]);
}

bool union_s(int x, int y)
{
    x = get_p(x);
    y = get_p(y);
    if (x == y)
        return false;
    if (h[x] > h[y])
    {
        p[y] = x;
        d[x] = max(d[x], max(d[y], h[x] + h[y] + 1));
    }
    else if (h[x] == h[y])
    {
        p[y] = x;
        d[x] = max(d[x], max(d[y], h[x] + h[y] + 1));
        h[x]++;
    }
    else
    {
        p[x] = y;
        d[y] = max(d[y], max(d[x], h[y] + h[x] + 1));
    }
    return true;
}

vector<vector<int> > g;
vector<bool> used;
vector<int> sz, sz1;
vector<int> ver;

int dfs(int u)
{
    used[u] = true;
    ver.push_back(u);
    sz[u] = 0;
    for (int v : g[u])
        if (!used[v])
            sz[u] = max(sz[u], dfs(v) + 1);
    return sz[u];
}

void dfs1(int u, int par, int h)
{
    sz1[u] = max(sz[u], h);
    int cnt = g[u].size();
    vector<int> pref(cnt + 1), suff(cnt + 1);
    pref[0] = 0;
    for (int i = 0; i < cnt; i++)
        if (g[u][i] != par)
            pref[i + 1] = max(pref[i], sz[g[u][i]] + 1);
        else
            pref[i + 1] = max(pref[i], h);
    suff[cnt] = 0;
    for (int i = cnt - 1; i >= 0; i--)
        if (g[u][i] != par)
            suff[i] = max(suff[i + 1], sz[g[u][i]] + 1);
        else
            suff[i] = max(suff[i + 1], h);
    for (int i = 0; i < cnt; i++)
        if (g[u][i] != par)
            dfs1(g[u][i], u, max(pref[i], suff[i + 1]) + 1);
}

int dfs2(int u, int par)
{
    int res = 0;
    for (int v : g[u])
        if (v != par)
            res = max(res, dfs2(v, u) + 1);
    return res;
}

void make_center(int n)
{
    used.resize(n, false);
    sz.resize(n, 0);
    sz1.resize(n, 0);
    for (int i = 0; i < n; i++)
        if (!used[i])
        {
            ver.clear();
            dfs(i);
            dfs1(i, -1, 0);
            int x = ver[0];
            for (int u : ver)
                if (sz1[u] < sz1[x])
                    x = u;
            int m1 = 0, m2 = 0;
            for (int v : g[x])
            {
                int r = dfs2(v, x) + 1;
                if (r > m1)
                {
                    m2 = m1;
                    m1 = r;
                }
                else if (r > m2)
                {
                    m2 = r;
                }
            }
            for (int v : ver)
                if (v != x)
                    p[v] = x;
            h[x] = sz1[x];
            d[x] = m1 + m2;
        }
}

int main()
{
    //freopen("point.in", "r", stdin);
    //freopen("point.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m, q;
    cin >> n >> m >> q;
    g.resize(n);
    for (int i = 0; i < m; i++)
    {
        int a, b;
        cin >> a >> b;
        g[a - 1].push_back(b - 1);
        g[b - 1].push_back(a - 1);
    }
    build(n);
    make_center(n);
    for (int i = 0; i < q; i++)
    {
        int t;
        cin >> t;
        if (t == 1)
        {
            int x;
            cin >> x;
            cout << d[get_p(x - 1)] << endl;
        }
        else
        {
            int x, y;
            cin >> x >> y;
            union_s(x - 1, y - 1);
        }
    }
    return 0;
}