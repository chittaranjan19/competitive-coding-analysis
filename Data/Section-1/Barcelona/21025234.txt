// This amazing code is by Eric Sunli Chen.
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;
template<typename T> void get_int(T &x)
{
	char t=getchar();
	bool neg=false;
	x=0;
	for(; (t>'9'||t<'0')&&t!='-'; t=getchar());
	if(t=='-')neg=true,t=getchar();
	for(; t<='9'&&t>='0'; t=getchar())x=x*10+t-'0';
	if(neg)x=-x;
}
template<typename T> void print_int(T x)
{
	if(x<0)putchar('-'),x=-x;
	short a[20]= {},sz=0;
	while(x>0)a[sz++]=x%10,x/=10;
	if(sz==0)putchar('0');
	for(int i=sz-1; i>=0; i--)putchar('0'+a[i]);
}
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define get1(a) get_int(a)
#define get2(a,b) get1(a),get1(b)
#define get3(a,b,c) get1(a),get2(b,c)
#define printendl(a) print_int(a),puts("")
typedef long long LL;
typedef unsigned long long uLL;
typedef pair<int,int> pii;
const int inf=0x3f3f3f3f;
const LL Linf=1ll<<61;
const double pi=acos(-1.0);

template<typename T> inline void updmax(T &x,const T y){if(x<y)x=y;}
template<typename T> inline void updmin(T &x,const T y){if(x>y)x=y;}

vector<int> g[5111],c[5111],tp;
int dp[5111][5111],pre[5111][5111];
bool use[5111];
int n,m,t;
void dfs(int x)
{
	use[x]=1;
	for(int i=0;i<(int)g[x].size();i++)
		if(!use[g[x][i]])
			dfs(g[x][i]);
	tp.pb(x);
}
void path(int x,int y)
{
	if(y>1)path(pre[x][y],y-1);
	printf("%d ",x);
}
int main()
{
	memset(dp,-1,sizeof(dp));
	get3(n,m,t);
	for(int i=1,u,v,w;i<=m;i++)
	{
		get3(u,v,w);
		g[u].pb(v);c[u].pb(w);
	}
	dfs(1);
	reverse(tp.begin(),tp.end());
	for(int _=0;_<(int)tp.size();_++)
	{
		int u=tp[_];
		if(u==1)dp[u][1]=0;
		for(int l=1;l<n;l++)
		{
			if(dp[u][l]==-1)continue;
			for(int i=0;i<(int)g[u].size();i++)
			{
				int v=g[u][i];
				if(dp[u][l]+c[u][i]>t)continue;
				if(dp[v][l+1]==-1||dp[v][l+1]>dp[u][l]+c[u][i])
				{
					dp[v][l+1]=dp[u][l]+c[u][i];
					pre[v][l+1]=u;
				}
			}
		}
	}
	int ansi,ansj=0;
	for(int j=1;j<=n;j++)
		if(dp[n][j]!=-1&&j>ansj)
		{
			ansi=n;
			ansj=j;
		}
	printf("%d\n",ansj);
	path(ansi,ansj);
	return 0;
}