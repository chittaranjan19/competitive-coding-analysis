import java.io.*;
import java.util.*;
import java.math.*;

public class Solution {
	static final String FileName = "test";
	long cnt(long n) {
		if (1==1) return dummy(n);
		long res = 0;
		long d = 1;
		while (d<n) {
			long dd = 10*d;
			if (dd<0) dd = Long.MAX_VALUE;
			res += Math.min(d, n-d+1);
			d = dd;
		}
		return res;
	}
	long dummy(long x) {
		long res = 0;
		for (int i=1; i<=x; i++) {
			int c = i;
			while (c>=10) c /= 10;
			if (c==1) res++;
		}
		return res;
	}
	long f(long a, long b) {
		return cnt(b)-cnt(a-1);
	}
	void solve() throws IOException {
		int n = nextInt();
		double[] p = new double[n];
		for (int i=0; i<n; i++) {
			long a = nextLong();
			long b = nextLong();
			p[i] = f(a, b)/(b-a+1.);
		}
		double[] dp = new double[n+1];
		dp[0] = 1;
		for (int i=0; i<n; i++) {
				for (int j=n; j>0; j--) 
					dp[j] = (1-p[i])*dp[j]+p[i]*dp[j-1];
			dp[0] *= 1-p[i];
		}
		int k = nextInt();
		k = (k*n+99)/100;
		double res = 0;
		for (int i=k; i<=n; i++) res += dp[i];
		out.printf(Locale.US, "%1.10f", res);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
    static final int inf = 1000000000+10;
    static final long linf = 1l<<62;
    static final double eps = 1e-8;
    BufferedReader br;
    StringTokenizer st;
    PrintWriter out;    
    
    
    public void run() {
        try {
            //br = new BufferedReader(new FileReader(FileName+".in"));
            //out = new PrintWriter(FileName+".out");
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);
            //br = new BufferedReader(new FileReader("input.txt"));
            //out = new PrintWriter("output.txt");
            solve();
            br.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    String next() throws IOException {
        while (st == null || !st.hasMoreTokens()) {
            String s = br.readLine();
            if (s == null)
                    return null;
            st = new StringTokenizer(s);
        }
        return st.nextToken();
    }
    double nextDouble() throws IOException {
       return Double.parseDouble(next());
    }

    int nextInt() throws IOException {
            return Integer.parseInt(next());
    }
    long nextLong() throws IOException {
            return Long.parseLong(next());
    }
    public static void main(String[] args) {        
    	new Solution().run();    
    }    
}
