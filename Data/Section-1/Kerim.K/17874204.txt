#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define imx 2147483647
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,string>yenge;
typedef pair<pair<int,int>,int> yegen;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
string k[MAXN];
int lvl[MAXN],mx,TIM=0,vis[MAXN];
int in[MAXN],out[MAXN],ans[MAXN];
vector<int>adj[MAXN];
vector<yenge>LVL[MAXN];
vector<yegen>query[MAXN];
map<string,int>pm;
void dfs(int nd,int pr){
	vis[nd]=1;
	lvl[nd]=(pr==-1?1:lvl[pr]+1);
	in[nd]=++TIM;umax(mx,lvl[nd]);
	LVL[lvl[nd]].pb(mp(in[nd],k[nd]));
	tr(it,adj[nd])
		if(*it!=pr)
			dfs(*it,nd);
	out[nd]=TIM;
}
struct SegmentTree{
	int s[MAXN<<2];
	int tap(int l,int r,int nd,int x,int y){
		if(l>y or x>r)
			return 0;
		if(l<=x and y<=r)
			return s[nd];
		int mid=(x+y)>>1;
		int i1=tap(l,r,nd<<1,x,mid);
		int i2=tap(l,r,nd<<1|1,mid+1,y);
		return i1+i2;		
	}
	void upd(int p,int v,int nd,int x,int y){
		if(x==y){
			s[nd]=v;
			return;
		}
		int mid=(x+y)>>1;	
		if(p<=mid)
			upd(p,v,nd<<1,x,mid);
		else
			upd(p,v,nd<<1|1,mid+1,y);	
		s[nd]=s[nd<<1]+s[nd<<1|1];		
	}
}T;
int main(){
	int n,p;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		cin>>k[i]>>p;
		if(p){
			adj[i].pb(p);
			adj[p].pb(i);
		}
	}
	for(int i=1;i<=n;i++)
		if(!vis[i])
			dfs(i,-1);
	int q;
	scanf("%d",&q);
	for(int i=1;i<=q;i++){
		int v,k;//In the tree the family ties do not form cycles.
		scanf("%d%d",&v,&k);
		if(lvl[v]+k<=mx)
			query[lvl[v]+k].pb(mp(mp(out[v],in[v]),i));
	}
	for(int i=1;i<=mx;i++)
		sort(all(query[i]));
	for(int i=1;i<=mx;i++){int c=0;
		for(int j=0;j<query[i].size();j++){
			while(c<LVL[i].size() and LVL[i][c].ff<=query[i][j].ff.ff){
				if(pm[LVL[i][c].ss])
					T.upd(pm[LVL[i][c].ss],0,1,1,n);
				pm[LVL[i][c].ss]=LVL[i][c].ff;
				T.upd(LVL[i][c].ff,1,1,1,n);c++;
			}
			ans[query[i][j].ss]=T.tap(query[i][j].ff.ss,query[i][j].ff.ff,1,1,n);
		}
		tr(it,pm)
			T.upd(it->ss,0,1,1,n);
		pm.clear();
	}
	for(int i=1;i<=q;i++)
		printf("%d\n",ans[i]);	
	return 0;
}
//LooK aT mY COde ONlinE +_+
