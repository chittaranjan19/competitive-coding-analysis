#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <iomanip>
#include <set>
#include <fstream>
#include <numeric>
#include <stdexcept>
#include <cassert>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

map<string, int> m;

int main()
{
  ios_base::sync_with_stdio(0);
  //freopen("suffix.in", "r", stdin);
  //freopen("suffix.out", "w", stdout);
  int q;
  cin >> q;
  string in;
  m["void"] = 0;
  while(q--)
  {
    cin >> in;
    if(in == "typedef")
    {
      cin >> in;
      int r = 0, deref = 0;
      for(int i=0;i<in.size();i++)
      {
        if(in[i] == '&')
          deref++;
        else break;
      }
      for(int i=in.size() - 1;i>=0;i--)
      {
        if(in[i] == '*')
          r++;
        else break;
      }
      string nxt = "";
      for(int i=0;i<in.size();i++)
        if(in[i] != '*' && in[i] != '&')
          nxt+=in[i];
      in = nxt;
      //cout << in << endl;
      int a;
      if(m.find(in) == m.end())
        a = -1;
      else a = m[in];
      cin >> in;
      if(a == -1)
        m[in] = a;
      else
      {
        a+=r - deref;
        if(a < 0) a = -1;
        m[in] = a;
      }
    }
    else
    {
      cin >> in;
      int a = m[in];
      if(a == -1) cout << "errtype\n";
      else
      {
        cout << "void";
        for(int i=0;i<a;i++)
          cout << '*';
        cout << "\n";
      }
    }
  }
  return 0;
}
