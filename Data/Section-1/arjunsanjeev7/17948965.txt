/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

int main()
{
	FastIO();
	int n;
	cin>>n;
	map<int,int> pos;
	VI a(n,0);
	set<int> S1,S2,S3,S4;
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
		pos[a[i]]=i;
	}
	pos[inf]=-inf;
	set<int>::iterator it1,it2;
	int v1,v2;
	for(int i=0;i<n;i++)
	{
		if(!i)
		{
			S1.insert(a[0]);
			S2.insert(-a[0]);
			S3.insert(a[0]);
			S4.insert(-a[0]);
			continue;
		}
		if(i && a[i]>a[0])
		{
			S1.insert(a[i]);
			S2.insert(-a[i]);
		}
		else if(i && a[i]<a[0])
		{
			S3.insert(a[i]);
			S4.insert(-a[i]);
		}
		if(a[i]>a[0])
		{
			it1=S1.upper_bound(a[i]);
			it2=S2.upper_bound(-a[i]);
			v1=(it1!=S1.end())?(*it1):inf;
			v2=(it2!=S2.end())?(-(*it2)):inf;
			if(pos[v1]>pos[v2])
			{
				cout<<v1<<" ";
			}
			else
			{
				cout<<v2<<" ";
			}
		}
		else
		{
			it1=S3.upper_bound(a[i]);
			it2=S4.upper_bound(-a[i]);
			v1=(it1!=S3.end())?(*it1):inf;
			v2=(it2!=S4.end())?(-(*it2)):inf;
			if(pos[v1]>pos[v2])
			{
				cout<<v1<<" ";
			}
			else
			{
				cout<<v2<<" ";
			}
		}
	}
	cout<<endl;
	return 0;
}