#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
#define N 100008
#define ll long long
#define ull unsigned long long
#define pi acos(-1)
using namespace std;
struct point
{
	int x, y;
	void operator -= (point a)
	{
		this->x -= a.x;
		this->y -= a.y;
	}
	bool operator < (point a)
	{
		return (this->x)*(this->x)+(this->y)*(this->y) < a.x*a.x+a.y*a.y;
	}
	bool operator > (point a)
	{
		return (this->x)*(this->x)+(this->y)*(this->y) > a.x*a.x+a.y*a.y;
	}
}node[N], p;
double len(point a, point b)
{
	double r = (a.x-b.x)*(a.x) + (a.y-b.y)*a.y;
	double d = (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y);
	if (r <= 0)	return a.x*a.x + a.y*a.y;
	else if (r >= d)	return b.x*b.x+b.y*b.y;
	r /= d;
	double x = a.x+(b.x-a.x)*r, y = a.y+(b.y-a.y)*r;
	return x*x+y*y;
}
int main()
{
//	freopen("1.txt", "r", stdin);
	ios::sync_with_stdio(false);
	cin.tie(0);
	int i, j, n;
	double r1, r2;
	point Min, Max;
	cin >> n >> p.x >> p.y;
	for (i = 0; i < n; i++)
	{
		cin >> node[i].x >> node[i].y;
		node[i] -= p;
	}
	Min = Max = node[0];
	for (i = 1; i < n; i++)
	{
		if (Max < node[i])	Max = node[i];
//		else if (Min > node[i])	Min = node[i];
	}
	r1 = len(node[n-1], node[0]);
	for (i = 1; i < n; i++)
		r1 = min(r1, len(node[i-1], node[i]));
//	r1 = (Min.x*Min.x+Min.y*Min.y);
	r2 = (Max.x*Max.x+Max.y*Max.y);
	cout.setf(ios::fixed);
	cout << setprecision(18) << pi*(r2-r1) << endl;
	return 0;
}
