#include <iostream>
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int maxn = 1e5 + 5;

int odd[maxn], even[maxn], used[maxn];
vector<int> v[maxn];

bool dfs(int u, int num, int cnt)
{
    used[u] = num;
    if(num & 1)
    {
        ++odd[cnt];
    }
    else
    {
        ++even[cnt];
    }
    for(int i = 0; i < v[u].size(); ++i)
    {
        int e = v[u][i];
        if(!used[e] && dfs(e, num + 1, cnt))
        {
            return true;
        }
        else if((used[e] & 1) == (used[u] & 1))
        {
            return true;
        }
    }
    return false;
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    if(m == 0)
    {
        ll x = 1;
        for(int i = 0; i < 3; ++i)
        {
            x = x * (n - i) / (i + 1);
        }
        printf("3 %I64d\n", x);
    }
    else
    {
        for(int i = 0; i < m; ++i)
        {
            int x, y;
            scanf("%d%d", &x, &y);
            v[x].push_back(y);
            v[y].push_back(x);
        }
        bool flag = false;
        int cnt = 0;
        for(int i = 1; i <= n; ++i)
        {
            if(!used[i])
            {
                if(dfs(i, 1, cnt++))
                {
                    flag = true;
                    break;
                }
            }
        }
        if(flag)
        {
            puts("0 1");
        }
        else
        {
            ll ans = 0;
            for(int i = 0; i < cnt; ++i)
            {
                ans = ans + (ll)odd[i] * (odd[i] - 1) / 2 + (ll)even[i] * (even[i] - 1) / 2;
            }
            if(ans)
            {
                printf("1 %I64d\n", ans);
            }
            else
            {
                for(int i = 0; i < cnt; ++i)
                {
                    if(even[i] != 0)
                    {
                        ans += n - 2;
                    }
                }
                printf("2 %I64d\n", ans);
            }
        }
    }
    return 0;
}
