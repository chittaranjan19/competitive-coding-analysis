import java.io.*;
import java.util.*;
import java.math.*;

/*
 * Created by Epsilon Alpha on 23-Sep-16 at 7:16 PM.
 */

public final class Cockroach
{
    public static void main(String[] args) throws Exception
    {
        Parser Reader = new Parser(System.in);
        OutputWriter Writer = new OutputWriter(System.out);
        int n = Reader.nextInt();
        String S = Reader.next();
        int len = S.length();
        if(len==1)
            Writer.println(0);
        else
        {
            int countR = 0;
            int countB = 0;
            boolean alternate = true;

            for (int i = 0; i < n; i++)
            {
                char current = S.charAt(i);
                if (current == 'r')
                    countR++;
                else
                    countB++;

                if (i < n-1)
                {
                    char next = S.charAt(i+1);
                    if(next==current)
                        alternate = false;
                }
            }

            if(alternate)
                Writer.println(0);
            else if(countR == 0 || countB == 0)
                Writer.println(n/2);
            else
            {
                char[] X = S.toCharArray();
                int half = n/2;
                int answer = 0;
                //First taking care of filling
                int i = 0;
                while(!((countB != half && countR != n-half) || (countR !=half && countB != n-half)))
                {
                    if(i<n-2)
                    {
                        //Find three consecutive
                        if (X[i] == 'r' && X[i + 1] == 'r' && X[i + 2] == 'r')
                        {
                            X[i + 1] = 'b';
                            countR--;
                            countB++;
                            answer++;
                        }
                        else if (X[i] == 'b' && X[i + 1] == 'b' && X[i + 2] == 'b')
                        {
                            X[i + 1] = 'r';
                            countR++;
                            countB--;
                            answer++;
                        }
                        else if (X[i] == 'b' && X[i + 1] == 'b' && X[i + 2] == 'r')
                        {
                            X[i] = 'r';
                            countR++;
                            countB--;
                            answer++;
                        }
                        else if (X[i] == 'r' && X[i + 1] == 'r' && X[i + 2] == 'b')
                        {
                            X[i] = 'b';
                            countB++;
                            countR--;
                            answer++;
                        }
                        else if (X[i] == 'b' && X[i + 1] == 'r' && X[i + 2] == 'r')
                        {
                            X[i + 2] = 'b';
                            countB++;
                            countR--;
                            answer++;
                        }
                        else if (X[i] == 'r' && X[i + 1] == 'b' && X[i + 2] == 'b')
                        {
                            X[i + 2] = 'r';
                            countR++;
                            countB--;
                            answer++;
                        }
                    }
                }
                //Now count is correct, only swapping needed

                i = 1;
                while(i<n)
                {
                    while(i<n && X[i-1]!=X[i]) //While alternate, keep going forward
                        i++;
                    if(i==n)
                        break;
                    //Disparity at i'th position,
                    char required = (X[i]=='r'?'b':'r');
                    int j = i+1;
                    while(j<n && X[j]!=required)
                        j++;
                    //Now position of j reached.

                    for(int k=j;k>i;k--)
                    {
                        char temp = X[k];
                        X[k] = X[k-1];
                        X[k-1] = temp;
                        answer++;
                    }
                    //Correct character has been placed
                }
                Writer.println(answer);
            }
        }

        Writer.close();
    }

    private static class Parser
    {
        final private int BUFFER_SIZE = 1 << 16;

        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Parser(InputStream in)
        {
            din = new DataInputStream(in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public int nextInt() throws Exception
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public long nextLong() throws Exception
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public String next() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c > ' ');
            return ret.toString();
        }

        public String nextLine() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c != '\n');
            return ret.toString();
        }

        private void fillBuffer() throws Exception
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) buffer[0] = -1;
        }

        private byte read() throws Exception
        {
            if (bufferPointer == bytesRead) fillBuffer();
            return buffer[bufferPointer++];
        }
    }

    private static class OutputWriter
    {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream)
        {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)), true);
        }

        public OutputWriter(Writer writer)
        {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object... objects)
        {
            for (int i = 0; i < objects.length; i++)
            {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void println(Object... objects)
        {
            print(objects);
            writer.println();
        }

        public void close()
        {
            writer.close();
        }

        public void flush()
        {
            writer.flush();
        }
    }
}