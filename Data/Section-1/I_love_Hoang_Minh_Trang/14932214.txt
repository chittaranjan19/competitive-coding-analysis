#include <bits/stdc++.h>
#define FORE(i, a, b) for(int i = a; i <= b; i++)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define FOR(i, a, b) for(int i = a; i < b; i++)
const int MAXN = 1e5 * 5;
const int INF = 1e9 + 7;

using namespace std;
int n;
int a[MAXN];
int f[1001][1001];
int duyet(int pos, int first)
{
    if (f[pos][first] > -1) return f[pos][first];
    if (pos > n) return 0;
    //cout <<pos<<" "<<first<<endl;
    int ans = INF;
    if (first == n + 1) ans = min(ans, a[pos]);
    else
    if (first == n) ans = min(ans, max(a[pos], a[first]));
    else {
        if (first + 2 <= n + 1) ans = min(ans, duyet(first + 1, first + 2) + max(a[pos], a[first]));
        if (first + 2 <= n + 1) ans = min(ans, duyet(first, first + 2) + max(a[pos], a[first + 1]));
        if (first + 2 <= n + 1) ans = min(ans, duyet(pos, first + 2) + max(a[first], a[first + 1]));
    }
    //if (first + 2 > n + 1) ans = min(ans, a[pos]);
    f[pos][first] = ans;
    return ans;
}

void trace(int pos, int first)
{
    if (pos > n) return;
    //cout <<pos<<" "<<first<<endl;
    int ans = f[pos][first];
    if (first == n + 1) cout<<pos<<endl;
    else
    if (first == n) cout<<pos<< " "<<first<<endl;
    else {
        if (ans == duyet(first + 1, first + 2) + max(a[pos], a[first])){
            cout<<pos<<" "<<first<<endl;
            trace(first + 1, first + 2);
        }
        if (ans == duyet(first, first + 2) + max(a[pos], a[first + 1])){
            cout<<pos<<" "<<first + 1<<endl;
            trace(first, first + 2);
        }
        if (ans == duyet(pos, first + 2) + max(a[first], a[first + 1])){
            cout<<first<<" "<<first + 1<<endl;
            trace(pos, first + 2);
        }
    }
}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("82D.inp", "r", stdin);
    freopen("82D.out", "w", stdout);
    #endif //MIKELHPDATKE
    cin >> n;
    FORE(i, 1, n) cin >> a[i];
    memset(f, -1, sizeof(f));
    cout << duyet(1, 2) << endl;
    trace(1, 2);
    return 0;
}

