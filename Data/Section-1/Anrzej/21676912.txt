#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>
#include <unordered_set>
#include <ctime>

using namespace std;

#define ll long long
#define ld long double
#define sc second
#define fs first
#define mp make_pair
#define all(x) x.begin(), x.end()

template<class T> T sqr(T x) { return x*x; }
ld pi = 3.1415926535897932384626433832795;

const int N = 5e5 + 10, lg = 31, MAXN = 1111;
ll mod = 1e9 + 7;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

ll _gcd(ll a, ll b, ll & x, ll & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	ll _x1, _y1;
	ll d = _gcd(b%a, a, _x1, _y1);
	x = _y1 - (b / a) * _x1;
	y = _x1;
	return d;
}

ll binpow(ll a, ll n) {
	ll res = 1;
	while (n) {
		if (n & 1)
			res *= a;
		a *= a;
		n >>= 1;
		a %= mod;
		res %= mod;
	}
	return res;
}


void term_res(string res){
	cout << res;
	exit(0);
}

pair<pair<ll, ll>, int> teams[N];
set<pair<ll, int> > weights;

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < n; i++){
		cin >> teams[i].fs.fs >> teams[i].fs.sc;
		teams[i].sc = i;
		teams[i].fs.fs *= -1;
	}
	int cur_i = 0;
	sort(teams, teams + n);
	while (teams[cur_i].sc != 0){
		weights.insert(mp(teams[cur_i].fs.sc + teams[cur_i].fs.fs, teams[cur_i].sc));
		cur_i++;
	}
	int ans = cur_i;
	ll can_use = -teams[cur_i].fs.fs-teams[cur_i].fs.sc, have = -teams[cur_i].fs.fs;
	int deleted = 0;
	cur_i += 1;
	while (1){
		if (weights.empty()) break;
		ll delta = (*weights.begin()).fs;
		weights.erase(weights.begin());
		if (delta+1 > have) break;
		can_use -= delta + 1;
		have -= delta + 1;
		deleted += 1;
		while (-teams[cur_i].fs.fs > have && cur_i < n){
			weights.insert(mp(teams[cur_i].fs.sc + teams[cur_i].fs.fs, teams[cur_i].sc));
			cur_i += 1;
		}
		ans = min(ans, cur_i - deleted-1);
	}
	cout << ans+1;
	return 0;
}