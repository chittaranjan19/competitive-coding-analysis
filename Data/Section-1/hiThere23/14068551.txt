#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 101000
#define maxC 1000000007
#define p2 pair<int, int>
#define mp make_pair
#define F first
#define S second
#define pb push_back

using namespace std;
struct interval
{
    int tree[mn << 2];
    void update(int l, int r, int id, int x)
    {
        if (l > x || r < x)
            return;
        if (l == r)
        {
            tree[id] ++;
            return;
        }
        int g = ((l + r) >> 1);
        update(l, g, id << 1, x);
        update(g + 1, r, (id << 1) + 1, x);
        tree[id] = tree[id << 1] + tree[(id << 1) + 1];
    }
    int getSum(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return 0;
        if (x <= l && r <= y)
            return tree[id];
        int g = ((l + r) >> 1);
        int a = getSum(l, g, id << 1, x, y);
        int b = getSum(g + 1, r, (id << 1) + 1, x, y);
        return a + b;
    }
} t;
int n, x1, x2, k, b, numR[mn], numRVal = 1;
pair<long long, int> p[mn], q[mn];

void setup()
{
    cin >> n >> x1 >> x2;
    FOR(i, 1, n)
    {
        cin >> k >> b;
        p[i].F = 1ll * k * x1 + b;
        q[i].F = 1ll * k * x2 + b;
        p[i].S = q[i].S = i;
    }
    sort(p + 1, p + n + 1);
    sort(q + 1, q + n + 1);
    numR[q[1].S] = 1;
    FOR(i, 2, n)
    {
        if (q[i].F > q[i - 1].F)
            numR[q[i].S] = numR[q[i - 1].S] + 1;
        else
            numR[q[i].S] = numR[q[i - 1].S];
    }
    numRVal = numR[q[n].S];
}

void xuly ()
{
    int l = 0;
    FOR(i, 1, n)
    {
        while (p[l + 1].F != p[i].F)
            t.update(1, numRVal, 1, numR[p[++ l].S]);
        int u = p[i].S;
        if (t.getSum(1, numRVal, 1, numR[u] + 1, numRVal))
        {
            cout << "YES";
            return;
        }
    }
    cout << "NO";
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
