#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<string>
#include<queue>
#include<vector>
#include<map>
#include<cmath>
#define lowbit(x) ((x)&(-x))
#define Max(a,b) (a>b?a:b)
#define Min(a,b) (a>b?b:a)
#define lron(x)  ((x) << 1)
#define rson(x) ((x)<<1|1)
#define dad(x) ((x)>>1)
#define INF 0x3f3f3f3f
#define rep(i,a,b) for(int i=a;i<(b);++i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define pb push_back
#define de(x) cout << #x << "=" << x << endl
using namespace std;
int const Max_N = 1e5+5;
int Next[Max_N*2] = {0};
int head[Max_N] = {0};
int edge[Max_N*2] = {0};
int cost[Max_N*2] = {0};

int main()
{
	int N,m,k;
	while(scanf("%d%d%d",&N,&m,&k),k==0);
	for (int i = 1; i < m+1; i++)
	{
		int u,v,s;
		scanf("%d%d%d",&u,&v,&s);
		Next[i] = head[u];
		head[u] = i;
		edge[i] = v;
		cost[i] = s;
		
		Next[m+i] = head[v];
		head[v] = i+m;
		edge[i+m] = u;
		cost[i+m] = s;
	}
	bool vis[Max_N] = {false};
	vector<int>nod;
	for (int i = 0; i < k; i++) 
	{
		int u;
		scanf("%d",&u);
		nod.push_back(u);
		vis[u] = true;
	}
	
	int mi = INF;
	
	for (int i = 0; i < nod.size(); i++)
	{
		int u = nod[i];
		for(int j = head[u]; j; j = Next[j])
		{
			int v = edge[j];
			if(vis[v]) continue;
			mi = Min(mi,cost[j]);
		}
	}
	if(mi==INF) printf("-1\n");
	else printf("%d\n",mi);
	return 0;
}

