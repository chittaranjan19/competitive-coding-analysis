#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define EPS 1e-12
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

vector<int> g[3005];
int dist[3005][3005];
bool v[3005];
pair<int, int> best[3005][3005];
vector<pair<int, int> > bestr[3005];

int main()
{
  int n, m, x, y;
  cin >> n >> m;
  for(int i=0;i<m;i++)
  {
    scanf("%d %d", &x, &y);
    x--, y--;
    g[x].pb(y);
  }
  for(int i=0;i<n;i++)
  {
    queue<int> q;
    for(int j=0;j<n;j++)
      v[j] = false;
    v[i] = true;
    q.push(i);
    while(!q.empty())
    {
      int x = q.front();
      q.pop();
      for(int nxt : g[x])
      {
        if(v[nxt]) continue;
        v[nxt] = true;
        dist[i][nxt] = dist[i][x] + 1;
        q.push(nxt);
      }
    }
    for(int j=0;j<n;j++)
    {
      if(dist[i][j] == 0) dist[i][j] = -10000000;
      best[i][j] = mp(dist[i][j], j);
      bestr[j].pb(mp(dist[i][j], i));
    }
    sort(best[i], best[i] + n, greater<pair<int, int> >());
  }
  for(int i=0;i<n;i++)
    sort(bestr[i].begin(), bestr[i].end(), greater<pair<int, int> >());
  int a, b, c, d;
  int ans = INF_MIN;
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<n;j++)
    {
      if(i == j) continue;
      for(int ii=0;ii<n;ii++)
      {
        if(bestr[i][ii].s == i || bestr[i][ii].s == j) continue;
        for(int jj=0;jj<n;jj++)
        {
          if(best[j][jj].s == i || best[j][jj].s == j || best[j][jj].s == bestr[i][ii].s) continue;
          int tmp = dist[i][j];
          tmp += bestr[i][ii].f;
          tmp += best[j][jj].f;
          if(tmp > ans)
          {
            ans = tmp;
            a = bestr[i][ii].s;
            b = i;
            c = j;
            d = best[j][jj].s;
          }
          break;
        }
        break;
      }

      for(int jj=0;jj<n;jj++)
      {
        if(best[j][jj].s == i || best[j][jj].s == j) continue;
        for(int ii=0;ii<n;ii++)
        {
          if(bestr[i][ii].s == i || bestr[i][ii].s == j || bestr[i][ii].s == best[j][jj].s) continue;
          int tmp = dist[i][j];
          tmp += bestr[i][ii].f;
          tmp += best[j][jj].f;
          if(tmp > ans)
          {
            ans = tmp;
            a = bestr[i][ii].s;
            b = i;
            c = j;
            d = best[j][jj].s;
          }
          break;
        }
        break;
      }
    }
  }
  //cout << ans << "\n";
  cout << a + 1 << " ";
  cout << b + 1 << " ";
  cout << c + 1 << " ";
  cout << d + 1;
  return 0;
}
