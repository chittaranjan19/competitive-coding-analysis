#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[1000005], MaxVal = 1000005;
LL tree[2][1000005], tmp[1000005];
map<int, int> m;

inline void update(LL idx, LL val, bool ch)
{
  if(idx <= 0) return;
  while (idx <= MaxVal && idx > 0){
    tree[ch][idx] = tree[ch][idx] + val;
    idx = idx + (idx & -idx);
  }
}

inline LL read(LL idx, bool ch)
{
  if(idx <= 0) return 0;
  LL sum = 0;
  while (idx > 0 && idx <= MaxVal){
    sum = sum + tree[ch][idx];
    idx = idx - (idx & -idx);
  }
  return sum;
}

int main()
{
  int n, id = 1;
  scanf("%d", &n);
  vector<int> v;
  for(int i=0;i<n;i++)
  {
    scanf("%d", &arr[i]);
    v.pb(arr[i]);
  }
  sort(v.begin(), v.end(), greater<int>());
  for(int i=0;i<n;i++)
  {
    if(i && v[i] == v[i - 1]) continue;
    m[v[i]] = id++;
  }
  for(int i=0;i<n;i++)
    arr[i] = m[arr[i]];
  MaxVal = id + 4;
  for(int i=0;i<n;i++)
  {
    tmp[i] = read(arr[i] - 1, 0);
    update(arr[i], 1, 0);
  }
  LL res = 0;
  for(int i=0;i<n;i++)
  {
    res += read(arr[i] - 1, 1);
    update(arr[i], tmp[i], 1);
  }
  printf("%I64d", res);
  return 0;
}