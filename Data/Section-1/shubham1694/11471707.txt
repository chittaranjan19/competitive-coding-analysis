#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define inf 1000000000
#define maxn 1000000

#define ll long long
#define pii pair<int, int>
#define pb push_back
#define sin scanint
#define bitcount(x) __builtin_popcount(x)
#define fill(s, p) memset(s, p, sizeof(s));
#define gc getchar

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

char mat[110][110];
int nmat[110][501];
int bit[110][110];
int n, m;

bool valid(int x, int y)
{
    if(x>=0 && x<n && y>=0 && y<m)
        return true;
    return false;
}

void update(int t, int v, int a)
{
    while(a<=m){
        bit[t][a]+=v;
        a+=(a&(-a));
    }
}

void range_update(int t, int a, int b, int v)
{
    update(t, v, a);
    update(t, -v, b+1);
}

int query(int t, int b)
{   
    int ret = 0;
    while(b>0){
        ret+=bit[t][b];
        b-=(b&(-b));
    }
    return ret;
}

int main()
{
    #ifndef ONLINE_JUDJE
        //freopen("input.txt", "r", stdin);
    #endif
    int i, j, k, x, y, cx, cy, v, ans, curbit;
    sin(n);
    sin(m);
    for(i=0; i<n; i++)
        scanf("%s", mat[i]);
    ans = 0;
    for(i=n-1; i>=0; i-=2){
        for(j=m-1; j>=0; j-=2){
            cx = i, cy = j;
            if(mat[cx][cy]=='B')
                v = -1;
            else
                v = 1;
            if(valid(cx, cy)){
                curbit = query(cx, cy+1);
                //cout << cx << " " << cy << " " << curbit << endl;
                if(curbit!=v){
                    ans++;
                    for(k=0; k<=cx; k++)
                        range_update(k, 1, cy+1, (v-curbit));
                }
                curbit = query(cx, cy+1);
                //cout << curbit << endl;
            }
            cx = i-1, cy = j;
            if(mat[cx][cy]=='B')
                v = -1;
            else
                v = 1;
            if(valid(cx, cy)){
                curbit = query(cx, cy+1);
                //cout << cx << " " << cy << " " << curbit << endl;
                if(curbit!=v){
                    ans++;
                    for(k=0; k<=cx; k++)
                        range_update(k, 1, cy+1, (v-curbit));
                }
                curbit = query(cx, cy+1);
                //cout << curbit << endl;
            }
            cx = i, cy = j-1;
            if(mat[cx][cy]=='B')
                v = -1;
            else
                v = 1;
            if(valid(cx, cy)){
                curbit = query(cx, cy+1);
                //cout << cx << " " << cy << " " << curbit << endl;
                if(curbit!=v){
                    ans++;
                    for(k=0; k<=cx; k++)
                        range_update(k, 1, cy+1, (v-curbit));
                }
                curbit = query(cx, cy+1);
                //cout << curbit << endl;
            }
            cx = i-1, cy = j-1;
            if(mat[cx][cy]=='B')
                v = -1;
            else
                v = 1;
            if(valid(cx, cy)){
                curbit = query(cx, cy+1);
                //cout << cx << " " << cy << " " << curbit << endl;
                if(curbit!=v){
                    ans++;
                    for(k=0; k<=cx; k++)
                        range_update(k, 1, cy+1, (v-curbit));
                }
                curbit = query(cx, cy+1);
                //cout << curbit << endl;
            }
        }
    }
    printf("%d\n", ans);
    return 0;
}