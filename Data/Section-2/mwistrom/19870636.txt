
import java.io.*;
import java.util.*;

public class VasiliysMultiset {
    public static PrintWriter out;
    static final int  depth = 32;

    static class MyScanner {
        BufferedReader br;
        StringTokenizer st;

        public MyScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        void close() {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        static PrintWriter MyOut() {
            return new PrintWriter(new BufferedOutputStream(System.out), true);
        }
    }

    static class Node {
        int count = 0;
        Node zero;
        Node one;

        void add(String x) {
            add_util( x, 0);
        }

        private void add_util(String x, int i) {
            count++;
            if (i == depth) {
                return;
            }
            if (x.charAt(i) == '1') {
                if (one == null)
                    one = new Node();
                one.add_util(x, i + 1);
            } else {
                if (zero == null)
                    zero = new Node();
                zero.add_util(x, i + 1);
            }
        }

        void del(String x) {
            del_util(x, 0);
        }

        private void del_util(String x, int i) {
            count--;
            if (i == depth) {
                return;
            }
            if (x.charAt(i) == '1') {
                one.del_util(x, i + 1);
            } else {
                zero.del_util(x, i + 1);
            }
        }

        public int q(String x) {
            StringBuilder sb = new StringBuilder();
            q_util(x, 0, sb);
            //out.println(sb);
            return Integer.parseInt(sb.toString(),2);
        }

        private void q_util(String x, int i, StringBuilder sb) {
            if( i == depth)
                return;
            if( x.charAt(i) == '1') {
                if( zero != null && zero.count > 0) {
                    sb.append('1');
                    zero.q_util(x, i + 1,sb);
                }
                else {
                    sb.append('0');
                    one.q_util(x, i + 1, sb);
                }
            } else {
                if( one != null && one.count > 0) {
                    sb.append('1');
                    one.q_util(x, i + 1,sb);
                }
                else {
                    sb.append('0');
                    zero.q_util(x, i + 1, sb);
                }
            }
            return;
        }
    }

    public static void main(String[] args) {
        MyScanner in = new MyScanner();
        out = in.MyOut();

        int q = in.nextInt();

        Node root = new Node();
        StringBuilder init = new StringBuilder()
                ;
        for(int i = 0 ; i < depth; i ++) {
            init.append('0');
        }
        root.add(init.toString());

        String formatString = "%"+depth+"s";
        while (q-- > 0) {
            String s = in.nextLine();
            String[] p = s.split(" ");
            int p1int = Integer.parseInt(p[1]);

            String p1 = String.format(formatString, Integer.toBinaryString(p1int)).replace(' ', '0');
            //out.println(p1);
            if (p[0].compareTo("+") == 0)
                root.add(p1);
            if (p[0].compareTo("-") == 0)
                root.del(p1);
            if (p[0].compareTo("?") == 0) {
                int ans = root.q(p1);
                out.println(ans);
            }
        }

        in.close();
    }
}