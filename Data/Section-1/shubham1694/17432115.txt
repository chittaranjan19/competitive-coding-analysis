#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 1010;

int n, m;
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
char str[maxn][maxn];
int vis[maxn][maxn][16];
vector<pii> v[4];

int isvalid(int x, int y)
{
	if(x>=1 && x<=n && y>=1 && y<=m)
		return 1;
	return 0;
}

int solve()
{
	queue<pair<pii, int> > q;
	int i, j, k, nx, ny, mask, nmask, val;
	pii temp;
	for(i=1; i<=n; i++){
		for(j=1; j<=m; j++){
			for(k=0; k<16; k++)
				vis[i][j][k] = -1;
		}
	}
	for(i=1; i<=3; i++){
		for(pii it:v[i]){
			vis[it.f][it.s][1<<i] = 0;
			q.push(mp(mp(it.f, it.s), 1<<i));
		}
	}
	while(!q.empty()){
		temp = q.front().f;
		mask = q.front().s;
		q.pop();
		for(i=0; i<4; i++){
			nx = temp.f+dx[i];
			ny = temp.s+dy[i];
			if(!isvalid(nx, ny))
				continue;
			if(str[nx][ny]=='#')
				continue;
			if(str[nx][ny]=='.'){
				if(vis[nx][ny][mask]==-1){
					vis[nx][ny][mask] = vis[temp.f][temp.s][mask] + 1;
					q.push(mp(mp(nx, ny), mask));
				}
			}
			else{
				val = str[nx][ny]-'0';
				nmask = mask|(1<<val);
				if(vis[nx][ny][nmask]==-1){
					vis[nx][ny][nmask] = vis[temp.f][temp.s][mask];
					q.push(mp(mp(nx, ny), nmask));
				}
			}
		}
	}
	int ret = inf;
	for(i=1; i<=n; i++){
		for(j=1; j<=m; j++){
			if(str[i][j]!='.' && str[i][j]!='#')
				ret = min(ret, vis[i][j][14]);
		}
	}
	return ret;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, ans;
	scanf("%d%d", &n, &m);
	for(i=1; i<=n; i++){
		scanf("%s", str[i]+1);
		for(j=1; j<=m; j++){
			if(str[i][j]=='1')
				v[1].pb(mp(i, j));
			else if(str[i][j]=='2')
				v[2].pb(mp(i, j));
			else if(str[i][j]=='3')
				v[3].pb(mp(i, j));
		}
	}
	ans = solve();
	if(ans==inf)
		ans = -1;
	printf("%d\n", ans);
	return 0;
}
