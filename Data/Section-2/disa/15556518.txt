#include <vector>
#include <cmath>
#include <algorithm>
#include <iomanip>
#include <string>
#include <map>
#include <set>
#include <stack>
#include <deque>
#include <queue>

using namespace std;

#if _DEBUG
#include <fstream>
ifstream cin("input.txt");
ofstream cout("output.txt");
#else
#include <iostream>
#endif

typedef long long ll;

struct Point {
	int x, y;
	Point() {}
	Point(int x, int y) :x(x), y(y) {}
};


ll dis(Point p1, Point p2) {
	return (ll)(p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y);
}

int main() {
	int n;
	Point p1, p2;
	cin >> n;
	cin >> p1.x >> p1.y >> p2.x >> p2.y;
	vector <Point> p(n);
	for (int i = 0; i < n; i++) {
		cin >> p[i].x >> p[i].y;
	}
	p.push_back(p1);
	p.push_back(p2);
	ll ans = 1e18;
	vector <bool> used(n, false);
	for (size_t i = 0; i < p.size(); i++) {
		fill(used.begin(), used.end(), false);
		ll r_now = dis(p1, p[i]);
		for (int j = 0; j < n; j++) {
			if (dis(p1, p[j]) <= r_now)
				used[j] = true;
		}
		ll r_min = -1;
		for (int j = 0; j < n; j++) {
			if (!used[j]) {
				r_min = max(r_min, dis(p2, p[j]));
			}
		}
		if (r_min != -1)
			ans = min(ans, r_now + r_min);
	}
	cout << ans;
	return 0;
}