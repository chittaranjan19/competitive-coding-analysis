#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
#include <fstream>
#include <tuple>
#include <iomanip>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define for1(i, n) for (int i = 1; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for (int i = int(l); i <= int(r); ++i)
#define all(a) a.begin(), a.end()
#define sz(a) (int(a.size()))
#define mp make_pair
#define pb push_back
#define ft first
#define sc second
#define g(a, b) get<a> (b)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pt;


int main()
{
    int n, m;
    int t[1000] = {0, };
    int w[1000];
    int q[100][100];
    set<int> kik;
    int max_kol = 0;
    int pravda = 1;
    cin >> n >> m;
    for (int i = 0; i < n; i++){
        int kol = 0, kek = 0;
        for (int j = 0; j < m; j++){
            int a;
            cin >> q[i][j];
            if (q[i][j] != j + 1) {kol++; kik.insert(q[i][j]);}
        }
        for (int j = 0; j < m; j++){
            if (q[i][j] != j + 1)
                if (q[i][q[i][j] - 1] == j + 1) kek++;
        }
        if (kol == 0) t[i] = 1;
        if (kol == 3) w[3] = 1;
        if (kol == 4) w[4] = 1;
        if (kol == 4 && !kek){
            cout << "NO";
            return 0;
        }
        if (kol > 4){
            cout << "NO";
            return 0;
        }
        max_kol = max(kol, max_kol);
    }
    if (max_kol == 2){
        cout << "YES";
        return 0;
    }
    if (kik.size() > 4){
        cout << "NO";
        return 0;
    }
    else cout << "YES";
return 0;
}
