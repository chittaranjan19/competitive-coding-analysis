#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;
vector<int> b[10005], e[10005];
int cnt[105], n, en[105];

bool check(int x)
{
        for(int i=0;i<n;i++)
                cnt[i] = 0;
        priority_queue<pair<int, int> > q;
        for(int i=10000;i>=0;i--)
        {
                for(int j=0;j<e[i].size();j++)
                        q.push(make_pair(en[e[i][j]], e[i][j]));
                while(!q.empty() && (cnt[q.top().second] == x || q.top().first >= i))
                        q.pop();
                if(!q.empty())
                {
                        int y = q.top().second;
                        cnt[y]++;
                }
                while(!q.empty() && cnt[q.top().second] == x)
                        q.pop();
        }
        for(int i=0;i<n;i++)
                if(cnt[i] != x)
                        return false;
        return true;
}

int main() {
        int x, y;
        scanf("%d", &n);
        for(int i=0;i<n;i++)
        {
                scanf("%d %d", &x, &y);
                b[x].pb(i);
                e[y].pb(i);
                en[i] = x;
        }
        int L = 0, R = 10005;
        while(R > L)
        {
                int mid = L + (R - L + 1) / 2;
                if(check(mid))
                        L = mid;
                else R = mid - 1;
        }
        printf("%d", L * n);
        return 0;
}
