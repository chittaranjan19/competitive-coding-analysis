#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000007
#define pb push_back

using namespace std;
int n, m, w[mn], h[mn], num[mn], c = 0;
vector<int> g[mn], ans;
bool mark[mn];

struct bitTree
{
    int tree[mn], mark[mn];

    void update(int x)
    {
        for(; x < mn; x += (x & (-x)))
        {
            if (mark[x] != c)
                mark[x] = c, tree[x] = 0;
            tree[x] ++;
        }
    }

    int get(int x)
    {
        int re = 0;
        for(; x; x -= (x & (-x)))
        {
            if (mark[x] != c)
                mark[x] = c, tree[x] = 0;
            re += tree[x];
        }
        return re;
    }
} t;

void setup()
{
    cin >> n >> m;
    int u, v;
    FOR(i, 1, m)
    {
        cin >> u >> v;
        g[u].pb(v);
    }
    FOR(i, 1, n)
        cin >> w[i];
}

void dfs(int u)
{
    mark[u] = true;
    int bef = t.get(h[u]) - num[h[w[u]]];
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i];
        h[v] = h[u] + 1;
        dfs(v);
    }
    int aft = t.get(h[u]) - num[h[w[u]]];
    if (aft > bef)
    {
        cout << -1;
        exit(0);
    }
    num[h[w[u]]] ++;
    t.update(h[w[u]]);
}

bool comp(int a, int b)
{
    return h[a] > h[b];
}

void xuly ()
{
    FOR(i, 1, n)
    if (!mark[i])
    {
        h[i] = 1;
        c ++;
        dfs(i);
    }
    sort(w + 1, w + n + 1, comp);
    FOR(i, 1, n)
        if (w[i] != w[i - 1])
            ans.pb(w[i]);
    cout << ans.size() << '\n';
    FOR(i, 0, int(ans.size()) - 1)
    cout << ans[i] << '\n';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
