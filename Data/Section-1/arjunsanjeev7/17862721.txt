/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

int main()
{
	FastIO();
	int n,k;
	cin>>n>>k;
	vector<LL> a(n,0),cumSum(n,0),RcumSum(n,0);
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
		if(i)
		{
			cumSum[i]=cumSum[i-1]+a[i];
		}
		else
		{
			cumSum[i]=a[i];
		}
	}
	for(int i=n-1;i>=0;i--)
	{
		if(i!=n-1)
		{
			RcumSum[i]=RcumSum[i+1]+a[i];
		}
		else
		{
			RcumSum[i]=a[i];
		}
	}
	sort(all(a));
	if(!k)
	{
		cout<<a.back()-a[0]<<endl;
		return 0;
	}
	int l=0, r=1e9, mid, Min, Max;
	while(1)
	{
		mid=(l+r)/2;
		trace3(l,r,mid);
		int pos=upper_bound(all(a),mid)-a.begin()-1;
		LL minReq = (pos+1)*mid-cumSum[pos];
		if(k < minReq)
		{
			r=mid;
		}
		else
		{
			if(k-minReq >= pos+1)
			{
				l=mid+1;
			}
			else
			{
				Min=mid;
				break;
			}
		}
	}
	l=0, r=1e9, mid, Max;
	while(1)
	{
		mid=(l+r)/2;
		trace1(mid);
		int pos=lower_bound(all(a),mid)-a.begin();
		if(pos==n)
		{
			r=mid;
		}
		else
		{
			LL minReq = (n-pos)*mid-RcumSum[pos];
			if(k < minReq)
			{
				r=mid;
			}
			else if(k-minReq >= n-pos)
			{
				l=mid+1;
			}
			else
			{
				Max=mid;
				break;
			}
		}
	}
	cout<<Max-Min<<endl;
	return 0;
}