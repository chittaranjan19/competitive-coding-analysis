#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
using namespace std;

#define INF (1 << 30)
#define INFL (1LL << 50)
#define pb push_back
#define loop_it(it, elements) for(auto it = elements.begin(); it != elements.end(); it++)
#define loop(i, l, r) for(int i = l; i < r; i++)
#define loop_r(i, r, l) for(int i = r; i >= l; i--)
#define loop_k(i, l, r, k) for(int i = l; i < r; i+=k)
#define test_cases int test_cases;scanf("%d", &test_cases);while (test_cases--)

typedef long long i64;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<i64> vi64;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef map<pii, vi> mpiivi;
typedef map<int, int> mii;
typedef map<int, vi> mivi;

i64 gcd(i64 a, i64 b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}
 
i64 lcm(i64 a, i64 b) {
    return (a * b) / gcd(a, b);
}

i64 power(i64 a, i64 b) {
	if (b == 0) return 1;
	int ans = power(a, b >> 1);
	ans = (ans * (i64) ans);
	if (b & 1) ans = (ans * (i64) a);
	return ans;
} 

int main() {
	int n;
	cin >> n;
	vector<string> words(n);
	vector<string> rwords(n);
	vi cost(n);
	loop(i, 0, n) {
		cin >> cost[i];
	}
	loop(i, 0, n) {
		cin >> words[i];
		rwords[i] = words[i];
		reverse(rwords[i].begin(), rwords[i].end());
	}
	vector<vi64> dp(n, vi64(2, INFL));
	dp[0][0] = 0; dp[0][1] = cost[0]; 
	loop (i, 1, n) {
		if (words[i].compare(words[i - 1]) >= 0) {
			dp[i][0] = min(dp[i][0], dp[i - 1][0]);
		}
		if (words[i].compare(rwords[i - 1]) >= 0) {
			dp[i][0] = min(dp[i][0], dp[i - 1][1]);
		}
		if (rwords[i].compare(words[i - 1]) >= 0) {
			dp[i][1] = min(dp[i][1], dp[i - 1][0] + cost[i]);
		}
		if (rwords[i].compare(rwords[i - 1]) >= 0) {
			dp[i][1] = min(dp[i][1], dp[i - 1][1] + cost[i]);
		}
	}
	if (min(dp[n - 1][0], dp[n - 1][1]) == INFL) {
		cout << "-1" << endl;
	} else {
		cout << min(dp[n - 1][0], dp[n - 1][1]) << endl;
	}
	return 0;
}