#include<bits/stdc++.h>
using namespace std;

const int MAXN=1e6+10;

int  st[MAXN],fn[MAXN],counter,par[MAXN];
bool leazy[4*MAXN] , lzval[4*MAXN];
int seg[4*MAXN];
vector<int>ver[MAXN];

void dfs(int v,int p=0){
	st[v]=counter++;
	par[v]=p;
	for(auto u:ver[v])
		if(u!=p)dfs(u,v);
	//cout<<v<<' ';
	fn[v]=counter;
}
void shift(int,int,int);
void update(int id,int xl,int xr,int ql,int qr,int q){
	if(ql<=xl && xr<=qr){leazy[id]=true;lzval[id]=q;seg[id]=(xr-xl)*q;return ;}
	if(qr<=xl || xr<=ql)return ;
	shift(id,xl,xr);
	int mid=(xr+xl)/2;
	update(2*id+1,xl,mid,ql,qr,q);
	update(2*id+2,mid,xr,ql,qr,q);
	seg[id]=seg[2*id+1]+seg[2*id+2];
}
void shift(int id,int xl,int xr){
	if(!leazy[id])return ;
	leazy[id]=false;
	int mid=(xl+xr)/2;
	update(2*id+1,xl,mid,xl,mid,lzval[id]);
	update(2*id+2,mid,xr,mid,xr,lzval[id]);
}
int get(int id,int xl,int xr,int ql,int qr){
	if(ql<=xl && xr<=qr)return seg[id];
	if(qr<=xl || xr<=ql)return 0;
	shift(id,xl,xr);
	int mid=(xr+xl)/2;
	return
		get(2*id+1,xl,mid,ql,qr) +
		get(2*id+2,mid,xr,ql,qr) ;
}

int main(){
	ios::sync_with_stdio(false);
	cin.tie(0),cout.tie(0);
	int n;	cin>>n;
	for(int i=1;i<n;i++){
		int x,y;
		cin>>x>>y;
		ver[x].push_back(y);
		ver[y].push_back(x);
	}
	dfs(1);
	int q;	cin>>q;
	while(q--){
		int x,y;	cin>>x>>y;
		if(x==1){
			if(get(0,0,n,st[y],fn[y])!=fn[y]-st[y] && par[y]!=0)update(0,0,n,st[par[y]],st[par[y]]+1,0);
			update(0,0,n,st[y],fn[y],1);
		}
		if(x==2)update(0,0,n,st[y],st[y]+1,0);
		if(x==3)cout<<(get(0,0,n,st[y],fn[y])==fn[y]-st[y])<<'\n';
	}	
}

