//
// Created by Santiago on 18/04/2016.
//

#include <bits/stdc++.h>

using namespace std;

vector<vector<int> > graph;
vector<int> deg;
vector<bool> valid;
vector<bool> pushed;
long long edges = 0;

void child_DFS(int node) {
    int count = 0;
    for (int i = 0; i < graph[node].size(); ++i) {
        int p = graph[node][i];
        if(!pushed[p]) {
            pushed[p] = true;
            child_DFS(p);
            if(valid[p])
                count++;
        }
    }
    if(count == 0)
        valid[node] = true;
    else if(count == 1) {
        valid[node] = true;
        edges++;
    }
    else {
        valid[node] = false;
        edges += 2;
    }
}

void init(int n) {
    graph = vector<vector<int> >(n+1);
    deg = vector<int>(n+1, 0);
    valid = vector<bool>(n+1, true);
    pushed = vector<bool>(n+1, false);
}


int main() {
    //freopen("hamiltonian.in", "r", stdin);
    unsigned long long n, x, y;
    bool star = false;
    cin>>n>>x>>y;
    init(n);
    for (int i = 0; i < n-1; ++i) {
        int u, v;
        cin>>u>>v;
        graph[u].push_back(v);
        graph[v].push_back(u);
        deg[u]++;
        deg[v]++;
        if(deg[u] == n-1 || deg[v] == n-1)
            star = true;
    }
    if(x == y)
        cout<<x*(n-1);
    else if(x > y) {
        if(star)
            cout<<y*(n-2)+x;
        else
            cout<<y*(n-1);
    }
    else {
        pushed[1] = true;
        child_DFS(1);
        unsigned long long ans = (n-1ull-edges)*y+edges*x;
        cout<<ans;
    }



    return 0;
}













