#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <string>

using namespace std;
int n;
vector<vector<int> > graph;
vector<bool> used;
vector<int> dist;

void deikstra()
{
    int mi = -1;
    for (int i = 0; i < n; i++)
        if (!used[i] && ((mi == -1) || (dist[i] > dist[mi])))
            mi = i;
    used[mi] = true;
    for (int i = 0; i < n; i++)
        if (!used[i])
            dist[i] = max(dist[i], dist[mi] + graph[mi][i]);
}

int main()
{
    int d, p, q;
    scanf("%d %d", &n, &d);
    vector<int> mon;
    mon.push_back(0);
    vector<pair<int, int> > v(n);
    vector<int > v1;
    for (int i = 0; i < n - 2; i++)
    {
        scanf("%d", &q);
        mon.push_back(q);
    }
    mon.push_back(0);
    for (int i = 0; i < n; i++)
        scanf("%d %d", &v[i].first, &v[i].second);
    for (int i = 0; i < n; i++)
    {
        graph.push_back(v1);
        for (int j = 0; j < n; j++)
            graph[i].push_back(-(abs(v[i].first - v[j].first) + abs(v[i].second - v[j].second)) * d + mon[i]);
    }
    for (int i = 0; i < n; i++)
        graph[i][i] = 0;
    /*for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            printf("%d ", graph[i][j]);
        printf("\n");
    }*/
    for (int i = 0; i < n; i++)
        used.push_back(false);
    for (int i = 0; i < n; i++)
        dist.push_back(-100000000000);
    dist[0] = 0;
    for (int i = 0; i < n; i++)
        deikstra();
    /*for (int i = 0; i < n; i++)
        printf("%d ", dist[i]);
    printf("\n");*/
    if (dist[n - 1] > 0)
        printf("%d", 0);
    else
        printf("%d", abs(dist[n - 1]));
    return 0;
}