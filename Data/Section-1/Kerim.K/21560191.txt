#include "bits/stdc++.h"
#define MAXN 200009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<ll,ll> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
ll type[MAXN],par[MAXN],query[MAXN],val[MAXN],q;
ll st[MAXN],en[MAXN],d[MAXN],node[MAXN],TIM;
vector<ll>adj[MAXN];
void dfs(ll nd){
	st[nd]=++TIM;
	for(ll i=0;i<ll(adj[nd].size());i++)
		dfs(adj[nd][i]);
	en[nd]=TIM;
}
ll mod(ll x){
	return (x%INF);
}
ll Fe(ll x,ll y){
	if(!y)
		return 1LL;
	ll h=Fe(x,y/2);
	h=mod(h*h);
	if(y&1)
		h=mod(h*x);
	return h;	
}
ll s[MAXN<<2],lazy[MAXN<<2],mul[MAXN<<2],lz[MAXN<<2];
void shift(ll nd){
	ll &ret=lazy[nd];
	lazy[nd<<1]=mod(lazy[nd<<1]*ret);
	s[nd<<1]=mod(s[nd<<1]*ret);
	lazy[nd<<1|1]=mod(lazy[nd<<1|1]*ret);
	s[nd<<1|1]=mod(s[nd<<1|1]*ret);ret=1;
}
void upd(ll p,ll v,ll nd,ll x,ll y){
	if(x==y){
		s[nd]=v;
		return;
	}
	shift(nd);
	ll mid=(x+y)>>1;
	if(p<=mid)
		upd(p,v,nd<<1,x,mid);
	else
		upd(p,v,nd<<1|1,mid+1,y);
	s[nd]=mod(s[nd<<1]+s[nd<<1|1]);
}	
void inc(ll l,ll r,ll v,ll nd,ll x,ll y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r){
		s[nd]=mod(s[nd]*v);
		lazy[nd]=mod(lazy[nd]*v);
		return;
	}
	shift(nd);ll mid=(x+y)>>1;
	inc(l,r,v,nd<<1,x,mid);
	inc(l,r,v,nd<<1|1,mid+1,y);
	s[nd]=mod(s[nd<<1]+s[nd<<1|1]);
}
ll tap(ll l,ll r,ll nd,ll x,ll y){
	if(l>y or x>r)
		return 0;
	if(l<=x and y<=r)
		return s[nd];
	shift(nd);ll mid=(x+y)>>1;
	ll i1=tap(l,r,nd<<1,x,mid);
	ll i2=tap(l,r,nd<<1|1,mid+1,y);
	return mod(i1+i2);
}
void dok(ll nd){
	ll &ret=lz[nd];
	lz[nd<<1|1]=mod(lz[nd<<1|1]*ret);
	lz[nd<<1]=mod(lz[nd<<1]*ret);ret=1;
}
void denle(ll p,ll v,ll nd,ll x,ll y){
	if(x==y){
		lz[nd]=v;
		return;
	}
	dok(nd);ll mid=(x+y)>>1;
	if(p<=mid)
		denle(p,v,nd<<1,x,mid);
	else
		denle(p,v,nd<<1|1,mid+1,y);
}	
void carp(ll l,ll r,ll v,ll nd,ll x,ll y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r){
		lz[nd]=mod(lz[nd]*v);
		return;
	}
	dok(nd);ll mid=(x+y)>>1;
	carp(l,r,v,nd<<1,x,mid);
	carp(l,r,v,nd<<1|1,mid+1,y);
}
ll bul(ll p,ll nd,ll x,ll y){
	if(x==y)
		return lz[nd];
	dok(nd);ll mid=(x+y)>>1;
	if(p<=mid)
		return bul(p,nd<<1,x,mid);
	return bul(p,nd<<1|1,mid+1,y);	
}
void build(ll nd,ll x,ll y){
	lazy[nd]=lz[nd]=1;
	if(x==y)
		return;
	ll mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);
}
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	scanf("%lld%lld",&val[1],&q);ll n=1;
	for(ll i=1;i<=q;i++){
		scanf("%lld",&type[i]);
		if(type[i]==1){
			ll cost,pp;
			scanf("%lld%lld",&pp,&cost);
			adj[pp].pb(++n);
			par[n]=pp;
			val[n]=cost;
			node[i]=n;
			continue;
		}
		scanf("%lld",&query[i]);
	}
	build(1,1,n);
	dfs(1);d[1]=1;
	upd(1,val[1],1,1,n);
	denle(1,1,1,1,n);
	for(ll i=1;i<=q;i++){
		if(type[i]==1){
			ll pr=par[node[i]];d[node[i]]=1;
			ll k=bul(st[pr],1,1,n);
			upd(st[node[i]],mod(val[node[i]]*k),1,1,n);
			denle(st[node[i]],k,1,1,n);
			inc(st[pr],en[pr],Fe(d[pr],INF-2),1,1,n);
			carp(st[pr],en[pr],Fe(d[pr],INF-2),1,1,n);
			d[pr]++;inc(st[pr],en[pr],d[pr],1,1,n);
			carp(st[pr],en[pr],d[pr],1,1,n);
		}
		else{
			if(query[i]==1)
				printf("%lld\n",tap(1,n,1,1,n));
			else{
				ll nd=par[query[i]];
				printf("%lld\n",mod(tap(st[query[i]],en[query[i]],1,1,n)*Fe(bul(st[nd],1,1,n),INF-2)));
			}
		}
	}
	return 0;
}
