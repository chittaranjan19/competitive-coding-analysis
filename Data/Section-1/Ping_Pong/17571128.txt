#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

#define ll long long
#define ld long double

using namespace std;

const ll inf = (ll)2 * 1e18;
const ll MOD = (ll)1e9 + 7;
const ll P = 239;
const ll MAX_N = 500000;
const long double pi = 3.1415926535897932384626;
const long double eps = 1e-6;

string s;

bool same(int x1, int x2, int l)
{
    if (s.size() - x1 != s.size() - x2)
        return false;
    bool ans = true;
    for (int i = 0; i < l; i++)
        ans &= (s[x1 + i] == s[x2 + i]);
    return ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> s;
    int l = s.size();
    bool dp[l][2];
    for (int i = 0; i < l; i++)
        for (int j = 0; j < 2; j++)
            dp[i][j] = false;
    for (int i = l - 1; i >= 5; i--)
    {
        if (i + 2 <= l && (i + 2 == l || (dp[i + 2][0] && !same(i, i + 2, 2)) || dp[i + 2][1]))
            dp[i][0] = true;
        if (i + 3 <= l && (i + 3 == l || dp[i + 3][0] || (dp[i + 3][1] && !same(i, i + 3, 3))))
            dp[i][1] = true;
    }
    set<string> ans;
    for (int i = 0; i < l; i++)
        for (int j = 0; j < 2; j++)
            if (dp[i][j])
                ans.insert(s.substr(i, j + 2));
    cout << ans.size() << endl;
    for (set<string>::iterator it = ans.begin(); it != ans.end(); it++)
        cout << *it << endl;
    return 0;
}
