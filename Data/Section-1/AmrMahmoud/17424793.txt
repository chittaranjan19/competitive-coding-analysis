#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

typedef complex<double> CD;

const double PI = acos(-1.);

inline void dft(CD out[], int n, int oper)
{
  for(int i=1,j=0;i<n - 1;i++)
  {
    for(int s=n;j ^= s >>= 1, ~j & s;);
    if(i < j) swap(out[i], out[j]);
  }
  for(int d=0;(1<<d)<n;d++)
  {
    int m = 1<<d, m2 = m<<1;
    double theta = PI/m * oper;
    CD u0 = CD(cos(theta), sin(theta));
    for(int i = 0;i < n;i += m2)
    {
      CD u = 1.;
      for(int j = i;j < i + m;j++)
      {
        CD p1 = out[j] + u*out[j + m];
        CD p2 = out[j] - u*out[j + m];
        out[j] = p1;
        out[j + m] = p2;
        u *= u0;
      }
    }
  }
}

CD _a[1048600], _b[1048600], _c[1048600];

inline void conv(int a[], int b[], int c[], int n)
{
  //assert((n & (n - 1)) == 0);
  for(int i=0;i<n;i++)
  {
    _a[i] = CD(a[i], 0);
    _b[i] = CD(b[i], 0);
  }
  dft(_a, n, 1);
  dft(_b, n, 1);
  for(int i=0;i<n;i++)
    _c[i] = _a[i] * _b[i];
  dft(_c, n, -1);
  for(int i=0;i<n;i++)
    c[i] = (int)(_c[i].real()/n + .5);
}

int sz;
int tmp[15][1048600];

int* power(int a[], int k, int ind)
{
  if(k == 1) return a;
  int *x = power(a, k / 2, ind + 1);
  if(sz != (1 << 20))
  {
    while(sz & (sz - 1)) sz++;
    sz *= 2;
  }
  sz = min(sz, 1 << 20);
  conv(x, x, tmp[ind], sz);
  while(tmp[ind][sz - 1] == 0) sz--;
  if(k & 1)
  {
    if(sz != (1 << 20))
    {
      while(sz & (sz - 1)) sz++;
      sz *= 2;
    }
    sz = min(sz, 1 << 20);
    conv(tmp[ind], a, tmp[ind], sz);
    while(tmp[ind][sz - 1] == 0) sz--;
  }
  for(int i=0;i<sz;i++)
    if(tmp[ind][i])
      tmp[ind][i] = 1;
  return tmp[ind];
}

int main()
{
  int n, k, x;
  scanf("%d %d", &n, &k);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &x);
    tmp[0][x] = 1;
    sz = max(sz, x + 1);
  }
  int *ans = power(tmp[0], k, 1);
  for(int i=1;i<=1000000;i++)
    if(ans[i])
      printf("%d ", i);
  return 0;
}
