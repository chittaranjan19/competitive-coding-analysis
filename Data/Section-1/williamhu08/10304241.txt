//why are you stalking me?
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
#define dbg(x) cerr << #x << " = " << x << endl

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e5 + 100;

void setmin (int &a, int b) {
	if (a > b) {
		a = b;
	}
}

int N, M;
vector<pii> adj[MAXN];
bool vis[MAXN];
int dist1[MAXN], distn[MAXN], spath = MAXN;
pii state[MAXN];
int dp[MAXN];
unordered_set<int> st[MAXN];
vector<pair<pii, int> > ans;

void getpath (int x, int *arr) {
	queue<int> q;
	q.push(x);
	fillchar(vis, 0);
	vis[x] = true;
	while (!q.empty()) {
		int f = q.front();
		q.pop();
		for (pii p : adj[f]) {
			int t = p.first;
			if (!vis[t]) {
				q.push(t);
				vis[t] = true;
				arr[t] = arr[f] + 1;
			}
		}
	}
}

bool onpath (int u, int v) {
	return dist1[u] + 1 + distn[v] == spath;
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> N >> M;
	int totwork = 0;
	for (int i = 0, a, b, c; i < M; i++) {
		cin >> a >> b >> c;
		totwork += c;
		adj[a].push_back(pii(b, c));
		adj[b].push_back(pii(a, c));
	}
	//edsger dijkstra
	//calculate shortest path from 1. and from N.
	getpath(1, dist1);
	getpath(N, distn);
	for (int i = 1; i <= N; i++) {
		for (pii p : adj[i]) {
			setmin(spath, dist1[i] + distn[p.first] + 1);
		}
	}
	deque<pii> dq;
	fillchar(vis, 0);
	fillchar(dp, -1);
	dq.push_front(pii(1, dp[1] = 0));
	vis[1] = true;
	while (!dq.empty()) {
		for (pii p : dq) {
			//get to the next level
			int u = p.first, w = p.second;
			for (pii q : adj[u]) {
				int v = q.first;
				if (onpath(u, v)) {
					bool work = q.second;
					int nw = w + work;
					if (dp[v] < nw) {
						dp[v] = nw;
						state[v] = pii(u, !work);
					}
				}
			}
		}
		for (int sz = dq.size(); sz--; ) {
			//delete this, insert the children
			int u = dq.front().first;
			dq.pop_front();
			for (pii p : adj[u]) {
				//go down...
				int v = p.first;
				if (!vis[v] && onpath(u, v)) {
					vis[v] = true;
					dq.push_back(pii(v, dp[v]));
				}
			}
		}
	}
	cout << spath + totwork - 2 * dp[N] << '\n';
	for (int u = N; u != 1; ) {
		int v = state[u].first;
		if (state[u].second) {
			//then add it to the need repairs
			ans.push_back(make_pair(pii(u, v), 1));
		}
		st[min(u, v)].insert(max(u, v));	//basically, all edges in shortest path
		u = v;
	}
	for (int i = 1; i <= N; i++) {
		for (pii p : adj[i]) {
			int t = p.first;
			if (i < t && p.second && !st[i].count(t)) {
				ans.push_back(make_pair(pii(i, t), 0));
			}
		}
	}
	for (auto p : ans) {
		cout << p.first.first << ' ' << p.first.second << ' ' << p.second << '\n';
	}
}