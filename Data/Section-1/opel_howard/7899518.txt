#include <cstdio>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
// end of template

typedef unsigned long long ull;
template <typename U> class Comparator {
public:
	bool operator() (const U lhs, const U rhs) {
		// implement
		return true;
	}
};
// end of template

int main() {
	// freopen("277A.in", "r", stdin);
	int n, m;
	scanf("%d %d", &n, &m);
	
	vector<int> lang[105];
	bool vis_lang[105];
	vector<int> emp[105];
	bool vis_emp[105];
	for (int it = 1; it <= n; ++it) {
		vis_emp[it] = false;
	}
	for (int it = 1; it <= m; ++it) {
		vis_lang[it] = false;
	}
		
	for (int e = 1; e <= n; ++e) {
		int k;
		scanf("%d", &k);

		for (int it = 0; it < k; ++it) {
			int a;
			scanf("%d", &a);
			emp[e].push_back(a);
			lang[a].push_back(e);
		}
	}

	int n_set = 0;
	int empty_set = 0;
	for (int e = 1; e <= n; ++e) {
		if (!vis_emp[e]) {
			if (emp[e].size() == 0) {
				empty_set++;
				continue;
			}
			vis_emp[e] = true;
			queue<int> bfs;
			bfs.push(e);

			while (!bfs.empty()) {
				int current = bfs.front();
				bfs.pop();
				for (int i = 0; i < emp[current].size(); ++i) {
					if (!vis_lang[emp[current][i]]) {
						vis_lang[emp[current][i]] = true;
						for (int j = 0; j < lang[emp[current][i]].size(); ++j) {
							if (!vis_emp[lang[emp[current][i]][j]]) {
								vis_emp[lang[emp[current][i]][j]] = true;
								bfs.push(lang[emp[current][i]][j]);
							}
						}
					}
				}
			}
			n_set++;
		}
	}
	if (n_set)
		n_set--;
	printf("%d\n", n_set+empty_set);
	return 0;
}