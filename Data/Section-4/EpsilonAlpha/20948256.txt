import java.io.*;
import java.util.*;
import java.math.*;

/*
 * Created by Epsilon Alpha on 27-Sep-16 at 4:09 PM.
 */

public final class Grade
{
    final static int inf =  1000000007;
    public static void main(String[] args) throws Exception
    {
        Parser Reader = new Parser(System.in);
        OutputWriter Writer = new OutputWriter(System.out);

        int n = Reader.nextInt();
        int t = Reader.nextInt();
        String S = Reader.next();
        int dot = S.indexOf('.');

        if(dot==-1) //Dot not found
            Writer.println(S);
        else if(dot==n-2) //Only one digit after dot
        {
            if(S.charAt(n-1)>='5')
            {
                BigInteger bd = new BigInteger(S.substring(0,dot));
                Writer.println(bd.add(BigInteger.ONE));
            }
            else
                Writer.println(S);
        }
        else
        {
            int numbersAfterDecimal = n - dot - 1;
            int[] dp = new int[numbersAfterDecimal]; //Only digits after decimal and dot has been included
            char[] X = S.toCharArray();


            if(X[n-1]>'4')
                dp[numbersAfterDecimal-1] = 1;

            int limit = n - numbersAfterDecimal;

            for (int i = n - 2; i >= limit; i--)
            {
                int arrayIndex = i - limit;

                if(X[i]=='4')
                    dp[arrayIndex] = dp[arrayIndex+1] + 1;
                else if (X[i]<'4')
                    dp[arrayIndex] = inf;
                else if(X[i]>'4')
                    dp[arrayIndex] = 1;
            }

            int required = 0;
            //Find minimum position such that dp[pos]<=t
            for(int i = 0; i <= numbersAfterDecimal; i++)
            {
                if(dp[i]<=t)
                {
                    required = i;
                    break;
                }
            }
            if(required!=0)
            {
                BigDecimal bd = new BigDecimal(S);
                BigDecimal answer = bd.round(new MathContext(dot + required, RoundingMode.CEILING));
                Writer.println(answer);
            }
            else
            {
                BigInteger B = new BigInteger(S.substring(0,dot));
                Writer.println(B.add(BigInteger.ONE));
            }
        }

        Writer.close();
    }

    private static class Parser
    {
        final private int BUFFER_SIZE = 1 << 16;

        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Parser(InputStream in)
        {
            din = new DataInputStream(in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public int nextInt() throws Exception
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public long nextLong() throws Exception
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = c == '-';
            if (neg) c = read();
            do
            {
                ret = ret * 10 + c - '0';
                c = read();
            } while (c > ' ');
            if (neg) return -ret;
            return ret;
        }

        public String next() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c > ' ');
            return ret.toString();
        }

        public String nextLine() throws Exception
        {
            StringBuffer ret = new StringBuffer();
            byte c = read();
            while (c <= ' ') c = read();
            do
            {
                ret = ret.append((char) c);
                c = read();
            } while (c != '\n');
            return ret.toString();
        }

        private void fillBuffer() throws Exception
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1) buffer[0] = -1;
        }

        private byte read() throws Exception
        {
            if (bufferPointer == bytesRead) fillBuffer();
            return buffer[bufferPointer++];
        }
    }

    private static class OutputWriter
    {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream)
        {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)), true);
        }

        public OutputWriter(Writer writer)
        {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object... objects)
        {
            for (int i = 0; i < objects.length; i++)
            {
                if (i != 0)
                    writer.print(' ');
                writer.print(objects[i]);
            }
        }

        public void println(Object... objects)
        {
            print(objects);
            writer.println();
        }

        public void close()
        {
            writer.close();
        }

        public void flush()
        {
            writer.flush();
        }
    }
}