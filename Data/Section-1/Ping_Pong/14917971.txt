#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

using namespace std;
const int MAX_N = 100;
int graph[MAX_N][MAX_N];
bool used[MAX_N];
int n, m;

void dfs(int x)
{
    used[x] = true;
    for (int i = 0; i < n; i++)
        if (graph[x][i] && !used[i])
            dfs(i);
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int p, q;
    cin >> n >> m;
    set<int> lang[n];
    for (int i = 0; i < n; i++)
    {
        cin >> q;
        for (int j = 0; j < q; j++)
        {
            cin >> p;
            lang[i].insert(p);
        }
    }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            graph[i][j] = 0;
    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++)
            for (set<int>::iterator it = lang[i].begin(); it != lang[i].end(); it++)
                if (lang[j].count(*it) == 1)
                {
                    graph[i][j] = 1;
                    graph[j][i] = 1;
                    break;
                }
    /*for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            cout << graph[i][j] << " ";
        cout << endl;
    }*/
    for (int i = 0; i < n; i++)
        used[i] = false;
    int ans = 0;
    for (int i = 0; i < n; i++)
        if (!used[i])
        {
            ans++;
            dfs(i);
        }
    cout << ans - 1;
    return 0;
}
