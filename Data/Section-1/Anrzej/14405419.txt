#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <bitset>
#include <random>
#include <stack>
#include <list>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair
#define pb push_back

string s[11111];
ll n, m, a[4][1111][1111];

void gett(int id)
{
	queue<pair<pair<int, int>, int > > q;
	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++)
		{
			if (s[i][j] - '0' == id)
				q.push(mp(mp(i, j), 0));
		}
	}
	while (!q.empty())
	{
		int x0 = q.front().fs.fs, y0 = q.front().fs.sc, len = q.front().sc;
		a[id][y0][x0] = len;
		q.pop();
		for (int dx = -1; dx < 2; dx += 1)
		{
			for (int dy = -1; dy < 2; dy += 1)
			{
				if (dx == dy && dx + dy == 0) continue;
				int nx = x0 + dx, ny = y0 + dy;
				if (nx < 0 || nx > m - 1 || ny < 0 || ny > n - 1 || s[ny][nx] == '#' ) continue;
				if (a[id][ny][nx] > len + 1)
					q.push(mp(mp(nx, ny), len + 1));
			}
		}
	}
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> s[i];
	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++)
			a[1][i][j] = a[3][i][j] = a[2][i][j] = 1e9;
	}
	ll ans = 1e9;
	gett(1), gett(2), gett(3);
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			ans = min(ans, a[1][i][j] + a[2][i][j] + a[3][i][j]);
	}
	if (ans > 1e6)
		cout << -1;
	else cout << ans - 3;
	return 0;
}