#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>

#include<cmath>
#include<iostream>
#include<iomanip>
#include<fstream>

#include<string>
#include<utility>
#include<vector>
#include<list>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>

#define ii long long int
#define pi 2*acos(0.0)
#define eps 1e-9
#define mem(x,y) memset(x,y,sizeof(x))
#define all(x) x.begin(), x.end()
#define pb push_back
#define sz(a) (int)a.size()
#define inf 2147483640
#define mx 110

#define white 0
#define black 1

using namespace std;

const int debug= 0;

int n,m;
char board[mx][mx];
char colors[] = {"WB"};

bool fill(int i,int j);

int main() {
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int i;

    while (cin>>n>>m) {
        for (i=0;i<n;++i) scanf("%s",board[i]);
        bool ans = fill(0, 0);
        if (!ans) i = 1/0;
        for (i=0;i<n;++i) puts(board[i]);
    }

    return 0;
}

bool fill(int i,int j) {
    if (i>=n) return 1;
    if (j>=m) return fill(i+1, 0);

    if (board[i][j]=='-') return fill(i, j+1);

    char ij_1, i_1j;
    if (!i) i_1j = '-';
    else i_1j = board[i-1][j];
    if (!j) ij_1 = '-';
    else ij_1 = board[i][j-1];

    bool ans = 0;

    if (i_1j=='-') {
        if (ij_1=='-') {
            board[i][j] = colors[white];
            ans = fill(i, j+1);
            if (ans) return ans;

            board[i][j] = colors[black];
            ans = fill(i, j+1);
            return ans;
        }
        if (ij_1=='W') {
            board[i][j] = colors[black];
            ans = fill(i, j+1);
            return ans;
        }

        board[i][j] = colors[white];
        ans = fill(i, j+1);
        return ans;
    }
    else {
        if (ij_1=='-') ij_1 = i_1j;
        if (i_1j!=ij_1) return 0;

        if (i_1j=='W') {
            board[i][j] = colors[black];
            ans = fill(i, j+1);
            return ans;
        }

        board[i][j] = colors[white];
        ans = fill(i, j+1);
        return ans;
    }
}
