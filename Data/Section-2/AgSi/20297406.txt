#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>

using namespace std;

const int mod = 1e9+7;
const int maxn = 200005;
int data[maxn];
int vis[maxn];
int flag =0;  //成环的标志

int dfs(int st,int fnum){
    vis[st]=fnum;

    if(vis[data[st] ]!=0){

        return fnum - vis[data[st] ] +1;
    }
    else{
        return ( dfs(data[st],fnum+1)  );
    }
}

int quickpow(int m,int n,int k)
{
    int b = 1;
    while (n > 0)
    {
          if (n & 1)
             b = (b*m)%k;
          n = n >> 1 ;
          m = (m*m)%k;
    }
    return b;
}


int main(){
    memset(vis,0,sizeof(vis));
    int n;
    scanf("%d",&n);
    int i,j;
    for(i=1;i<=n;i++)
        scanf("%d",&data[i]);
    __int64 ans=1;
    int sum=0;
    for(int i=1;i<=n;i++){
        flag=0;
        if(!vis[n]){
            int nsum=dfs(n,1);
            sum+=nsum;
            ans *= quickpow(2,nsum,mod)-2;
            ans%=mod;
        }
    }
    int sd=n-sum;
  //  printf("%d\n",sd);

    ans%=mod;
    if(sd<0)
        ans+=0;
    else
        ans*= quickpow(2,sd,mod);
    ans%=mod;
    printf("%I64d\n",ans);
    return 0;
}
