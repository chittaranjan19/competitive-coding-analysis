#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

const int MAXN = 100005;
LL dist[MAXN];
bool v[MAXN];
int parent[MAXN];
vector<pair<int, int> > graph[MAXN];
vector<int> sol;

int main()
{
  int n, m, x, y, z;
  scanf("%d%d", &n, &m);
  for(int i=2;i<=n;i++)
    dist[i] = 1LL << 60;
  for(int i=0;i<m;i++)
  {
    scanf("%d%d%d", &x, &y, &z);
    graph[x].pb(mp(y, z));
    graph[y].pb(mp(x, z));
  }
  priority_queue<pair<LL, int> > q;
  q.push(mp(0, 1));
  while(!q.empty())
  {
    int node = q.top().s;
    q.pop();
    if(v[node]) continue;
    v[node] = true;
    if(node == n) break;
    for(int i=0;i<graph[node].size();i++)
    {
      int nxt = graph[node][i].f;
      LL d = graph[node][i].s + dist[node];
      if(dist[nxt] > d)
      {
        dist[nxt] = d;
        parent[nxt] = node;
        q.push(mp(graph[node][i].s*-1,graph[node][i].f));
      }
    }
  }
  if(parent[n] == 0)
      printf("-1");
  else
  {
    int temp=n;
    while(temp != 1)
    {
      sol.push_back(temp);
      temp=parent[temp];
    }
    sol.push_back(1);
    for(int i=sol.size()-1;i>=0;i--)
        printf("%d ", sol[i]);
  }
  return 0;
}
