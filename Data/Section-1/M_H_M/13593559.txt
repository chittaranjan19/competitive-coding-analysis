#include <bits/stdc++.h>

#define SZ(x) ((int)x.size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 100 * 1000 + 100;

ll seg[32][4 * N];
int lazy[32][4 * N];

void shift(int v, int s, int e){
	int mid = (s + e) / 2;
	for(int i = 0; i < 32; ++i){
		if(lazy[i][v]){
			seg[i][2 * v + 0] = mid - s - seg[i][2 * v + 0];
			seg[i][2 * v + 1] = e - mid - seg[i][2 * v + 1];
			lazy[i][2 * v + 0] = 1 - lazy[i][2 * v + 0];
			lazy[i][2 * v + 1] = 1 - lazy[i][2 * v + 1];
			lazy[i][v] = 0;
		}
	}
}

void update(int v, int s, int e, int l, int r, int x){
	if(r <= s || e <= l) return;
	if(l <= s && e <= r){
		for(int i = 0; i < 32; ++i){
			if((x >> i) & 1){
				seg[i][v] = e - s - seg[i][v];
				lazy[i][v] = 1 - lazy[i][v];
			}
		}
		return;
	}
	shift(v, s, e);
	int mid = (s + e) / 2;
	update(2 * v + 0, s, mid, l, r, x);
	update(2 * v + 1, mid, e, l, r, x);
	for(int i = 0; i < 32; ++i)
		seg[i][v] = seg[i][2 * v + 0] + seg[i][2 * v + 1];
}

ll getsum(int v, int s, int e, int l, int r){
	if(r <= s || e <= l) return 0;
	if(l <= s && e <= r){
		ll sum = 0;
		for(int i = 0; i < 32; ++i)
			sum += seg[i][v] * (1 << i);
		return sum;
	}
	shift(v, s, e);
	int mid = (s + e) / 2;
	return getsum(2 * v + 0, s, mid, l, r) +
		   getsum(2 * v + 1, mid, e, l, r);
}

int n, q;

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for(int i = 0; i < n; ++i){
		int t; cin >> t;
		update(1, 0, n, i, i + 1, t);
	}
	cin >> q;
	for(int i = 0; i < q; ++i){
		int t; cin >> t;
		if(t == 1){
			int l, r;
			cin >> l >> r;
			cout << getsum(1, 0, n, l - 1, r) << "\n";
		}
		else{
			int l, r, x;
			cin >> l >> r >> x;
			update(1, 0, n, l - 1, r, x);
		}
	}
	return 0;
}
