#include <iostream>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <sstream>
#include <cmath>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>
#include <functional>
#include <ctime>
#include <climits>
#include <cstdlib>
#include <complex>
//#define NDEBUG 1
#include <cassert>

using namespace std;

#define rep(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); it++)
#define debug(...) fprintf(stderr, __VA_ARGS__)

typedef long long ll;
typedef pair<int, int> pii;
const int MOD = 1e9 + 7, MAXN = 4e5 + 10;

int dp[MAXN], dp2[MAXN];
int *cur = dp2, *prv = dp;

int main() {
	//why are you stalking me?
	int r, g;
	cin >> r >> g;
	int b = r + g;
	int n;
	for (n = 1; n * (n + 1) / 2 <= b; n++);
	n--;
	// cerr << n << endl;
	//great! the number of levels.
	cur[0] = 1;
	for (int i = 1; i <= n; i++) {
		swap(cur, prv);
		for (int j = 0; j <= i * (i + 1) / 2; j++) {
			cur[j] = (prv[j] + (j >= i ? prv[j - i] : 0)) % MOD;
			// cerr << "cur[" << j << "] = " << cur[j] << endl;
		}
	}
	// int ans = 0;
	// for (int i = 0; i <= 20; i++) {
		// cout << "dp[" << i << "] = " << dp[i] << endl;
	// }
	// cout << ans << endl;
	//ok careful de the dp computations
	int ans = 0, sum = n * (n + 1) / 2;
	for (int i = 0; i <= r; i++) {
		//there are i red blocks, sum - i green blocks
		if (i <= r && sum - i <= g) {
			ans = (ans + cur[i]) % MOD;
		}
	}
	cout << ans << endl;
}