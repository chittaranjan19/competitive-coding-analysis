#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int P = 239;
const int MAX_N = 200000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<vector<int> > graph;
vector<pair<int, int> > v;
vector<bool> used;
vector<int> a, b, pos;

int dfs(int x, int num)
{
    used[x] = true;
    b.push_back(x);
    v[x].first = num % 2;
    int cnt = 1;
    for (int i = 0; i < graph[x].size(); i++)
        if (!used[graph[x][i]])
            cnt += dfs(graph[x][i], num + 1);
    v[x].second = cnt;
    return cnt;
}

vector<int> tree;
int cnt_ver = 1, curr = 0;

void make_tree(int n)
{
    while (cnt_ver < n)
    {
        cnt_ver <<= 1;
        curr++;
    }
    tree.resize(cnt_ver * 2 - 1);
    for (int i = 0; i < cnt_ver * 2 - 1; i++)
        tree[i] = 0;
}

void update(int x, int lx, int rx, int l, int r, int val)
{
    if (rx < l || lx > r)
        return;
    else if (lx >= l && rx <= r)
        tree[x] += val;
    else
    {
        update(x * 2 + 1, lx, (lx + rx) / 2, l, r, val);
        update(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r, val);
    }
}

int ans(int x)
{
    int cnt = tree[x];
    while (x > 0)
    {
        cnt += tree[(x - 1) / 2];
        x = (x - 1) / 2;
    }
    return cnt;
}

void print_tree()
{
    int j = 0, c = (cnt_ver * 2 - 1) / 2, c1 = 1;
    for (int i = 0; i < curr + 1; i++)
    {
        for (int k = 0; k < c; k++)
            cout << " ";
        for (int i = 0; i < c1; i++)
        {
            if (tree[j] >= 0)
                cout << " ";
            cout << tree[j];
            j++;
            for (int r = 0; r < c * 2 + 1; r++)
                cout << " ";
        }
        cout << endl << endl;
        c1 *= 2;
        c /= 2;
    }
}

int main()
{
    //ifstream ifs("input.txt");
    //ofstream ofs("output.txt");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    a.resize(n);
    pos.resize(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];
    graph.resize(n);
    v.resize(n);
    used.resize(n, false);
    for (int i = 0; i < n - 1; i++)
    {
        int s, f;
        cin >> s >> f;
        graph[s - 1].push_back(f - 1);
        graph[f - 1].push_back(s - 1);
    }
    dfs(0, 0);
    for (int i = 0; i < n; i++)
        pos[b[i]] = i;
    /*for (int i = 0; i < n; i++)
        cout << pos[i] << " ";
    cout << endl;
    for (int i = 0; i < n; i++)
        cout << v[i].first << " ";
    cout << endl;
    for (int i = 0; i < n; i++)
        cout << v[i].second << " ";
    cout << endl;*/
    make_tree(n);
    for (int i = 0; i < m; i++)
    {
        int t;
        cin >> t;
        if (t == 1)
        {
            int x, val;
            cin >> x >> val;
            x--;
            if (v[x].first)
                val = -val;
            update(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1 + pos[x], cnt_ver - 1 + pos[x] + v[x].second - 1, val);
        }
        else
        {
            int x;
            cin >> x;
            x--;
            int cnt = ans(cnt_ver - 1 + pos[x]);
            if (v[x].first)
                cnt = -cnt;
            cout << cnt + a[x] << endl;
        }
        //print_tree();
    }
    return 0;
}
