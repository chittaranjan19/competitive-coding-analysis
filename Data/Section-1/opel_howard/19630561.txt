#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <climits>
#ifdef DEBUG
	#include <ctime>
#endif
using namespace std;

// template

// abbreviations
#define vi vector<int>
#define vl vector<ll>
#define vb vector<bool>
#define vs vector<string>
#define ii pair<int, int>
#define a first
#define b second
#define vii vector<ii>
#define mii map<ii>
#define vvi vector<vi>
#define vvl vector<vl>
#define que queue
#define pque priority_queue
#define stk stack
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define sz(var) ((int) var.size())
#define rep(it, n) for(int it = 0; it < n; ++it)
#define rep1(it, n) for(int it = 1; it <= n; ++it)
#define loop(it, from, to) for(int it = (from); it <= (to); ++it)
#define iter(it, cont) for(__typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define riter(it, cont) for(__typeof((cont).rbegin()) it = (cont).rbegin(); it != (cont).rend(); ++it)
#define all(cont) (cont).begin(), (cont).end()
#define memclr(var) memset(var, 0, sizeof(var))

typedef unsigned long long ull;
typedef long long ll;

const int INF = INT_MAX;
const int NINF = INT_MIN;
const ll INF_LL = LLONG_MAX;
const ll NINF_LL = LLONG_MIN;
const double PI = acos(-1.0);
const int MOD = 1e9+7;

#ifdef DEBUG
	#define debug(fmt, args...) printf("Line %d, in %s\t: " fmt, __LINE__, __FUNCTION__, ##args)
	#define rep_rt() printf("[Run time: %.3fs]\n", ((double) clock()) / CLOCKS_PER_SEC)
#else
	#define debug(...)
#endif

// end of template
#define MAX_N (int) (1e6)
int arr[MAX_N + 2];
int c[MAX_N + 2];

struct Q {
	int l, r;
	int i;
};

int sqrt_n;
bool operator< (Q a, Q b) {
	if (a.l / sqrt_n != b.l / sqrt_n)
		return a.l / sqrt_n < b.l / sqrt_n;
	return a.r > b.r;
}

vi unq_val;
int get_cidx(int val) {
	int l = 0, r = sz(unq_val);
	while (l < r) {
		int m = (l + r) >> 1;
		if (unq_val[m] < val) {
			l = m + 1;
		} else {
			r = m;
		}
	}
	return l;
}

#ifdef __WIN32 
	#define gc getchar
	#define pc putchar
#else
	#define gc getchar_unlocked
	#define pc putchar_unlocked
#endif
#define MAX_DIGIT_int 10
#define MAX_DIGIT_ll 19
#define FS_INT_TYPE(type) \
	void fsi(type &inp) { \
		register char c = gc(), prev = '+'; \
		for (; !isdigit(c); c = gc()) prev = c; \
		inp = 0; \
		for (; isdigit(c); c = gc()) { \
			inp = (inp << 3) + (inp << 1) + (c - '0'); \
		} \
		if (prev == '-') \
			inp = -inp; \
	} \
	void fso(type val) { \
		if (!val) { \
			pc('0'); \
			return; \
		} \
		char buff[MAX_DIGIT_ ##type]; \
		if (val < 0) { \
			pc('-'); \
			val = -val; \
		} \
		register int i; \
		for (i = 0; val; ++i, val /= 10) { \
			buff[i] = (val % 10) + '0'; \
		} \
		while (i--) { \
			pc(buff[i]); \
		} \
	}
FS_INT_TYPE(int)
FS_INT_TYPE(ll)

void fsi(char *str) {
	register char c = gc();
	for (; c <= 32; c = gc());
	register int idx = 0;
	for (; c > 32; c = gc()) {
		str[idx++] = c;
	}
	str[idx] = 0;
}

#define PRINT(str_var, length) \
	register int idx = 0, len = length; \
	while (idx != len) pc(str_var[idx++]);

void fso(const char *str) {
	PRINT(str, strlen(str));
}

void fso(char *str) {
	PRINT(str, strlen(str));
}

void fso(string &str) {
	PRINT(str, str.length());
}
#undef gc
#undef putchar

template <typename farg, typename ... args>
void fsi(farg &inp, args& ... rest) {
	fsi(inp);
	fsi(rest...);
}

template <typename farg, typename ... args>
void fso(farg val, args ... rest) {
	fso(val);
	fso(rest...);
}
// WARNING: Output doesn't work for minimum value

int main() {
#ifdef DEBUG
	freopen("703D.in", "r", stdin);
#endif

    int n;
    fsi(n);
    sqrt_n = sqrt(n);
    rep1(idx, n) {
    	fsi(arr[idx]);
    }
    unq_val = vi(arr + 1, arr + 1 + n);
    sort(all(unq_val));
    unq_val.resize(unique(all(unq_val)) - unq_val.begin());
    rep1(idx, n) {
    	arr[idx] = get_cidx(arr[idx]);
    }


    vector<Q> qs;
    int m;
    fsi(m);
    rep(idx, m) {
    	int l, r;
    	fsi(l, r);
    	Q q;
    	q.l = l;
    	q.r = r;
    	q.i = idx;
    	qs.pub(q);
    }

    sort(all(qs));

    memclr(c);
    vector<int> ans_arr(m);
    int ans = 0;
    int l = 1, r = 0;
    rep(idx, sz(qs)) {
    	Q q = qs[idx];
    	while (r < q.r) {
    		++r;
    		int val = arr[r];
    		if (c[val] % 2)
    			ans ^= unq_val[val];
    		c[val]++;
    		if ((c[val] % 2) and (c[val] > 1))
    			ans ^= unq_val[val];
    	}
    	while (r > q.r) {
    		int val = arr[r];
    		if (c[val] % 2 == 0) {
    			ans ^= unq_val[val];
    		}
    		c[val]--;
    		if ((c[val] % 2 == 0) and (c[val] > 0)) {
    			ans ^= unq_val[val];
    		}
    		--r;
    	}
    	while (l < q.l) {
    		int val = arr[l];
    		if (c[val] % 2 == 0)
    			ans ^= unq_val[val];
    		c[val]--;
    		if ((c[val] % 2 == 0) and (c[val] > 0)) {
    			ans ^= unq_val[val];
    		}
    		++l;
    	}
    	while (l > q.l) {
    		--l;
    		int val = arr[l];
    		if (c[val] % 2)
    			ans ^= unq_val[val];
    		c[val]++;
    		if ((c[val] % 2) and (c[val] > 1))
    			ans ^= unq_val[val];
    	}
    	ans_arr[q.i] = ans;
    }
    rep(idx, m) {
    	printf("%d\n", ans_arr[idx]);
    }


#ifdef DEBUG
    rep_rt();
#endif
    return 0;
}