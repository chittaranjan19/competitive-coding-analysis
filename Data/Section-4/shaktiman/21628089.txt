#include<bits/stdc++.h>
using namespace std;
#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

int main()
{
	int n,i,x,j;
	vector<int> v;
	vector<int> dp;
	vector<int>::iterator it;
	vector<int>::iterator it1;
	cin>>n;
	dp.push_back(2000000);
	for(i=0;i<n;i++)
	{	cin>>x;
		v.push_back(x);
		dp.push_back(2000000);
	}
	dp[0]=0;
	dp[1]=0;
	dp[2]=1;
//	dp[3]=2;
	
	for(j=2;j<n;j++)
	{
		it=lower_bound(v.begin(),v.begin()+j,j+1);
		it1=upper_bound(v.begin(),v.begin()+j,j+1);
//-----------------		
		if(it<(v.begin()+j))
		{if(v[it-v.begin()]==j+1)
			dp[j+1]=min(dp[j+1],dp[it-v.begin()+1]+1);
		else

			dp[j+1]=min(dp[j+1],dp[j]+1);
		}
		else
		dp[j+1]=dp[j]+1;
		//-------------------------
		if(it1<(v.begin()+j))
		{
			dp[j+1]=min((dp[it1-v.begin()+1]+abs(v[it1-v.begin()+1]-j-1)+1),dp[j+1]);
		}
		//---------------------
//		trace1(v[j+1]);
		if(j!=n-1)
		{
			dp[v[j]]=min(dp[j+1]+1,dp[v[j]]);
			trace4(j+1,dp[j+1],dp[v[j]],v[j]);
		}

	}
	for(i=1;i<n;i++)
		cout<<dp[i]<<" ";
	cout<<dp[n]<<endl;
	return 0;
}