#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

vector<vb> v;
    int n, m;
int r2, c2;

int x_mov[] = {1, 0, -1, 0};
int y_mov[] = {0, 1, 0, -1};

bool dfs(int i, int j) {
	// printf("%d %d\n", i, j);
	// fflush(stdout);
	ii curr(i, j);
	if (v[curr.a][curr.b]) {
		if ((curr.a == r2) and (curr.b == c2))
			return true;
		return false;
	}
	v[curr.a][curr.b] = true;
	loop(mov_idx, 4) {
		ii n_pos(curr.a+y_mov[mov_idx], curr.b+x_mov[mov_idx]);
		if ((n_pos.a < 0) or (n_pos.a >= n) or (n_pos.b < 0) or (n_pos.b >= m))
			continue;
		if (dfs(n_pos.a, n_pos.b))
			return true;
	}
	v[curr.a][curr.b] = false;
	return false;
}


int main() {
    // freopen("540C.in", "r", stdin);
    
    scanf("%d %d%*c", &n, &m);
    vs grid(n);
    loop(i, n) {
    	getline(cin, grid[i]);
    }
    int r1, c1;
    scanf("%d %d %d %d", &r1, &c1, &r2, &c2);

    --r1, --c1, --r2, --c2;
	v.resize(n, vb(m, false));
    loop(i, n) {
    	loop(j, m) {
    		if (grid[i][j] == 'X') {
    			v[i][j] = true;
    		}
    	}
    }

    v[r1][c1] = false;
	if (dfs(r1, c1)) {
		puts("YES");
	} else {
		puts("NO");
	}

    return 0;
}