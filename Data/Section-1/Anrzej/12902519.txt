#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair


vector<int> g[20000];
vector<pair<int, int> > fct[300];
int cnt = 1, mt[100000];
bool u[100000];

bool dfs(int v)
{
    if (u[v]) return 0;
    u[v] = 1;
    for (int i = 0; i < g[v].size(); i++)
    {
        int to = g[v][i];
        if (mt[to] == -1 || dfs(mt[to]))
        {
            mt[to] = v;
            return 1;
        }
    }
    return 0;
}

int main()
{
    //freopen("connect.in", "r", stdin);
    //freopen("connect.out", "w", stdout);
    int n, m, a[300];
    pair<int, int> v[300];
    cin >> n >> m;
    for (int i = 0; i < n; i++){
        cin >> a[i];
        int t = a[i];
        for (int j = 2; j*j <= t; j++)
        {
            while (t%j == 0){
                fct[i+1].push_back(mp(j,cnt++));
                t /= j;
            }
        }
        if (t != 1)
            fct[i+1].push_back(mp(t,cnt++));
    }
    for (int i = 0; i < m; i++){
        cin >> v[i].fs >> v[i].sc;
    }
    ll ans = 0;
    bool part[10000];
    memset(part, 0, sizeof(part));
    for (int i = 0; i < m; i++)
    {
        int a = v[i].fs, b = v[i].sc;
        if (a % 2 == 0)
            swap(a, b);
        vector<pair<int, int> > tmp = fct[b];
        for (int j = 0; j < fct[a].size(); j++)
        {
            pair<int, int> t = fct[a][j], tt;
            for (int k = 0; k < fct[b].size(); k++)
            {
                tt = fct[b][k];
                if (t.fs == fct[b][k].fs)
                {
                    int aa = fct[b][k].sc;
                    g[t.sc].push_back(fct[b][k].sc);
                    part[t.sc] = 1;
                    g[fct[b][k].sc].push_back(t.sc);
                }
            }
        }
    }
    memset(mt, -1, sizeof(mt));
    memset(u, 0, sizeof(u));
    for (int i = 1; i < cnt; i++){
        memset(u, 0, sizeof(u));
        if (part[i]) ans += dfs(i);
    }
    cout << ans;
    return 0;
}