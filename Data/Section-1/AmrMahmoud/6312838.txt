#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair

using namespace std;

map<int,vector<int> > graph;
map<int,int> counter;
map<int,bool> visited;
stack<int> dfs;
vector<int> solution;

int main()
{
    int n,x,y;
    cin >> n;
    for(int i=0;i<n;i++)
    {
        scanf("%d %d",&x,&y);
        graph[x].pb(y);
        graph[y].pb(x);
        counter[x]++,counter[y]++;
    }
    for(map<int,int>::iterator it = counter.begin() ; it != counter.end() ; it++)
    {
        if(it->second == 1)
        {
            dfs.push(it->first);
            while(!dfs.empty())
            {
                int temp = dfs.top();
                dfs.pop();
                solution.pb(temp);
                if(counter[temp] == 1 && temp != it->first)
                    break;
                for(int i=0;i<graph[temp].size();i++)
                {
                    if(!visited[graph[temp][i]])
                    {
                        dfs.push(graph[temp][i]);
                        visited[graph[temp][i]] = true;
                    }
                }
            }
            break;
        }
    }
    for(int i=0;i<solution.size();i++)
        printf("%d ",solution[i]);
    return 0;
}
