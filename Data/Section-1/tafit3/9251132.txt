import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ProblemA {
    BufferedReader rd;

    private ProblemA() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] home = intarr();
        int[] uni = intarr();
        int res = 0;
        if(home[0] != uni[0] || home[1] != uni[1]) {
            int n = pint();
            for(int i=0;i<n;i++) {
                int[] line = intarr();
                if(line[0] == 0) {
                    double y = -((double)line[2])/line[1];
                    if(y >= Math.min(home[1],uni[1]) && y <= Math.max(home[1],uni[1])) {
                        res++;
                    }
                } else if(line[1] == 0) {
                    double x = -((double)line[2])/line[0];
                    if(x >= Math.min(home[0],uni[0]) && x <= Math.max(home[0],uni[0])) {
                        res++;
                    }
                } else if(home[0] == uni[0]) {
                    double y = -(((double)line[2])+((double)line[0])*home[0])/line[1];
                    if(y >= Math.min(home[1],uni[1]) && y <= Math.max(home[1],uni[1])) {
                        res++;
                    }
                } else if(home[1] == uni[1]) {
                    double x = -(((double)line[2])+((double)line[1])*home[1])/line[0];
                    if(x >= Math.min(home[0],uni[0]) && x <= Math.max(home[0],uni[0])) {
                        res++;
                    }
                } else {
                    double a = line[0];
                    double b = line[1];
                    double c = -line[2];

                    double a2 = home[1] - uni[1];
                    double b2 = uni[0] - home[0];
                    double c2 = ((double)uni[0])*home[1] - ((double)uni[1])*home[0];

                    double v = a*b2-a2*b;
                    if(Math.abs(v) > 1e-6) {
                        double x1 = (c*b2-c2*b)/v;
                        double y1 = (a*c2-a2*c)/v;

                        double cx = (home[0] + uni[0]) / 2;
                        double cy = (home[1] + uni[1]) / 2;
                        double r = Math.sqrt((home[0]-uni[0])*(home[0]-uni[0]) +
                                (home[1]-uni[1])*(home[1]-uni[1]))/2;

                        double z = (x1-cx)*(x1-cx)+(y1-cy)*(y1-cy);
                        if(z <= r*r) {
                            res++;
                        }
                    }
                }
            }
        }
        out(res);
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        int n = s.length();
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemA();
    }
}
