
import static java.lang.Math.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class C_DifficultConundrum {
	private final boolean isDebug;
	
	private int n;
	private long[] c;
	private String[] s_arr, s1_arr;
	
	public C_DifficultConundrum(boolean isDebug) {
		this.isDebug = isDebug;
	}
	
	public void readInput() {
		Scanner sc = null;
		if (isDebug) {
			try {
				sc = new Scanner(new FileInputStream("src\\x0003_codeforces_round_367_div_2\\C_input1.txt"));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			sc =  new Scanner(System.in);
		}
		
		n = sc.nextInt();
		if (isDebug)
			System.out.format("n=%d%n", n);
		
		c = new long[n];
		for (int i = 0; i < n; ++i) {
			c[i] = sc.nextLong();
		}
		
		if (isDebug) {
			for (int i = 0; i < n; ++i) {
				System.out.format("%d ", c[i]);
			}
			System.out.println();
		}
		
		s_arr = new String[n];
		s1_arr = new String[n];
		for (int i = 0; i < n; ++i) {
			s_arr[i] = sc.next();
			s1_arr[i] = new StringBuilder(s_arr[i]).reverse().toString();
		}
		
		if (isDebug) {
			for (int i = 0; i < n; ++i) {
				System.out.format("%s ", s_arr[i]);
			}
			System.out.println();
		}
	}
	
	private long dp[][];
	
	public void solve() {
		long INF = Long.MAX_VALUE / 2;
		dp = new long[n][2];
		dp[0][0] = 0;
		dp[0][1] = c[0];
		for (int i = 1; i < n; ++i) {
			{
				long v0 = INF, v1 = INF;
				if (compare(s_arr[i - 1], s_arr[i]) == LESS) {
					v0 = dp[i - 1][0];
				}
				
				if (compare(s1_arr[i - 1], s_arr[i]) == LESS){
					v1 = dp[i - 1][1];
				}
				
				dp[i][0] = min(v0, v1);
			}
			/////////////////////
			{
				long v0 = INF, v1 = INF;
				if (compare(s_arr[i - 1], s1_arr[i]) == LESS) {
					v0 = dp[i - 1][0] + c[i];
				}
				
				if (compare(s1_arr[i - 1], s1_arr[i]) == LESS){
					v1 = dp[i - 1][1] + c[i];
				}
				
				dp[i][1] = min(v0, v1);
			}
		}
		
		long res = min(dp[n - 1][0], dp[n - 1][1]);
		res = res >= INF ? -1 : res;
		System.out.println(res);
		
//		String s1 = "bb", s2 = "aaa";
//		System.out.format("?: %s vs %s: %d%n", s1, s2, s1.compareTo(s2));
	}
	
	public static final int LESS = 0, GR = 1, NO = 2;
	
	private int compare(String a, String b) {
		if (a.length() < b.length()) {
			int idx = 0;
			int len = a.length();
			while (idx < len && a.charAt(idx) == b.charAt(idx)) {
				idx++;
			}
			
			if (idx == len) {
				return LESS;
			} else {
				return NO;
			}
		} else if (a.length() > b.length()) {
			int idx = 0;
			int len = b.length();
			while (idx < len && a.charAt(idx) == b.charAt(idx)) {
				idx++;
			}
			
			if (idx == len) {
				return GR;
			} else {
				return NO;
			}
		} else {
			int idx = 0;
			int len = a.length();
			while (idx < len && a.charAt(idx) == b.charAt(idx)) {
				idx++;
			}
			
			if (idx == len) {
				return LESS;
			} else if (a.charAt(idx) < b.charAt(idx)) {
				return LESS;
			} else {
				return GR;
			}
		}
		
	}
	
	public static void main(String[] args) {
		C_DifficultConundrum solver = new C_DifficultConundrum(false);
		solver.readInput();
		solver.solve();
	}
}
