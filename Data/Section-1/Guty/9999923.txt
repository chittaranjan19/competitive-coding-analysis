#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl 

typedef long long tint;

struct letter
{
	char val;
	bool cas;
};

bool operator < (letter l1, letter l2)
{
	if (l1.val < l2.val)
		return true;
	if (l1.val > l2.val)
		return false;
	return (l1.cas < l2.cas);
}

using namespace std;

int main()
{
	string s;
	string t;
	cin >> s >> t;
	int n = s.size();
	int m = t.size();
	vector<letter> sV (n);
	vector<letter> tV (m);
	forn(i,n)
	{
		letter l;
		if (s[i]-'A' > 26)
		{
			l.val = s[i] - 32;
			l.cas = true; // lowecase
		}
		else
		{
			l.cas = false; // uppercase
			l.val = s[i];
		}
		sV[i] = l;
	}
	forn(i,m)
	{
		letter l;
		if (t[i]-'A' > 26)
		{
			l.val = t[i] - 32;
			l.cas = true; // uppercase
		}
		else
		{
			l.cas = false; // lowercase
			l.val = t[i];
		}
		tV[i] = l;
	}
	sort(sV.begin(),sV.end());
	sort(tV.begin(),tV.end());
	int yay = 0;
	int whoops = 0;
	int i = 0;
	int j = 0;
	while (i < n && j < m)
	{
		while (i < n && j < n && sV[i].val == tV[j].val)
		{
			if (sV[i].cas == tV[j].cas)
				yay++;
			else
				whoops++;
			i++;
			j++;
		}
		if (i < n && j < n && sV[i].val < tV[j].val)
			while(i < n && sV[i].val < tV[j].val)
				i++;
		if (i < n && j < n && sV[i].val > tV[j].val)
			while(j < n && sV[i].val > tV[j].val)
				j++;
	}
	if (yay > n)
		yay = n;
	if (yay + whoops > n)
		whoops = n - yay;
	cout << yay << " " << whoops << endl;
	return 0;
}
