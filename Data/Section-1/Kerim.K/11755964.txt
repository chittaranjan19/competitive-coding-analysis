/*
PROG:kerim
LANG:C++
*/
#include<bits/stdc++.h>
#define MAXN 1009
#define INF 1000000007
#define LLINF 1e18+7
#define mp(x,y) make_pair(x,y)
#define ff first
#define ss second
#define all(x) (x.begin(),x.end())
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<ll,int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
vector<ll>dp[MAXN];
ll c[MAXN];
int main()
{
	//Firtsly we build Pascal's Triangle
	
	dp[0].pb(1);
	for(int i=1;i<MAXN;i++)
	{
		dp[i].pb(1);
		for(int j=1;j<i;j++)
		dp[i].pb((dp[i-1][j]+dp[i-1][j-1])%INF);
		dp[i].pb(1);
	}
	ll k,sum=0,ans=1,ci;
	cin>>k;
	
	for(int i=0;i<k;i++)
		cin>>c[i],sum+=c[i];
	for(int i=k-1;i>=0;i--)
		ans=(ans*dp[sum-1][c[i]-1])%INF,sum-=c[i];
	cout<<ans<<endl;
	return 0;
}
