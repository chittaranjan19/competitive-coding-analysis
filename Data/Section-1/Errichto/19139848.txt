#include<bits/stdc++.h>
using namespace std;
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
const int nax = 1005;
typedef double T;

struct P {
    T x, y;
    void read() {
        scanf("%lf%lf", &x, &y);
    }
    void write() {
        printf("%.10lf %.10lf\n", x, y);
    }
    P operator - (P other) {
        return P{x - other.x, y - other.y};
    }
    P operator + (P other) {
        return P{x + other.x, y + other.y};
    }
    P operator * (T mul) {
        return P{x * mul, y * mul};
    }
    #define my_round(a) int(floor(a+0.1))
    int operator * (P other) { // the only thing on integers
        return my_round(x) * my_round(other.y) - my_round(y) * my_round(other.x);
    }
    T norm() {
        return sqrt(x * x + y * y);
    }
};

int n;
P t[nax];
P vec[nax]; // vec[i] = t[i+1] - t[i] (it's a vector)

T distLine(int i, P A) {
    T tmp = vec[i].x * (A.y - t[i].y) - vec[i].y * (A.x - t[i].x);
    return abs(tmp / vec[i].norm());
}

T interval(int from, int to, P A) {
    return max(distLine(from, A), distLine(to, A));
}

bool possible[nax][nax];
P best_point[nax][nax];
T best_r[nax][nax];

int main() {
    scanf("%d", &n);
    REP(i, n) t[i].read();
    if(n == 3) {
        puts("0");
        REP(i, 2)
            t[i].write();
        return 0;
    }
    REP(i, 2 * n) t[n+i] = t[i];
    REP(i, 3 * n) vec[i] = t[i+1] - t[i];
    REP(start, n) {
        int whereMid = start;
        for(int end = start + 1; vec[start] * vec[end] > 0; ++end) {
            assert(end < start + n);
            while(whereMid < end && interval(start, end, t[whereMid]) > interval(start, end, t[whereMid+1]))
                ++whereMid;
            REP(rep, 2) {
                int tu = whereMid;
                if(rep) tu = max(0, tu - 1);
                T low = 0, high = 1;
                REP(_, 42) {
                    T one = (6 * low + 5 * high) / 11;
                    T two = (5 * low + 6 * high) / 11;
                    if(one < 1e-11) break;
                    if(interval(start, end, t[tu] + (vec[tu] * one)) >
                       interval(start, end, t[tu] + (vec[tu] * two)))
                        low = one;
                    else
                        high = two;
                }
                T bb = (low + high) / 2;
                T tmp = interval(start, end, t[tu] + (vec[tu] * bb));
                if(rep == 0 || tmp < best_r[start][end]) {
                    best_point[start][end] = best_point[start+n][end+n]
                        = t[tu] + (vec[tu] * bb);
                    best_r[start][end] = best_r[start+n][end+n]
                        = interval(start, end, best_point[start][end]);
                    possible[start][end] = possible[start+n][end+n] = true;
                }
            }
        }
    }
    T r = 1e7; // infinity
    P a, b;
    REP(start, n) FOR(end, start + 1, start + n)
        if(possible[start][end] && possible[end+1][start+n-1]) {
            T maybe = max(best_r[start][end], best_r[end+1][start+n-1]);
            if(maybe < r) {
                r = maybe;
                a = best_point[start][end];
                b = best_point[end+1][start+n-1];
            }
        }
    printf("%.10lf\n", r);
    a.write();
    b.write();
    return 0;
}