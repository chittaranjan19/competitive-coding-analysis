#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>
#include <fstream>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<pair<pair<int, int>, pair<int, int> > > edges, chosen;
vector<pair<int, int> > graph[300005];
LL dist[300005];
bool v[300005];
vector<int> sol;

bool sorter(pair<pair<int, int>, pair<int, int> > a, pair<pair<int, int>, pair<int, int> > b)
{
  return a.s.f < b.s.f;
}

struct disjointset
{
    vector<int> rank, parent;
    int subtrees;

    disjointset(int n)
    {
        subtrees = n;
        for(int i=0;i<n;i++)
            rank.pb(1),parent.pb(i);
    }

    int find_set(int x)
    {
        if(x == parent[x])
            return x;
        return parent[x] = find_set(parent[x]);
    }

    void link(int x,int y)
    {
        if(rank[x] > rank[y])
            swap(x, y);
        parent[x] = y;
        if(rank[x] == rank[y])
            rank[y]++;
    }

    bool union_sets(int x,int y)
    {
        x = find_set(x),y = find_set(y);
        if(x != y)
        {
            link(x,y);
            subtrees--;
        }
        return x != y;
    }

    bool same_set(int x,int y)
    {
        return find_set(x) == find_set(y);
    }
};

int main()
{
  ios_base::sync_with_stdio(0);
  int n, m, x, y;
  LL z;
  cin >> n >> m;
  for(int i=0;i<m;i++)
  {
    cin >> x >> y >> z;
    edges.pb(mp(mp(x, y), mp(z, i)));
    graph[x].pb(mp(y, z));
    graph[y].pb(mp(x, z));
  }
  cin >> x;
  for(int i=1;i<=n;i++)
    dist[i] = 1LL << 55;
  dist[x] = 0;
  priority_queue<pair<LL, int> > q;
  q.push(mp(0, x));
  while(!q.empty())
  {
    int node = q.top().s;
    q.pop();
    if(v[node]) continue;
    v[node] = true;
    for(int i=0;i<graph[node].size();i++)
    {
      int nxt = graph[node][i].f;
      LL d = graph[node][i].s + dist[node];
      if(dist[nxt] > d)
      {
        dist[nxt] = d;
        q.push(mp(-d, nxt));
      }
    }
  }
  for(int i=0;i<m;i++)
  {
    x = edges[i].f.f;
    y = edges[i].f.s;
    z = edges[i].s.f;
    if(dist[x] + z == dist[y] || dist[y] + z == dist[x])
      chosen.push_back(edges[i]);
  }
  disjointset temp(n+1);
  sort(chosen.begin(), chosen.end(), sorter);
  LL res = 0;
  for(int i=0;i<chosen.size();i++)
  {
    x = chosen[i].f.f;
    y = chosen[i].f.s;
    z = chosen[i].s.f;
    int ind = chosen[i].s.s;
    if(temp.union_sets(x, y))
    {
      res+=z;
      sol.push_back(ind + 1);
    }
  }
  cout << res << "\n";
  for(int i=0;i<sol.size();i++)
    cout << sol[i] << " ";
  return 0;
}
