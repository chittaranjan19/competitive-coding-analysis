#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template
inline ll sqr(ll x) {
	return x*x;
}

const double PI = 3.141592653589793116;

int main() {
    // freopen("614C.in", "r", stdin);
    
    ll n;
    pair<ll, ll> p;
    scanf("%I64d", &n);
    scanf("%I64d %I64d", &p.a, &p.b);
    ll max_dist = -1, min_dist = 1 << 29;
    while (n--) {
    	pair<ll, ll> point;
    	scanf("%I64d %I64d", &point.a, &point.b);
    	ll dist = sqr(point.a-p.a)+sqr(point.b-p.b);
    	max_dist = max(dist, max_dist);
    	min_dist = min(dist, min_dist);
    }
    printf("%.30lf\n", PI*(max_dist-min_dist));

    return 0;
}