#include<stdio.h>
typedef struct tree tree;
struct tree
{
	int max,min;
};
tree t[800005];
int arr[200005];
void build(int node,int a,int b)//build(1,0,n-1)
{
	if(a==b)//leaf node
	{
		t[node].min=a;
		t[node].max=a;
		return ;	
	}
	else
	{
		build(node<<1,a,(a+b)/2);
		build( (node<<1)|1,(a+b)/2+1,b);
		if( arr[t[node<<1].min]<arr[t[(node<<1)|1].min] )
			t[node].min=t[node<<1].min;
		else
			t[node].min=t[(node<<1)|1].min;

		if( arr[t[node<<1].max]>arr[t[(node<<1)|1].max] )
			t[node].max=t[node<<1].max;
		else
			t[node].max=t[(node<<1)|1].max;
	}
}
tree query(int node,int l,int r,int a,int b)
{
	tree res;
	if(b<l || a>r)
	{
		res.min=9999999;
		res.max=-1;
		return res;
	}
	if(a>=l && b<=r)
	{
		return t[node];
	}
	tree t1,t2;
	t1=query(node<<1,l,r,a,(a+b)/2);
	t2=query((node<<1)|1,l,r,(a+b)/2+1,b);
	if(t1.max==-1 && t2.max!=-1)
	{
		res.max=t2.max;
		res.min=t2.min;
	}
	else if(t1.max!=-1 && t2.max==-1)
	{
		res.max=t1.max;
		res.min=t1.min;
	}
	else
	{
		if(arr[t1.min]<arr[t2.min])
			res.min=t1.min;
		else
			res.min=t2.min;
		if(arr[t1.max]>arr[t2.max])
			res.max=t1.max;
		else
			res.max=t2.max;
	}
	//printf("a=%d b=%d res=> %d %d\n",a,b,res.min,res.max);
	return res;
}
int main()
{
	int i,n,m,l,r,x;
	scanf("%d%d",&n,&m);
	for(i=0;i<n;i++)
		scanf("%d",&arr[i]);
	build(1,0,n-1);

	tree tmp;
	for(i=0;i<m;i++)
	{
		scanf("%d%d%d",&l,&r,&x);
		tmp=query(1,l-1,r-1,0,n-1);
		if(arr[tmp.min]==arr[tmp.max] && arr[tmp.min]==x)
		{
			printf("-1\n");
		}
		else//there is definitely a answer
		{
			if(arr[tmp.min]!=x)
				printf("%d\n",tmp.min+1);
			else
				printf("%d\n",tmp.max+1);
		}
	}
	return 0;
}
