#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100001
#define maxC 1000000007
#define mp make_pair
#define F first
#define S second
#define pb push_back

using namespace std;
int n, m, d[mn], dp[mn], trace[mn], way[mn], r = 0;
vector < pair<int, int > > g[mn];
pair< pair<int, int>, int > edge[mn], ans[mn];
bool mark[mn];

void setup ()
{
    int a, b, c;
    cin >> n >> m;
    FOR(i, 1, m)
    {
        cin >> a >> b >> c;
        g[a].pb(mp(b, c));
        g[b].pb(mp(a, c));
        edge[i] = mp(mp(a, b), c);
    }
    memset(mark, 0, sizeof(mark));
    memset(trace, -1, sizeof(trace));
    memset(d, 60, sizeof(d));
    memset(dp, 0, sizeof(dp));
}

void dfs(int u)
{
    if (u == 1)
        return;
    mark[u] = true;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        int w = g[u][i].S;
        if (d[v] > d[u] + 1 || (d[v] == d[u] + 1 && dp[v] < dp[u] + w))
        {
            d[v] = d[u] + 1;
            dp[v] = dp[u] + w;
            trace[v] = u;
        }
        if(mark[v])
            continue;
        dfs(v);
    }
    mark[u] = false;
}

void xuly ()
{
    d[n] = dp[n] = 0;
    dfs(n);
    int id = 1;
    while (id != n)
    {
        way[id] = trace[id];
        id = trace[id];
    }
    FOR(i, 1, m)
    {
        int u = edge[i].F.F;
        int v = edge[i].F.S;
        int w = edge[i].S;
        if ((way[u] == v || way[v] == u) && !w)
            ans[++ r] = mp(mp(u, v), 1);
        if (way[u] != v && way[v] != u && w)
            ans[++ r] = mp(mp(u, v), 0);
    }
    cout << r << "\n";
    FOR(i, 1, r)
    cout << ans[i].F.F << " " << ans[i].F.S << " " << ans[i].S << "\n";
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
