#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<stack>


using namespace std;
//void dfs(vector<int>int a){
int main(){
  int n, m, p, q, i, j, a, b, temp;
  cin >> n >> m;  
  vector<int> adj[n+1];
  vector<int> list;
  vector<int> arr(n, -1);
  vector<int> head;
  vector<int> visited;
  vector<int> distance(n);
  //vector<int> anc(n, -1);
  for(i = 0; i < m; i++){
    cin >> a >> b;
    adj[a].push_back(b);
    arr[b] = a;
  }
  for(i = 0; i < n; i++){
    cin >> temp;
    list.push_back(temp);
  }  
  for(i = 1; i <= n; i++){
    if(arr[i] == -1)
      head.push_back(i);
  }
  stack<int> mystack;
  for(i = 0; i != head.size(); i++){
    mystack.push(head[i]);
    while(!mystack.empty()){
      temp = mystack.top();
      visited.push_back(temp);
      mystack.pop();
      for(j = 0; j != adj[temp].size(); j++){
	mystack.push(adj[temp][j]);
      }
    }     
  }
  for(i = 0 ; i != visited.size(); i++){
    visited[i]--;
    //cout << visited[i];

  }
  vector<int> final;
  vector<int> cancelled(n);
  vector<int> done(n);  
  reverse(visited.begin(), visited.end());  
  for(i = 0; i < n; i++){    
    if(cancelled[list[visited[i]]] == 1){
      cout << -1 ;
      return 0;
    }
    stack<int> yourstack;
    yourstack.push(list[visited[i]]);
    while(!yourstack.empty()){
      temp = yourstack.top();
      cancelled.push_back(temp);
      yourstack.pop();
      if(cancelled[temp])continue;
      cancelled[temp] = 1;			   
      for(j = 0; j != adj[temp].size(); j++){
	yourstack.push(adj[temp][j]);
      }
    }
    cancelled[list[visited[i]]] = 0;
    if(done[list[visited[i]]] == 0)final.push_back(list[visited[i]]);
    done[list[visited[i]]] = 1;
  }
  cout << final.size() << endl;
  for(i = 0; i != final.size(); i++)cout << final[i] << endl;   
  return 0;
}
