#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 500010;

struct node{
	multiset<int> s;
};

multiset<int> :: iterator it;
int n, sub[maxn], start_s[maxn], end_s[maxn], ans[maxn];
node st[maxn*5];
vector<int> preorder, adj[maxn];

void dfs(int cur, int parent)
{
	sub[cur] = 1;
	start_s[cur] = preorder.size();
	preorder.pb(cur);
	for(int it : adj[cur]){
		if(it != parent){
			dfs(it, cur);
			sub[cur] += sub[it];
		}
	}
	end_s[cur] = preorder.size()-1;
}

multiset<int> merge(multiset<int> s1, multiset<int> s2)
{
	if(s1.size() > s2.size())
		swap(s1, s2);
	for(int it : s1)
		s2.insert(it);
	return s2;
}

void init(int s, int e, int k)
{
	if(s==e){
		int u = preorder[s];
		st[k].s.insert(sub[u]);
		return;
	}
	int mid = (s+e)>>1;
	int lc = 2*k + 1;
	int rc = lc + 1;
	init(s, mid, lc);
	init(mid+1, e, rc);
	st[k].s = merge(st[lc].s, st[rc].s);
}

void update(int s, int e, int t, int q, int val, int k)
{
	if(s>e || s>q || q>e)
		return;
	if(s==e){
		if(t)
			st[k].s.insert(val);
		else
			st[k].s.erase(val);
		return;
	}
	int mid = (s+e)>>1;
	int lc = 2*k + 1;
	int rc = lc + 1;
	update(s, mid, t, q, val, lc);
	update(mid+1, e, t, q, val, rc);
	if(t)
		st[k].s.insert(val);
	else
		st[k].s.erase(val);
}

int query(int s, int e, int qs, int qe, int val, int k)
{
	if(s>e || s>qe || qs>e)
		return inf;
	if(s>=qs && qe>=e){
		it = st[k].s.lower_bound(val);
		if(it==st[k].s.end())
			return inf;
		return *it;
	}
	int mid = (s+e)>>1;
	int lc = 2*k + 1;
	int rc = lc + 1;
	return min(query(s, mid, qs, qe, val, lc), query(mid+1, e, qs, qe, val, rc));
}

void solve(int cur, int parent)
{
	for(int it : adj[cur]){
		if(it != parent){
			update(0, n-1, 0, start_s[cur], sub[cur], 0);
			sub[cur] -= sub[it];
			update(0, n-1, 1, start_s[cur], sub[cur], 0);
			solve(it, cur);
			update(0, n-1, 0, start_s[cur], sub[cur], 0);
			sub[cur] += sub[it];
			update(0, n-1, 1, start_s[cur], sub[cur], 0);
		}
	}
	ans[cur] = 1;
	for(int it : adj[cur]){
		int cur_sz = sub[it];
		if(cur_sz > n/2){
			ans[cur] = 0;
			cur_sz -= n/2;
			int x;
			if(it == parent)
				x = min(query(0, n-1, 0, start_s[cur]-1, cur_sz, 0), query(0, n-1, end_s[cur]+1, n-1, cur_sz, 0));
			else
				x = query(0, n-1, start_s[it], end_s[it], cur_sz, 0);
			if(x <= n/2)
				ans[cur] = 1;
			return;
		}
	}
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, u, v;
	scanf("%d", &n);
	for(i=1; i<n; i++){
		scanf("%d%d", &u, &v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1, 0);
	init(0, n-1, 0);
	solve(1, 0);
	for(i=1; i<=n; i++)
		printf("%d ", ans[i]);
	printf("\n");
	return 0;
}
