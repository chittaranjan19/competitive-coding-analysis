import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ProblemD {
    BufferedReader rd;

    private ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int n = pint();
        char[][] c = new char[n][];
        for(int i=0;i<n;i++) {
            c[i] = rd.readLine().toCharArray();
        }
        List<int[]> os2 = new ArrayList<>();
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(c[i][j]=='o') {
                    os2.add(new int[] {i,j});
                }
            }
        }
        int[][] os = new int[os2.size()][];
        for(int i=0;i<os2.size();i++) {
            os[i] = os2.get(i);
        }
        int w = 2*n-1;
        char[][] res = new char[w][w];
        for(int i=0;i<w;i++) {
            Arrays.fill(res[i],'.');
        }
        res[n-1][n-1] = 'o';
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(c[i][j] == 'x') {
                    for(int[] p: os) {
                        int dx = i-p[0];
                        int dy = j-p[1];
                        if(res[n-1+dx][n-1+dy] != 'x') {
                            boolean ok = true;
                            for(int[] q: os) {
                                int tx = q[0] + dx;
                                int ty = q[1] + dy;
                                if(tx >= 0 && tx < n && ty >= 0 && ty < n) {
                                    if(c[tx][ty]=='.') {
                                        ok = false;
                                        break;
                                    }
                                }
                            }
                            if(ok) {
                                res[n-1+dx][n-1+dy]='x';
                            }
                        }
                    }
                }
            }
        }
        for(int i=0;i<w;i++) {
            for(int j=0;j<w;j++) {
                if(res[i][j] == 'x') {
                    int dx = i-n+1;
                    int dy = j-n+1;
                    for(int[] p: os) {
                        int tx = p[0] + dx;
                        int ty = p[1] + dy;
                        if(tx >= 0 && tx < n && ty >= 0 && ty < n) {
                            c[tx][ty]='X';
                        }
                    }
                }
            }
        }
        boolean ok = true;
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(c[i][j]=='x') {
                    ok = false;
                    break;
                }
            }
            if(!ok) {
                break;
            }
        }
        if(ok) {
            out("YES");
            for(int i=0;i<w;i++) {
                out(new String(res[i]));
            }
        } else {
            out("NO");
        }
    }

    private int pint() throws IOException {
        return pint(rd.readLine());
    }

    private int pint(String s) {
        return Integer.parseInt(s);
    }



    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }



    private long plong() throws IOException {
        return plong(rd.readLine());
    }

    private long plong(String s) {
        return Long.parseLong(s);
    }



    private long[] longarr() throws IOException {
        return longarr(rd.readLine());
    }

    private long[] longarr(String s) {
        String[] q = split(s);
        int n = q.length;
        long[] a = new long[n];
        for(int i=0;i<n;i++) {
            a[i] = Long.parseLong(q[i]);
        }
        return a;
    }



    private double[] doublearr() throws IOException {
        return doublearr(rd.readLine());
    }

    private double[] doublearr(String s) {
        String[] q = split(s);
        int n = q.length;
        double[] a = new double[n];
        for(int i=0;i<n;i++) {
            a[i] = Double.parseDouble(q[i]);
        }
        return a;
    }

    private String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        if(n == 0) {
            return new String[0];
        }
        int sp = 0;
        for(int i=0;i<n;i++) {
            if(s.charAt(i)==' ') {
                sp++;
            }
        }
        String[] res = new String[sp+1];
        int last = 0;
        int x = 0;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                res[x++] = s.substring(last,i);
                last = i+1;
            }
        }
        res[x] = s.substring(last,n);
        return res;
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
