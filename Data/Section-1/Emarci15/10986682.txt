#include <iostream>

using namespace std;

int n;

int d[200];
int h[200];
int eler[200];
bool kor[200];

long long ko[200];
int kv;

int dfs(int ke,int r) {
    if(eler[ke]) return -1;
    eler[ke] = r;

    if(eler[h[ke]] == r) {
        kor[ke] = 1;
        if(h[ke] == ke) return -1;
        d[ke] = 1;
        return h[ke];
    }

    int ret = dfs(h[ke],r);

    d[ke] = d[h[ke]] + 1;
    if(ret >= 0) {
        kor[ke] = 1;

        if(ret == ke) {
            ko[kv++] = d[ke];
            return -1;
        }
    } else {
        if(kor[h[ke]]) d[ke] = 1;
    }

    return ret;
}

long long gcd(long long a, long long b) {
    if(a < b) swap(a,b);
    if(b==0) return a;
    return gcd(b,a%b);
}

int main()
{
    cin >> n;

    for(int i=0; i<n; i++) {
        cin >> h[i];
        h[i]--;
    }

    for(int i=0; i<n; i++) {
        if(!eler[i]) {
            dfs(i,i+1);
        }
    }

    int maxx = 0;
    for(int i=0; i<n; i++) {
        if((d[i] > maxx) && (!kor[i])) maxx = d[i];
    }

    long long minl = 1;
    for(int i=0; i<kv; i++) {
        minl = (minl*ko[i])/gcd(minl,ko[i]);
    }

    long long sol = minl;
    while(sol < maxx) {
        sol += minl;
    }

    cout << sol << endl;

    return 0;
}
