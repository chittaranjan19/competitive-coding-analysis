#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-4
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[105], tree[1500];

void build(int i,int L,int R)
{
  if(L == R)
  {
    tree[i] = 0;
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  tree[i] = 0;
}

void update(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree[i] = val;
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree[i] = max(tree[i*2 + 1], tree[i*2 + 2]);
}

int query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return max(query(i*2 + 1, L, (L + R) / 2, x, y), query(i*2 + 2, (L + R) / 2 + 1, R, x, y));
}

int cnt[305];

int main()
{
  int n, t, res = 0, x, y, z;
  scanf("%d %d", &n, &t);
  for(int i=0;i<n;i++)
  {
    scanf("%d", &arr[i]);
    cnt[arr[i]]++;
  }
  if(t <= 800)
  {
    for(int i=0;i<t;i++)
    {
      for(int j=n-1;j>=0;j--)
      {
        x = query(0, 1, 300, arr[j], 300) + 1;
        res = max(res, x);
        update(0, 1, 300, arr[j], x);
      }
    }
    printf("%d", res);
    return 0;
  }
  for(int i=1;i<=300;i++)
  {
    if(!cnt[i]) continue;
    y = z = 0;
    build(0, 1, i);
    for(int _=0;_<400;_++)
    {
      for(int k=n-1;k>=0;k--)
      {
        if(arr[k] > i) continue;
        x = query(0, 1, i, arr[k], i) + 1;
        z = max(z, x);
        update(0, 1, i, arr[k], x);
      }
    }
    y += cnt[i] * (t - 800) + z;
    build(0, i, 300);
    z = 0;
    for(int _=0;_<400;_++)
    {
      for(int k=n-1;k>=0;k--)
      {
        if(arr[k] < i) continue;
        x = query(0, i, 300, arr[k], 300) + 1;
        z = max(z, x);
        update(0, i, 300, arr[k], x);
      }
    }
    y += z;
    res = max(res, y);
  }
  printf("%d", res);
  return 0;
}