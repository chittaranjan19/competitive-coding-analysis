#include <bits/stdc++.h>
#define FOR(i, j, k) for(int i = j; i <= k; i ++)
#define FORD(i, j, k) for(int i = j; i >= k; i --)
#define mn 5010
#define base 13
#define maxC 1000000007
#define F first
#define S second
#define mp make_pair

using namespace std;
int n, aft[mn];
long long po[mn], hashVal[mn], dp[mn][mn], sumDp[mn][mn], ans = 0;
string digit;

long long getHash(int l, int r)
{
    long long re = (hashVal[r] - hashVal[l - 1] * po[r - l + 1]) % maxC;
    return (re + maxC) % maxC;
}

void setup()
{
    cin >> n >> digit;
    digit = " " + digit;
    po[0] = 1;
    FOR(i, 1, n)
    {
        po[i] = (po[i - 1] * base) % maxC;
        hashVal[i] = (hashVal[i - 1] * base + digit[i] - '0' + 1) % maxC;
    }
    aft[n] = n + 1;
    FORD(i, n - 1, 0)
    if (digit[i + 1] == '0')
        aft[i] = aft[i + 1];
    else
        aft[i] = i + 1;
}

void xuly()
{
    FOR(j, 1, n)
    FORD(i, j, 1)
    {
        if (digit[i] == '0')
        {
            sumDp[j][i] = sumDp[j][i + 1];
            continue;
        }
        if (i == 1)
        {
            dp[i][j] = 1;
            sumDp[j][i] = sumDp[j][i + 1] + 1;
            if (j == n)
                ans = (ans + 1) % maxC;
            continue;
        }
        int pos = i - (j - i + 1);
        if (pos > 0)
        {
            int l = pos - 1, r = i;
            while(r - l > 1)
            {
                int g = ((l + r) >> 1);
                int en = i + (g - pos);
                if (getHash(pos, g) == getHash(i, en))
                    l = g;
                else
                    r = g;
            }
            int en = i + (l - pos);
            if (l == i - 1 || digit[l + 1] > digit[en + 1])
                pos = aft[pos];
        }
        else
            pos = aft[0];
        dp[i][j] = sumDp[i - 1][pos];
        sumDp[j][i] = (sumDp[j][i + 1] + dp[i][j]) % maxC;
        if (j == n)
            ans = (ans + dp[i][j]) % maxC;
    }
    cout << ans;
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup();
    xuly();
    return 0;
}
