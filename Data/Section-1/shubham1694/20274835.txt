#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<vector<ll> > matrix;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 1010;

struct node{
	int val;
	node* r;
	node* d;
	node(int v){
		this->val = v;
		this->r = this->d = NULL;
	}
};

node* mat[maxn][maxn];
int n, m, arr[maxn][maxn];

int main()
{
	// freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i, j, q;
	scanf("%d%d%d", &n, &m, &q);
	for(i=0; i<=n+1; i++){
		for(j=0; j<=m+1; j++)
			mat[i][j] = new node(-1);
	}
	for(i=0; i<=n+1; i++){
		for(j=0; j<=m+1; j++){
			if(i-1 >= 0)
				mat[i-1][j]->d = mat[i][j];
			if(j-1 >= 0)
				mat[i][j-1]->r = mat[i][j];
		}
	}	
	for(i=1; i<=n; i++){
		for(j=1; j<=m; j++){
			int x;
			scanf("%d", &x);
			mat[i][j]->val = x;
		}
	}
	int a, b, c, d, h, w;
	while(q--){
		scanf("%d%d%d%d%d%d", &a, &b, &c, &d, &h, &w);
		node *root1, *root2, *root3, *root4;
		root1 = root2 = mat[0][0];
		for(i=0; i<a-1; i++)
			root1 = root1->d;
		for(i=0; i<b-1; i++)
			root1 = root1->r;
		for(i=0; i<c-1; i++)
			root2 = root2->d;
		for(i=0; i<d-1; i++)
			root2 = root2->r;
		root3 = root1, root4 = root2;
		for(i=0; i<h; i++){
			root1 = root1->d;
			root2 = root2->d;
			swap(root1->r, root2->r);
		}
		root1 = root3, root2 = root4;
		for(i=0; i<w; i++){
			root1 = root1->r;
			root2 = root2->r;
			swap(root1->d, root2->d);
		}
		root1 = root3, root2 = root4;
		for(i=0; i<h; i++){
			root1 = root1->d;
			root2 = root2->d;
		}	
		for(i=0; i<w; i++){
			root1 = root1->r;
			root2 = root2->r;
			swap(root1->d, root2->d);
		}
		root1 = root3, root2 = root4;
		for(i=0; i<w; i++){
			root1 = root1->r;
			root2 = root2->r;
		}
		for(i=0; i<h; i++){
			root1 = root1->d;
			root2 = root2->d;
			swap(root1->r, root2->r);
		}
	}
	for(i=1; i<=m; i++){
		node* temp = mat[0][i]->d;
		for(j=1; j<=n; j++){
			arr[j][i] = temp->val;
			temp = temp->d;
		}
	}
	for(i=1; i<=n; i++){
		for(j=1; j<=m; j++)
			printf("%d ", arr[i][j]);
		printf("\n");
	}
	return 0;
}
