#include <bits/stdc++.h>
#define int long long

using namespace std;

const int MAXN=1e6;
const int MOD=1e9+7;



int power(int a,int b){return (b?(power(a*a%MOD,b/2)*(b&1?a:1)):1)%MOD;}
int fac[MAXN]={1};
void Fill_Fac(){for(int i=1;i<MAXN;i++)fac[i]=fac[i-1]*i%MOD;}
int div(int a){return power(a,MOD-2);}
int choose(int a,int b){if(a>b)return 0;if(b>=MOD)return choose(a/MOD,b/MOD)*choose(a%MOD,b%MOD)%MOD;return fac[b]*div(fac[a]*fac[b-a]%MOD)%MOD;}


int dp[2][330][330];
main(){
    Fill_Fac();
    int n,m,x;
    cin>>n>>m>>x;
    if(n>m)return cout<<0,0;
    dp[0][0][0]=true;
    for(int i=1;i<=m;i++)
    for(int j=0;j<=n;j++)
    for(int k=0;k<=j;k++){
        bool h=i%2;
        dp[h][j][k]=0;
        if(i==x && j==0)continue;
        if(i!=x){
            dp[h][j][k]=dp[!h][j][k];
            if(j>0 && k>0)dp[h][j][k]+=dp[!h][j-1][k-1];
            if(k>0)dp[h][j][k]+=dp[!h][j][k-1];
            if(j>0)dp[h][j][k]+=dp[!h][j-1][k];
        }
        else{
            if(k>0)dp[h][j][k]+=dp[!h][j-1][k-1];
            dp[h][j][k]+=dp[!h][j-1][k];
        }
        dp[h][j][k]%=MOD;
    }
    cout<<dp[m%2][n][n]*fac[n]%MOD;
}
