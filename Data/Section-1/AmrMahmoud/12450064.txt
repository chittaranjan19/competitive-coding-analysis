#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int power(int a, int b)
{
  if(b == 0) return 1;
  if(b & 1) return (a * 1LL * power(a, b - 1)) % mod;
  int res = power(a, b / 2);
  return (res * 1LL * res) % mod;
}

int DP[4005];
int ncr[4005][4005];

int solve(int n)
{
  if(n == 0) return 1;
  int &temp = DP[n];
  if(temp != -1) return temp;
  temp = 0;
  for(int i=1;i<=n;i++)
  {
    temp += (solve(n - i) * 1LL * ncr[n - 1][i - 1]) % mod;
    if(temp >= mod)
      temp -= mod;
  }
  return temp;
}

int main()
{
  int n;
  scanf("%d", &n);
  for(int i=0;i<=n;i++)
  {
    ncr[i][0] = 1;
    for(int j=1;j<=i;j++)
    {
      ncr[i][j] = ncr[i - 1][j] + ncr[i - 1][j - 1];
      if(ncr[i][j] >= mod)
        ncr[i][j] -= mod;
    }
  }
  int res = 0, p = 1;
  for(int i=0;i<n;i++)
  {
    int tmp = p;
    if(i == n) tmp --;
    if(tmp < 0) tmp += mod;
    res += (tmp * 1LL * ncr[n][i]) % mod;
    if(res >= mod)
      res -= mod;
    if(i) p*=2;
    if(p >= mod) p-=mod;
  }
  printf("%d", res);
  return 0;
}
