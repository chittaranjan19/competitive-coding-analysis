 # include <iostream>
 # include <cstdio>
 # include <cstdlib>
 # include <queue>
 # include <map>
 using namespace std;
 int x1, y1, x2, y2, n, v, l, r, xf, yf;
 map < pair<int, int>, int> a;
 map < pair<int, int>, int> d;
 queue <int> x, y;
 const int N = 1000000000;
 int main ()
 {
     /*freopen ("input.txt", "r", stdin);
     freopen ("output.txt", "w", stdout);*/
     
     cin >> x1 >> y1 >> x2 >> y2 >> n;
     
     for (int i = 1; i <= n; ++i)
     {
         cin >> v >> l >> r;
         for (int j = l; j <= r; ++j)
         {
             a[make_pair(v, j)] = 1;
             d[make_pair(v, j)] = N;
         }
     }
     
     x.push(x1);
     y.push(y1);
     d[make_pair(x1, y1)] = 0;
     
     while(!x.empty())
     {
         xf = x.front();
         yf = y.front();
         if (xf - 1 >= 1 && a[make_pair(xf - 1, yf)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf - 1, yf)] && a[make_pair(xf - 1, yf)] == 1)
         {
             d[make_pair(xf - 1, yf)] = d[make_pair(xf, yf)] + 1;
             x.push (xf - 1);
             y.push (yf);
         }
         if (xf + 1 <= N && a[make_pair(xf + 1, yf)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf + 1, yf)] && a[make_pair(xf + 1, yf)] == 1)
         {
             d[make_pair(xf + 1, yf)] = d[make_pair(xf, yf)] + 1;
             x.push (xf + 1);
             y.push (yf);
         }
         if (yf - 1 >= 1 && a[make_pair(xf, yf - 1)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf, yf - 1)] && a[make_pair(xf, yf - 1)] == 1)
         {
             d[make_pair(xf, yf - 1)] = d[make_pair(xf, yf)] + 1;
             x.push (xf);
             y.push (yf - 1);
         }
         if (yf + 1 <= N && a[make_pair(xf, yf + 1)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf, yf + 1)] && a[make_pair(xf, yf + 1)] == 1)
         {
             d[make_pair(xf, yf + 1)] = d[make_pair(xf, yf)] + 1;
             x.push (xf);
             y.push (yf + 1);
         }
         if (xf - 1 >= 1 && yf - 1 >= 1 && a[make_pair(xf - 1, yf - 1)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf - 1, yf - 1)] && a[make_pair(xf - 1, yf - 1)] == 1)
         {
             d[make_pair(xf - 1, yf - 1)] = d[make_pair(xf, yf)] + 1;
             x.push (xf - 1);
             y.push (yf - 1);
         }
         if (xf - 1 >= 1 && yf + 1 <= N && a[make_pair(xf - 1, yf + 1)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf - 1, yf + 1)] && a[make_pair(xf - 1, yf + 1)] == 1)
         {
             d[make_pair(xf - 1, yf + 1)] = d[make_pair(xf, yf)] + 1;
             x.push (xf - 1);
             y.push (yf + 1);
         }
         if (xf + 1 <= N && yf - 1 >= 1 && a[make_pair(xf + 1, yf - 1)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf + 1, yf - 1)] && a[make_pair(xf + 1, yf - 1)] == 1)
         {
             d[make_pair(xf + 1, yf - 1)] = d[make_pair(xf, yf)] + 1;
             x.push (xf + 1);
             y.push (yf - 1);
         }
         if (xf + 1 <= N && yf + 1 <= N && a[make_pair(xf + 1, yf + 1)] == 1 && d[make_pair(xf, yf)] + 1 < d[make_pair(xf + 1, yf + 1)] && a[make_pair(xf + 1, yf + 1)] == 1)
         {
             d[make_pair(xf + 1, yf + 1)] = d[make_pair(xf, yf)] + 1;
             x.push (xf + 1);
             y.push (yf + 1);
         }
         x.pop();
         y.pop();
     }
     if (d[make_pair(x2, y2)] == N)
      cout << "-1 \n";
     else 
      cout << d[make_pair(x2, y2)] << "\n";
     return 0;
 }
      
      
      
