#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

bool f(ii a, ii b) {
	if (a.a == b.a)
		return a.b > b.b;
	return a.a < b.a;
}

int main() {
    // freopen("612D.in", "r", stdin);
    
    int n, k;
    scanf("%d %d", &n, &k);
    vii events;
    loop(it, n) {
    	ii range;
    	scanf("%d %d", &range.a, &range.b);
    	events.pub(mp(range.a, 1));
    	events.pub(mp(range.b, -1));
    }
    sort(all(events), f);

    vii ans;
    int o = 0;
    int start = -1;
    iterate(event_p, events) {
    	ii &event = *event_p;
    	if (event.b == -1) {
    		if (o == k) {
    			ans.pub(mp(start, event.a));
    			start = -1;
    		}
    		o--;
    	} else {
    		o++;
    		if (o == k) {
    			start = event.a;
    		}
    	}
    }
    printf("%d\n", (int) ans.size());
    iterate(a, ans) {
    	printf("%d %d\n", a->a, a->b);
    }

    return 0;
}