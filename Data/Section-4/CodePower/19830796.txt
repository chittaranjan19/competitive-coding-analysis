#include <iostream>
#include <algorithm>
using namespace std;

int find(int m, int lst[], int start, int end)
{
	int length = end - start + 1;
	if (length == 1)
	{
		if (m >= lst[start])
			return start + 1;
		return start;
	}

	int z = start + length / 2;

	if (lst[z - 1] <= m && m < lst[z])
		return z;
	else if (m >= lst[z])
		return find(m, lst, z + 1, end);
	else
		return find(m, lst, start, z - 1);
}

int task(int m, int n, int X[])
{
	if (m >= X[n - 1])
		return n;
	else if (m < X[0])
		return 0;
	else
		return find(m, X, 0, n - 1);
}

int main()
{
	int n, q;
	cin >> n;
	int *X = new int[n];

	for (int i = 0; i < n; i++)
		cin >> X[i];

	sort(&X[0], &X[n]);

	cin >> q;
	for (int i = 0; i < q; i++)
	{
		int m;
		cin >> m;
		cout << task(m, n, X) << endl;
	}

	return 0;
}