#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

#include <complex>

typedef complex<double> point;

#define X real()
#define Y imag()
#define polar(r, t) (r * exp(point(0, t)))
#define length(a) hypot(a.X, a.Y)
#define angle(a) atan2(a.Y, a.X)
#define vec(a, b) (b - a)
#define dot(a, b) ((conj(a) * b).X)
#define cross(a, b) ((conj(a) * b).Y)
#define lengthsqr(a) dot(a, a)
#define vec_rot(v, t) (v * exp(point(0, t)))
#define vec_rot_around(v, t, a) (vec_rot(vec(a, v), t) + a)
#define reflect(v, m) (conj(v / m) * m)
#define normalize(v) (v / length(v))
#define ccw(a, b, c) (cross(vec(a, b), vec(a, c)) > EPS)
#define same(a, b) (lengthsqr(vec(a, b)) < EPS)

long double areaOfIntersection(int x0, int y0, double r0, int x1, int y1, double r1)
{
  long double rr0 = r0 * 1.0 * r0;
  long double rr1 = r1 * 1.0 * r1;
  long double d = sqrtl((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
  long double phi = (acosl((rr0 + (d * d) - rr1) / (2 * r0 * d))) * 2;
  long double theta = (acosl((rr1 + (d * d) - rr0) / (2 * r1 * d))) * 2;
  long double area1 = 0.5 * theta * rr1 - 0.5 * rr1 * sinl(theta);
  long double area2 = 0.5 * phi * rr0 - 0.5 * rr0 * sinl(phi);
  return area1 + area2;
}

int main()
{
  int x, y, r;
  int xx, yy, rr;
  scanf("%d %d %d", &x, &y, &r);
  scanf("%d %d %d", &xx, &yy, &rr);
  if((x - xx) * 1LL * (x - xx) + (y - yy) * 1LL * (y - yy) >= (r + rr) * 1LL * (rr + r))
  {
    printf("0.00000000");
    return 0;
  }
  if(r > rr)
  {
    swap(r, rr);
    swap(x, xx);
    swap(y, yy);
  }
  long double pie = (long double)3.14159265358979323846264338327950288419716939937510582097494459230781640;
  if((x - xx) * 1LL * (x - xx) + (y - yy) * 1LL * (y - yy) <= (rr - r) * 1LL * (rr - r))
  {
    r = min(r, rr);
    long double tmp = r;
    tmp *= tmp;
    tmp *= pie;
    printf("%.15f", (double)tmp);
  }
  else printf("%.15f", (double)areaOfIntersection(x, y, r, xx, yy, rr));
  return 0;
}