#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Intervalo
{
	tint abre,cierra;
	Intervalo(tint aa, tint cc)
	{
		abre = aa;
		cierra = cc;
	}
};

bool operator < (Intervalo i1, Intervalo i2)
{
	return make_tuple(i1.cierra,i1.abre) < make_tuple(i2.cierra,i2.abre);
}


int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	tint n,m;
	while (cin >> n >> m)
	{
		tint ans = n*(n+1)/2;
		vector<tint> p (n+1);
		forsn(i,1,n+1)
		{
			tint a;
			cin >> a;
			p[a] = i;
		}
		vector<Intervalo> inter (m,Intervalo(0,0)); 
		forn(i,m)
		{
			tint a,b;
			cin >> a >> b;
			inter[i] = Intervalo(min(p[a],p[b]),max(p[a],p[b]));
		}
		sort(inter.begin(),inter.end());
		tint interAbreAnterior = 0;
		forn(i,m)
		{
			if (interAbreAnterior <= inter[i].abre)
			{
				ans -= (inter[i].abre - interAbreAnterior)*(n-inter[i].cierra + 1);
				interAbreAnterior = inter[i].abre;
			}
		}
		cout << ans << endl;
		
	}
	return 0;
}



