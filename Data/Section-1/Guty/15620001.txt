#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Punto
{
	tint x,y;
	Punto(tint xx, tint yy)
	{
		x = xx;
		y = yy;
	}
};

tint f (Punto p1, Punto p2, Punto p3)
{
	if (p1.x == p2.x && p2.x == p3.x)
		return 1;
	else if (p1.x == p2.x && (p3.y >= max(p2.y,p1.y) or p3.y <= min(p2.y,p1.y)))
		return 2;
	else if (p1.y == p2.y && p2.y == p3.y)
		return 1;
	else if (p1.y == p2.y && (p3.x >= max(p2.x,p1.x) or p3.x <= min(p2.x,p1.x)))
		return 2;
	else
		return 3;
}


int main()
{
	#ifdef ACMTUYO
	if (!freopen("entrada.in", "r", stdin))
		return 1;
	#endif
	ios_base::sync_with_stdio(0);
	tint x1,y1,x2,y2,x3,y3;
	while (cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3)
	{
		Punto p1 = Punto(x1,y1);
		Punto p2 = Punto(x2,y2);
		Punto p3 = Punto(x3,y3);
		vector<tint> ans = {f(p1,p2,p3),f(p1,p3,p2),f(p2,p1,p3),f(p2,p3,p1),f(p3,p1,p2),f(p3,p2,p1)};
		cout << *min_element(ans.begin(),ans.end()) << endl;
	}
	return 0;
}



