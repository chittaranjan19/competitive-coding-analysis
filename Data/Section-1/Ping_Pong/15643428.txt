#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const long long inf = (long long)2 * 1e9;
const long long MOD = (long long)1e9 + 7;
const long long MAX_N = 100000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

long long a[MAX_N], dp[11][MAX_N], tree[MAX_N * 4];
long long cnt_ver = 1, currx = 0;

void print_tree()
{
	long long j = 0, c = (cnt_ver * 2 - 1) / 2, c1 = 1;
	for (long long i = 0; i < currx + 1; i++)
	{
		for (long long k = 0; k < c; k++)
			cout << " ";
		for (long long i = 0; i < c1; i++)
		{
			if (tree[j] >= 0)
				cout << " ";
			cout << (tree[j] >= 0 ? tree[j] : -1);
			j++;
			for (long long r = 0; r < c * 2 + 1; r++)
				cout << " ";
		}
		cout << endl << endl;
		c1 *= 2;
		c /= 2;
	}
}

void make_tree(long long n)
{
	while (cnt_ver < n)
	{
		cnt_ver <<= 1;
		currx++;
	}
	for (long long i = 0; i < cnt_ver * 2 - 1; i++)
		tree[i] = 0;
}

void update(long long pos, long long val)
{
	tree[cnt_ver - 1 + pos - 1] = val;
	long long curr = cnt_ver - 1 + pos - 1;
	while (curr > 0)
	{
		tree[(curr - 1) / 2] = tree[(curr - 1) / 2 * 2 + 1] + tree[(curr - 1) / 2 * 2 + 2];
		curr = (curr - 1) / 2;
	}
}

long long sum(long long x, long long lx, long long rx, long long l, long long r)
{
	if (rx < l || lx > r)
		return 0;
	else if (lx >= l && rx <= r)
		return tree[x];
	else
		return sum(x * 2 + 1, lx, (lx + rx) / 2, l, r) + sum(x * 2 + 2, (lx + rx) / 2 + 1, rx, l, r);
}

int main()
{
	//ifstream ifs("a.in");
	//ofstream ofs("a.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	long long n, k;
	cin >> n >> k;
	for (long long i = 0; i < n; i++)
		cin >> a[i];
	for (long long i = 0; i < n; i++)
		dp[0][i] = 1;
	for (long long i = 1; i <= k; i++)
	{
		make_tree(n);
		for (long long j = 0; j < n; j++)
		{
			dp[i][j] = sum(0, cnt_ver - 1, cnt_ver * 2 - 2, cnt_ver - 1, cnt_ver - 1 + a[j] - 1);
			update(a[j], dp[i - 1][j]);
			//prlong long_tree();
		}
	}
	long long ans = 0;
	for (long long i = 0; i < n; i++)
		ans += dp[k][i];
	/*for (long long j = 0; j < n; j++)
	{
		for (long long i = 0; i <= k; i++)
			cout << dp[i][j] << " ";
		cout << endl;
	}*/
	cout << ans;
	return 0;
}