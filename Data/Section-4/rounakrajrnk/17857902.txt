#include<bits/stdc++.h>
#define s(x) scanf("%d",&x)
#define ll long long
#define l(x) scanf("%I64d",&x)
#define cst int t; s(t); while(t--)
#define fr freopen("in.txt", "r", stdin)
#define finp ios_base::sync_with_stdio(false)
#define pb push_back
#define pf printf

using namespace std;


struct pt{
    double x;
    double y;
};

double dist(pt a,pt b){
     return sqrt((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y));
}


struct data{
    int pos;
    double d;
};

bool sortby(data a,data b){
    return (a.d<b.d);
}


int n;
pt a,b,r;
double db[1000005];
double e=0.0000001;


double min(double a, double b)
{
    if((a-b)>e)
        return b;
    return a;
}


data rb[1000005];
data ra[1000005];
pt bot[1000005];



void process()
{
    double tot = 0,d = 0;
    int p1,p2;
    for(int i = 0;i<n;i++){
        db[i] = dist(bot[i],r);
        tot += db[i];
    }
    for(int i = 0;i<n;i++){
        double d1 = tot*2.0 - db[i] + dist(a,bot[i]);
        double d2 = tot*2.0 - db[i] + dist(b,bot[i]);
        ra[i].d = d1;
        ra[i].pos = i;
        rb[i].d = d2;
        rb[i].pos = i;
    }
    sort(ra,ra+n,sortby);
    sort(rb,rb+n,sortby);
    if(n == 1){
        if(ra[0].d<rb[0].d) d = ra[0].d;
        else d = rb[0].d;
    }
    else if(ra[0].pos == rb[0].pos){
        p1 = ra[0].pos;
        p2 = rb[1].pos;
        double d1 = tot*2.0 - db[p1] - db[p2] + dist(a,bot[p1]) + dist(b,bot[p2]);
        p1 = ra[1].pos;
        p2 = rb[0].pos;
        double d2 = tot*2.0 - db[p1] - db[p2] + dist(a,bot[p1]) + dist(b,bot[p2]);
        if(d1<d2) d = d1;
        else d = d2;
    }else{
        p1 = ra[0].pos;
        p2 = rb[0].pos;
        d = tot*2.0 - db[p1] - db[p2] + dist(a,bot[p1]) + dist(b,bot[p2]);
    }
    pf("%.12lf\n",d);
}

int main(){
   // fr;
    scanf("%lf %lf %lf %lf %lf %lf",&a.x,&a.y,&b.x,&b.y,&r.x,&r.y);
    scanf("%d",&n);
    for(int i = 0;i<n;i++)
        scanf("%lf %lf",&bot[i].x,&bot[i].y);
    process();
	return 0;
}
