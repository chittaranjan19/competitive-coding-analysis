#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

struct Stat {
	int d, i;
	Stat(int d, int i) {
		this->d = d;
		this->i = i;
	}
};

int main() {
    // freopen("644B.in", "r", stdin);
    
    int n, b;
    scanf("%d %d", &n, &b);
    vi ans(n);

    que<Stat> q;
    int finish_time = -1;
    loop(it, n) {
    	int start, duration;
    	scanf("%d %d", &start, &duration);
    	if ((q.empty()) and (finish_time <= start)) {
    		finish_time = start+duration;
    		ans[it] = finish_time;
    	} else {
    		if (finish_time <= start) {
    			finish_time = finish_time+q.front().d;
    			ans[q.front().i] = finish_time;
    			q.pop();
    		}
    		if (q.size() == b) {
    			ans[it] = -1;
    		} else {
    			q.pu(Stat(duration, it));
    		}
    	}
    }
    while (!q.empty()) {
		finish_time = finish_time+q.front().d;
		ans[q.front().i] = finish_time;
		q.pop();
    }

    loop(it, ans.size()) {
    	if (it)
    		printf(" ");
    	printf("%d", ans[it]);
    }
    printf("\n");


    return 0;
}