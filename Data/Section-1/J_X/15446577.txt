#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>

using namespace std;

typedef multiset<int>::iterator ite;

int main()
{
    int n;
    while(~scanf("%d", &n))
    {
        multiset<int> st;
        int a, b, c;
        bool flag = true;
        scanf("%d%d%d", &a, &b, &c);
        for(int i = 0; i < n; ++i)
        {
            int x;
            scanf("%d", &x);
            st.insert(-x);
            if(x > a + b + c)
            {
                flag = false;
            }
        }
        if(!flag)
        {
            puts("-1");
        }
        else
        {
            int ans = 0;
            while(!st.empty())
            {
                ++ans;
                int u = -*st.begin();
                st.erase(st.begin());
                if(c >= u)
                {
                    ite p = st.lower_bound(-b);
                    if(p != st.end())
                    {
                        st.erase(p);
                        p = st.lower_bound(-a);
                        if(p != st.end())
                        {
                            st.erase(p);
                        }
                    }
                    else
                    {
                        p = st.lower_bound(-a - b);
                        if(p != st.end())
                        {
                            st.erase(p);
                        }
                    }
                }
                else if(a + b >= u)
                {
                    ite p = st.lower_bound(-c);
                    if(p != st.end())
                    {
                        st.erase(p);
                    }
                }
                else if(c + a >= u)
                {
                    ite p = st.lower_bound(-b);
                    if(p != st.end())
                    {
                        st.erase(p);
                    }
                }
                else if(c + b >= u)
                {
                    ite p = st.lower_bound(-a);
                    if(p != st.end())
                    {
                        st.erase(p);
                    }
                }
            }
            printf("%d\n", ans);
        }
    }
    return 0;
}
