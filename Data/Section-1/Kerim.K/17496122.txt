//~  Inshaallah
/*
ID: omarmuh1
PROG: test
LANG: C++
*/
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <stack>
#include <ext/pb_ds/assoc_container.hpp>
#include <queue>
#include <map>
#include <ctime>
#include <iomanip>
#include <string.h>
#include <stdio.h>
#include <set>

using namespace std;
using namespace __gnu_pbds;

#define ll long long
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define pp pop_back
#define pii pair<int ,int>
#define pll pair<ll , ll>
#define mid(x , y)	(x+y)/2
#define sz(x) int(x.size())
#define db		cout << "****" << endl;
#define all(x) 	x.begin() , x.end()
#define lgn 	19
#define N 	100007
#define INF 	1000000009
#define LLINF 	1000000000000000009
#define tr(i, c) for(__typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
#define Help_me  ios_base::sync_with_stdio(false);

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> omar;

template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}

//~ freopen("test.out" , "r" , stdin);
//~ freopen("test.out" , "w",  stdout);

int a , b , type , c , d[N] , n , m , cn;
map <int , int> mk;
omar ad[N] , sb[N];
pair <int , pii> p[N];

int main()
{
	scanf("%d" , &n);
	
	for(int i = 1 ; i <= n ; i++)
		scanf("%d%d%d" , &p[i].ff , &p[i].ss.ff , &p[i].ss.ss) , mk[p[i].ss.ss] = 1;
	
	tr(i , mk)	i->ss = ++cn;
	
	//sort(p+1 , p+n+1);
		
	for(int i = 1 ; i <= n ; i++)
	{
		p[i].ss.ss = mk[p[i].ss.ss];
		
		if(p[i].ff == 1)
			ad[p[i].ss.ss].insert(p[i].ss.ff);
		else if(p[i].ff == 2)
			sb[p[i].ss.ss].insert(p[i].ss.ff);
		else
		{
			a = ad[p[i].ss.ss].order_of_key(p[i].ss.ff);
			b = sb[p[i].ss.ss].order_of_key(p[i].ss.ff);
			
			a -= b;
			
			if(a < 0)	a = 0;
			
			printf("%d\n" , a);
		}
	}
	
	
 	return 0;
}