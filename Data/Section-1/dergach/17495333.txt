#pragma comment(linker, "/STACK:100000000")
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <algorithm>
#include <iostream>
#include <stack>
using namespace std;

typedef long long ll;
#define mod 1000000007
#define INF mod
#define pi acos(-1.0)
#define LINF 1000000000000000000LL
#define eps 1e-10

#define START 131072

struct triple
{
	int a, t, i;
};

int n;
int tr[2*START+5];
map <int, vector <triple> > mp;
vector <pair <int, int> > res;

int sum(int L, int R)
{
	L += START; R += START;
	int res = 0;
	while(L <= R)
	{
		if(L & 1) res += tr[L++];
		if(~R & 1) res += tr[R--];
		L >>= 1; R >>= 1;
	}
	return res;
}

int main()
{
	scanf("%d", &n);
	for(int i = 0; i < n; i++)
	{
		int x;
		triple z;
		scanf("%d %d %d", &z.a, &z.t, &x);
		z.i = i;
		mp[x].push_back(z);
	}
	for(map <int, vector <triple> >::iterator it = mp.begin(); it != mp.end(); ++it)
	{
		vector <triple>& v = it->second;
		map <int, int> tt;
		int cnt = 1;
		for(int i = 0; i < v.size(); i++)
		{
			tt[v[i].t] = 1;
		}
		for(map<int, int> :: iterator it2 = tt.begin(); it2 != tt.end(); ++it2, cnt++)
			it2->second = cnt;
		for(int i = 0; i < v.size(); i++)
		{
			v[i].t = tt[v[i].t];
		}
		for(int i = 0; i < v.size(); i++)
		{
			if(v[i].a <= 2)
			{
				int c = v[i].a == 1 ? 1 : -1;
				tr[START + v[i].t] += c;
				for(int j = ((START + v[i].t) >> 1); j > 0; j >>= 1)
					tr[j] = tr[(j<<1)] + tr[(j<<1)+1];
			}
			else
			{
				res.push_back(make_pair(v[i].i, sum(0, v[i].t)));
			}
		}
		for(int i = 0; i < v.size(); i++)
		{
			if(v[i].a <= 2)
			{
				tr[START + v[i].t] = 0;
				for(int j = ((START + v[i].t) >> 1); j > 0; j >>= 1)
					tr[j] = tr[(j<<1)] + tr[(j<<1)+1];
			}
		}
	}
	sort(res.begin(), res.end());
	for(int i = 0; i < res.size(); i++)
		printf("%d\n", res[i].second);
	return 0;
}