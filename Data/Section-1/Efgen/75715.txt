import static java.lang.Math.max;

import java.io.*;         
import java.util.*;         
import java.math.*;         

 
public class Main  implements Runnable {
//public static final String FileName = "test";
StreamTokenizer ST;      
PrintWriter out;      
BufferedReader br;   
Scanner in;
static final int inf = 1000000000;
 
int nextInt() throws IOException{      
    ST.nextToken();      
    return (int)ST.nval;      
}
long nextLong() throws IOException{      
    ST.nextToken();      
    return (long)ST.nval;      
}      
String next() throws IOException{      
    ST.nextToken();      
    return ST.sval;      
}      
double nextD() throws IOException{      
    ST.nextToken();      
    return ST.nval;      
}      
public static void main(String[] args) throws IOException {       
   new Thread(new Main()).start();
//  new Main().run();
}
 
public void run()  {      
    try {
        br = new BufferedReader(new InputStreamReader(System.in));
        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));      
        //br = new BufferedReader(new FileReader(new File(FileName+".in")));
        //out = new PrintWriter(new BufferedWriter(new FileWriter(FileName+".out")));
        in = new Scanner(br);
        ST = new StreamTokenizer(br);      
        solve();      
        out.close();
        //in.close();
        br.close();   
    }         
    catch (IOException e) {       
        e.printStackTrace();
        throw new IllegalStateException(e);  
    }      
}

class Point implements Comparable<Point>{
    int x, id;

    Point(int xx, int yy) {
        x = xx;
        id = yy;
    }

    public int compareTo(Point o) {
        if (x==o.x) return id-o.id;
        return x-o.x;
    }
}
public void solve() throws IOException {
    int n = nextInt();
    for (int i=0; i<n; i++) nextInt();
    int m = nextInt();
    int[][] a = new int[n][n];
    int[] d1 = new int[n];
    int[] d2 = new int[n];
    for (int[] aa:a) Arrays.fill(aa, -1);
    while (m-->0) {
        int x = nextInt()-1;
        int y = nextInt()-1;
        int cost = nextInt();
        if (a[x][y]<0) { 
            a[x][y] = cost; 
            d1[x]++;
            d2[y]++;
        } else a[x][y] = Math.min(a[x][y], cost);       
    }
    int cnt = 0, root=-1;
    boolean[] f = new boolean[n];
    int[] d = new int[n];
    Arrays.fill(d, inf);
    for (int i=0; i<n; i++) if (d2[i]==0) {
        cnt++;
        root = i;
    }
    if (cnt==1) {
        d[root] = 0;
        f[root] = true;
        int res = 0;
        int k = 1;
        while (k<n) {
            for (int i=0; i<n; i++) if (a[root][i]>=0 && !f[i])
                d[i] = Math.min(d[i], a[root][i]);
            int r = -1;
            for (int i=0; i<n; i++) if (!f[i] && (r<0 || d[i]<d[r])) {
                r = i; 
            }
            if (r==-1) break;
            
            res += d[r]; d[r] = 0; root = r; k++;
            f[root] = true;
            //out.println(root);
        }
        if (k==n) out.println(res); else out.println(-1);
    
    } else out.println(-1);
    
    
}
  
}
















 
 
  