#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<set>
#include<vector>
#include<iostream>
using namespace std;
const int N = 300005;
const int MOD = 1000000007;
typedef __int64 ll;
int gcd(int x,int y)
{
    int z;
    while(y)
    {
        z=x%y;
        x=y;
        y=z;
    }
    return x;
}
int a[N];
struct P
{
    int l,r,mid,gd;
}arr[4*N];
void build(int L,int R,int c)
{
    arr[c].l=L;
    arr[c].r=R;
    if(L==R){arr[c].gd=a[L];return ;}
    arr[c].mid=(L+R)/2;
    build(L,arr[c].mid,c+c);
    build(arr[c].mid+1,R,c+c+1);
    arr[c].gd=gcd(arr[c+c].gd,arr[c+c+1].gd);
}
int md,mi;
void get(int L,int R,int c)
{
    if(md%mi!=0)return ;
    if(L<=arr[c].l&&R>=arr[c].r)
    {
        md=gcd(md,arr[c].gd);
        return ;
    }
    if(R>arr[c].mid)get(L,R,c+c+1);
    if(L<=arr[c].mid)get(L,R,c+c);
}
int mx[N];
int main()
{
    int n,i;
    scanf("%d",&n);
    for(i=1;i<=n;i++)scanf("%d",&a[i]);
    build(1,n,1);
    int ll=0;
    for(i=1;i<=n;i++)
    {
        int low=0,high=i,mid;
        while(low<high-1)
        {
            mid=(low+high)/2;
            md=0;mi=a[i];
            get(mid,i-1,1);
            if(md%a[i]==0)high=mid;
            else low=mid;
        }
        int ld=high;
        if(n-ld<=ll)continue;
        low=i;
        high=n+1;
        while(low<high-1)
        {
            mid=(low+high)/2;
            md=0;mi=a[i];
            get(i+1,mid,1);
            if(md%a[i]==0)low=mid;
            else high=mid;
        }
        int rd=low;
        if(ll<rd-ld)ll=rd-ld;
        if(mx[ld]<rd-ld)mx[ld]=rd-ld;
    }
    int len=0,cnt=0;
    for(i=1;i<=n;i++)
    {
        if(len<mx[i]){len=mx[i];cnt=1;}
        else if(len==mx[i]){cnt++;}
    }
    printf("%d %d\n",cnt,len);
    for(i=1;i<=n;i++)if(mx[i]==len)printf("%d ",i);
    return 0;
}