#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 400005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int n, sz[mn], z[mn], s = 1;
int r = 0, tsz[mn], maxL[mn], maxR[mn];
vector<int> g[mn];

void dfs(int u, int p)
{
    sz[u] = 1;
    z[u] = 0;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i];
        if (v == p)
            continue;
        dfs(v, u);
        sz[u] += sz[v];
        if (sz[v] > sz[z[u]])
            z[u] = v;
    }
}

void dfs2(int u, int p)
{
    sz[u] = 1;
    z[u] = r;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i];
        if (v == p)
            continue;
        dfs2(v, u);
        sz[u] += sz[v];
    }
}

void setup()
{
    cin >> n;
    int u, v;
    FOR(i, 2, n)
    {
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
}

bool deal(int x)
{
    if (x == s)
        return true;
    int siz = n - sz[x] - max(maxL[z[x] - 1], maxR[z[x] + 1]);
    if (siz <= (n >> 1))
        return true;
    if (tsz[z[x]] == n - (n >> 1))
        return true;
    return false;
}

void xuly()
{
    dfs(1, 0);
    while(sz[z[s]] > (n >> 1))
        s = z[s];
    FOR(i, 0, int(g[s].size()) - 1)
    {
        r ++;
        int u = g[s][i];
        dfs2(u, s);
        tsz[r] = sz[u];
    }
    FOR(i, 1, r)
    {
        maxL[i] = max(maxL[i - 1], tsz[i]);
        maxR[r - i + 1] = max(maxR[r - i + 2], tsz[r - i + 1]);
    }
    FOR(i, 1, n)
        cout << deal(i) << ' ';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
