/*
PROG:kerim
LANG:C++
*/
#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<ll,int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
vector<int>adj[MAXN];
int vis[MAXN],arr[MAXN],ans,dp[MAXN],al[MAXN];
int n,m;
void dfs(int nd,int pr){
	if(al[nd]==1)
		return;
	if(arr[nd]==1)
		vis[nd]=vis[pr]+1;
	else
		vis[nd]=0;	
		
	dp[nd]=max(vis[nd],dp[pr]);	
	int d=0;
	for(int i=0;i<adj[nd].size();i++)
		if(al[adj[nd][i]]==0)
			d=1;
	if(d==0){
		if(dp[nd]<=m)
			ans++;
		return;	
	}
		al[nd]=1;
	for(int i=0;i<adj[nd].size();i++){
		int to=adj[nd][i];
		dfs(to,nd);
	}
		al[nd]=0;
}
int main()
{
	cin>>n>>m;
	for(int i=1;i<=n;i++)
		cin>>arr[i];
	for(int i=0;i<n-1;i++){
		int u,v;
		cin>>u>>v;
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1,0);		
	cout<<ans<<endl;
	return 0;
}
/*
7 2
1 0 0 0 0 1 0
1 2
1 3
2 4
2 5
3 6
6 7
*/