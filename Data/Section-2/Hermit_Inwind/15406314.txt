#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstdlib>
using namespace std;


struct Point
{
    int x,y;
}pt[100005],p;

const double PI=atan(1.0)*4.0;

double dis(Point p1,Point p2)
{
    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}

double cross(Point p,Point p1,Point p2)  //求叉乘
{
    double x1=p.x-p1.x , y1=p.y-p1.y;
    double x2=p2.x-p1.x , y2=p2.y-p1.y;
    return (x1*y2-y1*x2);
}

double pm(Point p,Point p1,Point p2)
{
    double x1=p.x-p1.x , y1=p.y-p1.y;
    double x2=p2.x-p1.x , y2=p2.y-p1.y;
    return (x1*x2+y1*y2);
}

double solve(Point p,Point p1,Point p2)
{
    /*if (pm(p,p1,p2)*pm(p,p2,p1)<0)
    {
        double tmp1=dis(p,p1);
        double tmp2=dis(p,p2);
        return min(tmp1,tmp2);
    }*/
    if(dis(p1,p2)==0)return dis(p,p1);
    Point t=p;///注意这里的构建,这里是构建一个点t是的pt与p1p2垂直
    t.y+=p1.x-p2.x;
    t.x+=p2.y-p1.y;

    if( cross(t,p,p1)*cross(t,p,p2)>=0 )
    {///如果是钝角
        return min( dis( p,p1),dis(p,p2) );
    }
    else
    {
        double tmp;
        tmp=fabs(cross(p,p1,p2))/dis(p1,p2);
        return tmp;
    }
}

int main()
{
    int n;
    while (scanf("%d%d%d",&n,&p.x,&p.y)==3)
    {
        double maxd=0,mind=1e30;
        double tmp;
        double ans;
        for (int i=0;i<n;i++)
        {
            scanf("%d%d",&pt[i].x,&pt[i].y);
        }
        pt[n]=pt[0];
        for (int i=0;i<n;i++)
        {
            tmp=dis(p,pt[i]);
            if (tmp>maxd)
            {
                maxd=tmp;
            }
        }
        for (int i=0;i<n;i++)
        {
            tmp=solve(p,pt[i],pt[i+1]);
            if (tmp<mind)
            {
                mind=tmp;
            }
        }
        ans=PI*(maxd*maxd-mind*mind);
        printf("%.20f\n",ans);
    }
    return 0;
}
