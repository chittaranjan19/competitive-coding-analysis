
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
#include <iomanip>
#include <map>
#include <cmath>
#include <queue>


using namespace std;

typedef long long ll;


#if _DEBUG 
#include <fstream>
ifstream cin ("input.txt");
ofstream cout("output.txt");
#else
#include <iostream>
#endif

int x = 37;

const int MOD = 1299827;


string text[100002];

int text_hash[MOD];

string little (string s) {
	for(int i = 0; i < (int)s.size(); i++) {
		if(s[i] >= 'A' && s[i] <= 'Z')
			s[i] += 32;
	}
	return s;
}

int give_hash(string s) {
	int ans = 0;
	for(int i = 0; i < (int)s.size(); i++) {
		ans = ans * x + s[i] - 'a' + 1;
		ans %= MOD;
	}
	return ans;
}


vector < vector < int > > edges;



struct inf {
	int hash, cnt, size;
	inf() {}
	inf(int cnt, int size) : cnt(cnt), size(size) {}
	inf(int hash, int cnt, int size) : hash(hash), cnt(cnt), size(size) {}
	bool operator < (const inf q) const {
		if(cnt < q.cnt)
			return true;
		if(cnt == q.cnt && size < q.size)
			return true;
		return false;
	}
};

inf hashes[MOD], best[MOD];

int cnt_r (string s) {
	int ans = 0;
	for(int i = 0; i < (int)s.size(); i++) {
		if(s[i] == 'r') {
			ans++;
		}
	}
	return ans;
}

bool used[MOD];

int min_r, min_size;

void dfs(int v) {
	used[v] = true;
	best[v].cnt = min_r;
	best[v].size = min_size;
	for(int i = 0; i < (int)edges[v].size(); i++) {
		int to = edges[v][i];
		if(!used[to]) {
			if(min_r > hashes[to].cnt) {
				min_r = hashes[to].cnt;
				min_size = hashes[to].size;
			}
			if(min_r == hashes[to].cnt && min_size > hashes[to].size) {
				min_size = hashes[to].size;
			}
			dfs(to);
			min_r = best[v].cnt;
			min_size = best[v].size;
		}
	}
}

int main() {
	int n;
	cin >> n;
	edges.resize(MOD + 1);
	for(int i = 0; i < n; i++) {
		cin >> text[i];
		text[i] = little(text[i]);
		text_hash[i] = give_hash(text[i]);
		best[text_hash[i]] = inf(cnt_r(text[i]), (int)text[i].size());
	}
	int m;
	cin >> m;
	vector <inf> ways;
	for(int i = 0; i < m; i++) {
		string to, from;
		cin >> to >> from;
		to = little(to);
		from = little(from);
		int f = give_hash(from);
		int t = give_hash(to);
		hashes[f] = inf(cnt_r(from), (int)from.size());
		hashes[t] = inf(cnt_r(to), (int)to.size());
		ways.push_back(inf(f, hashes[f].cnt, (int)from.size()));
		edges[f].push_back(t);
	}
	sort(ways.begin(), ways.end());
	for(int i = 0; i < (int)ways.size(); i++) {
		if(!used[ways[i].hash]) {
			min_r = ways[i].cnt;
			min_size = ways[i].size;
			dfs(ways[i].hash);
		}
	}
	int ans_r = 0, ans_size = 0;
	for(int i = 0; i < n; i++) {
		ans_r += best[text_hash[i]].cnt;
		ans_size += best[text_hash[i]].size;
	}
	cout << ans_r << ' ' << ans_size << '\n';
    return 0;
}