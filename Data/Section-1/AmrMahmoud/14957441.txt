#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int n;
string a, b;

int delta[1000005][4][2];
int arr[1000005][2];

inline int get(char c)
{
  if(c == 'N') return 0;
  if(c == 'S') return 1;
  if(c == 'E') return 2;
  return 3;
}

inline int getinv(char c)
{
  if(c == 'N') return 1;
  if(c == 'S') return 0;
  if(c == 'E') return 3;
  return 2;
}

map<pair<int, int>, char> m;
map<pair<int, int>, int> cnt;

int main()
{
  srand(time(0));
  scanf("%d", &n);
  cin >> a >> b;
  for(int i=0;i<n;i++)
  {
    if(i != n - 1)
    {
      arr[i][0] = get(a[i]);
      delta[i][get(a[i])][0] = 1;
    }
    if(i) delta[i][getinv(a[i - 1])][0] = -1;
  }
  for(int i=0;i<n;i++)
  {
    if(i != n - 1)
    {
      arr[i][1] = get(b[i]);
      delta[i][get(b[i])][1] = 1;
    }
    if(i) delta[i][getinv(b[i - 1])][1] = -1;
  }
  int op = 0;
  while(op < 5000000)
  {
    int x = 0, y = 0;
    m.clear();
    cnt.clear();
    while(op < 5000000)
    {
      if(x == n - 1 && y == n - 1)
      {
        printf("YES");
        return 0;
      }
      cnt[mp(x, y)]++;
      if(cnt[mp(x, y)] == 6) break;
      op++;
      if(m[mp(x, y)] == 0)
      {
        if(y == n - 1 || (rand() % 2 == 0 && x != n - 1))
        {
          m[mp(x, y)] = 1;
          y += delta[y][arr[x][0]][1];
          x++;
        }
        else
        {
          m[mp(x, y)] = 2;
          x += delta[x][arr[y][1]][0];
          y++;
        }
      }
      else if(x == n - 1 || (y != n - 1 && m[mp(x, y)] == 1))
      {
        m[mp(x, y)] = 0;
        x += delta[x][arr[y][1]][0];
        y++;
      }
      else
      {
        m[mp(x, y)] = 0;
        y += delta[y][arr[x][0]][1];
        x++;
      }
    }
  }
  printf("NO");
  return 0;
}
