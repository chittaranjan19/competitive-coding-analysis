#include <bits/stdc++.h>
#define INF 2147483647
using namespace std;
class SegTree
{
private:
vector<int> T; // Segment Tree (La raíz es el nodo 0)
vector<int> A; // Vector de numeros
int N; // Cantidad de elementos en el arreglo
void build(int node, int L, int R); // node abarca el segmento [L, R]
int query(int node, int L, int R, int x, int y);
void update(int node, int L, int R, int x, int val);
public:
SegTree();
void create(const vector<int> &pA); // Carga un arreglo de numeros
int query(int x, int y); // Range max/min/sum en el rango [x,y]
void update(int x, int val); // Setea la pos x [0, N-1] del arreglo
};
SegTree::SegTree(){}
void SegTree::build(int node, int L, int R) // node abarca el segmento [L, R]
{
if(L == R) T[node] = A[L]; // El segmento solo abarca 1 elemento
else
{
int mid = (L + R) * 0.5; // Partir el segmento en dos
build(2 * node + 1, L, mid); // Construir el segmento izquierdo
build(2 * node + 2, mid + 1, R); // Construir el segmento derecho
T[node] = max(T[2 * node + 1], // Hijo izquierdo
T[2 * node + 2]); // Hijo derecho
// Opciones: max, min, suma, xor
}
}
void SegTree::create(const vector<int> &pA) // pA: Arreglo de números
{
A = pA; N = (int)A.size();
T.assign(N * 4, 0); // El arbol necesita ~ 4*N nodos
build(0, 0, N - 1); // La raiz abarca el rango [0, N-1]
}
int SegTree::query(int node, int L, int R, int x, int y)
{
if(L > y || R < x) return -INF; // [L,R] está fuera del rango [x,y]
// max: -INF, min: INF, suma: 0
if(x <= L && R <= y) return T[node]; // [L,R] es abarcado por [x,y]
int mid = (L + R) * 0.5; // Partir el segmento en dos
return max(query(2 * node + 1, L, mid, x, y), // Segmento izquierdo
query(2 * node + 2, mid + 1, R, x, y)); // Segmento derecho
// Opciones: max, min, suma, xor
}
int SegTree::query(int x, int y) { return query(0, 0, N - 1, x, y); }
// El nodo 0 abarca el rango [0, N-1]
void SegTree::update(int node, int L, int R, int x, int val)
{
if(x < L || R < x) return; // x esta fuera del rango [L,R]
if(L == R) { A[L] = val; T[node] = val; } // Actualizamos la hoja
else
{
int mid = (L + R) * 0.5; // Partir el segmento en dos
update(2 * node + 1, L, mid, x, val); // Actualizar segmento izq
update(2 * node + 2, mid + 1, R, x, val); // Actualizar segmento der
T[node] = max(T[node * 2 + 1], // Hijo izquierdo
T[node * 2 + 2]); // Hijo derecho
// Opciones: max, min, suma, xor
}
}
void SegTree::update(int x, int val) { update(0, 0, N - 1, x, val); }
// El nodo 0 abarca el rango [0, N-1]
int main(){
	int n,m,k;
	cin>>n>>m>>k;
	vector <int> dets[5];
	for(int i=0;i<m;++i)
		dets[i].resize(n);
	for(int i=0;i<n;++i)
		for(int j=0;j<m;++j)
			cin>>dets[j][i];
	SegTree *seg[5];
	for(int i=0;i<m;++i){
		seg[i]=new SegTree();
		seg[i]->create(dets[i]); // Inicializar con un arreglo de n elementos
	}
	int lo=1, hi=n;
	int ans[5];
	
	while(lo<=hi){
		int mid=(lo+hi)/2;
		bool ok=false;
		for(int i=0;i+mid<=n;++i){
			int res=0;
			int max[5];
			for(int j=0;j<m;++j){
				max[j]=seg[j]->query(i,i+mid-1);
				res+=max[j];
			}
			if(res<=k){
				ok=true;
				for(int j=0;j<m;++j) ans[j]=max[j];
				break;
			}
		}
		if(ok)	lo=mid+1;
		else	hi=mid-1;
	}
	for(int i=0;i<m;++i)
		cout<<ans[i]<<" ";
}