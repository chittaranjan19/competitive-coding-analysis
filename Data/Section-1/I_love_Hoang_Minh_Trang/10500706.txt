const   inf     =2*trunc(1e5);

var     n       :longint;
        a       :array[0..inf] of int64;
        last    :int64;
procedure hv(var a, b:int64);
var     tg      :int64;
begin
        tg:=a;a:=b;b:=tg;
end;

procedure QS(l,r:longint);
var     i, j, x:longint;
begin
        i:=l;j:=r;
        x:=a[l+random(r-l+1)];
        repeat
                while a[i]<x do inc(i);
                while a[j]>X do dec(j);
                if i<=j then
                begin
                        hv(a[i],a[j]);
                        inc(i);
                        dec(j);
                end;
        until i>j;
        if l<j then QS(l,j);
        if i<r then QS(i,r);
end;

procedure Get(var dai,rong,last:int64);
var     i, j:longint;
begin
        dai:=0;
        rong:=0;
        for i:=last downto 2 do
                if abs(a[i]-a[i-1])<=1 then
                begin
                        dai:=a[i]-abs(a[i]-a[i-1]);
                        last:=i-2;
                        break;
                end
                else
                if last=2 then last:=0;
        for i:=last downto 2 do
                if abs(a[i]-a[i-1])<=1 then
                begin
                        rong:=a[i]-abs(a[i]-a[i-1]);
                        last:=i-2;
                        break;
                end
                else
                if last=2 then last:=0;
end;

procedure run;
var     i       :longint;
        sum     :int64;
        dai,rong:int64;
begin
        readln(n);
        for i:=1 to n do read(a[i]);
        sum:=0;
        last:=n;
        QS(1,n);
        while last>0 do
        begin
                Get(dai,rong,last);
                //writeln(dai,' ',rong);
                if dai*rong=0 then break;
                sum:=sum+dai*rong;
        end;
        writeln(sum);
end;

begin
                run;
end.
