#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits.h>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define pi acos(-1.0)
#define LL long long

using namespace std;

priority_queue<pair<LL,int> > dijkstra;
vector< vector < pair<int,int> > > graph(100005);
bool visited[100005]={false};
int parent[100005]={0};
vector<int> sol;
LL dist[100005];

int main()
{
    int n,m,x,y,z;
    scanf("%d %d",&n,&m);
    for(int i=0;i<m;i++)
    {
        scanf("%d %d %d",&x,&y,&z);
        graph[x].push_back(make_pair(-z,y));
        graph[y].push_back(make_pair(-z,x));
    }
    dijkstra.push(make_pair(0,1));
    while(!dijkstra.empty())
    {
        int temp = dijkstra.top().second;
        dijkstra.pop();
        visited[temp] = true;
        if(temp == n)
            break;
        for(int i=0;i<graph[temp].size();i++)
        {
            if(!visited[graph[temp][i].second] &&(graph[temp][i].first + dist[temp] > dist[graph[temp][i].second] || dist[graph[temp][i].second] == 0))
            {
                int x = graph[temp][i].second;
                dist[graph[temp][i].second] = graph[temp][i].first + dist[temp];
                dijkstra.push(make_pair(dist[graph[temp][i].second],graph[temp][i].second));
                parent[graph[temp][i].second] = temp;
            }
        }
    }
    if(parent[n] == 0)
        printf("-1");
    else
    {
        int temp=n;
        while(temp != 1)
        {
            sol.push_back(temp);
            temp=parent[temp];
        }
        sol.push_back(1);
        for(int i=sol.size()-1;i>=0;i--)
            printf("%d ",sol[i]);
    }
    return 0;
}