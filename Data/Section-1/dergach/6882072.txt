#include <cstdio>
#include <queue>
#include <cassert>
#include <cstring>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <set>
#include <string>
#include <bitset>
using namespace std;

typedef long long ll;
#define INF 1234567890
#define eps 1e-7
#define mod 1000000007

vector <pair <int, int> > v[2];

const bool sort_f(const pair <int, int> a, const pair <int, int> b)
{
    if(a.first != b.first)
        return a.first < b.first;
    return a.second > b.second;
}

int main()
{
    int n, x;
    scanf("%d %d", &n, &x);
    for(int i = 0; i < n; i++)
    {
        pair <int, int> candy;
        int t;
        scanf("%d %d %d", &t, &candy.first, &candy.second);
        v[t].push_back(candy);
    }
    sort(v[0].begin(), v[0].end(), sort_f);
    sort(v[1].begin(), v[1].end(), sort_f);
    int res = 0;

    for(int i = 0; i < 2; i++)
    {
        int cnt = 0;
        priority_queue <int> q[2];
        int curh = x;
        int cur[2] = {0, 0};
        for(int j = 0; j < 2; j++)
        {
            while(cur[j] < v[j].size() && v[j][cur[j]].first <= curh)
            {
                q[j].push(v[j][cur[j]].second);
                cur[j]++;
            }
        }
        while(!q[i].empty())
        {
            cnt++;
            curh += q[i].top(); q[i].pop();
            for(int j = 0; j < 2; j++)
            {
                while(cur[j] < v[j].size() && v[j][cur[j]].first <= curh)
                {
                    q[j].push(v[j][cur[j]].second);
                    cur[j]++;
                }
            }
            if(q[1-i].empty())
                break;
            cnt++;
            curh += q[1-i].top(); q[1-i].pop();
            for(int j = 0; j < 2; j++)
            {
                while(cur[j] < v[j].size() && v[j][cur[j]].first <= curh)
                {
                    q[j].push(v[j][cur[j]].second);
                    cur[j]++;
                }
            }
        }
        res = max(res, cnt);
    }
    printf("%d\n", res);
    return 0;
}