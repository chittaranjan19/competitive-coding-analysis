#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int n;
struct rec
{
    int X1, Y1, X2, Y2;

    rec(int X1 = 0, int Y1 = 0, int X2 = 0, int Y2 = 0): X1(X1), Y1(Y1), X2(X2), Y2(Y2){}
};

int numIn(int x1, int y1, int x2, int y2)
{
    cout << "? " << x1 << ' ' << y1 << ' ' << x2 << ' ' << y2 << endl;
    int re;
    cin >> re;
    return re;
}

rec finding(int x1, int y1, int x2, int y2)
{
    rec re;
    int l = x1 - 1, r = x2 + 1;
    while(r - l > 1)
    {
        int g = ((l + r) >> 1);
        if (numIn(x1, y1, g, y2))
            r = g;
        else
            l = g;
    }
    re.X2 = r;
    l = x1 - 1, r = x2 + 1;
    while(r - l > 1)
    {
        int g = ((l + r) >> 1);
        if (numIn(g, y1, x2, y2))
            l = g;
        else
            r = g;
    }
    re.X1 = l;
    l = y1 - 1, r = y2 + 1;
    while(r - l > 1)
    {
        int g = ((l + r) >> 1);
        if (numIn(x1, y1, x2, g))
            r = g;
        else
            l = g;
    }
    re.Y2 = r;
    l = y1 - 1, r = y2 + 1;
    while(r - l > 1)
    {
        int g = ((l + r) >> 1);
        if (numIn(x1, g, x2, y2))
            l = g;
        else
            r = g;
    }
    re.Y1 = l;
    return re;
}

void setup()
{
    cin >> n;
    int l = 1, r = n;
    while(r - l > 1)
    {
        int g = ((l + r) >> 1);
        if (numIn(1, 1, n, g))
            r = g;
        else
            l = g;
    }
    if (numIn(1, 1, n, r) == 1)
    {
        rec rec1 = finding(1, 1, n, r);
        rec rec2 = finding(1, r + 1, n, n);
        cout << "! " << rec1.X1 << ' ' << rec1.Y1 << ' ' << rec1.X2 << ' ' << rec1.Y2 << ' ' << rec2.X1 << ' ' << rec2.Y1 << ' ' << rec2.X2 << ' ' << rec2.Y2 << endl;
        return;
    }
    l = 1, r = n;
    while(r - l > 1)
    {
        int g = ((l + r) >> 1);
        if (numIn(1, 1, g, n))
            r = g;
        else
            l = g;
    }
    rec rec1 = finding(1, 1, r, n);
    rec rec2 = finding(r + 1, 1, n, n);
    cout << "! " << rec1.X1 << ' ' << rec1.Y1 << ' ' << rec1.X2 << ' ' << rec1.Y2 << ' ' << rec2.X1 << ' ' << rec2.Y1 << ' ' << rec2.X2 << ' ' << rec2.Y2 << endl;
}

void xuly()
{

}

int main()
{
    ios_base::sync_with_stdio(0);
    setup ();
    xuly ();
    return 0;
}
