#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
using namespace std;

#define INF (1 << 30)
#define INFL (1LL << 50)
#define pb push_back
#define loop_it(it, elements) for(auto it = elements.begin(); it != elements.end(); it++)
#define loop(i, l, r) for(auto i = l; i < r; i++)
#define loop_r(i, r, l) for(auto i = r; i >= l; i--)
#define loop_k(i, l, r, k) for(auto i = l; i < r; i+=k)
#define test_cases int test_cases;scanf("%d", &test_cases);for (int tc_0 = 1; tc_0 <= test_cases; tc_0++)

typedef long long i64;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<i64> vi64;
typedef vector<vi> vvi;
typedef vector<vi64> vvi64;
typedef pair<int, int> pii;
typedef set<pii> spii;
typedef vector<pii> vpii;
typedef map<pii, vi> mpiivi;
typedef map<int, int> mii;
typedef map<int, vi> mivi;

int n; 

int get_count(int x0, int y0, int x1, int y1) {
    printf("? %d %d %d %d\n", x0, y0, x1, y1);
    fflush(stdout);
    int cnt1;
    cin >> cnt1;
    return cnt1;    
}

bool compare_x(int x, int count) {
    return get_count(x, 1, n, n) < count;
}

bool compare_x0(int x, int count) {
    return get_count(1, 1, x, n) < count;
}

bool compare_y(int y, int count) {
    return get_count(1, y, n, n) < count;
}

bool compare_y0(int y, int count) {
    return get_count(1, 1, n, y) < count;
}

int main() {
    cin >> n;
    vi num(n);
    loop(i, 0, n) {
        num[i] = i + 1;
    }
    int x00 = *lower_bound(num.rbegin(), num.rend(), 1, compare_x);
    int x10 = *lower_bound(num.rbegin(), num.rend(), 2, compare_x);
    int x11 = *lower_bound(num.begin(), num.end(), 1, compare_x0);
    int x01 = *lower_bound(num.begin(), num.end(), 2, compare_x0);
    int y00 = *lower_bound(num.rbegin(), num.rend(), 1, compare_y);
    int y10 = *lower_bound(num.rbegin(), num.rend(), 2, compare_y);
    int y11 = *lower_bound(num.begin(), num.end(), 1, compare_y0);
    int y01 = *lower_bound(num.begin(), num.end(), 2, compare_y0);
    string st = "! ";
    if (get_count(x00, y00, x01, y01) == 1 && get_count(x10, y10, x11, y11) == 1) {
        st += "" + to_string(x00) + " " + to_string(y00) + " " + to_string(x01) + " " + to_string(y01) + " ";
        st += "" + to_string(x10) + " " + to_string(y10) + " " + to_string(x11) + " " + to_string(y11) + " ";
    } else if (get_count(x00, y10, x01, y11) == 1 && get_count(x10, y00, x11, y01) == 1) {
        st += "" + to_string(x00) + " " + to_string(y10) + " " + to_string(x01) + " " + to_string(y11) + " ";
        st += "" + to_string(x10) + " " + to_string(y00) + " " + to_string(x11) + " " + to_string(y01) + " ";
    } else if (get_count(x10, y00, x11, y01) == 1 && get_count(x00, y10, x01, y11) == 1) {
        st += "" + to_string(x10) + " " + to_string(y00) + " " + to_string(x11) + " " + to_string(y01) + " ";
        st += "" + to_string(x00) + " " + to_string(y10) + " " + to_string(x01) + " " + to_string(y11) + " ";
    } else if (get_count(x10, y10, x11, y11) == 1 && get_count(x00, y00, x01, y01) == 1) {
        st += "" + to_string(x10) + " " + to_string(y10) + " " + to_string(x11) + " " + to_string(y11) + " ";
        st += "" + to_string(x00) + " " + to_string(y00) + " " + to_string(x01) + " " + to_string(y01) + " ";
    } else {
        st += "" + to_string(x00) + " " + to_string(y00) + " " + to_string(x01) + " " + to_string(y01) + " ";
        st += "" + to_string(x10) + " " + to_string(y10) + " " + to_string(x11) + " " + to_string(y11) + " ";        
    }
    cout << st << endl;
    fflush(stdout);
    return 0;
}