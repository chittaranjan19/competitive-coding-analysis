#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[100005];

bool choice[100005];
int first[100005], second[100005];
LL val[100005];
int tree[800005];
LL sum[800005];
map<int, int> m;
int value[200005];

void update(int i,int L,int R,int node,int val)
{
  if(L == R)
  {
    tree[i] += val;
    sum[i] += val * 1LL * value[L];
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node, val);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node, val);
  tree[i] = tree[i*2 + 1] + tree[i*2 + 2];
  sum[i] = sum[i*2 + 1] + sum[i*2 + 2];
}

int query(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return tree[i];
  if(L > y || R < x)
    return 0;
  return query(i*2 + 1, L, (L + R) / 2, x, y) + query(i*2 + 2, (L + R) / 2 + 1, R, x, y);
}

LL sumQuery(int i,int L,int R,int x,int y)
{
  if(L >= x && R <= y)
    return sum[i];
  if(L > y || R < x)
    return 0;
  return sumQuery(i*2 + 1, L, (L + R) / 2, x, y) + sumQuery(i*2 + 2, (L + R) / 2 + 1, R, x, y);
}

int main()
{
  //freopen("dynamic.in", "r", stdin);
  //freopen("dynamic.out", "w", stdout);
  int n, q, x, y;
  LL d;
  scanf("%d %d", &n, &q);
  vector<int> v;
  for(int i=0;i<n;i++)
  {
    scanf("%d", &x);
    v.pb(x);
    arr[i + 1] = x;
  }
  for(int i=0;i<q;i++)
  {
    scanf("%d", &x);
    if(x == 1)
    {
      scanf("%d %d", &first[i], &second[i]);
      v.pb(second[i]);
    }
    else
    {
      choice[i] = true;
      scanf("%I64d", &val[i]);
    }
  }
  sort(v.begin(), v.end());
  int cnt = 0;
  for(int i=0;i<v.size();i++)
  {
    if(i && v[i] == v[i - 1]) continue;
    value[cnt] = v[i];
    m[v[i]] = cnt++;
  }
  for(int i=1;i<=n;i++)
    update(0, 0, cnt - 1, m[arr[i]], 1);
  for(int i=0;i<q;i++)
  {
    if(!choice[i])
    {
      x = first[i];
      y = second[i];
      update(0, 0, cnt - 1, m[arr[x]], -1);
      update(0, 0, cnt - 1, m[y], 1);
      arr[x] = y;
    }
    else
    {
      d = val[i];
      int L = 0, R = cnt - 1;
      while(R > L)
      {
        int mid = L + (R - L + 1) / 2;
        int c = 0;
        LL res = 0;
        if(mid)
        {
          c = query(0, 0, cnt - 1, 0, mid - 1);
          res = sumQuery(0, 0, cnt - 1, 0, mid - 1);
        }
        if(c * 1LL * value[mid] - res > d)
          R = mid - 1;
        else L = mid;
      }
      int c = 0;
      LL res = 0;
      if(L)
      {
        c = query(0, 0, cnt - 1, 0, L - 1);
        res = sumQuery(0, 0, cnt - 1, 0, L - 1);
      }
      d-=c * 1LL * value[L] - res;
      printf("%.9lf\n", value[L] + d * 1.0 / query(0, 0, cnt - 1, 0, L));
    }
  }
  return 0;
}