#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 3000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

vector<long long> graph[MAX_N];
long long cnt[MAX_N];

int main()
{
	//ifstream ifs("input.in");
	//ofstream ofs("output.out");
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	long long n, m, s, f;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> s >> f;
		graph[s - 1].push_back(f - 1);
	}
	long long ans = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
			cnt[j] = 0;
		for (int j = 0; j < graph[i].size(); j++)
			for (int k = 0; k < graph[graph[i][j]].size(); k++)
				cnt[graph[graph[i][j]][k]]++;
		for (int j = 0; j < n; j++)
			if (i != j)
				ans += (cnt[j] * (cnt[j] - 1) / 2);
	}
	cout << ans;
	return 0;
}