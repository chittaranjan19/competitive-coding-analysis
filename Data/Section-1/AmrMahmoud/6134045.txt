#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits.h>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define pi acos(-1.0)
#define LL long long

using namespace std;
map<int,vector<pair<int , int> > > allowed;
map<pair<int , int>,bool> visited;
map<pair<int , int>,int> distances;

int main()
{
    int x1,y1,x2,y2,n,x,y,z;
    scanf("%d%d%d%d%d",&x1,&y1,&x2,&y2,&n);
    for(int i=0;i<n;i++)
    {
        scanf("%d%d%d",&x,&y,&z);
        allowed[x].push_back(make_pair(y,z));
    }
    queue<pair<int , int> > bfs;
    bfs.push(make_pair(x1,y1));
    distances[make_pair(y1,x1)] = 0;
    bool found = false;
    while(!bfs.empty())
    {
        int x = bfs.front().first,y = bfs.front().second;
        if(x == x2 && y == y2)
        {
            found =  true;
            break;
        }
        bfs.pop();
        for(int i=-1;i<=1;i++)
            for(int j=-1;j<=1;j++)
            {
                if(((i || j) && x+i > 0 && x+i < 1000000001 && y+j > 0 && y+j < 1000000001) && (!visited[make_pair(x+i,y+j)]))
                {
                    for(int k=0;k<allowed[x+i].size();k++)
                    {
                        if(allowed[x+i][k].first <= y+j && allowed[x+i][k].second >= y+j)
                        {
                            bfs.push(make_pair(x+i,y+j));
                            visited[make_pair(x+i,y+j)] = true;
                            distances[make_pair(x+i,y+j)] = distances[make_pair(x,y)] + 1;
                        }
                    }
                }
            }
    }
    if(found)
        printf("%d",distances[make_pair(x2,y2)]);
    else printf("-1");
    return 0;
}