#include <fstream>
#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>

using namespace std;

const int inf = (int)2 * 1e9;
const int MOD = (int)1e9 + 7;
const int MAX_N = 300000;
const long double pi = 3.1415926;
const long double eps = 1e-6;

int gcd(int a, int b)
{
    int c;
    if (a > b)
    {
        c = a;
        a = b;
        b = c;
    }
    while (a > 0)
    {
        c = a;
        a = b % a;
        b = c;
    }
    return b;
}

int main()
{
    //ifstream ifs("input.in");
    //ofstream ofs("output.out");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    scanf("%d", &n);
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    int pow_arr[n + 1], curr_pow = 1, curr = 0;
    for (int i = 1; i <= n; i++)
    {
        if (curr_pow * 2 <= i)
        {
            curr_pow *= 2;
            curr++;
        }
        pow_arr[i] = curr;
    }
    int bin_pow[20];
    bin_pow[0] = 1;
    for (int i = 1; i <= 19; i++)
        bin_pow[i] = bin_pow[i - 1] * 2;
    int s_t_mod[20][n];
    for (int i = 0; i <= 19; i++)
        for (int j = 0; j < n; j++)
            s_t_mod[i][j] = 0;
    for (int i = 0; i < n; i++)
        s_t_mod[0][i] = a[i];
    for (int i = 1; i <= 19; i++)
        for (int j = 0; j < n; j++)
            if (j + bin_pow[i] <= n)
                s_t_mod[i][j] = gcd(s_t_mod[i - 1][j], s_t_mod[i - 1][j + bin_pow[i - 1]]);
    int ans = -1, cnt_ans = 0;
    vector<int> ans_list(n);
    for (int i = 0; i < n; i++)
    {
        int l = -1, r = i, mid;
        while (r - l > 1)
        {
            mid = (l + r) / 2;
            if (gcd(s_t_mod[pow_arr[i - mid + 1]][mid], s_t_mod[pow_arr[i - mid + 1]][i - bin_pow[pow_arr[i - mid + 1]] + 1]) % a[i] == 0)
                r = mid;
            else
                l = mid;
        }
        int l1 = i, r1 = n, mid1;
        while (r1 - l1 > 1)
        {
            mid1 = (l1 + r1) / 2;
            if (gcd(s_t_mod[pow_arr[mid1 - i + 1]][i], s_t_mod[pow_arr[mid1 - i + 1]][mid1 - bin_pow[pow_arr[mid1 - i + 1]] + 1]) % a[i] == 0)
                l1 = mid1;
            else
                r1 = mid1;
        }
        if (l1 - r > ans)
        {
            ans = l1 - r;
            cnt_ans = 1;
            ans_list[cnt_ans - 1] = r + 1;
        }
        else if (l1 - r == ans)
        {
            cnt_ans++;
            ans_list[cnt_ans - 1] = r + 1;
        }
    }
    set<int> s;
    for (int i = 0; i < cnt_ans; i++)
        s.insert(ans_list[i]);
    printf("%d %d\n", s.size(), ans);
    for (set<int>::iterator it = s.begin(); it != s.end(); it++)
        printf("%d ", *it);
    return 0;
}
