import java.io.*;
import java.util.*;

public class Main {
	static int a,b,c;
	
	public static void main(String[] args) {
		FastScanner3 sc = new FastScanner3(System.in);
		
		a = sc.nextInt();
		b = c = a;
		
		int goal = sc.nextInt();
		
		int ctr = 0;
		
		int[] arr = new int[]{goal, goal, goal};
		
		goal = a;
		
		while(arr[0] != goal || arr[1] != goal || arr[2] != goal){
			Arrays.sort(arr);
//			System.out.println(Arrays.toString(arr));
			
//			int tmp = lowerSide(arr[2], arr[0], arr[1]);
			int tmp = biggestSide(arr[0], arr[1], arr[2]);
			
//			System.out.println(tmp);
			
			arr[0] = Math.min(tmp, goal);
			if(arr[2] == arr[1] && arr[2] + arr[1] == arr[0])
				arr[2]--;
			else if(arr[2] == arr[0] && arr[2] + arr[0] == arr[1])
				arr[2]--;
			else if(arr[1] == arr[0] && arr[1] + arr[0] == arr[2])
				arr[2]--;
			
			ctr++;
			if(ctr == 10) break;
		}
		
		System.out.println(ctr);
	}
	
	static int biggestSide(int x, int y, int z){
		int tmp = (y + z);
		tmp -= 1;
		return tmp;
	}
	
	static int lowerSide(int x, int y, int z){
		int tmp = Math.abs(y - z);
		tmp += 1;
		return tmp;
	}
}

class FastScanner3{
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
    private SpaceCharFilter filter;

    public FastScanner3(InputStream stream)
    {
        this.stream = stream;
    }

    public int read()
    {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars)
        {
            curChar = 0;
            try
            {
                numChars = stream.read(buf);
            } catch (IOException e)
            {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }

    public int nextInt()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-')
        {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do
        {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }

    public String next()
    {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
    
    public String nextLine()
    {
        int c = read();
        StringBuilder res = new StringBuilder();
        do
        {
            res.appendCodePoint(c);
            c = read();
        } while (!isLineEndChar(c));
        return res.toString();
    }    
    
    public double nextDouble() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        double res = 0;
        while (!isSpaceChar(c) && c != '.') {
            if (c == 'e' || c == 'E')
                return res * Math.pow(10, nextInt());
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        }
        if (c == '.') {
            c = read();
            double m = 1;
            while (!isSpaceChar(c)) {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                m /= 10;
                res += (c - '0') * m;
                c = read();
            }
        }
        return res * sgn;
    }
    
    public long nextLong() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        long res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
    
    public boolean isSpaceChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }
    
    public boolean isLineEndChar(int c)
    {
        if (filter != null)
            return filter.isSpaceChar(c);
        return c == '\n' || c == '\r' || c == -1;
    }

    public interface SpaceCharFilter
    {
        public boolean isSpaceChar(int ch);
    }
}