#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define ll long long
#define f first
#define s second

typedef pair<int, int> pii;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

vector<int> adj[maxn], wt[maxn];
set<int> mset[maxn];
int dist[maxn];
map<pair<int, pair<int, int> >, int> m1;

int main()
{
    //freopen("i.txt", "r", stdin);
    //freopen("o.txt", "w", stdout);
    int t, i, j, n, m, s, u, v, w, l, cdist, d, cur;
    sd(n), sd(m), sd(s);
    for(i=1; i<=m; i++){
        sd(u), sd(v), sd(w);
        adj[u].pb(v);
        adj[v].pb(u);
        wt[u].pb(w);
        wt[v].pb(w);
    }
    for(i=1; i<=n; i++)
        dist[i] = inf;
    sd(l);
    dist[s] = 0;
    priority_queue<pii, vector<pii>, greater<pii> > q;
    q.push(mp(0, s));
    while(!q.empty()){
        cdist = q.top().f;
        cur = q.top().s;
        q.pop();
        if(dist[u]<cdist)
            continue;
        for(i=0; i<adj[cur].size(); i++){
            u = adj[cur][i];
            d = cdist + wt[cur][i];
            if(dist[u]>d){
                dist[u] = d;
                mset[u].clear();
                mset[u].insert(cur);
                q.push(mp(d, u));
            }
            else if(dist[u]==d){
                mset[u].insert(cur);
            }
        }
    }
    int ans = 0;
    //for(i=1; i<=n; i++)
    //  cout << dist[i] << " ";
    //cout << "\n";
    for(i=1; i<=n; i++){
        d = dist[i];
        if(d>l)
            continue;
        if(d==l){
            ans++;
            continue;
        }
        for(j=0; j<adj[i].size(); j++){
            if(mset[i].find(adj[i][j])==mset[i].end()){
                //cout << i << " " << adj[i][j] << "\n";
                cdist = d+wt[i][j];
                if(cdist>l){
                    if(m1.find(mp(l-d, mp(i, adj[i][j])))==m1.end() && m1.find(mp(cdist-l, mp(adj[i][j], i)))==m1.end()){
                        ans++;
                        m1[mp(l-d, mp(i, adj[i][j]))] = 1;
                        m1[mp(cdist-l, mp(adj[i][j], i))] = 1;
                    }
                }
            }
        }
    }
    printf("%d\n", ans);
    return 0;
}
