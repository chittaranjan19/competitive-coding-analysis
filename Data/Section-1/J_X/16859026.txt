#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int maxn = 3e5 + 5;
const int maxm = 2e3 + 5;

struct edge
{
    int to, next;

    edge(int to = 0, int next = 0) : to(to), next(next) {}
} G[maxn << 1];
int head[maxn], tot, par[maxn], belong[maxn], has[maxm];
bool con[maxn], used[maxm];

void init()
{
    memset(head, -1, sizeof(head));
    memset(par, -1, sizeof(par));
    tot = 0;
}

void addedge(int u, int v)
{
    G[tot] = edge(v, head[u]);
    head[u] = tot++;
    G[tot] = edge(u, head[v]);
    head[v] = tot++;
}

int findp(int x)
{
    return ~par[x] ? par[x] = findp(par[x]) : x;
}

void unite(int u, int v)
{
    u = findp(u), v = findp(v);
    if(u == v) return;
    par[v] = u;
    con[u] |= con[v];
}

int main()
{
    int n, m, k, cnt = 0;
    scanf("%d%d%d", &n, &m, &k);
    init();
    for(int i = 0; i < m; ++i)
    {
        int u, v;
        scanf("%d%d", &u, &v);
        addedge(u, v);
        if(u == 1 || v == 1) ++cnt;
    }
    if(cnt < k)
    {
        puts("impossible");
    }
    else
    {
        int tot = 0;
        for(int i = 2; i <= n; ++i)
        {
            memset(used, 0, sizeof(used));
            con[i] = true;
            for(int j = head[i]; ~j; j = G[j].next)
            {
                int k = G[j].to;
                if(k == 1) con[i] = false;
                if(belong[k]) used[belong[k]] = true;
            }
            for(int j = 1; j <= tot; ++j)
            {
                if(!used[j])
                {
                    belong[i] = j;
                    unite(has[j], i);
                    break;
                }
            }
            if(!belong[i])
            {
                belong[i] = ++tot;
                has[tot] = i;
            }
        }
        for(int i = 2; i <= n; ++i)
        {
            memset(used, 0, sizeof(used));
            for(int j = head[i]; ~j; j = G[j].next)
            {
                int k = G[j].to;
                if(belong[k]) used[belong[k]] = true;
            }
            for(int j = 1; j <= tot; ++j)
            {
                if(j != belong[i] && !used[j]) unite(i, has[j]);
            }
        }
        cnt = 0;
        memset(used, 0, sizeof(used));
        for(int i = 1; i <= tot; ++i)
        {
            int j = findp(has[i]), k = belong[j];
            if(used[k]) continue;
            if(!con[j])
            {
                cnt = -1;
                break;
            }
            ++cnt;
            used[k] = true;
        }
        if(~cnt && cnt <= k) puts("possible");
        else puts("impossible");
    }
    return 0;
}
