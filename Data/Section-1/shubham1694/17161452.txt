#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 200010;
const int lg = 20;

vector<pair<int, pair<int, ll> > > adj[maxn];
map<pair<ll, pii>, int> m1;
map<int, pair<ll, pii> > m2;
int depth[maxn], fe[maxn], parent[lg][maxn];

void dfs(int cur, int d, int e, int p)
{
	depth[cur] = d;
	fe[cur] = e;
	parent[0][cur] = p;
	for(auto it:adj[cur]){
		if(it.s.f!=p){
			if(it.s.s>1)
				dfs(it.s.f, d+1, it.f, cur);
			else
				dfs(it.s.f, d+1, e, cur);
		}
	}
}

int lca(int u, int v)
{
	int diff = depth[u]-depth[v];
	int i;
	for(i=0; i<lg; i++){
		if(diff&(1<<i))
			u = parent[i][u];
	}
	if(u!=v){
		for(i=lg-1; i>=0; i--){
			if(parent[i][u]!=parent[i][v]){
				u = parent[i][u];
				v = parent[i][v];
			}
		}
		if(u!=v)
			u = parent[0][u];
		return u;
	}
	return u;
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int n, m, i, j, t, u, v, x, v1, v2, cur, anc, p;
	ll w, temp;
	scanf("%d%d", &n, &m);
	for(i=1; i<n; i++){
		scanf("%d%d%lld", &u, &v, &w);
		adj[u].pb(mp(i, mp(v, w)));
		adj[v].pb(mp(i, mp(u, w)));
		m1[mp(w, mp(u, v))] = i;
		m2[i] = mp(w, mp(u, v));
	}
	dfs(1, 0, 0, 0);
	for(i=1; i<lg; i++){
		for(j=1; j<=n; j++)
			parent[i][j] = parent[i-1][parent[i-1][j]];
	}
	while(m--){
		scanf("%d", &t);
		if(t==1){
			scanf("%d%d%lld", &u, &v, &w);
			if(depth[u]<depth[v])
				swap(u, v);
			anc = lca(u, v);
			cur = u;
			while(w){
				x = fe[cur];
				if(x==0)
					break;
				temp = m2[x].f;
				v1 = m2[x].s.f;
				v2 = m2[x].s.s;
				if(depth[v1]>depth[v2])
					swap(v1, v2);
				if(temp==1)
					fe[cur] = fe[v1];
				if(depth[v1]<depth[anc])
					break;
				cur = v1;
				w/=temp;
			}
			cur = v;
			while(w){
				x = fe[cur];
				if(x==0)
					break;
				temp = m2[x].f;
				v1 = m2[x].s.f;
				v2 = m2[x].s.s;
				if(depth[v1]>depth[v2])
					swap(v1, v2);
				if(temp==1)
					fe[cur] = fe[v1];
				if(depth[v1]<depth[anc])
					break;
				cur = v1;
				w/=temp;
			}
			printf("%lld\n", w);
		}
		else{
			scanf("%d%lld", &p, &w);
			temp = m2[p].f;
			u = m2[p].s.f;
			v = m2[p].s.s;
			m2[p].f = w;
			auto it = m1.find(mp(temp, mp(u, v)));
			m1.erase(it);
			m1[mp(w, mp(u, v))] = p;
		}
	}
	return 0;
}
