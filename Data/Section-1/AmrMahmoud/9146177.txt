#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int tree[200005],arr[200005],x[200005],y[200005];
int MaxVal = 200005;
LL sum[200005];

void update(LL idx, int val)
{
    if(idx <= 0) return;
    while (idx <= MaxVal && idx > 0){
        tree[idx] = tree[idx] + val;
        idx = idx + (idx & -idx);
    }
}

int read(LL idx)
{
    if(idx <= 0) return 0;
    int sum = 0;
    while (idx > 0 && idx <= MaxVal){
        sum = sum + tree[idx];
        idx = idx - (idx & -idx);
    }
    return sum;
}

bool sorter(int a, int b)
{
    return read(a) > read(b);
}

int main()
{
    ios_base::sync_with_stdio(0);
    int n,q;
    cin >> n >> q;
    vector<int> temp;
    for(int i=1;i<=n;i++)
        cin >> arr[i],temp.pb(i);
    sort(arr + 1, arr + n + 1, greater<int>());
    for(int i=0;i<q;i++)
    {
        cin >> x[i] >> y[i];
        update(x[i], 1);
        update(y[i] + 1, -1);
    }
    sort(temp.begin(), temp.end(), sorter);
    for(int i=0;i<temp.size();i++)
        sum[temp[i]] = arr[i + 1];
    for(int i=1;i<=n;i++)
        sum[i]+=sum[i-1];
    LL res = 0;
    for(int i=0;i<q;i++)
        res+=sum[y[i]] - sum[x[i] - 1];
    cout << res;
    return 0;
}