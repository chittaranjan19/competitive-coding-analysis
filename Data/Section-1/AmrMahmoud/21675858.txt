#include <bits/stdc++.h>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 2000000000000000000LL
#define INF 2000000000
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

pair<LL, LL> arr[300005];
pair<LL, int> diff[300005];
int ind[300005];
pair<LL, int> tree[1200005];

void build(int i,int L,int R)
{
  if(L == R)
  {
    if(L == 0) tree[i] = mp(0, 0);
    else tree[i] = mp(diff[L].f, 1);
    return ;
  }
  build(i*2 + 1, L, (L + R) / 2);
  build(i*2 + 2, (L + R) / 2 + 1, R);
  tree[i].f = min(INF_LL, tree[i*2 + 1].f + tree[i*2 + 2].f);
  tree[i].s = tree[i*2 + 1].s + tree[i*2 + 2].s;
}

void update(int i,int L,int R,int node)
{
  if(L == R)
  {
    tree[i] = mp(0, 0);
    return ;
  }
  if(node <= (L + R) / 2)
    update(i*2 + 1, L, (L + R) / 2, node);
  else update(i*2 + 2, (L + R) / 2 + 1, R, node);
  tree[i].f = min(INF_LL, tree[i*2 + 1].f + tree[i*2 + 2].f);
  tree[i].s = tree[i*2 + 1].s + tree[i*2 + 2].s;
}

pair<LL, int> query(int i,int L,int R,LL rem)
{
  if(tree[i].f <= rem)
    return tree[i];
  if(!rem || L == R) return mp(0, 0);
  if(tree[i*2+1].f > rem) return query(i*2 + 1, L, (L + R) / 2, rem);
  pair<LL, int> tmp = tree[i*2+1];
  rem -= tmp.f;
  pair<LL, int> t = query(i*2 + 2, (L + R) / 2 + 1, R, rem);
  tmp.f += t.f;
  tmp.s += t.s;
  return tmp;
}

int main()
{
  int n;
  LL x, y;
  cin >> n;
  for(int i=0;i<n;i++)
  {
    scanf("%I64d %I64d", &x, &y);
    arr[i] = mp(x, y);
  }
  x = arr[0].f;
  sort(arr + 1, arr + n);
  if(x >= arr[n - 1].f)
  {
    cout << 1;
    return 0;
  }
  for(int i=1;i<n;i++)
  {
    diff[i].f = arr[i].s - arr[i].f + 1;
    diff[i].s = i;
  }
  sort(diff + 1, diff + n);
  for(int i=1;i<n;i++)
    ind[diff[i].s] = i;
  build(0, 0, n - 1);
  int ans = n - query(0, 0, n - 1, x).s;
  for(int i=1;i<n;i++)
  {
    if(x < arr[i].f) break;
    update(0, 0, n - 1, ind[i]);
    if(i != n - 1 && arr[i].f == arr[i + 1].f) continue;
    ans = min(ans, n - i - query(0, 0, n - 1, x - arr[i].f).s);
  }
  cout << ans;
  return 0;
}
