#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 201000
#define maxC 1000000007

using namespace std;
int a[4], b[4], vx[4][4], vy[4][4], ans, p[4];

bool check()
{
    FOR(i, 1, 3)
    {
        double l1 = sqrt((0.0 + vx[0][p[0]] - vx[i][p[i]]) * (0.0 + vx[0][p[0]] - vx[i][p[i]]) + (0.0 + vy[0][p[0]] - vy[i][p[i]]) * (0.0 + vy[0][p[0]] - vy[i][p[i]]));
        int t1, t2;
        if(i == 1)
            t1=2,t2=3;
        if(i == 2)
            t1=1,t2=3;
        if(i == 3)
            t1=1,t2=2;
        double l2=sqrt((0.0 + vx[t1][p[t1]] - vx[t2][p[t2]]) * (0.0 + vx[t1][p[t1]] - vx[t2][p[t2]]) + (0.0 + vy[t1][p[t1]] - vy[t2][p[t2]]) * (0.0 + vy[t1][p[t1]] - vy[t2][p[t2]]));
        if(l1 > 0 && l1 == l2 && vx[0][p[0]] + vx[i][p[i]] == vx[t1][p[t1]] + vx[t2][p[t2]] && vy[0][p[0]]+vy[i][p[i]] == vy[t1][p[t1]] + vy[t2][p[t2]] && (vy[0][p[0]] - vy[i][p[i]] + 0.0) * (vy[t1][p[t1]] - vy[t2][p[t2]] + 0.0) == -1 * (vx[0][p[0]] - vx[i][p[i]] + 0.0) * (0.0 + vx[t1][p[t1]] - vx[t2][p[t2]]))
            return 1;
    }
    return 0;
}

void dfs(int a)
{
    if(a == 4)
    {
        if(check())
            ans= min(ans, p[0] + p[1] + p[2] + p[3]);
        return;
    }
    FOR(i, 0, 3)
    {
        p[a] = i;
        dfs(a + 1);
    }
}

int main()
{
    iostream::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int cas;
    cin >> cas;
    FOR(q, 1, cas)
    {
        FOR(i, 0, 3)
        {
            cin >> vx[i][0] >> vy[i][0] >> a[i] >> b[i];
            FOR(j, 1, 3)
            {
                vx[i][j] = a[i] + b[i] - vy[i][j-1];
                vy[i][j] = vx[i][j-1] - a[i] + b[i];
            }
        }
        ans = maxC;
        dfs(0);
        if (ans == maxC)
            cout << "-1\n";
        else
            cout << ans << "\n";
    }
    return 0;
}
