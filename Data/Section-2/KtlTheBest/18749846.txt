#include <bits/stdc++.h>
using namespace std;

#define fr first
#define sc second
#define mkp make_pair

int n;
pair <int, pair <int, int> > p[100001];
queue <pair <int, pair <int, int> > > q;

int main(){
	cin >> n;
	for(int i = 0; i < n; ++ i){
		int x, y;
		cin >> x >> y;
		p[i].fr = (abs(x) + abs(y));
		p[i].sc.fr = x;
		p[i].sc.sc = y;
	}
	sort(p, p + n);
	for(int i = 0; i < n; ++ i){
		int curx = 0;
		int cury = 0;
		int futx = p[i].sc.fr;
		int futy = p[i].sc.sc;
		if(curx > futx){
			q.push(mkp(1, mkp(curx - futx, 1)));
		} else 
		if(curx < futx){
			q.push(mkp(1, mkp(futx - curx, 3)));
		}
		curx = futx;
		if(cury > futy){
			q.push(mkp(1, mkp(cury - futy, 2)));
		} else 
		if(cury < futy){
			q.push(mkp(1, mkp(futy - cury, 4)));
		}
		cury = futy;
		q.push(mkp(2, mkp(0, 0)));
		futx = 0;
		futy = 0;
		if(curx > futx){
			q.push(mkp(1, mkp(curx - futx, 1)));
		} else 
		if(curx < futx){
			q.push(mkp(1, mkp(futx - curx, 3)));
		}
		curx = futx;
		if(cury > futy){
			q.push(mkp(1, mkp(cury - futy, 2)));
		} else 
		if(cury < futy){
			q.push(mkp(1, mkp(futy - cury, 4)));
		}
		cury = futy;
		q.push(mkp(3, mkp(0, 0)));
	}
	cout << q.size() << '\n';
	while(q.size()){
		if(q.front().fr == 1){
			cout << 1 << ' ' << q.front().sc.fr << ' ';
			if(q.front().sc.sc == 1){
				cout << "L\n";
			}
			if(q.front().sc.sc == 2){
				cout << "D\n";
			}
			if(q.front().sc.sc == 3){
				cout << "R\n";
			}
			if(q.front().sc.sc == 4){
				cout << "U\n";
			}
		} else {
			cout << q.front().fr << '\n';
		}
		q.pop();
	}
	return 0;
}