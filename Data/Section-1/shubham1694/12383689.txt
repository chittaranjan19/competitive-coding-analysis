#include <bits/stdc++.h>

using namespace std;

const int maxn = 1000000;

int segtree[maxn], arr[maxn];

void update(int ss, int se, int q, int node)
{
    if(ss>se || ss>q || q>se)
        return;
    if(ss==se){
        segtree[node] = 1;
        return;
    }
    int mid, lc, rc;
    mid = (ss+se)>>1;
    lc = 2*node + 1;
    rc = lc+1;
    update(ss, mid, q, lc);
    update(mid+1, se, q, rc);
    segtree[node] = segtree[lc]+segtree[rc];
}

int query(int ss, int se, int k, int node)
{
    if(segtree[node]==0){
        return (se-ss+1)/k;
    }
    int mid, lc, rc;
    mid = (ss+se)>>1;
    lc = 2*node + 1;
    rc = lc+1;
    return (query(ss, mid, k, lc)+query(mid+1, se, k, rc));
}

int main()
{
    int i, j, n, k, a, m, cmax, v, v1, v2, pmax;
    scanf("%d%d%d%d", &n, &k, &a, &m);
    for(i=0; i<m; i++)
        scanf("%d", &arr[i]);
    set<int> mset;
    set<int>:: iterator it1, it2;
    //mset.insert(1), mset.insert(n);
    pmax = n/a;
    for(i=0; i<m; i++){
        if(mset.find(arr[i])!=mset.end())
            continue;
        it1 = mset.upper_bound(arr[i]);
        if(it1==mset.end()){
            it2 = it1;
            while((*it2)>=arr[i]){
                if(it2==mset.begin())
                    break;
                it2--;
            }
            if(it2==mset.begin()){
                v = n;
                v1 = arr[i]-1;
                v2 = n-arr[i];
            }
            else{
                v = n-(*it2);
                v1 = arr[i]-(*it2)-1;
                v2 = n-arr[i];
            }
        }
        else{
            it2 = it1;
            while((*it2)>=arr[i]){
                if(it2==mset.begin())
                    break;
                it2--;
            }
            if(it2==mset.begin()){
                v = *it1 - 1;
                v1 = arr[i]-1;
                v2 = (*it1)-arr[i]-1;
            }
            else{
                v = (*it1)-(*it2)-1;
                v1 = arr[i]-(*it2)-1;
                v2 = (*it1)-arr[i]-1;
            }
        }
        cmax = pmax - (v/a) + (v1/a) + (v2/a);
        //cout << v << " " << v1 << " " << v2 << "\n";
        if(cmax<k){
            printf("%d\n", (i+1));
            return 0;
        }
        mset.insert(arr[i]);
        pmax = cmax;
    }
    printf("-1\n");
    return 0;
}