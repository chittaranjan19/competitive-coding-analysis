#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

int fail[100005];
int DP[100005],sol[100005],sum[100005];
bool match[100005];

int main()
{
    ios_base::sync_with_stdio(0);
    string s,t;
    cin >> s >> t;
    int k = 0;
    for(int j=1;j<t.size();j++)
    {
        while(k > 0 && t[k] != t[j])
            k = fail[k-1];
        if(t[k] == t[j]) k++;
        fail[j] = k;
    }
    k = 0;
    for(int i=0;i<s.size();i++)
    {
        while(k > 0 && t[k] != s[i])
            k = fail[k-1];
        if(t[k] == s[i]) k++;
        if(k == t.size()) k = fail[k-1],match[i] = 1;
    }
    sol[0] = sum[0] = DP[0] = match[0];
    for(int i=1;i<s.size();i++)
    {
        if(!match[i])
        {
            DP[i] = DP[i-1];
            sol[i] = (DP[i] + sol[i-1]) % mod;
            sum[i] = (sol[i] + sum[i-1]) % mod;
            continue;
        }
        DP[i] = (i - t.size() >= 0 ? sum[i - t.size()] : 0) + i - t.size() + 2;
        sol[i] = (DP[i] + sol[i-1]) % mod;
        sum[i] = (sol[i] + sum[i-1]) % mod;
    }
    cout << sol[s.size() - 1];
    return 0;
}