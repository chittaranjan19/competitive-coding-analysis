#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

bool choice[100005];
int first[100005], second[100005];
LL val[100005];
int arr[100005];

struct Node {
    LL sum;
    int cnt;
    Node *l, *r;

    Node() : sum(0), cnt(0), l(NULL), r(NULL) { }
};

void add(Node *v, int l, int r, int q_l, int q_r, int val) {
    if(l > r || q_r < l || q_l > r)
        return;
    if(q_l <= l && r <= q_r) {
        v->cnt += val;
        v -> sum += val * l;
        return;
    }
    int mid = (l + r) >> 1;
    if(v -> l == NULL)
        v -> l = new Node();
    if(v -> r == NULL)
        v -> r = new Node();
    add(v -> l, l, mid, q_l, q_r, val);
    add(v -> r, mid + 1, r, q_l, q_r, val);
    v->cnt = v->l->cnt + v->r->cnt;
    v->sum = v->l->sum + v->r->sum;
}

int getCnt(Node *v, int l, int r, int q_l, int q_r) {
    if(!v || l > r || q_r < l || q_l > r)
        return 0;
    if(q_l <= l && r <= q_r) {
        return v->cnt;
    }
    int mid = (l + r) >> 1;
  return getCnt(v -> l, l, mid, q_l, q_r) + getCnt(v -> r, mid + 1, r, q_l, q_r);
}

LL getSum(Node *v, int l, int r, int q_l, int q_r) {
    if(!v || l > r || q_r < l || q_l > r)
        return 0;
    if(q_l <= l && r <= q_r) {
        return v->sum;
    }
    int mid = (l + r) >> 1;
  return getSum(v -> l, l, mid, q_l, q_r) + getSum(v -> r, mid + 1, r, q_l, q_r);
}

int main()
{
  //freopen("grand.in", "r", stdin);
  //freopen("grand.out", "w", stdout);
  int n, q, x, y;
  LL d;
  scanf("%d %d", &n, &q);
  Node *root = new Node();
  vector<int> v, vv;
  int maxi = 1e9 + 10;
  for(int i=0;i<n;i++)
  {
    scanf("%d", &x);
    add(root, 0, maxi, x, x, 1);
    arr[i + 1] = x;
    vv.pb(x);
  }
  for(int i=0;i<q;i++)
  {
    scanf("%d", &x);
    if(x == 1)
    {
      scanf("%d %d", &first[i], &second[i]);
      vv.pb(second[i]);
    }
    else
    {
      choice[i] = true;
      scanf("%I64d", &val[i]);
    }
  }
  sort(vv.begin(), vv.end());
  for(int i=0;i<vv.size();i++)
  {
    if(i && vv[i] == vv[i - 1]) continue;
    v.pb(vv[i]);
  }
  for(int i=0;i<q;i++)
  {
    if(!choice[i])
    {
      x = first[i];
      y = second[i];
      add(root, 0, maxi, arr[x], arr[x], -1);
      add(root, 0, maxi, y, y, 1);
      arr[x] = y;
    }
    else
    {
      d = val[i];
      int L = 0, R = v.size() - 1;
      while(R > L)
      {
        int m = L + (R - L + 1) / 2;
        int mid = v[m];
        int cnt = 0;
        LL res = 0;
        if(m)
        {
          cnt = getCnt(root, 0, maxi, 0, v[m - 1]);
          res = getSum(root, 0, maxi, 0, v[m - 1]);
        }
        if(cnt * 1LL * mid - res > d)
          R = m - 1;
        else L = m;
      }
      int cnt = 0;
      LL res = 0;
      if(L)
      {
        cnt = getCnt(root, 0, maxi, 0, v[L - 1]);
        res = getSum(root, 0, maxi, 0, v[L - 1]);
      }
      L = v[L];
      d-=cnt * 1LL * L - res;
      printf("%.9lf\n", L + d * 1.0 / getCnt(root, 0, maxi, 0, L));
    }
  }
  return 0;
}