#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

void update_tree(int node, int a, int b, int i, int j, int value);

const int MAX = 100005;

vector<bool> sieve(1001, true);
ll values[MAX];
bitset<1001> tree[2*MAX];
vector<int>  graph[MAX];
ll lazy[2*MAX];
int pre[MAX];
int inv_pre[MAX];
int sons[MAX];
bool visited[MAX];
int M = 1;
int prec = 1;


void build_sieve() {
    sieve[0] = false;
    sieve[1] = false;
    for (int i = 2; i <= sqrt(1000); ++i) {
        if(sieve[i]) {
            for (int j = 2; i*j <= 1000; ++j)
                sieve[i*j] = false;
        }
    }
}

bitset<1001> shift(bitset<1001> b, int it) {
    //cout<<"shift"<<endl;
    return b<<it | b>>(M+1-it);
}

bitset<1001> query_tree(int node, int a, int b, int i, int j) {

    if(a > b || a > j || b < i) return bitset<1001>();

    if(lazy[node] != 0) {
        //tree[node] <<= lazy[node];
        tree[node] = shift(tree[node], lazy[node]);
        if(a != b) {
            lazy[node*2] += lazy[node];
            lazy[node*2+1] += lazy[node];
        }

        lazy[node] = 0;
    }

    if(a >= i && b <= j)
        return tree[node];

    bitset<1001> q1 = query_tree(node*2, a, (a+b)/2, i, j);
    bitset<1001> q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j);

    bitset<1001> res = q1 | q2;

    return res;
}

void update_tree(int node, int a, int b, int i, int j, int value) {

    if(lazy[node] != 0) {
        //tree[node] <<= lazy[node];
        tree[node] = shift(tree[node], lazy[node]);
        if(a != b) {
            lazy[node*2] += lazy[node];
            lazy[node*2+1] += lazy[node];
        }

        lazy[node] = 0;
    }

    if(a > b || a > j || b < i)
        return;

    if(a >= i && b <= j) {
        //tree[node] <<= value;
        tree[node] = shift(tree[node], value);
        if(a != b) {
            lazy[node*2] += value;
            lazy[node*2+1] += value;
        }

        return;
    }

    update_tree(node*2, a, (a+b)/2, i, j, value);
    update_tree(1+node*2, 1+(a+b)/2, b, i, j, value);

    tree[node] = tree[node*2] | tree[node*2+1];
}

void build_tree(int node, int a, int b) {
    if(a > b) return;

    if(a == b) {
        int test = values[inv_pre[a]] % M;
        bitset<1001> t;
        t.set(test, 1);
        tree[node] = t;
        return;
    }
    build_tree(node*2, a, (a+b)/2);
    build_tree(node*2+1, 1+(a+b)/2, b);

    tree[node] = tree[node*2] | tree[node*2+1];
}


int preorder(int node) {
    int nson = 1;
    visited[node] = true;
    pre[node] = prec;
    inv_pre[prec] = node;
    prec++;
    for (int i = 0; i < graph[node].size(); ++i) {
        int p = graph[node][i];
        if(!visited[p]) {
            nson += preorder(p);
        }
    }
    sons[node] = nson;
    return nson;
}

int main() {
    //freopen("yash_and_trees.in", "r", stdin);
    //freopen("yash_and_trees.out", "w", stdout);
    build_sieve();
    int N;
    scanf("%d %d", &N, &M);
    //printf("first M %d\n", M);
    for (int i = 1; i <= N; ++i) {
        int t;
        scanf("%d", &t);
        values[i] = t % M;
    }
    for (int i = 0; i < N - 1; ++i) {
        int a, b;
        //cin>>a>>b;
        scanf("%d %d", &a, &b);
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    //printf("second M %d\n", M);
    preorder(1);
    build_tree(1, 1, N);
    /*printf("tree\n");
    for (int i = 1; i <= 2*N; ++i) {
        printf("i %d ", i);
        for (int j = 0; j < 15; ++j) {
            cout<<tree[i][j];
        }
        cout<<endl;
    }*/
    int c;
    //cin>>c;
    scanf("%d", &c);

    for (int i = 0; i < c; ++i) {
        int type;
        //cin>>type;
        scanf("%d", &type);
        if(type == 1) {
            int v, x;
            scanf("%d %d", &v, &x);
            x %= M;
            update_tree(1, 1, N, pre[v], pre[v] + sons[v] - 1, x);
        }
        else {
            int v, ct = 0;
            scanf("%d", &v);
            bitset<1001> ans = query_tree(1, 1, N, pre[v], pre[v] + sons[v] -1);
            for (int j = 0; j <= M; ++j)
                if(ans[j] && sieve[j]) ct++;
            /*printf("tree\n");
            for (int i = 1; i <= 2*N; ++i) {
                printf("i %d ", i);
                for (int j = 0; j < 30; ++j) {
                    cout<<tree[i][j];
                }
                cout<<endl;
            }*/
            cout<<ct++<<endl;
        }
    }

    return 0;
}