#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}


int main()
{
	int n,m,k,aux;
	cin >> n >> m >> k;
	map<int,int> appPosition;
	map<int,int> appID;
	forn(i,n)
	{
		cin >> aux;
		appPosition[aux] = i;
		appID[i] = aux;
		
	}
	tint total = 0;
	forn(i,m)
	{
		cin >> aux;
		int c = appPosition[aux];
		total += c/k + 1;
		if (!c == 0)
		{
			appPosition[aux]--;
			appPosition[appID[c-1]]++;
			appID[c] = appID[c-1];
			appID[c-1] = aux;
		}
	}	
	cout << total << endl;	
		
	
	return 0;
}

