#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 1000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

map<LL, pair<int,pair<int, int> > > here;
map<pair<int,int>, bool> visited;

int main()
{
    ios_base::sync_with_stdio(0);
    int a1,a2,b1,b2;
    cin >> a1 >> b1 >> a2 >> b2;
    queue<pair<int,pair<int,int> > > q;
    q.push(mp(0,mp(a1, b1)));
    while(!q.empty())
    {
        pair<int,pair<int,int> > temp = q.front();
        int counter = temp.first, x = temp.second.first, y = temp.second.second;
        q.pop();
        if(here[x*1LL*y].second.first == 0)
            here[x*1LL*y] = temp;
        if(x % 2 == 0 && !visited[mp(x / 2, y)])
            q.push(mp(counter + 1, mp(x / 2, y))),visited[mp(x / 2, y)] = true;
        if(y % 2 == 0 && !visited[mp(x, y / 2)])
            q.push(mp(counter + 1, mp(x, y / 2))),visited[mp(x, y / 2)] = true;
        if(x % 3 == 0 && !visited[mp(x, y * 2 / 3)])
            q.push(mp(counter + 1, mp(x * 2 / 3, y))),visited[mp(x * 2 / 3, y)] = true;
        if(y % 3 == 0 && !visited[mp(x, y * 2 / 3)])
            q.push(mp(counter + 1, mp(x, y * 2 / 3))),visited[mp(x, y * 2 / 3)] = true;
    }
    q.push(mp(0,mp(a2, b2)));
    int sol = INF_MAX;
    pair<int,int> sol1,sol2;
    visited.clear();
    while(!q.empty())
    {
        pair<int,pair<int,int> > temp = q.front();
        int counter = temp.first, x = temp.second.first, y = temp.second.second;
        q.pop();
        if(here[x*1LL*y].second.first != 0)
        {
            if(sol > here[x*1LL*y].first + counter)
                sol = here[x*1LL*y].first + counter,sol1 = here[x*1LL*y].second, sol2 = temp.second;
        }
        if(x % 2 == 0 && !visited[mp(x / 2, y)])
            q.push(mp(counter + 1, mp(x / 2, y))),visited[mp(x / 2, y)] = true;
        if(y % 2 == 0 && !visited[mp(x, y / 2)])
            q.push(mp(counter + 1, mp(x, y / 2))),visited[mp(x, y / 2)] = true;
        if(x % 3 == 0 && !visited[mp(x, y * 2 / 3)])
            q.push(mp(counter + 1, mp(x * 2 / 3, y))),visited[mp(x * 2 / 3, y)] = true;
        if(y % 3 == 0 && !visited[mp(x, y * 2 / 3)])
            q.push(mp(counter + 1, mp(x, y * 2 / 3))),visited[mp(x, y * 2 / 3)] = true;
    }
    if(sol == INF_MAX)
        cout << -1;
    else
    {
        cout << sol << endl;
        cout << sol1.first << " " << sol1.second << endl;
        cout << sol2.first << " " << sol2.second;
    }
    return 0;
}