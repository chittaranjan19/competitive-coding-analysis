#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	tint n,a,b,T;
	while (cin >> n >> a >> b >> T)
	{
		string orientation;
		cin >> orientation;
		vector<tint> right (n);
		vector<tint> left (n);
		right[0] = 1 + b*(orientation[0] == 'w');
		left[0] = 1 + b*(orientation[0] == 'w');
		forsn(i,1,n)
		{
			right[i] = 	right[i-1] 		+ 1 + a + b*(orientation[i]=='w');
			left[n-i] = left[(n-i+1)%n] + 1 + a + b*(orientation[n-i]=='w');
		}
		vector<tint> ansRight (n,0);
		vector<tint> ansLeft (n,0);
		//imprimirVector(right);
		//imprimirVector(left);
		if(right[0] > T)
			cout << 0 << endl;
		else
		{
			forn(i,n)
			{
				if (right[i] > T)
					break;
				else
				{
					tint time = T - right[i] - (i+1)*a - left[n-1] + left[0];
					ansRight[i] = i+1;
					if (time > 0)
					{
						ansRight[i]++;
						tint csup = n-1, cinf = 1;
						if (time >= left[1] - left[n-1] )
							ansRight[i] = n;
						else
						{
							while (csup - cinf > 1)
							{
								tint c = (cinf + csup)/2;
								if (time >= left[c] - left[n-1])
									csup = c;
								else
									cinf = c;
							}
							ansRight[i] += (n-1-csup);
						}
					}
				}	
			}
			forsn(i,1,n)
			{
				if (left[n-i] > T)
					break;
				else
				{
					tint time = T - left[n-i] - (i+1)*a - right[1] + right[0];
					ansLeft[n-i] = i+1;
					if (time > 0)
					{
						ansLeft[n-i]++;
						tint csup = n-1, cinf = 1;
						if (time >= right[n-1] - right[1] )
							ansLeft[n-i] = n;
						else
						{
							while (csup - cinf > 1)
							{
								tint c = (cinf + csup)/2;
								if (time >= right[c] - right[1])
									cinf = c;
								else
									csup = c;
							}
							ansLeft[n-i] += cinf;
						}
					}
				}	
			}
			//cout << " -- " << endl;
			//imprimirVector(ansRight);
			//imprimirVector(ansLeft);
			cout << max(*max_element(ansLeft.begin(),ansLeft.end()),*max_element(ansRight.begin(),ansRight.end())) << endl;
			//cout << "------------" << endl;
		}
		
	}
	return 0;
}



