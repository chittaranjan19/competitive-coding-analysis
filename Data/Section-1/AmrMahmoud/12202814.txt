#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

const int MAXN = 102;

struct matrix
{
  int arr[MAXN][MAXN];
  int n, m;

  matrix(int x, int y)
  {
    n = x, m = y;
  };

  matrix(int x, int y, int v)
  {
    n = x, m = y;
    for(int i=0;i<n;i++)
      for(int j=0;j<m;j++)
        arr[i][j] = v;
  };

  matrix operator * (const matrix &mat) const
  {
    matrix res(n, mat.m, 0);
    for(int i=0;i<n;i++)
      for(int j=0;j<mat.m;j++)
        for(int k=0;k<m;k++)
          res.arr[i][j] = (arr[i][k] * 1LL * mat.arr[k][j] + res.arr[i][j]) % mod;
    return res;
  }

  bool operator > (const matrix &mat) const
  {
    for(int i=0;i<n;i++)
      for(int j=0;j<m;j++)
      {
        if(arr[i][j] > mat.arr[i][j]) return true;
        if(arr[i][j] < mat.arr[i][j]) return false;
      }
    return true;
  }

  void print(int x, int y)
  {
    for(int i=0;i<x;i++)
    {
      for(int j=0;j<y;j++)
        printf("%d ", arr[i][j]);
      printf("\n");
    }
  }
};

matrix mat_pow(const matrix &base, int power)
{
  if(power == 1) return base;
  if(power & 1) return base * mat_pow(base, power - 1);
  matrix temp = mat_pow(base, power/2);
  return temp * temp;
}

int cnt[105];

int main()
{
  //freopen("immetric.in", "r", stdin);
  //freopen("immetric.out", "w", stdout);
  int n, k, x;
  scanf("%d %d", &n, &k);
  if(!k)
  {
    printf("0");
    return 0;
  }
  for(int i=0;i<n;i++)
  {
    scanf("%d", &x);
    cnt[x]++;
  }
  matrix m(101, 101, 0);
  for(int i=0;i<100;i++)
    m.arr[i][0] = cnt[i + 1];
  for(int i=0;i<99;i++)
    m.arr[i][i + 1] = 1;
  m.arr[100][100] = 1;
  m.arr[100][0] = 1;
  m = mat_pow(m, k + 1);
  printf("%d", m.arr[100][0]);
  return 0;
}