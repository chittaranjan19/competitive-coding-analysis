#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1)
#define EPS 1e-8
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int n;
char s[5005];
int st[5005][5005];
int DP[5005][5005][2];
bool v[5005][5005][2];

int solve(int ind, int last, bool tmp)
{
  if(ind == n) return 1;
  int &temp = DP[ind][last][tmp];
  if(v[ind][last][tmp]) return temp;
  v[ind][last][tmp] = true;
  temp = 0;
  if(tmp)
  {
    temp = solve(ind + 1, last, 1) + solve(ind, last, 0);
    if(temp >= mod)
      temp -= mod;
    return temp;
  }
  if(s[ind] == '0') return 0;
  if(st[ind][last] == 1)
  {
    if(2 * ind - last <= n)
      temp = solve(2 * ind - last, ind, 1);
  }
  else if(2 * ind - last + 1 <= n)
    temp = solve(2 * ind - last + 1, ind, 1);
  return temp;
}

int longest[5005][5005];

int main()
{
  scanf("%d", &n);
  scanf("%s", s);
  for(int i=n-1;i>=0;i--)
  {
    for(int j=n-1;j>i;j--)
    {
      if(s[i] == s[j])
      {
        longest[i][j] = 1;
        if(i != n - 1 && j != n - 1) longest[i][j] += longest[i + 1][j + 1];
      }
      //cout << i << " " << j << " " << longest[i][j] << "\n";
    }
  }
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<i;j++)
  {
    if(longest[j][i] < i - j)
    {
      if(s[i + longest[j][i]] > s[j + longest[j][i]])
        st[i][j] = 1;
      else st[i][j] = -1;
    }
   // cout << st[i][j] << " ";
  }
  //cout << "\n";
  }
  printf("%d", solve(1, 0, 1));
  return 0;
}
