#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e18;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;

struct res
{
    ll cnt;
    bool ok;
    bool need;
    ll last;
    res()
    {
        cnt = 0;
        ok = false;
        need = false;
        last = 0;
    }
    res(ll a, bool b, bool c, ll d)
    {
        cnt = a;
        ok = b;
        need = c;
        last = d;
    }
};

vector<vector<pair<ll, ll> > > g;
vector<ll> used;

pair<ll, res> dfs(ll u, ll t)
{
    ll cnt = 1;
    used[u] = 1;
    res r;
    for (auto v : g[u])
    if (v.second != t)
    {
        if (used[v.first] == 0)
        {
            pair<ll, res> p = dfs(v.first, v.second);
            cnt += p.first;
            res x = p.second;
            if (x.ok)
            {
                r = x;
                if (r.need)
                {
                    r.cnt++;
                    if (r.last == u)
                        r.need = false;
                }
            }
        }
        else if (used[v.first] == 1)
        {
            r.ok = true;
            r.need = true;
            r.last = v.first;
            r.cnt++;
        }
    }
    used[u] = 2;
    return {cnt, r};
}

ll bin_pow (ll a, ll n, ll mod)
{
    ll ans = 1;
    while (n) {
        if (n & 1)
            ans = (ans * a) % mod;
        a = (a * a) % mod;
        n >>= 1;
    }
    return ans;
}

int main()
{
    //freopen("point.in", "r", stdin);
    //freopen("point.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    ll n;
    cin >> n;
    g.resize(n);
    used.resize(n, 0);
    for (ll i = 0; i < n; i++)
    {
        ll x;
        cin >> x;
        x--;
        g[i].push_back({x, i});
        g[x].push_back({i, i});
    }
    ll ans = 1;
    for (ll i = 0; i < n; i++)
        if (used[i] == 0)
        {
            pair<ll, res> p = dfs(i, -1);
            ll cnt = p.first;
            ll f = bin_pow(2, cnt, MOD);
            res x = p.second;
            cnt -= x.cnt;
            ll f2 = bin_pow(2, cnt, MOD);
            ll curr = f2 * 2 % MOD;
            curr = (f - curr + MOD) % MOD;
            ans = (ans * curr) % MOD;
        }
    cout << ans;
    return 0;
}