//why are you stalking me?
#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)

const int MAXN = 55, INF = 0x01010101;

int N, M, K;
char S[MAXN], T[MAXN];
vector<int> sub[26];
bool scandp[MAXN][MAXN][26], tcandp[MAXN][MAXN][26], mem[MAXN][MAXN][26];	//can[i][j][letter]

bool getcandp (bool candp[MAXN][MAXN][26], char *str, int x, int y, int c) {
	//inc, exc
	bool &ref = candp[x][y][c];
	if (mem[x][y][c]) {
		return ref;
	}
	mem[x][y][c] = true;
	if (y - x == 1) {
		return ref = (str[x] == c);
	}
	for (int t : sub[c]) {
		int c1 = t / 26, c2 = t % 26;
		for (int i = x + 1; i < y; i++) {
			if (getcandp(candp, str, x, i, c1) && getcandp(candp, str, i, y, c2)) {
				return ref = true;
			}
		}
	}
	return ref = false;
}

void calcsub (char *str, int n, bool candp[MAXN][MAXN][26]) {
	fillchar(mem, 0);
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j <= n; j++) {
			for (int k = 0; k < 26; k++) {
				getcandp(candp, str, i, j, k);
			}
		}
	}
}

int dp[MAXN][MAXN];
bool mem2[MAXN][MAXN];

int getdp (int x, int y) {
	int &ref = dp[x][y];
	if (mem2[x][y]) {
		return ref;
	}
	mem2[x][y] = true;
	if (bool(x) ^ bool(y)) {
		return ref = INF;
	}
	for (int i = 0; i < x; i++) {
		for (int j = 0; j < y; j++) {
			bool com = false;
			for (int k = 0; k < 26; k++) {
				if (scandp[i][x][k] && tcandp[j][y][k]) {
					com = true;
					break;
				}
			}
			if (com) {
				int g = getdp(i, j) + 1;
				if (ref > g) {
					ref = g;
				}
			}
		}
	}
	return ref;
}

int main() {
	//why are you stalking me?
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	ios::sync_with_stdio(false);
	cin >> S >> T >> K;
	N = strlen(S);
	M = strlen(T);
	for (int i = 0; i < N; i++) {
		S[i] -= 'a';
	}
	for (int i = 0; i < M; i++) {
		T[i] -= 'a';
	}
	char buf[6];
	for (int i = 0; i < K; i++) {
		cin >> buf;
		sub[buf[0] - 'a'].push_back(26 * (buf[3] - 'a') + (buf[4] - 'a'));
	}
	calcsub(S, N, scandp);
	calcsub(T, M, tcandp);
	fillchar(dp, 1);
	dp[0][0] = 0;
	mem2[0][0] = true;
	int ans = getdp(N, M);
	cout << (ans == INF ? -1 : ans) << endl;
}