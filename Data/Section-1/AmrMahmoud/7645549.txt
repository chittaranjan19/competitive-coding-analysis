#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <bitset>
#include <utility>
#include <set>
#include <numeric>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-9
#define LL long long
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

using namespace std;

vector<int> primes;
vector<pair<int,int> > factors;
int x,y;
int DP[100005],q=0;

void get_primes(LL max){
    char *sieve;
    sieve = new char[max/8+1];
    memset(sieve, 0xFF, (max/8+1) * sizeof(char));
    for(LL x = 2; x <= max; x++)
        if(sieve[x/8] & (0x01 << (x % 8))){
            primes.push_back(x);
            for(LL j = 2*x; j <= max; j += x)
                sieve[j/8] &= ~(0x01 << (j % 8));
        }
    delete[] sieve;
}

int answer_query(int ind,int num)
{
    int counter = 0;
    if(DP[num] < q - y && num != 1) counter++;
    DP[num] = q;
    if(ind == factors.size()) return counter;
    for(int i=0;i<factors[ind].second + 1;i++)
    {
        counter+=answer_query(ind + 1, num);
        num*=factors[ind].first;
    }
    return counter;
}

int main()
{
    int t;
    cin >> t;
    get_primes(320);
    setdp(DP);
    while(t--)
    {
        q++;
        scanf("%d %d",&x,&y);
        factors.clear();
        for(int i=0;i<primes.size() && primes[i] * primes[i] <= x;i++)
        {
            int counter = 0;
            while(x % primes[i] == 0)
                counter++,x/=primes[i];
            if(counter) factors.pb(mp(primes[i],counter));
        }
        if(x != 1) factors.pb(mp(x,1));
        printf("%d\n",answer_query(0,1) + ((q == 1) ? 1 : 0));
    }
    return 0;
}