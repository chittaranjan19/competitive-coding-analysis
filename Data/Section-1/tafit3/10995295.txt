import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class ProblemC {
    BufferedReader rd;

    private ProblemC() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] a = intarr();
        int n = a[0];
        int m = a[1];
        char[][] c = new char[n][];
        for(int i=0;i<n;i++) {
            c[i] = rd.readLine().toCharArray();
        }
        int[] y = intarr();
        int[] z = intarr();
        y[0]--;
        y[1]--;
        z[0]--;
        z[1]--;
        int[][] t = new int[][] { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

        int dots = 0;
        for(int[] g: t) {
            int c0 = z[0] + g[0];
            int c1 = z[1] + g[1];
            if(c0 >= 0 && c0 < n && c1 >= 0 && c1 < m && c[c0][c1]=='.') {
                dots++;
            }
        }

        boolean oneAway = (Math.abs(y[0]-z[0]) == 1 && (y[1]==z[1])) || (Math.abs(y[1]-z[1]) == 1 && (y[0]==z[0]));
        boolean res;
        if(y[0]==z[0] && y[1] == z[1]) {
            res = dots > 0;
        } else if(c[z[0]][z[1]] == '.' && dots == 0) {
            res = false;
        } else if(c[z[0]][z[1]] == '.' && dots == 1) {
            res = oneAway && c[y[0]][y[1]]=='X';
        } else if(c[z[0]][z[1]] == 'X' && dots == 0) {
            res = oneAway;
        } else {
            Set<Pair> visited = new HashSet<>();
            Queue<int[]> toVisit = new ArrayDeque<>();
            toVisit.add(new int[] { y[0], y[1], 0 });
            visited.add(new Pair(y));
            res = false;
            while(!res && !toVisit.isEmpty()) {
                int[] u = toVisit.poll();
                if(u[0] == z[0] && u[1] == z[1]) {
                    res = true;
                }
                for(int[] g: t) {
                    int[] e = new int[] { u[0] + g[0], u[1] + g[1] };
                    if(e[0] >= 0 && e[0] < n && e[1] >= 0 && e[1] < m && (c[e[0]][e[1]]=='.' || (e[0]==z[0] && e[1]==z[1]))) {
                        Pair p = new Pair(e);
                        if(!visited.contains(p)) {
                            visited.add(p);
                            toVisit.add(e);
                        }
                    }
                }
            }
        }
        out(res?"YES":"NO");
    }

    class Pair {
        final int[] v;

        Pair(int[] x) {
            v = x;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o instanceof Pair) {
                return Arrays.equals(v, ((Pair) o).v);
            }
            return false;
        }

        public int hashCode() {
            return v != null ? Arrays.hashCode(v) : 0;
        }

        public String toString() {
            return Arrays.toString(v);
        }
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemC();
    }
}
