#include <bits/stdc++.h>

#define f       first
#define s       second
#define mp      make_pair
#define rank    something_which_is_supposed_to_be_rank
#define left    something_which_is_supposed_to_be_left
#define right   something_which_is_supposed_to_be_right

using namespace std;

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ld INF = 1e18 + 179, PI = 3.141592653589793238462643383279502884L, EPS = 1e-6;
const int N = 100000;

ld l = INF, r, x[N], y[N], xp, yp;
int n;

inline ld dist(int i, int j) {
    // cerr << "dist " << i << " " << j << "\n";
    return powl(powl(x[i] - x[j], 2) + powl(y[i] - y[j], 2), 0.5);
}

inline ld dist(int i) {
    // cerr << "dist0 " << i << "\n";
    return powl(powl(x[i], 2) + powl(y[i], 2), 0.5);
}

inline ld pyth(int i, ld d) {
    return powl(powl(dist(i), 2) - d * d, 0.5);
}

inline ld cross_product(int i, int j) {
    return x[i] * y[j] - x[j] * y[i];
}

int main() {
    cin.sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> xp >> yp;
    for (int i = 0; i < n; ++i) {
        cin >> x[i] >> y[i];
        x[i] -= xp, y[i] -= yp;
    }
    for (int i = 1; i <= n; ++i) {
        ld d = abs(cross_product(i - 1, i % n)) / dist(i - 1, i % n);
        if (abs(pyth(i - 1, d) + pyth(i % n, d) - dist(i - 1, i % n)) <= EPS) {
            // cerr << d << "\n";
            l = min(l, d);
        }
        l = min(l, min(dist(i - 1), dist(i % n)));
        r = max(r, max(dist(i - 1), dist(i % n)));
    }
    cout.precision(30);
    // cerr << l << " " << r << "\n";
    cout << fixed << PI * (r - l) * (r + l) << "\n";
    cerr << "Time elapsed: " << (ld) clock() / CLOCKS_PER_SEC << "\n";
    return 0;
}