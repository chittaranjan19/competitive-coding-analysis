#include <stdio.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <queue>
#include <functional>
#include <set>
using namespace std;
typedef unsigned long long ull;
typedef long long ll;
typedef unsigned int ui;

struct Pair {
	int index;
	int value;
	Pair(int index, int value) :index(index), value(value) {}
	bool operator<(const Pair &other) const {
		return value < other.value;
	}
	bool operator>(const Pair &other) const {
		return value > other.value;
	}
};

struct Tuple {
	int a;
	int b;
	int c;
	Tuple(int a, int b, int c) : a(a), b(b), c(c) {}
	bool operator<(const Tuple &other) const {
		return c < other.c;
	}
	bool operator>(const Tuple &other) const {
		return c > other.c;
	}
};

struct Wrap {
	int* index;
	Wrap(int* index) : index(index) {}
	bool operator<(const Wrap&other) const {
		return (*index) < (*other.index);
	}
	bool operator>(const Wrap&other) const {
		return (*index) > (*other.index);
	}
};

int in_i() {
	int result;
	scanf("%d", &result);
	return result;
}
ll in_l() {
	ll result;
	scanf("%I64d", &result);
	return result;
}
char in_c() {
	char result;
	scanf(" %c", &result);
	return result;
}
double in_d() {
	double result;
	scanf("%lf", &result);
	return result;
}

int n, m, k, t, u, v, l, r, x, c;
const ll MODULO = 1000000007;
char ch;
double d;
vector<int> words[500002];


set<int> s;

int main() {
	n = in_i();
	c = in_i();
	for (int i = 0; i < n; i++) {
		l = in_i();
		for (int j = 0; j < l; j++) {
			words[i].push_back(in_i());
		}
	}
	int total_rotations = 0;
	int rotation_limit = 2*c;
	bool is_end = false;
	bool is_sorted = false;
	for (int j = 0; !is_end || !is_sorted; j++) {
		is_end = true;
		is_sorted = true;
		int last = 0;
		int last_index = 0;
		int current;
		int last_max_if_rotated = 1;
		int rotate_with = -1;
		int first = -1;
		for (int i = 0; i < n; i++) {
			if (words[i].size() > j) {
				is_end = false;
				current = (words[i][j] + total_rotations - 1) % c + 1;
				if (rotate_with == -1) {
					rotate_with = c - current + 1;
				}
				else {
					if ((j == 0 || words[last_index][j - 1] == words[i][j - 1]) && current < last)
						is_sorted = false;
					last = (current + rotate_with - 1) % c + 1;
					if ((j == 0 || words[last_index][j - 1] == words[i][j - 1]) && last < last_max_if_rotated) {
						printf("-1");
						return 0;
					}
					last_max_if_rotated = last;
				}
				last_index = i;
				last = current;
			}
		}
		if (!is_sorted) {
			if (rotate_with > rotation_limit) {
				printf("-1");
				return 0;
			}
			total_rotations += rotate_with;
			rotation_limit = min(c - last_max_if_rotated, rotation_limit - rotate_with);
		}
	}
	printf("%d", total_rotations);
	return 0;
}