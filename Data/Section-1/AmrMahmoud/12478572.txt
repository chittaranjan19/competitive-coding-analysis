#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <cctype>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <sstream>
#include <cmath>
#include <limits>
#include <utility>
#include <iomanip>
#include <set>
#include <numeric>
#include <cassert>
#include <ctime>

#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define EPS 1e-8
#define LL long long
#define mod 175781251
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))
#define bits(a) __builtin_popcount(a)

using namespace std;

int arr[200005], cnt[1000005], sq;
pair<pair<int, int>, int> queries[200005];
LL res[200005];

bool sorter(pair<pair<int, int>, int> a, pair<pair<int, int>, int> b)
{
  if(a.f.f / sq == b.f.f / sq)
  {
    if(a.f.s == b.f.s) return a.s < b.s;
    return a.f.s < b.f.s;
  }
  return a.f.f / sq < b.f.f / sq;
}

inline LL add(int &x)
{
  return (2 * cnt[x]++ + 1) * 1LL * x;
}

inline LL del(int &x)
{
  return (1 - 2 * cnt[x]--) * 1LL * x;
}

int main()
{
  int n, t;
  scanf("%d %d", &n, &t);
  sq = (int)(sqrt(n) + EPS);
  for(int i=0;i<n;i++)
    scanf("%d", &arr[i]);
  for(int i=0;i<t;i++)
  {
    queries[i].s = i;
    scanf("%d %d", &queries[i].f.f, &queries[i].f.s);
    queries[i].f.f--;
    queries[i].f.s--;
  }
  sort(queries, queries + t, sorter);
  int L = 0, R = 0;
  LL curr = add(arr[0]);
  for(int i=0;i<t;i++)
  {
    while(L < queries[i].f.f)
      curr+=del(arr[L++]);
    while(L > queries[i].f.f)
      curr+=add(arr[--L]);
    while(R < queries[i].f.s)
      curr+=add(arr[++R]);
    while(R > queries[i].f.s)
      curr+=del(arr[R--]);
    res[queries[i].s] = curr;
  }
  for(int i=0;i<t;i++)
    printf("%I64d\n", res[i]);
  return 0;
}
