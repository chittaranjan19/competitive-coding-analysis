#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

string to_lowercase(string str) {
	iterate(c, str) {
		*c = tolower(*c);
	}
	return str;
}

map<string, int> dict;
map<int, string> rev_dict;

int max_id = 0;
int get_id(string str) {
	if (dict.count(str))
		return dict[str];
	rev_dict[max_id] = str;
	return (dict[str] = max_id++);
}

int get_max_id() {
	return max_id;
}

string& get_string(int id) {
	return rev_dict[id];
}

map<int, int> dict_scc;

int max_scc_id = 0;
int get_scc_id(int id) {
	if (dict_scc.count(id))
		return dict_scc[id];
	return (dict_scc[id] = max_scc_id++);
}

void set_scc_id(int i, int j) {
	dict_scc[i] = j;
}

int get_max_scc_id() {
	return max_scc_id;
}

void tarjan_scc(int u, vi &dfs_num, vi &dfs_low, vb &visited, vector<vi> &adj_list) {
	static int dfs_number_counter = 0;
	static vi s;
	dfs_low[u] = dfs_num[u] = dfs_number_counter++;
	s.pub(u);
	visited[u] = true;
	loop(j, adj_list[u].size()) {
		int v = adj_list[u][j];
		if (dfs_num[v] == -1)
			tarjan_scc(v, dfs_num, dfs_low, visited, adj_list);
		if (visited[v])
			dfs_low[u] = min(dfs_low[u], dfs_low[v]);
	}

	if (dfs_low[u] == dfs_num[u]) {
		int scc_id = -1;
		while (1) {
			int v = s.back();
			s.pop_back();
			if (scc_id == -1)
				scc_id = get_scc_id(u);
			else
				set_scc_id(v, scc_id);
			visited[v] = false;
			if (u == v)
				break;
		}
	}
}

void dfs(int u, vii &dp, vb &visited, vector<vi> &adj_list) {
	if (visited[u])
		return;
	visited[u] = true;
	iterate(v_p, adj_list[u]) {
		int v = *v_p;
		dfs(v, dp, visited, adj_list);
		dp[u] = min(dp[u], dp[v]);
	}
}

int main() {
    // freopen("467D.in", "r", stdin);
    
    int n;
    cin >> n;

    vs queries(n);
    iterate(query, queries) {
    	cin >> *query;
    	*query = to_lowercase(*query);
    	get_id(*query);
    }

    int m;
    cin >> m;

    vii edges;
    while (m--) {
    	string x, y;
    	cin >> x >> y;
    	x = to_lowercase(x);
    	y = to_lowercase(y);

    	int id_x = get_id(x), id_y = get_id(y);
    	edges.pub(mp(id_x, id_y));
    	// printf("%d %d\n", id_x, id_y);
    }

    int num_nodes = get_max_id()+10;
    vector<vi> adj_list(num_nodes);
    iterate(edge, edges) {
    	adj_list[edge->a].pub(edge->b);
    }

    vi dfs_low(num_nodes, -1), dfs_num(num_nodes, -1);
    vb visited(num_nodes, false);
    loop(id, num_nodes) {
    	if (dfs_num[id] == -1)
    		tarjan_scc(id, dfs_num, dfs_low, visited, adj_list);
    }

    vii dp(num_nodes);
    loop(id, num_nodes) {
    	string &str = get_string(id);
    	int c_r = 0;
    	iterate(c, str) {
    		if (*c == 'r')
    			++c_r;
    	}
    	dp[id] = mp(c_r, str.length());
    }


    int num_scc_id = get_max_scc_id()+10;
    vii dp_scc(num_scc_id, mp(INT_MAX, INT_MAX));

    vector<vi> adj_list_scc(num_scc_id);
    fflush(stdout);
    loop(id, num_nodes) {
    	int u = get_scc_id(id);
    	// cout << get_string(id) << " " << u << ":" << dp[id].a << " " << dp[id].b << endl;
    	dp_scc[u] = min(dp_scc[u], dp[id]);
    	iterate(neighbor_p, adj_list[id]) {
    		int &neighbor = *neighbor_p;
    		int v = get_scc_id(neighbor);
    		if (v == u)
    			continue;
    		adj_list_scc[u].pub(v);
    	}
    }

    loop(scc_id, num_scc_id) {
    	vi &neighbors = adj_list_scc[scc_id]; 
    	sort(all(neighbors));
    	neighbors.resize(unique(all(neighbors))-neighbors.begin());
    }

    visited.resize(num_scc_id);
    visited.assign(num_scc_id, false);
    loop(scc_id, num_scc_id) {
    	if (!visited[scc_id]) {
    		dfs(scc_id, dp_scc, visited, adj_list_scc);
    	}
    }

    pair<long long> minimum;
    iterate(query_p, queries) {
    	string &query = *query_p;
    	int id = get_id(query);
    	int scc_id = get_scc_id(id);
    	// printf("%d %d\n", dp_scc[scc_id].a, dp_scc[scc_id].b);
    	minimum.a += dp_scc[scc_id].a;
    	minimum.b += dp_scc[scc_id].b;
    }
    printf("%I64d %I64d\n", minimum.a, minimum.b);

    return 0;
}