#include <string>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <set>
#include <cstring>
#include <map>
#include <unordered_map>
#include <iostream>
#include <algorithm>
#include <vector>
#include <ctime>

using namespace std;
#define ll long long
#define db double
#define fs first
#define sc second
#define mp make_pair

vector<int> g[100010];
int n;
int clf[200000];

void dfs(int v = 1, int p = 1)
{
    bool leaf = 1;
    for (int i = 0; i < g[v].size(); i++)
    {
        if (g[v][i] != p)
        {
            dfs(g[v][i], v);
            leaf = 0;
            clf[v] += clf[g[v][i]];
        }
    }
    if (leaf)
        clf[v]++;
}

bool ok = 1;

void dfs1(int v = 1, int p = 1)
{
    int cnt = 0;
    for (int i = 0; i < g[v].size(); i++)
    {
        int u = g[v][i], cl = clf[u];
        if (u == p)
        {
            cl = clf[1] - clf[u];
            if (g[1].size() == 1)
                cl++;
        }
        else dfs1(u, v);
        bool go = 0;
        if (cl == 1 || (cl == 2 && g[u].size() == 3)) go = 1;
        if (!go)
            cnt++;
    }
    if (cnt > 2)
        ok = 0;
}

int main()
{
    //ios::sync_with_stdio(false);
    cin >> n;
    memset(clf, 0, sizeof(clf));
    for (int i = 1; i < n; i++)
    {
        int v, u;
        cin >> v >> u;
        g[v].push_back(u);
        g[u].push_back(v);
    }
    dfs();
    dfs1();
    if (ok)
        cout << "YES";
    else cout << "NO";
    return 0;
}