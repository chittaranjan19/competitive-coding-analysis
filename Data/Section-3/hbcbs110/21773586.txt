#include<iostream>
#include<algorithm>
#include<cstdio>
#include<map>
using namespace std;
struct SocketPC
{
    int val,x;
    bool operator < (const SocketPC b) const
    {
        if(val!=b.val) return val<b.val;
        else return x<b.x;
    }
}p[200005]={0},s[200005]={0};
long long cc=0,uu=0;
int ans1[200005]={0},ans2[200005]={0};
bool vis[200005]={0};
map <int,int> mp;
map <int,int> nd;
int bfnd(int x,int n)
{
    if(p[nd[x]].val==x)
    {
        n=nd[x];
        nd[x]++;
        if(p[nd[x]].val!=x) nd.erase(x);
        return n;
    }
}
int main()
{
    int n,m,i,adb,cpn;
    cin>>n>>m;
    for(i=1;i<=n;i++)
    {
        scanf("%d",&p[i].val);
        p[i].x=i;
        mp[p[i].val]++;
    }
    for(i=1;i<=m;i++)
    {
        scanf("%d",&s[i].val);
        s[i].x=i;
    }
    sort(p+1,p+n+1);
    sort(s+1,s+m+1);
    for(i=1;i<=n;i++)
    {
        if(nd.find(p[i].val)==nd.end()) nd[p[i].val]=i;
    }
    for(i=1;i<=m;i++)
    {
        adb=0;
        while(s[i].val)
        {
            if(mp.find(s[i].val)!=mp.end())
            {
                mp[s[i].val]=mp[s[i].val]-1;
                if(mp[s[i].val]==0) mp.erase(s[i].val);
                cpn=bfnd(s[i].val,n);
                vis[cpn]=1;
                ans1[s[i].x]=adb;
                ans2[p[cpn].x]=s[i].x;
                uu+=adb;
                cc++;
                break;
            }else{
                if(s[i].val<=1) break;
                s[i].val=(s[i].val+1)>>1;
                adb++;
            }
        }
    }
    printf("%I64d %I64d\n",cc,uu);
    for(i=1;i<=m;i++)
    {
        if(i-1) putchar(' ');
        printf("%d",ans1[i]);
    }
    putchar('\n');
    for(i=1;i<=n;i++)
    {
        if(i-1) putchar(' ');
        printf("%d",ans2[i]);
    }
    putchar('\n');
    return 0;
}
    
