#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <unordered_set>
#include <unordered_map>


#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;


void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int camino(vector<int> &d, int nodo)
{
	int ac = 0;
	while (nodo > 1)
	{
		ac += d[nodo];
		nodo /= 2;
	}
	return ac;
}

int main()
{
	int n;
	cin >> n;
	vector <int> d (pow(2,n+1));
	forsn(i,2,pow(2,n+1))
		cin >> d[i];
	vector <int> costo (pow(2,n));
	forn(i,pow(2,n))
		costo[i] = camino(d,pow(2,n)+i);
	int max = *max_element(costo.begin(),costo.end());
	int res = 0;
	forsn(i,2,pow(2,n+1))
	{
		while (max == *max_element(costo.begin(),costo.end()))
		{
			d[i]++;
			res++;
			forn(j,pow(2,n))
				costo[j] = camino(d,pow(2,n)+j);
		}
		d[i]--;
		res--;
		forn(j,pow(2,n))
			costo[j] = camino(d,pow(2,n)+j);
	}
	cout << res << endl;
	
		
	return 0;
}
