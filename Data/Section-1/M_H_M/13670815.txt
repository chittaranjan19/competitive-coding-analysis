#include <bits/stdc++.h>

#define SZ(x) ((int)x.size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 200 * 1000 + 1;

int n, m;
int p[N];
int h[N];
pii q[N];
int tmp[N];


vector <pii> pnt;

vector<int> seg[18];



void build(int d, int s, int e){
	if(e - s == 1){
		seg[d][s] = pnt[s].Y;
		return;
	}
	int mid = (s + e) / 2;
	build(d + 1, s, mid);
	build(d + 1, mid, e);
	merge(seg[d + 1].begin() + s, seg[d + 1].begin() + mid,
			seg[d + 1].begin() + mid, seg[d + 1].begin() + e, seg[d].begin() + s);
}

int getcnt(int d, int s, int e, int l, int r, int val){
	if(r <= s || e <= l) return 0;
	if(l <= s && e <= r)
		return lower_bound(seg[d].begin() + s, seg[d].begin() + e, val) - (seg[d].begin() + s);
	int mid = (s + e) / 2;
	return getcnt(d + 1, s, mid, l, r, val) + getcnt(d + 1, mid, e, l, r, val);
}


int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;

	for(int i = 0; i < n; ++i){
		cin >> p[i];
		h[p[i]] = i;
	}

	for(int i = 1; i <= n; ++i)
		for(int j = 2 * i; j <= n; j += i)
			pnt.PB(MP(min(h[i], h[j]), max(h[i], h[j])));

	sort(pnt.begin(), pnt.end());
	int sz = SZ(pnt);
	for(int i = 0; i < m; ++i){
		int x, y;
		cin >> x >> y;
		x --;
		q[i].X = lower_bound(pnt.begin(), pnt.end(), MP(x, -1)) - pnt.begin();
		q[i].Y = y;
		tmp[i] = y - x;
	}
	pnt.clear();
	for(int i = 0; i < 18; ++i) seg[i].resize(17 * N);
	build(0, 0, sz);
	for(int i = 0; i < m; ++i){
		
		cout << getcnt(0, 0, sz, q[i].X, sz, q[i].Y) + tmp[i] << "\n";
	}
	return 0;
}
