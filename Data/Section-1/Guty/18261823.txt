#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}



struct Contestant
{
	string surname;
	tint value;
	Contestant(string ss, tint vv)
	{
		surname = ss;
		value = vv;
	}
};

bool operator < (Contestant c1, Contestant c2)
{
	return make_tuple(c1.value, c1.surname) < make_tuple(c2.value,c2.surname);
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	tint n,m;
	while (cin >> n >> m)
	{
		vector<vector<Contestant> > region(m);
		forn(i,n)
		{
			string s;
			tint r,v;
			cin >> s >> r >> v;
			region[r-1].push_back(Contestant(s,v));
		}
		forn(i,m)
			sort(region[i].rbegin(),region[i].rend());
		forn(i,m)
		{
			//cout << i+1 << endl;
			//for (auto x : region[i])
			//	cout << "(" << x.surname << ", " << x.value << ")" << endl;
			//cout << "----" << endl;
			Contestant c1 = region[i][0], c2 = region[i][1];
			if (region[i].size() == 2)
				cout << c1.surname << " " << c2.surname << endl;
			else
			{
				Contestant c3 = region[i][2];
				if (c2.value == c3.value)
					cout << "?" << endl;
				else
					cout << c1.surname << " " << c2.surname << endl;
			}
		}
	}
	return 0;
}



