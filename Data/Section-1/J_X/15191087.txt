#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

const int MAXN = 2000 + 5;
const int dir[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
const char match1[] = "v>^<";
const char match2[] = "^<v>";

char maze[MAXN][MAXN];
int n, m, now, cnt;

bool ok(int x, int y)
{
    return x >= 0 && x < n && y >= 0 && y < m && maze[x][y] == '.';
}

bool dfs(int x, int y)
{
    int d = -1;
    for(int i = 0; i < 4; ++i)
    {
        int dx = x + dir[i][0], dy = y + dir[i][1];
        if(ok(dx, dy))
        {
            d = ~d ? 4 : i;
        }
    }
    if(~d && d < 4)
    {
        maze[x][y] = match1[d];
        int dx = x + dir[d][0], dy = y + dir[d][1];
        now += 2;
        maze[dx][dy] = match2[d];
        for(int i = 0; i < 4; ++i)
        {
            int ddx = x + dir[i][0], ddy = y + dir[i][1];
            if(ok(ddx, ddy) && !dfs(ddx, ddy)) return false;
            ddx = dx + dir[i][0], ddy = dy + dir[i][1];
            if(ok(ddx, ddy) && !dfs(ddx, ddy)) return false;
        }
    }
    return ~d;
}

bool solve()
{
    now = 0;
    for(int i = 0; i < n; ++i)
    {
        for(int j = 0; j < n; ++j)
        {
            if(maze[i][j] == '.' && !dfs(i, j)) return false;
        }
    }
    return cnt == now;
}

int main()
{
    while(~scanf("%d%d", &n, &m))
    {
        cnt = 0;
        for(int i = 0; i < n; ++i)
        {
            scanf("%s", maze[i]);
            for(int j = 0; j < m; ++j)
            {
                if(maze[i][j] == '.')
                {
                    ++cnt;
                }
            }
        }
        if(solve())
        {
            for(int i = 0; i < n; ++i)
            {
                puts(maze[i]);
            }
        }
        else
        {
            puts("Not unique");
        }
    }
    return 0;
}
