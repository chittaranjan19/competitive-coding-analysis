#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAX_n = 200000, MAX_m = 400000;
int par[MAX_n];
void init(int n)
{
    for(int i = 0; i < n; ++i)
        par[i] = i;
}
int find(int x)
{   return par[x] == x ? x : par[x] = find(par[x]); }
void unite(int u,int v)
{
    u = find(u),    v = find(v);
    if(u == v)  return;
    par[u] = v;
}
bool same(int u,int v)
{   return find(u) == find(v);  }


bool used[MAX_m];
int connect[MAX_n];
pair<int,int>   es[MAX_m];
bool solve(int n,int m,int s,int t,int ds,int dt)
{
    init(n);
    for(int i = 0; i < m; ++i)
    {
        if(es[i].first == s || es[i].second == s)   continue;
        if(es[i].first == t || es[i].second == t)   continue;
        if(same(es[i].first, es[i].second)) continue;
        used[i] = true;
        unite(es[i].first, es[i].second);
    }
    
    for(int i = 0; i < m; ++i)
    {
        if(same(es[i].first, es[i].second))         continue;
        if(es[i].first == s && es[i].second == t)   continue;
        
        if(es[i].first == s || es[i].second == s)
        {
            int v = es[i].first + es[i].second - s;
            connect[find(v)] |= 1;
        }
        if(es[i].first == t || es[i].second == t)
        {
            int v = es[i].first + es[i].second - t;
            connect[find(v)] |= 2;
        }
    }
    int cnt[4] = {0,0,0,0};
    for(int v = 0; v < n; ++v)
        ++cnt[connect[v]];
    
    if(cnt[1] >= ds || cnt[2] >= dt)  return false;
    
    ds -= cnt[1],dt -= cnt[2];
    for(int i = 0; i < m; ++i)
    {
        if(same(es[i].first, es[i].second))         continue;
        if(es[i].first == s && es[i].second == t)   continue;
        if(es[i].first == s || es[i].second == s)
        {
            int v = es[i].first + es[i].second - s;
            v = find(v);
            if(connect[v] == 1)
            {
                used[i] = true;
                unite(s, v);
            }
        }
        if(es[i].first == t || es[i].second == t)
        {
            int v = es[i].first + es[i].second - t;
            v = find(v);
            if(connect[v] == 2)
            {
                used[i] = true;
                unite(t, v);
            }
        }
    }
    
    if(cnt[3] == 0)
    {
        for(int i = 0; i < m; ++i)
            if(es[i].first == s && es[i].second == t)
                used[i] = true;
    }
    else
    {
        if(cnt[3] + 1 > ds + dt)    return false;
        
        for(int i = 0; i < m; ++i)
        {
            if(same(es[i].first, es[i].second))         continue;
            if(es[i].first == s && es[i].second == t)   continue;
            if(es[i].first == s || es[i].second == s)
            {
                int v = es[i].first + es[i].second - s;
                v = find(v);
                if(ds > 0)
                {
                    used[i] = true;
                    unite(s, v);
                    --ds;
                }
            }
            if(es[i].first == t || es[i].second == t)
            {
                int v = es[i].first + es[i].second - t;
                v = find(v);
                if(dt > 0)
                {
                    used[i] = true;
                    unite(t, v);
                    --dt;
                }
            }
        }
    }
    
    return true;
}

int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i = 0; i < m; ++i)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        if(u > v)   swap(u, v);
        es[i] = make_pair(u-1, v-1);
    }
    
    int s,t,ds,dt;
    scanf("%d%d%d%d",&s,&t,&ds,&dt);
    if(s > t)   swap(s, t), swap(ds, dt);
    if(solve(n, m, s-1, t-1, ds, dt))
    {
        puts("Yes");
        for(int i = 0; i < m; ++i)
            if(used[i])
                printf("%d %d\n",es[i].first + 1,es[i].second + 1);
    }
    else    puts("No");
    
}