#include <iostream>
#include <map>
#include <vector>

using namespace std;

struct Treap {
    int x,c;
    int m,pri;
    Treap *left, *right;
    Treap(int x, int c): x(x),c(c) {
        m = 1;
        pri = rand();
        left = right = NULL;
    }
};

inline int M(Treap* t) {
    return (t==NULL)?0:t->m;
}

void upd(Treap* t) {
    if(t==NULL) return;
    t->m = M(t->left) + 1 + M(t->right);
}

void rotRight(Treap *&p) {
    Treap* q=p->left;
    p->left = q->right;
    q->right = p;

    upd(p); upd(q);
    p = q;
}

void rotLeft(Treap *&p) {
    Treap* q=p->right;
    p->right = q->left;
    q->left = p;

    upd(p); upd(q);
    p = q;
}

void insert(Treap *&t, Treap *x) {
    if(t==NULL) {
        t=x;
        return;
    }

    if((x->x < t->x) || ((x->x == t->x) && (x->c < t->c))) {
        insert(t->left,x);
        if(t->left->pri > t->pri) {
            rotRight(t);
        } else upd(t);
    } else {
        insert(t->right,x);
        if(t->right->pri > t->pri) {
            rotLeft(t);
        } else upd(t);
    }
}

void erase(Treap *&t, int x, int c) {
    if(t==NULL) return;
    if((x < t->x) || ((x == t->x) && (c < t->c))) {
        erase(t->left,x,c);
        upd(t);
    } else if((x > t->x) || ((x == t->x) && (c > t->c))) {
        erase(t->right,x,c);
        upd(t);
    } else {
        if(t->left == NULL) {
            t = t->right;
        } else if(t->right == NULL) {
            t = t->left;
        } else {
            if(t->left->pri > t->right->pri) {
                rotRight(t);
                erase(t->left,x,c);
            } else {
                rotLeft(t);
                erase(t->right,x,c);
            }
            upd(t);
        }
    }
}

int query(Treap *t, int k) {
    if(t==NULL) return 0;
    if(t->x < k) return query(t->right,k);
    return M(t->right)+1+query(t->left,k);
}

int n,m;
int c[100000];
vector<int> h[100000];
Treap* tr[100000];
int mp[100000];
map<int,int> trmp[100000];

void merge(Treap *&p, int pn, Treap *&q, int qn) {
    if(q==NULL) return;
    merge(p,pn,q->left,qn);
    merge(p,pn,q->right,qn);

    auto it = trmp[mp[pn]].find(q->c);

    if(it == trmp[mp[pn]].end()) {
        q->left = q->right;
        q->m = 1;
        insert(p,q);
        trmp[mp[pn]][q->c] = q->x;
    } else {
        erase(p,it->second,q->c);
        it->second+= q->x;
        q->left = q->right = NULL;
        q->x = it->second;
        insert(p,q);
    }
}

void unio(int p, int q) {
    int pp(p);
    if(M(tr[p]) < M(tr[q])) swap(p,q);

    merge(tr[p],p,tr[q],q);
    tr[pp] = tr[p];
    mp[pp] = p;
    trmp[q].clear();
}

vector<pair<int,int> > q[100000];
int sol[100000];

bool eler[100000];

void dfs(int p) {
    eler[p] = 1;
    for(int q:h[p]) {
        if(eler[q]) continue;
        dfs(q);
        unio(p,q);
    }

    for(auto k:q[p]) {
        sol[k.second] = query(tr[p],k.first);
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i=0; i<n; i++) {
        cin >> c[i]; c[i]--;
        tr[i] = new Treap(1,c[i]);
        mp[i] = i;
        trmp[i][c[i]] = 1;
    }

    for(int i=0; i<n-1; i++) {
        int x,y; cin >> x >> y; x--; y--;
        h[x].push_back(y);
        h[y].push_back(x);
    }

    for(int i=0; i<m; i++) {
        int x,y; cin >> x >> y; x--;
        q[x].push_back({y,i});
    }

    dfs(0);
    for(int i=0; i<m; i++) cout << sol[i] << endl;

    return 0;
}
