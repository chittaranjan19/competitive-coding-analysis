import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.NavigableSet;
import java.util.TreeSet;

public class ProblemD {
    BufferedReader rd;
    int a;

    ProblemD() throws IOException {
        rd = new BufferedReader(new InputStreamReader(System.in));
        compute();
    }

    private void compute() throws IOException {
        int[] q = intarr();
        int n = q[0];
        int k = q[1];
        a = q[2];
        rd.readLine();
        int[] xs = intarr();
        NavigableSet<int[]> s = new TreeSet<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[0], b[0]);
            }
        });
        int[] start = new int[] { 0, n-1 };
        int all = cnt(start);
        s.add(start);
        int first = -1;
        for(int i=0;i<xs.length;i++) {
            int p = xs[i]-1;
            int[] f = s.floor(new int[] { p, p });
            s.remove(f);
            int before = cnt(f);
            int after;
            if(f[0] == p) {
                f[0]++;
                after = cnt(f);
                if(f[0] <= f[1]) {
                    s.add(f);
                }
            } else if(f[1] == p) {
                f[1]--;
                after = cnt(f);
                if(f[0] <= f[1]) {
                    s.add(f);
                }
            } else {
                int[] one = new int[] { f[0], p-1 };
                int[] two = new int[] { p+1, f[1] };
                s.add(one);
                s.add(two);
                after = cnt(one) + cnt(two);
            }
            all = all - before + after;
            if(all < k) {
                first = i+1;
                break;
            }
        }
        out(first);
    }

    private int cnt(int[] h) {
        int s = h[1]-h[0]+2;
        return s/(a+1);
    }

    private int[] intarr() throws IOException {
        return intarr(rd.readLine());
    }

    private int[] intarr(String s) {
        String[] q = split(s);
        int n = q.length;
        int[] a = new int[n];
        for(int i=0;i<n;i++) {
            a[i] = Integer.parseInt(q[i]);
        }
        return a;
    }

    public String[] split(String s) {
        if(s == null) {
            return new String[0];
        }
        int n = s.length();
        int start = -1;
        int end = 0;
        int sp = 0;
        boolean lastWhitespace = true;
        for(int i=0;i<n;i++) {
            char c = s.charAt(i);
            if(isWhitespace(c)) {
                lastWhitespace = true;
            } else {
                if(lastWhitespace) {
                    sp++;
                }
                if(start == -1) {
                    start = i;
                }
                end = i;
                lastWhitespace = false;
            }
        }
        if(start == -1) {
            return new String[0];
        }
        String[] res = new String[sp];
        int last = start;
        int x = 0;
        lastWhitespace = true;
        for(int i=start;i<=end;i++) {
            char c = s.charAt(i);
            boolean w = isWhitespace(c);
            if(w && !lastWhitespace) {
                res[x++] = s.substring(last,i);
            } else if(!w && lastWhitespace) {
                last = i;
            }
            lastWhitespace = w;
        }
        res[x] = s.substring(last,end+1);
        return res;
    }

    private boolean isWhitespace(char c) {
        return c==' ' || c=='\t';
    }

    private static void out(Object x) {
        System.out.println(x);
    }

    public static void main(String[] args) throws IOException {
        new ProblemD();
    }
}
