#include <bits/stdc++.h>

#define out_file freopen("olymp.in", "r", stdin); freopen("olymp.out", "w", stdout)
#define ls else
#define all(a) a.begin(),a.end()
#define rall(a) a.rbegin(),a.rend()
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define timer int timer=clock()
#define rtn return
#define maxint 2147483647
#define I "%d"
#define II "%d%d"
#define III "%d%d%d"
#define L "%lf"
#define sqr(x) (x)*(x)
#define mp make_pair
#define pb push_back
#define sd second
#define ft first
#define y0 sklfgnjkdnhfxfhn
#define y1 sklfgnjkdnhfxfh
#define y2 sklfgnjkdnhfxfhnv
#define y3 sklfgnjkdnhfxfhna
#define y5 sklfgnjkdnhfxfhns
#define y4 sklfgnjkdnhfxfhnd
#define y6 sklfgnjkdnhfxfhnf

using namespace std;

typedef pair <int,int> pii;
typedef vector < pii > vii;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef long double ld;
typedef long long ll;

vi way[500], fic[500];
bool vis[201];
bool was[201][201];
int pop;

void dfs(int now)
{
    vis[now] = 1;
    if(way[now].size()%2 == 1 && pop)
    {
        fic[now].pb(pop);
        fic[pop].pb(now);
        pop = 0;
    } ls
        pop = now;
    for(int i = 0; i < way[now].size(); i++)
        if(!vis[way[now][i]])
            dfs(way[now][i]);
}

void obhid(int prd, int now)
{
    cout << prd << ' ' << now << '\n';
    was[prd][now] = 1;
    was[now][prd] = 1;
    for(int i = 0; i < way[now].size(); i++)
        if(!was[now][way[now][i]])
        {
            obhid(now, way[now][i]);
            rtn;
        }
    for(int i = 0; i < fic[now].size(); i++)
        if(!was[now][fic[now][i]])
        {
            obhid(now, fic[now][i]);
            rtn;
        }
}

int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        for(int i = 0; i < 202; i++)
        {
            way[i].clear();
            fic[i].clear();
            vis[i] = 0;
            for(int j = 0; j < 202; j++)
                was[i][j] = 0;
        }
        int n, m;
        cin >> n >> m;
        for(int i = 0; i < m; i++)
        {
            int x, y;
            cin >> x >> y;
            way[x].pb(y);
            way[y].pb(x);
        }
        int ans = 0;
        for(int i = 1; i <= n; i++)
            ans += (way[i].size()%2 == 0);
        cout << ans << '\n';
        for(int i = 1; i <= n; i++)
            if(!vis[i])
            {
                pop = 0;
                dfs(i);
            }
        for(int i = 1; i <= n; i++)
            for(int j = 0; j < way[i].size(); j++)
                if(!was[i][way[i][j]])
                    obhid(i, way[i][j]);
    }
}
