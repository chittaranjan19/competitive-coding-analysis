#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e9;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;
const ll P = 239;

vector<ll> p, h;
void build(vector<ll> &a)
{
    ll n = a.size();
    p.resize(n + 1);
    p[0] = 1;
    for (ll i = 1; i <= n; i++)
        p[i] = (p[i - 1] * P) % MOD;
    h.resize(n + 1);
    h[0] = 0;
    for (ll i = 0; i < n; i++)
        h[i + 1] = (h[i] * P + a[i]) % MOD;
}

ll get(ll l, ll r)
{
    return (h[r] - h[l] * p[r - l] % MOD + MOD) % MOD;
}

int main()
{
    //freopen("point.in", "r", stdin);
    //freopen("point.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    ll n, m;
    cin >> n >> m;
    vector<ll> a(n), b(m);
    for (ll i = 0; i < n; i++)
        cin >> a[i];
    for (ll i = 0; i < m; i++)
        cin >> b[i];
    build(a);
    ll hh = 0;
    for (ll i = 0; i < m; i++)
        hh = (hh * P + b[i]) % MOD;
    vector<ll> pref(n + 1);
    ll add = 0;
    for (ll i = 0; i < m; i++)
        add = (add * P + 1) % MOD;
    ll cnt = 0;
    for (ll i = 0; i + m <= n; i++)
    {
        ll h1 = hh;
        ll h2 = get(i, i + m);
        if (a[i] >= b[0])
            h1 = (h1 + add * (a[i] - b[0])) % MOD;
        else
            h2 = (h2 + add * (b[0] - a[i])) % MOD;
        if (h1 == h2)
            cnt++;
    }
    cout << cnt << endl;
    return 0;
}
