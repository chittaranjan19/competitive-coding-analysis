#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Beacon
{
	tint position,power;
	Beacon(tint pos, tint powa)
	{
		position = pos;
		power = powa;
	}
};

bool operator < (Beacon b1, Beacon b2)
{
	return make_tuple(b1.position, b1.power) < make_tuple(b2.position, b2.power);
}

tint buscar (vector<Beacon> &b, tint arranque)
{
	tint n = b.size();
	if (arranque <= b[0].position)
		return -1;
	else
	{
		tint cinf = 0;
		tint csup = n-1;
		while(csup - cinf > 1)
		{
			tint c = (cinf + csup)/2;
			if (b[c].position < arranque)
				cinf = c;
			else
				csup = c;
		}
		return cinf;
	}
	
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint n;
	cin >> n;
	vector<Beacon> b (n,Beacon(0,0));
	forn(i,n)
	{
		tint aa,bb;
		cin >> aa >> bb;
		b[i] = Beacon(aa,bb);
	}
	sort(b.begin(),b.end());
	vector<tint> dp (n,0);
	dp[0] = 1;
	forsn(i,1,n)
	{
		Beacon actual = b[i];
		tint arranque = actual.position - actual.power;
		tint desde = buscar(b,arranque);
		if (desde >= 0)
			dp[i] = dp[buscar(b,arranque)] + 1;
		else
			dp[i] = 1;
	}
	cout << n - *max_element(dp.begin(),dp.end()) << endl;
	
	
	return 0;
}


