#include <iostream>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
#include <set>
#include <cstring>
#include <map>

using namespace std;

#define ll long long
#define sc second
#define fs first
#define mp make_pair

int c[5000][5000], f[5000][5000], cnt = 1;
vector<pair<int, int> > fct[300];
int main()
{
    //freopen("connect.in", "r", stdin);
    //freopen("connect.out", "w", stdout);
    int n, m, a[300];
    pair<int, int> v[300];
    cin >> n >> m;
    for (int i = 0; i < n; i++){
        cin >> a[i];
        int t = a[i];
        for (int j = 2; j*j <= t; j++)
        {
            while (t%j == 0){
                fct[i+1].push_back(mp(j,cnt++));
                t /= j;
            }
        }
        if (t != 1)
            fct[i+1].push_back(mp(t,cnt++));
    }
    for (int i = 0; i < m; i++){
        cin >> v[i].fs >> v[i].sc;
        if (v[i].fs % 2 == 0)
            swap(v[i].fs, v[i].sc);
    }
    ll ans = 0;
    memset(c, 0, sizeof(c));
    for (int i = 0; i < m; i++)
    {
        int a = v[i].fs, b = v[i].sc;
        vector<pair<int, int> > tmp = fct[b];
        for (int j = 0; j < fct[a].size(); j++)
        {
            pair<int, int> t = fct[a][j];
            for (int k = 0; k < fct[b].size(); k++)
            {
                if (t.fs == fct[b][k].fs)
                {
                    c[0][t.sc] = 1;
                    //c[t.sc][0] = 1;
                    c[t.sc][fct[b][k].sc] = 1;
                    //c[fct[b][k].sc][t.sc] = 1;
                    c[fct[b][k].sc][cnt] = 1;
                    //c[cnt][fct[b][k].sc] = 1;
                    //fct[b].erase(fct[b].begin() + k);
                    //break;
                }
            }
        }
    }
    memset(f, 0, sizeof(f));
    while (1)
    {
        vector<int> q(2000), from(2000, -1);
        int h = 0, t = 0;
        q[t++] = 0;
        from[0] = 0;
        for (int cur; h < t;)
        {
            cur = q[h++];
            for (int v = 0; v <= cnt; v++)
            {
                if (from[v] == -1 && c[cur][v] - f[cur][v] > 0){
                    q[t++] = v;
                    from[v] = cur;
                }
            }
        }
        if (from[cnt] == -1)
            break;
        int cl = 1e9;
        for (int cur = cnt; cur != 0;)
        {
            int prev = from[cur];
            cl = min(cl, c[prev][cur] - f[prev][cur]);
            cur = prev;
        }
        for (int cur = cnt; cur != 0;)
        {
            int prev = from[cur];
            f[prev][cur] += cl;
            f[cur][prev] -= cl;
            cur = prev;
        }
    }
    int anss = 0;
    for (int i = 0; i <= cnt; i++)
        anss += f[0][i];
    cout << anss;
    return 0;
}