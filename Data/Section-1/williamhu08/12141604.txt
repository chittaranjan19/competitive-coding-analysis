#include <bits/stdc++.h>

using namespace std;

#define fillchar(a, s) memset((a), (s), sizeof(a))
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rep(it, v) for (auto it = (v).begin(); it != (v).end(); it++)

typedef long long ll;
typedef pair<int, int> pii;
const int MAXN = 1e6 + 10;

void setmax (int &a, int b) {
	if (a < b) {
		a = b;
	}
}

int N, K;
char S[MAXN];
int P[MAXN];	//table = kmp table, P[i] = max prefix starting at i
int ans[MAXN];

void compute_pref() {
	//awesome
	int lt = 0, rt = 0;
	P[0] = N;
	for (int i = 1; i < N; i++) {
		if (i > rt) {
			lt = rt = i;
			while (rt < N && S[rt - lt] == S[rt]) {
				rt++;
			}
			P[i] = rt - lt;
			rt--;
		} else {
			int k = i - lt;
			if (P[k] < rt - i + 1) {
				P[i] = P[k];
			} else {
				lt = i;
				while (rt < N && S[rt - lt] == S[rt]) {
					rt++;
				}
				P[i] = rt - lt;
				rt--;
			}
		}
	}
}

int main() {
	if (fopen("input.txt", "r")) {
		freopen("input.txt", "r", stdin);
	}
	scanf("%d %d %s", &N, &K, S);
	//do the kmp. NO, kmp doesn't work here;
	compute_pref();
	for (int i = 1; i * K <= N; i++) {
		//check if ok
		bool ok = true;
		for (int j = i; j < i * K; j += i) {
			if (P[j] < i) {
				ok = false;
				break;
			}
		}
		if (!ok) {
			continue;
		}
		//otherwise just do that
		int ind = i * K;
		// printf("ok length %d ind %d naix %d\n", i, ind, P[ind]);
		//[ind - 1, ind + P[ind])
		ans[ind - 1]++;
		ans[min(N, ind + min(P[ind], i))]--;
		printf("%d %d\n", ind - 1, ind + P[ind]);
	}
	for (int i = 0; i < N; i++) {
		if (i) {
			ans[i] += ans[i - 1];
		}
		putchar(ans[i] ? '1' : '0');
	}
}