#include <iostream>
#include <climits>
#include <string>       // string s; cin >> s;
#include <cstring>      // memset(b, 0, sizeof(arr)); strcpy(a1, a2); strcat(a1, a2);
#include <cmath>
#include <cstdio>       // getchar(), gets()
#include <cstdlib>      // rand(), max(), min()
#include <ctime>        // rand(): srand(int(time(0)));
#include <algorithm>    // std::sort(a + 0, a + n); n - amount; pair
#include <iomanip>      // setw(4), setfill('.'), setprecision(2)
#include <vector>
#include <array>
#include <fstream>      // file IO (input-output)
#include <cctype>       // isupper()
#include <memory>       // shared_ptr<>, uniqu_ptr<>
#include <iterator>     // ostream_iterator<int, char> out_iter(cout, " ");
#include <set>
#include <map>
#include <list>
#include <queue>
#include <functional>   // function
#define SRT srand(int(time(0)))

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
ld pi = 3.14159265358979323846;
int ten[8] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
inline void eatline() { while (getchar() != '\n'); }

typedef map<int, int> Map;
typedef Map::iterator mIter;
typedef pair<int, int> Pair;
typedef set<int> Set;
typedef Set::iterator sIter;
typedef multimap<int, int> mMap;
typedef mMap::iterator mmIter;
typedef multiset<int> mSet;
typedef mSet::iterator msIter;
typedef list<int> List;
typedef List::iterator lIter;
typedef deque<int> Deque;
typedef Deque::iterator dIter;

const int S = 19;
int n, m, k;
int a[S], r[S][S];
bool b[S];
ll dp[1 << S][S], s = 0, t, *p;

int main()
{
    int ct, i, j, d, x, y;
    
    cin >> n >> m >> k;
    for (i = 0; i < n; ++i)
        cin >> a[i];
    for (i = 0; i < k; ++i)
        cin >> x >> y >> r[--x][--y];
    
    for (i = 0; i < n; ++i)
        dp[1 << i][i] = a[i];
    for (i = 0; i < (1<<n); ++i)
    {
        memset(b, 0, n);
        for (j = ct = 0, d = i; j < n; ++j, d >>= 1)
            if (d % 2)
                b[j] = 1, ++ct;
        
        if (ct == m)
            for (j = 0; j < n; ++j)
                s < dp[i][j] ? s = dp[i][j] : 0;
        
        for (x = 0; x < n; ++x)
            if (b[x])
                for (y = 0; y < n; ++y)
                    if (!b[y])
                    {
                        p = dp[i + (1<<y)] + y;
                        t = dp[i][x] + r[x][y] + a[y];
                        *p < t ? *p = t : 0;
                    }
    }
    
    cout << s << '\n';
    return 0;
}