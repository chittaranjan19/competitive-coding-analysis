#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const int maxn = 100 + 5;
const ll INF = 1LL << 59;

ll dp[2][maxn][maxn], d[2][maxn][maxn];
int a[maxn], p[maxn][maxn];

int main()
{
    int n, m, o;
    scanf("%d%d%d", &n, &m, &o);
    int now = 0, nxt = 1;
    for(int i = 1; i <= n; ++i) scanf("%d", a + i);
    for(int i = 1; i <= n; ++i)
    {
        for(int j = 1; j <= m; ++j) scanf("%d", &p[i][j]);
    }
    for(int i = 0; i <= o; ++i)
    {
        fill(dp[now][i], dp[now][i] + m + 1, INF);
        fill(d[now][i], d[now][i] + m + 1, INF);
    }
    if(a[1]) dp[now][1][a[1]] = 0;
    else for(int i = 1; i <= m; ++i) dp[now][1][i] = p[1][i];
    ll mn = INF;
    for(int i = 1; i <= m; ++i)
    {
        d[now][1][i] = mn;
        mn = min(mn, dp[now][1][i]);
    }
    mn = INF;
    for(int i = m; i > 0; --i)
    {
        d[now][1][i] = min(d[now][1][i], mn);
        mn = min(mn, dp[now][1][i]);
    }
    for(int i = 2; i <= n; ++i)
    {
        for(int j = 0; j <= o; ++j)
        {
            fill(dp[nxt][j], dp[nxt][j] + m + 1, INF);
            fill(d[nxt][j], d[nxt][j] + m + 1, INF);
        }
        if(a[i])
        {
            for(int j = 1; j <= o; ++j)
            {
                dp[nxt][j][a[i]] = min(dp[now][j][a[i]], d[now][j - 1][a[i]]);
            }
        }
        else
        {
            for(int j = 1; j <= o; ++j)
            {
                for(int k = 1; k <= m; ++k)
                {
                    dp[nxt][j][k] = min(dp[now][j][k], d[now][j - 1][k]) + p[i][k];
                }
            }
        }
        for(int j = 1; j <= o; ++j)
        {
            ll mn = INF;
            for(int k = 1; k <= m; ++k)
            {
                d[nxt][j][k] = mn;
                mn = min(mn, dp[nxt][j][k]);
            }
            mn = INF;
            for(int k = m; k > 0; --k)
            {
                d[nxt][j][k] = min(d[nxt][j][k], mn);
                mn = min(mn, dp[nxt][j][k]);
            }
        }
        swap(now, nxt);
    }
    ll ans = *min_element(dp[now][o], dp[now][o] + m + 1);
    if(ans == INF) ans = -1;
    printf("%I64d\n", ans);
    return 0;
}
