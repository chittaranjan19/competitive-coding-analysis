#define DEBUG

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <climits>
#include <ctime>
#include <cassert>
using namespace std;
// template

// abbreviations
#define vi vector <int>
#define vl vector <long long>
#define vb vector <bool>
#define vs vector <string>
#define ii pair <int, int>
#define a first
#define b second
#define vii vector <ii>
#define mii map <int, int>
#define que queue
#define pque priority_queue
#define stk stack
#define lsone(value) (value)&(-value)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define pu push
#define po pop
#define mp make_pair
#define loop(i, n) for(int i = 0; i < n; ++i)
#define loop1(i, n) for(int i = 1; i <= n; ++i)
#define reverse_iterate(a, b) for(__typeof(b.rend()) a = b.rbegin(); a != b.rend(); ++a)
#define iterate(a, b) for(__typeof(b.begin()) a = b.begin(); a != b.end(); ++a)
#define all(i) i.begin(), i.end()

typedef unsigned long long ull;
typedef long long ll;

const double PI = acos(-1);

#ifdef DEBUG
	#define debug(...) printf(__VA_ARGS__)
	#define GetTime() fprintf(stderr,"Running time: %.3lf second\n",((double)clock())/CLOCKS_PER_SEC)
#else
	#define debug(...) 
	#define GetTime() 
#endif

// end of template

int main() {
    // freopen("612C.in", "r", stdin);
    
    string str;
    getline(cin, str);

    if (str.length()%2) {
    	puts("Impossible");
    	return 0;
    }

    int n_changes = 0;
    stack<char> s;
    loop(idx, str.length()) {
    	char c = str[idx];
    	// check if it's an open bracket
    	bool is_open = false;
    	// printf("%c\n", c);
    	if ((c == '<') or (c == '(') or (c == '[') or (c == '{')) {
    		is_open = true;
    		s.pu(c);
    	}
    	if (!is_open) { // it means it's an close bracket
    		// printf("%d: %d\n", idx, (int) s.size());
    		if (s.empty()) {
    			puts("Impossible");
    			return 0;
    		}
    		switch (c) {
    			case '>': {
					if (s.top() != '<')
						n_changes++;
					s.pop();
					break;

    			}
    			case ')': {
					if (s.top() != '(')
						n_changes++;
					s.pop();
					break;
				}
				case ']': {
					if (s.top() != '[')
						n_changes++;
					s.pop();
					break;
				}
				case '}': {
					if (s.top() != '{')
						n_changes++;
					s.pop();
					break;
				}
    		}
    	}
    }
    if (s.size() > 0) {
    	puts("Impossible");
    	return 0;
    }
    printf("%d\n", n_changes);

    return 0;
}