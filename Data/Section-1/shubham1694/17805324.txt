#include <bits/stdc++.h>

using namespace std;

#define sd(x) scanf("%d", &x)
#define boost ios_base::sync_with_stdio(false);
#define mp make_pair
#define pb push_back
#define all(a) a.begin(), a.end()
#define f first
#define s second

typedef pair<int, int> pii;
typedef long long ll;

const int mod = 1000000007;
const int inf = 50000000;
const int maxn = 100010;

int n, arr[maxn], st[4][maxn*5];
int rmax[maxn], cmax[maxn], lmax[maxn], curlis[maxn];
char ans[maxn];
set<pii> mset[maxn];
set<pii> :: iterator it;

void updateS(int t, int s, int e, int q, int val, int node)
{
	if(s>e || s>q || q>e)
		return;
	if(s==e){
		st[t][node] = val;
		return;
	}
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	updateS(t, s, mid, q, val, lc);
	updateS(t, mid+1, e, q, val, rc);
	st[t][node] = max(st[t][lc], st[t][rc]);
}

int query(int t, int s, int e, int qs, int qe, int node)
{
	if(s>e || s>qe || qs>e)
		return 0;
	if(s>=qs && qe>=e)
		return st[t][node];
	int mid, lc, rc;
	mid = (s+e)>>1;
	lc = 2*node + 1;
	rc = lc + 1;
	return max(query(t, s, mid, qs, qe, lc), query(t, mid+1, e, qs, qe, rc));
}

int find_lis()
{
	int i, j;
	vector<int> lis;
	for(i=1; i<=n; i++){
		auto it = upper_bound(all(lis), arr[i]);
		if(it==lis.end()){
			if(!lis.empty()){
				if(lis.back()<arr[i])
					lis.pb(arr[i]);
			}
			else
				lis.pb(arr[i]);
		}
		else
			(*it) = arr[i];
	}
	return (int)lis.size();
}

int main()
{
	//freopen("i.txt", "r", stdin);
	//freopen("o.txt", "w", stdout);
	int i;
	scanf("%d", &n);
	for(i=1; i<=n; i++)
		scanf("%d", &arr[i]);
	int len_lis = find_lis();
	//cout << len_lis << "\n";
	for(i=1; i<=n; i++){
		lmax[i] = query(0, 1, maxn, 1, arr[i]-1, 0);
		updateS(0, 1, maxn, arr[i], lmax[i]+1, 0);
	}
	for(i=n; i>=1; i--){
		rmax[i] = query(1, 1, maxn, arr[i]+1, maxn, 0);
		updateS(1, 1, maxn, arr[i], rmax[i]+1, 0);
	}
	for(i=1; i<=n; i++){
		curlis[i] = lmax[i] + rmax[i] + 1;
		cmax[arr[i]] = max(cmax[arr[i]], curlis[i]);
		updateS(2, 1, maxn, arr[i], cmax[arr[i]], 0);
		mset[arr[i]].insert(mp(curlis[i], i));
	}
	for(i=1; i<maxn; i++)
		cmax[i] = 0;
	ans[n+1] = '\0';
	for(i=1; i<=n; i++){
		if(curlis[i]==len_lis){
			it = mset[arr[i]].find(mp(curlis[i], i));
			mset[arr[i]].erase(it);
			if(!mset[arr[i]].empty()){
				it = mset[arr[i]].end();
				--it;
				updateS(2, 1, maxn, arr[i], (*it).f, 0);
			}
			else
				updateS(2, 1, maxn, arr[i], 0, 0);
			//cout << i << " " << mset[arr[i]].size() << " " << query(2, 1, maxn, 1, arr[i], 0) << " " << query(3, 1, maxn, arr[i], maxn, 0) << "\n";
			if(query(2, 1, maxn, 1, arr[i], 0)==len_lis || query(3, 1, maxn, arr[i], maxn, 0)==len_lis)
				ans[i] = '2';
			else
				ans[i] = '3';
			cmax[arr[i]] = max(cmax[arr[i]], curlis[i]);
			updateS(3, 1, maxn, arr[i], cmax[arr[i]], 0);
		}
		else
			ans[i] = '1';
	}
	printf("%s\n", ans+1);
	return 0;
}
