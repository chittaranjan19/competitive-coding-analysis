#include <iostream>
#include <vector>
#include <string.h>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <math.h>

#define ll long long
#define pb push_back
#define mp make_pair
#define traverse(container, it) \
for(typeof(container.begin()) it = container.begin(); it!= container.end(); it++)
using namespace std;

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);

int gcd(int a, int b){ if(b==0) return a; return gcd(b,a%b); }
int lcm(int a, int b) {return a*(b/gcd(a,b));}
void setbool(bool a[], int n, bool x){for(int i=0;i<n;i++){a[i] = x;}}
void setint(int a[], int n, int x){for(int i=0;i<n;i++){a[i] = x;}}

vector<int> tree[100001];
int n, m, u, v;
int vis[100001] = {0}, a[100001];

int dfs(int source, int tillNow)
{
    vis[source] = 1;
    
    if(a[source] == 1)
    {
        tillNow ++;
        if(tillNow > m)
            return 0;
    }
    else
    {
        tillNow = 0;
    }
    
    if(tree[source].size() == 1 && source > 1)
    {
        if(tillNow <= m)
        {
            //cout<<source<<endl;
            return 1;
        }
        else
            return 0;
    }
    
    int count = 0;
    traverse(tree[source], it)
    {
        if(vis[*it] == 1)
        {
            continue;
        }
        
        count += dfs(*it, tillNow);
    }
    
    return count;
}

int main(int argc, const char * argv[])
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin>>n>>m;
    
    for(int i=1;i<=n;i++)
    {
        cin>>a[i];
    }
    
    n--;
    while(n--)
    {
        cin>>u>>v;
        tree[u].pb(v);
        tree[v].pb(u);
    }
    
    cout<<dfs(1, 0);
    
    return 0;
}
