#include <iostream>
#include <math.h>
#include <vector>
using namespace std;

int main()
{
	int n, m;
	cin >> n >> m;

	vector<int> *Task = new vector<int>[n];

	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		a--;
		b--;

		Task[a].push_back(b);
		Task[b].push_back(a);
	}

	int countNS = 0, count1 = 0, count2 = 0;

	bool first = true, addable = true;

	for (int i = 0; i < n; i++)
	{
		if (Task[i].size() > 0)
		{
			//dependency

			bool gr = (Task[i][0] > i);

			if (gr)
			{
				//only #1 - divII

				count1++;
				countNS = 0;

				if (count2 > 0)
				{
					cout << 0;
					delete[] Task;
					return 0;
				}
			}
			else
			{
				//only #2 - divI

				count2++;
				addable = false;
			}

			for (int j = 1; j < Task[i].size(); j++)
				if (Task[i][j] > i != gr)
				{
					cout << 0;
					delete[] Task;
					return 0;
				}
		}
		else if (addable) countNS++;
	}

	if (countNS && (count1 == 0 || count2 == 0)) cout << 0;
	else if (countNS == 0) cout << 1;
	else cout << 2;

	delete[] Task;

	return 0;
}